// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

export class Settings extends pulumi.CustomResource {
    /**
     * Get an existing Settings resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: SettingsState, opts?: pulumi.CustomResourceOptions): Settings {
        return new Settings(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'signalfx:automatedarchival/settings:Settings';

    /**
     * Returns true if the given object is an instance of Settings.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Settings {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Settings.__pulumiType;
    }

    /**
     * Timestamp of when the automated archival setting was created
     */
    declare public /*out*/ readonly created: pulumi.Output<number>;
    /**
     * ID of the creator of the automated archival setting
     */
    declare public /*out*/ readonly creator: pulumi.Output<string>;
    /**
     * Whether the automated archival is enabled for this organization or not
     */
    declare public readonly enabled: pulumi.Output<boolean>;
    /**
     * Grace period is an org level setting that applies to the newly created metrics. This allows customers to protect newly added metrics that users haven’t had the time to use in charts and detectors from being automatically archived The value here uses ISO 8061 duration format. Examples - 'P0D', 'P15D', 'P30D', 'P45D', 'P60D'
     */
    declare public readonly gracePeriod: pulumi.Output<string>;
    /**
     * Timestamp of when the automated archival setting was last updated
     */
    declare public /*out*/ readonly lastUpdated: pulumi.Output<number>;
    /**
     * ID of user who last updated the automated archival setting
     */
    declare public /*out*/ readonly lastUpdatedBy: pulumi.Output<string>;
    /**
     * This tracks if a metric was unused in the past N number of days (N one of 30, 45, or 60). We’ll archive a metric if it wasn’t used in the lookback period. The value here uses ISO 8061 duration format. Examples - 'P30D', 'P45D', 'P60D'
     */
    declare public readonly lookbackPeriod: pulumi.Output<string>;
    /**
     * Org limit for the number of rulesets that can be created
     */
    declare public readonly rulesetLimit: pulumi.Output<number | undefined>;
    /**
     * Version of the automated archival setting
     */
    declare public /*out*/ readonly version: pulumi.Output<string>;

    /**
     * Create a Settings resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: SettingsArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: SettingsArgs | SettingsState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as SettingsState | undefined;
            resourceInputs["created"] = state?.created;
            resourceInputs["creator"] = state?.creator;
            resourceInputs["enabled"] = state?.enabled;
            resourceInputs["gracePeriod"] = state?.gracePeriod;
            resourceInputs["lastUpdated"] = state?.lastUpdated;
            resourceInputs["lastUpdatedBy"] = state?.lastUpdatedBy;
            resourceInputs["lookbackPeriod"] = state?.lookbackPeriod;
            resourceInputs["rulesetLimit"] = state?.rulesetLimit;
            resourceInputs["version"] = state?.version;
        } else {
            const args = argsOrState as SettingsArgs | undefined;
            if (args?.enabled === undefined && !opts.urn) {
                throw new Error("Missing required property 'enabled'");
            }
            if (args?.gracePeriod === undefined && !opts.urn) {
                throw new Error("Missing required property 'gracePeriod'");
            }
            if (args?.lookbackPeriod === undefined && !opts.urn) {
                throw new Error("Missing required property 'lookbackPeriod'");
            }
            resourceInputs["enabled"] = args?.enabled;
            resourceInputs["gracePeriod"] = args?.gracePeriod;
            resourceInputs["lookbackPeriod"] = args?.lookbackPeriod;
            resourceInputs["rulesetLimit"] = args?.rulesetLimit;
            resourceInputs["created"] = undefined /*out*/;
            resourceInputs["creator"] = undefined /*out*/;
            resourceInputs["lastUpdated"] = undefined /*out*/;
            resourceInputs["lastUpdatedBy"] = undefined /*out*/;
            resourceInputs["version"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Settings.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Settings resources.
 */
export interface SettingsState {
    /**
     * Timestamp of when the automated archival setting was created
     */
    created?: pulumi.Input<number>;
    /**
     * ID of the creator of the automated archival setting
     */
    creator?: pulumi.Input<string>;
    /**
     * Whether the automated archival is enabled for this organization or not
     */
    enabled?: pulumi.Input<boolean>;
    /**
     * Grace period is an org level setting that applies to the newly created metrics. This allows customers to protect newly added metrics that users haven’t had the time to use in charts and detectors from being automatically archived The value here uses ISO 8061 duration format. Examples - 'P0D', 'P15D', 'P30D', 'P45D', 'P60D'
     */
    gracePeriod?: pulumi.Input<string>;
    /**
     * Timestamp of when the automated archival setting was last updated
     */
    lastUpdated?: pulumi.Input<number>;
    /**
     * ID of user who last updated the automated archival setting
     */
    lastUpdatedBy?: pulumi.Input<string>;
    /**
     * This tracks if a metric was unused in the past N number of days (N one of 30, 45, or 60). We’ll archive a metric if it wasn’t used in the lookback period. The value here uses ISO 8061 duration format. Examples - 'P30D', 'P45D', 'P60D'
     */
    lookbackPeriod?: pulumi.Input<string>;
    /**
     * Org limit for the number of rulesets that can be created
     */
    rulesetLimit?: pulumi.Input<number>;
    /**
     * Version of the automated archival setting
     */
    version?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Settings resource.
 */
export interface SettingsArgs {
    /**
     * Whether the automated archival is enabled for this organization or not
     */
    enabled: pulumi.Input<boolean>;
    /**
     * Grace period is an org level setting that applies to the newly created metrics. This allows customers to protect newly added metrics that users haven’t had the time to use in charts and detectors from being automatically archived The value here uses ISO 8061 duration format. Examples - 'P0D', 'P15D', 'P30D', 'P45D', 'P60D'
     */
    gracePeriod: pulumi.Input<string>;
    /**
     * This tracks if a metric was unused in the past N number of days (N one of 30, 45, or 60). We’ll archive a metric if it wasn’t used in the lookback period. The value here uses ISO 8061 duration format. Examples - 'P30D', 'P45D', 'P60D'
     */
    lookbackPeriod: pulumi.Input<string>;
    /**
     * Org limit for the number of rulesets that can be created
     */
    rulesetLimit?: pulumi.Input<number>;
}
