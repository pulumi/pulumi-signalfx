// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * Provides an Observability Cloud resource for managing metric rulesets.
 *
 * > **NOTE** When managing metric rulesets to drop data use a session token for an administrator to authenticate the Splunk Observability Cloud provider. See [Operations that require a session token for an administrator](https://dev.splunk.com/observability/docs/administration/authtokens#Operations-that-require-a-session-token-for-an-administrator). Otherwise you'll receive a 4xx error.
 *
 * ## Example
 */
export class MetricRuleset extends pulumi.CustomResource {
    /**
     * Get an existing MetricRuleset resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: MetricRulesetState, opts?: pulumi.CustomResourceOptions): MetricRuleset {
        return new MetricRuleset(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'signalfx:index/metricRuleset:MetricRuleset';

    /**
     * Returns true if the given object is an instance of MetricRuleset.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is MetricRuleset {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === MetricRuleset.__pulumiType;
    }

    /**
     * List of aggregation rules for the metric
     */
    public readonly aggregationRules!: pulumi.Output<outputs.MetricRulesetAggregationRule[] | undefined>;
    /**
     * Timestamp of when the metric ruleset was created
     */
    public /*out*/ readonly created!: pulumi.Output<string>;
    /**
     * ID of the creator of the metric ruleset
     */
    public /*out*/ readonly creator!: pulumi.Output<string>;
    /**
     * Timestamp of when the metric ruleset was last updated
     */
    public /*out*/ readonly lastUpdated!: pulumi.Output<string>;
    /**
     * ID of user who last updated the metric ruleset
     */
    public /*out*/ readonly lastUpdatedBy!: pulumi.Output<string>;
    /**
     * Name of user who last updated this metric ruleset
     */
    public /*out*/ readonly lastUpdatedByName!: pulumi.Output<string>;
    /**
     * Name of the input metric
     */
    public readonly metricName!: pulumi.Output<string>;
    /**
     * Routing Rule object
     */
    public readonly routingRules!: pulumi.Output<outputs.MetricRulesetRoutingRule[]>;
    /**
     * Version of the ruleset
     */
    public /*out*/ readonly version!: pulumi.Output<string>;

    /**
     * Create a MetricRuleset resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: MetricRulesetArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: MetricRulesetArgs | MetricRulesetState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as MetricRulesetState | undefined;
            resourceInputs["aggregationRules"] = state ? state.aggregationRules : undefined;
            resourceInputs["created"] = state ? state.created : undefined;
            resourceInputs["creator"] = state ? state.creator : undefined;
            resourceInputs["lastUpdated"] = state ? state.lastUpdated : undefined;
            resourceInputs["lastUpdatedBy"] = state ? state.lastUpdatedBy : undefined;
            resourceInputs["lastUpdatedByName"] = state ? state.lastUpdatedByName : undefined;
            resourceInputs["metricName"] = state ? state.metricName : undefined;
            resourceInputs["routingRules"] = state ? state.routingRules : undefined;
            resourceInputs["version"] = state ? state.version : undefined;
        } else {
            const args = argsOrState as MetricRulesetArgs | undefined;
            if ((!args || args.metricName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'metricName'");
            }
            if ((!args || args.routingRules === undefined) && !opts.urn) {
                throw new Error("Missing required property 'routingRules'");
            }
            resourceInputs["aggregationRules"] = args ? args.aggregationRules : undefined;
            resourceInputs["metricName"] = args ? args.metricName : undefined;
            resourceInputs["routingRules"] = args ? args.routingRules : undefined;
            resourceInputs["created"] = undefined /*out*/;
            resourceInputs["creator"] = undefined /*out*/;
            resourceInputs["lastUpdated"] = undefined /*out*/;
            resourceInputs["lastUpdatedBy"] = undefined /*out*/;
            resourceInputs["lastUpdatedByName"] = undefined /*out*/;
            resourceInputs["version"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(MetricRuleset.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering MetricRuleset resources.
 */
export interface MetricRulesetState {
    /**
     * List of aggregation rules for the metric
     */
    aggregationRules?: pulumi.Input<pulumi.Input<inputs.MetricRulesetAggregationRule>[]>;
    /**
     * Timestamp of when the metric ruleset was created
     */
    created?: pulumi.Input<string>;
    /**
     * ID of the creator of the metric ruleset
     */
    creator?: pulumi.Input<string>;
    /**
     * Timestamp of when the metric ruleset was last updated
     */
    lastUpdated?: pulumi.Input<string>;
    /**
     * ID of user who last updated the metric ruleset
     */
    lastUpdatedBy?: pulumi.Input<string>;
    /**
     * Name of user who last updated this metric ruleset
     */
    lastUpdatedByName?: pulumi.Input<string>;
    /**
     * Name of the input metric
     */
    metricName?: pulumi.Input<string>;
    /**
     * Routing Rule object
     */
    routingRules?: pulumi.Input<pulumi.Input<inputs.MetricRulesetRoutingRule>[]>;
    /**
     * Version of the ruleset
     */
    version?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a MetricRuleset resource.
 */
export interface MetricRulesetArgs {
    /**
     * List of aggregation rules for the metric
     */
    aggregationRules?: pulumi.Input<pulumi.Input<inputs.MetricRulesetAggregationRule>[]>;
    /**
     * Name of the input metric
     */
    metricName: pulumi.Input<string>;
    /**
     * Routing Rule object
     */
    routingRules: pulumi.Input<pulumi.Input<inputs.MetricRulesetRoutingRule>[]>;
}
