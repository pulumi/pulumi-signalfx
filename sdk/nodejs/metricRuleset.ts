// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * Provides an Observability Cloud resource for managing metric rulesets.
 *
 * > **NOTE** When managing metric rulesets to drop data use a session token for an administrator to authenticate the Splunk Observability Cloud provider. See [Operations that require a session token for an administrator](https://dev.splunk.com/observability/docs/administration/authtokens#Operations-that-require-a-session-token-for-an-administrator). Otherwise you'll receive a 4xx error.
 *
 * ## Example
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as signalfx from "@pulumi/signalfx";
 *
 * const cpuUtilizationMetricRuleset = new signalfx.MetricRuleset("cpu_utilization_metric_ruleset", {
 *     metricName: "cpu.utilization",
 *     description: "Routing ruleset for cpu.utilization",
 *     aggregationRules: [{
 *         name: "cpu.utilization by service rule",
 *         description: "Aggregates cpu.utilization data by service",
 *         enabled: true,
 *         matchers: [{
 *             type: "dimension",
 *             filters: [{
 *                 property: "realm",
 *                 propertyValues: ["us-east-1"],
 *                 not: false,
 *             }],
 *         }],
 *         aggregators: [{
 *             type: "rollup",
 *             dimensions: ["service"],
 *             dropDimensions: false,
 *             outputName: "cpu.utilization.by.service.agg",
 *         }],
 *     }],
 *     exceptionRules: [{
 *         name: "Exception rule us-east-2",
 *         description: "Routes us-east-2 data to real-time",
 *         enabled: true,
 *         matchers: [{
 *             type: "dimension",
 *             filters: [{
 *                 property: "realm",
 *                 propertyValues: ["us-east-2"],
 *                 not: false,
 *             }],
 *         }],
 *     }],
 *     routingRules: [{
 *         destination: "Archived",
 *     }],
 * });
 * ```
 */
export class MetricRuleset extends pulumi.CustomResource {
    /**
     * Get an existing MetricRuleset resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: MetricRulesetState, opts?: pulumi.CustomResourceOptions): MetricRuleset {
        return new MetricRuleset(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'signalfx:index/metricRuleset:MetricRuleset';

    /**
     * Returns true if the given object is an instance of MetricRuleset.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is MetricRuleset {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === MetricRuleset.__pulumiType;
    }

    /**
     * List of aggregation rules for the metric
     */
    declare public readonly aggregationRules: pulumi.Output<outputs.MetricRulesetAggregationRule[] | undefined>;
    /**
     * Timestamp of when the metric ruleset was created
     */
    declare public /*out*/ readonly created: pulumi.Output<string>;
    /**
     * ID of the creator of the metric ruleset
     */
    declare public /*out*/ readonly creator: pulumi.Output<string>;
    /**
     * Information about the metric ruleset
     */
    declare public readonly description: pulumi.Output<string | undefined>;
    /**
     * List of exception rules for the metric
     */
    declare public readonly exceptionRules: pulumi.Output<outputs.MetricRulesetExceptionRule[] | undefined>;
    /**
     * Timestamp of when the metric ruleset was last updated
     */
    declare public /*out*/ readonly lastUpdated: pulumi.Output<string>;
    /**
     * ID of user who last updated the metric ruleset
     */
    declare public /*out*/ readonly lastUpdatedBy: pulumi.Output<string>;
    /**
     * Name of user who last updated this metric ruleset
     */
    declare public /*out*/ readonly lastUpdatedByName: pulumi.Output<string>;
    /**
     * Name of the input metric
     */
    declare public readonly metricName: pulumi.Output<string>;
    /**
     * Routing Rule object
     */
    declare public readonly routingRules: pulumi.Output<outputs.MetricRulesetRoutingRule[]>;
    /**
     * Version of the ruleset
     */
    declare public /*out*/ readonly version: pulumi.Output<string>;

    /**
     * Create a MetricRuleset resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: MetricRulesetArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: MetricRulesetArgs | MetricRulesetState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as MetricRulesetState | undefined;
            resourceInputs["aggregationRules"] = state?.aggregationRules;
            resourceInputs["created"] = state?.created;
            resourceInputs["creator"] = state?.creator;
            resourceInputs["description"] = state?.description;
            resourceInputs["exceptionRules"] = state?.exceptionRules;
            resourceInputs["lastUpdated"] = state?.lastUpdated;
            resourceInputs["lastUpdatedBy"] = state?.lastUpdatedBy;
            resourceInputs["lastUpdatedByName"] = state?.lastUpdatedByName;
            resourceInputs["metricName"] = state?.metricName;
            resourceInputs["routingRules"] = state?.routingRules;
            resourceInputs["version"] = state?.version;
        } else {
            const args = argsOrState as MetricRulesetArgs | undefined;
            if (args?.metricName === undefined && !opts.urn) {
                throw new Error("Missing required property 'metricName'");
            }
            if (args?.routingRules === undefined && !opts.urn) {
                throw new Error("Missing required property 'routingRules'");
            }
            resourceInputs["aggregationRules"] = args?.aggregationRules;
            resourceInputs["description"] = args?.description;
            resourceInputs["exceptionRules"] = args?.exceptionRules;
            resourceInputs["metricName"] = args?.metricName;
            resourceInputs["routingRules"] = args?.routingRules;
            resourceInputs["created"] = undefined /*out*/;
            resourceInputs["creator"] = undefined /*out*/;
            resourceInputs["lastUpdated"] = undefined /*out*/;
            resourceInputs["lastUpdatedBy"] = undefined /*out*/;
            resourceInputs["lastUpdatedByName"] = undefined /*out*/;
            resourceInputs["version"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(MetricRuleset.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering MetricRuleset resources.
 */
export interface MetricRulesetState {
    /**
     * List of aggregation rules for the metric
     */
    aggregationRules?: pulumi.Input<pulumi.Input<inputs.MetricRulesetAggregationRule>[]>;
    /**
     * Timestamp of when the metric ruleset was created
     */
    created?: pulumi.Input<string>;
    /**
     * ID of the creator of the metric ruleset
     */
    creator?: pulumi.Input<string>;
    /**
     * Information about the metric ruleset
     */
    description?: pulumi.Input<string>;
    /**
     * List of exception rules for the metric
     */
    exceptionRules?: pulumi.Input<pulumi.Input<inputs.MetricRulesetExceptionRule>[]>;
    /**
     * Timestamp of when the metric ruleset was last updated
     */
    lastUpdated?: pulumi.Input<string>;
    /**
     * ID of user who last updated the metric ruleset
     */
    lastUpdatedBy?: pulumi.Input<string>;
    /**
     * Name of user who last updated this metric ruleset
     */
    lastUpdatedByName?: pulumi.Input<string>;
    /**
     * Name of the input metric
     */
    metricName?: pulumi.Input<string>;
    /**
     * Routing Rule object
     */
    routingRules?: pulumi.Input<pulumi.Input<inputs.MetricRulesetRoutingRule>[]>;
    /**
     * Version of the ruleset
     */
    version?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a MetricRuleset resource.
 */
export interface MetricRulesetArgs {
    /**
     * List of aggregation rules for the metric
     */
    aggregationRules?: pulumi.Input<pulumi.Input<inputs.MetricRulesetAggregationRule>[]>;
    /**
     * Information about the metric ruleset
     */
    description?: pulumi.Input<string>;
    /**
     * List of exception rules for the metric
     */
    exceptionRules?: pulumi.Input<pulumi.Input<inputs.MetricRulesetExceptionRule>[]>;
    /**
     * Name of the input metric
     */
    metricName: pulumi.Input<string>;
    /**
     * Routing Rule object
     */
    routingRules: pulumi.Input<pulumi.Input<inputs.MetricRulesetRoutingRule>[]>;
}
