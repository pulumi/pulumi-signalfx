// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * Splunk Observability Cloud GCP Integration.
 *
 * > **NOTE** When managing integrations, use a session token of an administrator to authenticate the Splunk Observability Cloud provider. See [Operations that require a session token for an administrator](https://dev.splunk.com/observability/docs/administration/authtokens#Operations-that-require-a-session-token-for-an-administrator). Otherwise you'll receive a 4xx error.
 */
export class Integration extends pulumi.CustomResource {
    /**
     * Get an existing Integration resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: IntegrationState, opts?: pulumi.CustomResourceOptions): Integration {
        return new Integration(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'signalfx:gcp/integration:Integration';

    /**
     * Returns true if the given object is an instance of Integration.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Integration {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Integration.__pulumiType;
    }

    /**
     * Authentication method to use in this integration. If empty, Splunk Observability backend defaults to SERVICE_ACCOUNT_KEY
     */
    declare public readonly authMethod: pulumi.Output<string | undefined>;
    /**
     * List of additional GCP service domain names that Splunk Observability Cloud will monitor. See [Custom Metric Type Domains documentation](https://dev.splunk.com/observability/docs/integrations/gcp_integration_overview/#Custom-metric-type-domains)
     */
    declare public readonly customMetricTypeDomains: pulumi.Output<string[] | undefined>;
    /**
     * Whether the integration is enabled.
     */
    declare public readonly enabled: pulumi.Output<boolean>;
    /**
     * If enabled, Splunk Observability Cloud will sync also Google Cloud Monitoring data. If disabled, Splunk Observability Cloud will import only metadata. Defaults to true.
     */
    declare public readonly importGcpMetrics: pulumi.Output<boolean | undefined>;
    /**
     * [Compute Metadata Include List](https://dev.splunk.com/observability/docs/integrations/gcp_integration_overview/).
     */
    declare public readonly includeLists: pulumi.Output<string[] | undefined>;
    /**
     * Name of the integration.
     */
    declare public readonly name: pulumi.Output<string>;
    /**
     * Name of the org token to be used for data ingestion. If not specified then default access token is used.
     */
    declare public readonly namedToken: pulumi.Output<string | undefined>;
    /**
     * GCP integration poll rate (in seconds). Value between `60` and `600`. Default: `300`.
     */
    declare public readonly pollRate: pulumi.Output<number | undefined>;
    /**
     * GCP projects to add.
     */
    declare public readonly projectServiceKeys: pulumi.Output<outputs.gcp.IntegrationProjectServiceKey[] | undefined>;
    /**
     * GCP WIF configs
     */
    declare public readonly projectWifConfigs: pulumi.Output<outputs.gcp.IntegrationProjectWifConfig[] | undefined>;
    /**
     * GCP service metrics to import. Can be an empty list, or not included, to import 'All services'. See [Google Cloud Platform services](https://docs.splunk.com/Observability/gdi/get-data-in/integrations.html#google-cloud-platform-services) for a list of valid values.
     */
    declare public readonly services: pulumi.Output<string[] | undefined>;
    /**
     * When this value is set to true Observability Cloud will force usage of a quota from the project where metrics are stored. For this to work the service account provided for the project needs to be provided with serviceusage.services.use permission or Service Usage Consumer role in this project. When set to false default quota settings are used.
     */
    declare public readonly useMetricSourceProjectForQuota: pulumi.Output<boolean | undefined>;
    /**
     * The Splunk Observability GCP identity to include in GCP WIF provider definition.
     */
    declare public readonly wifSplunkIdentity: pulumi.Output<{[key: string]: string}>;

    /**
     * Create a Integration resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: IntegrationArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: IntegrationArgs | IntegrationState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as IntegrationState | undefined;
            resourceInputs["authMethod"] = state?.authMethod;
            resourceInputs["customMetricTypeDomains"] = state?.customMetricTypeDomains;
            resourceInputs["enabled"] = state?.enabled;
            resourceInputs["importGcpMetrics"] = state?.importGcpMetrics;
            resourceInputs["includeLists"] = state?.includeLists;
            resourceInputs["name"] = state?.name;
            resourceInputs["namedToken"] = state?.namedToken;
            resourceInputs["pollRate"] = state?.pollRate;
            resourceInputs["projectServiceKeys"] = state?.projectServiceKeys;
            resourceInputs["projectWifConfigs"] = state?.projectWifConfigs;
            resourceInputs["services"] = state?.services;
            resourceInputs["useMetricSourceProjectForQuota"] = state?.useMetricSourceProjectForQuota;
            resourceInputs["wifSplunkIdentity"] = state?.wifSplunkIdentity;
        } else {
            const args = argsOrState as IntegrationArgs | undefined;
            if (args?.enabled === undefined && !opts.urn) {
                throw new Error("Missing required property 'enabled'");
            }
            resourceInputs["authMethod"] = args?.authMethod;
            resourceInputs["customMetricTypeDomains"] = args?.customMetricTypeDomains;
            resourceInputs["enabled"] = args?.enabled;
            resourceInputs["importGcpMetrics"] = args?.importGcpMetrics;
            resourceInputs["includeLists"] = args?.includeLists;
            resourceInputs["name"] = args?.name;
            resourceInputs["namedToken"] = args?.namedToken;
            resourceInputs["pollRate"] = args?.pollRate;
            resourceInputs["projectServiceKeys"] = args?.projectServiceKeys ? pulumi.secret(args.projectServiceKeys) : undefined;
            resourceInputs["projectWifConfigs"] = args?.projectWifConfigs ? pulumi.secret(args.projectWifConfigs) : undefined;
            resourceInputs["services"] = args?.services;
            resourceInputs["useMetricSourceProjectForQuota"] = args?.useMetricSourceProjectForQuota;
            resourceInputs["wifSplunkIdentity"] = args?.wifSplunkIdentity;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["projectServiceKeys", "projectWifConfigs"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(Integration.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Integration resources.
 */
export interface IntegrationState {
    /**
     * Authentication method to use in this integration. If empty, Splunk Observability backend defaults to SERVICE_ACCOUNT_KEY
     */
    authMethod?: pulumi.Input<string>;
    /**
     * List of additional GCP service domain names that Splunk Observability Cloud will monitor. See [Custom Metric Type Domains documentation](https://dev.splunk.com/observability/docs/integrations/gcp_integration_overview/#Custom-metric-type-domains)
     */
    customMetricTypeDomains?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Whether the integration is enabled.
     */
    enabled?: pulumi.Input<boolean>;
    /**
     * If enabled, Splunk Observability Cloud will sync also Google Cloud Monitoring data. If disabled, Splunk Observability Cloud will import only metadata. Defaults to true.
     */
    importGcpMetrics?: pulumi.Input<boolean>;
    /**
     * [Compute Metadata Include List](https://dev.splunk.com/observability/docs/integrations/gcp_integration_overview/).
     */
    includeLists?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Name of the integration.
     */
    name?: pulumi.Input<string>;
    /**
     * Name of the org token to be used for data ingestion. If not specified then default access token is used.
     */
    namedToken?: pulumi.Input<string>;
    /**
     * GCP integration poll rate (in seconds). Value between `60` and `600`. Default: `300`.
     */
    pollRate?: pulumi.Input<number>;
    /**
     * GCP projects to add.
     */
    projectServiceKeys?: pulumi.Input<pulumi.Input<inputs.gcp.IntegrationProjectServiceKey>[]>;
    /**
     * GCP WIF configs
     */
    projectWifConfigs?: pulumi.Input<pulumi.Input<inputs.gcp.IntegrationProjectWifConfig>[]>;
    /**
     * GCP service metrics to import. Can be an empty list, or not included, to import 'All services'. See [Google Cloud Platform services](https://docs.splunk.com/Observability/gdi/get-data-in/integrations.html#google-cloud-platform-services) for a list of valid values.
     */
    services?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * When this value is set to true Observability Cloud will force usage of a quota from the project where metrics are stored. For this to work the service account provided for the project needs to be provided with serviceusage.services.use permission or Service Usage Consumer role in this project. When set to false default quota settings are used.
     */
    useMetricSourceProjectForQuota?: pulumi.Input<boolean>;
    /**
     * The Splunk Observability GCP identity to include in GCP WIF provider definition.
     */
    wifSplunkIdentity?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
}

/**
 * The set of arguments for constructing a Integration resource.
 */
export interface IntegrationArgs {
    /**
     * Authentication method to use in this integration. If empty, Splunk Observability backend defaults to SERVICE_ACCOUNT_KEY
     */
    authMethod?: pulumi.Input<string>;
    /**
     * List of additional GCP service domain names that Splunk Observability Cloud will monitor. See [Custom Metric Type Domains documentation](https://dev.splunk.com/observability/docs/integrations/gcp_integration_overview/#Custom-metric-type-domains)
     */
    customMetricTypeDomains?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Whether the integration is enabled.
     */
    enabled: pulumi.Input<boolean>;
    /**
     * If enabled, Splunk Observability Cloud will sync also Google Cloud Monitoring data. If disabled, Splunk Observability Cloud will import only metadata. Defaults to true.
     */
    importGcpMetrics?: pulumi.Input<boolean>;
    /**
     * [Compute Metadata Include List](https://dev.splunk.com/observability/docs/integrations/gcp_integration_overview/).
     */
    includeLists?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Name of the integration.
     */
    name?: pulumi.Input<string>;
    /**
     * Name of the org token to be used for data ingestion. If not specified then default access token is used.
     */
    namedToken?: pulumi.Input<string>;
    /**
     * GCP integration poll rate (in seconds). Value between `60` and `600`. Default: `300`.
     */
    pollRate?: pulumi.Input<number>;
    /**
     * GCP projects to add.
     */
    projectServiceKeys?: pulumi.Input<pulumi.Input<inputs.gcp.IntegrationProjectServiceKey>[]>;
    /**
     * GCP WIF configs
     */
    projectWifConfigs?: pulumi.Input<pulumi.Input<inputs.gcp.IntegrationProjectWifConfig>[]>;
    /**
     * GCP service metrics to import. Can be an empty list, or not included, to import 'All services'. See [Google Cloud Platform services](https://docs.splunk.com/Observability/gdi/get-data-in/integrations.html#google-cloud-platform-services) for a list of valid values.
     */
    services?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * When this value is set to true Observability Cloud will force usage of a quota from the project where metrics are stored. For this to work the service account provided for the project needs to be provided with serviceusage.services.use permission or Service Usage Consumer role in this project. When set to false default quota settings are used.
     */
    useMetricSourceProjectForQuota?: pulumi.Input<boolean>;
    /**
     * The Splunk Observability GCP identity to include in GCP WIF provider definition.
     */
    wifSplunkIdentity?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
}
