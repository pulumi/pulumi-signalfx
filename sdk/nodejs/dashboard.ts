// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class Dashboard extends pulumi.CustomResource {
    /**
     * Get an existing Dashboard resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: DashboardState, opts?: pulumi.CustomResourceOptions): Dashboard {
        return new Dashboard(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'signalfx:index/dashboard:Dashboard';

    /**
     * Returns true if the given object is an instance of Dashboard.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Dashboard {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Dashboard.__pulumiType;
    }

    /**
     * Team IDs that have write access to this dashboard group. Remember to use an admin's token if using this feature and to include that admin's team (or user id in `authorizedWriterTeams`). **Note:** Deprecated use `permissions` instead.
     *
     * @deprecated Please use permissions_* fields now
     */
    declare public readonly authorizedWriterTeams: pulumi.Output<string[] | undefined>;
    /**
     * User IDs that have write access to this dashboard group. Remember to use an admin's token if using this feature and to include that admin's user id (or team id in `authorizedWriterTeams`). **Note:** Deprecated use `permissions` instead.
     *
     * @deprecated Please use permissions fields now
     */
    declare public readonly authorizedWriterUsers: pulumi.Output<string[] | undefined>;
    /**
     * Chart ID and layout information for the charts in the dashboard.
     */
    declare public readonly charts: pulumi.Output<outputs.DashboardChart[] | undefined>;
    /**
     * Specifies the chart data display resolution for charts in this dashboard. Value can be one of `"default"`, `"low"`, `"high"`, or `"highest"`.
     */
    declare public readonly chartsResolution: pulumi.Output<string | undefined>;
    /**
     * Column layout. Charts listed will be placed in a single column with the same width and height.
     */
    declare public readonly columns: pulumi.Output<outputs.DashboardColumn[] | undefined>;
    /**
     * The ID of the dashboard group that contains the dashboard.
     */
    declare public readonly dashboardGroup: pulumi.Output<string>;
    /**
     * Description of the dashboard.
     */
    declare public readonly description: pulumi.Output<string | undefined>;
    declare public readonly discoveryOptionsQuery: pulumi.Output<string | undefined>;
    declare public readonly discoveryOptionsSelectors: pulumi.Output<string[] | undefined>;
    /**
     * Seconds since epoch. Used for visualization.
     */
    declare public readonly endTime: pulumi.Output<number | undefined>;
    /**
     * Specify a list of event overlays to include in the dashboard. Note: These overlays correspond to the *suggested* event overlays specified in the web UI, and they're not automatically applied as active overlays. To set default active event overlays, use the `selectedEventOverlay` property instead.
     */
    declare public readonly eventOverlays: pulumi.Output<outputs.DashboardEventOverlay[] | undefined>;
    /**
     * Filter to apply to the charts when displaying the dashboard.
     */
    declare public readonly filters: pulumi.Output<outputs.DashboardFilter[] | undefined>;
    /**
     * Grid dashboard layout. Charts listed will be placed in a grid by row with the same width and height. If a chart cannot fit in a row, it will be placed automatically in the next row.
     */
    declare public readonly grids: pulumi.Output<outputs.DashboardGrid[] | undefined>;
    /**
     * Name of the dashboard.
     */
    declare public readonly name: pulumi.Output<string>;
    /**
     * [Permissions](https://docs.splunk.com/Observability/infrastructure/terms-concepts/permissions.html) Controls who can view and/or edit your dashboard. **Note:** This feature is not present in all accounts. Please contact support if you are unsure.
     */
    declare public readonly permissions: pulumi.Output<outputs.DashboardPermissions>;
    /**
     * Defines event overlays which are enabled by **default**. Any overlay specified here should have an accompanying entry in `eventOverlay`, which are similar to the properties here.
     */
    declare public readonly selectedEventOverlays: pulumi.Output<outputs.DashboardSelectedEventOverlay[] | undefined>;
    /**
     * Seconds since epoch. Used for visualization.
     */
    declare public readonly startTime: pulumi.Output<number | undefined>;
    /**
     * Tags of the dashboard.
     */
    declare public readonly tags: pulumi.Output<string[] | undefined>;
    /**
     * The time range prior to now to visualize. Splunk Observability Cloud time syntax (e.g. `"-5m"`, `"-1h"`).
     */
    declare public readonly timeRange: pulumi.Output<string | undefined>;
    /**
     * The URL of the dashboard.
     */
    declare public /*out*/ readonly url: pulumi.Output<string>;
    /**
     * Dashboard variable to apply to each chart in the dashboard.
     */
    declare public readonly variables: pulumi.Output<outputs.DashboardVariable[] | undefined>;

    /**
     * Create a Dashboard resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: DashboardArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: DashboardArgs | DashboardState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as DashboardState | undefined;
            resourceInputs["authorizedWriterTeams"] = state?.authorizedWriterTeams;
            resourceInputs["authorizedWriterUsers"] = state?.authorizedWriterUsers;
            resourceInputs["charts"] = state?.charts;
            resourceInputs["chartsResolution"] = state?.chartsResolution;
            resourceInputs["columns"] = state?.columns;
            resourceInputs["dashboardGroup"] = state?.dashboardGroup;
            resourceInputs["description"] = state?.description;
            resourceInputs["discoveryOptionsQuery"] = state?.discoveryOptionsQuery;
            resourceInputs["discoveryOptionsSelectors"] = state?.discoveryOptionsSelectors;
            resourceInputs["endTime"] = state?.endTime;
            resourceInputs["eventOverlays"] = state?.eventOverlays;
            resourceInputs["filters"] = state?.filters;
            resourceInputs["grids"] = state?.grids;
            resourceInputs["name"] = state?.name;
            resourceInputs["permissions"] = state?.permissions;
            resourceInputs["selectedEventOverlays"] = state?.selectedEventOverlays;
            resourceInputs["startTime"] = state?.startTime;
            resourceInputs["tags"] = state?.tags;
            resourceInputs["timeRange"] = state?.timeRange;
            resourceInputs["url"] = state?.url;
            resourceInputs["variables"] = state?.variables;
        } else {
            const args = argsOrState as DashboardArgs | undefined;
            if (args?.dashboardGroup === undefined && !opts.urn) {
                throw new Error("Missing required property 'dashboardGroup'");
            }
            resourceInputs["authorizedWriterTeams"] = args?.authorizedWriterTeams;
            resourceInputs["authorizedWriterUsers"] = args?.authorizedWriterUsers;
            resourceInputs["charts"] = args?.charts;
            resourceInputs["chartsResolution"] = args?.chartsResolution;
            resourceInputs["columns"] = args?.columns;
            resourceInputs["dashboardGroup"] = args?.dashboardGroup;
            resourceInputs["description"] = args?.description;
            resourceInputs["discoveryOptionsQuery"] = args?.discoveryOptionsQuery;
            resourceInputs["discoveryOptionsSelectors"] = args?.discoveryOptionsSelectors;
            resourceInputs["endTime"] = args?.endTime;
            resourceInputs["eventOverlays"] = args?.eventOverlays;
            resourceInputs["filters"] = args?.filters;
            resourceInputs["grids"] = args?.grids;
            resourceInputs["name"] = args?.name;
            resourceInputs["permissions"] = args?.permissions;
            resourceInputs["selectedEventOverlays"] = args?.selectedEventOverlays;
            resourceInputs["startTime"] = args?.startTime;
            resourceInputs["tags"] = args?.tags;
            resourceInputs["timeRange"] = args?.timeRange;
            resourceInputs["variables"] = args?.variables;
            resourceInputs["url"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Dashboard.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Dashboard resources.
 */
export interface DashboardState {
    /**
     * Team IDs that have write access to this dashboard group. Remember to use an admin's token if using this feature and to include that admin's team (or user id in `authorizedWriterTeams`). **Note:** Deprecated use `permissions` instead.
     *
     * @deprecated Please use permissions_* fields now
     */
    authorizedWriterTeams?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * User IDs that have write access to this dashboard group. Remember to use an admin's token if using this feature and to include that admin's user id (or team id in `authorizedWriterTeams`). **Note:** Deprecated use `permissions` instead.
     *
     * @deprecated Please use permissions fields now
     */
    authorizedWriterUsers?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Chart ID and layout information for the charts in the dashboard.
     */
    charts?: pulumi.Input<pulumi.Input<inputs.DashboardChart>[]>;
    /**
     * Specifies the chart data display resolution for charts in this dashboard. Value can be one of `"default"`, `"low"`, `"high"`, or `"highest"`.
     */
    chartsResolution?: pulumi.Input<string>;
    /**
     * Column layout. Charts listed will be placed in a single column with the same width and height.
     */
    columns?: pulumi.Input<pulumi.Input<inputs.DashboardColumn>[]>;
    /**
     * The ID of the dashboard group that contains the dashboard.
     */
    dashboardGroup?: pulumi.Input<string>;
    /**
     * Description of the dashboard.
     */
    description?: pulumi.Input<string>;
    discoveryOptionsQuery?: pulumi.Input<string>;
    discoveryOptionsSelectors?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Seconds since epoch. Used for visualization.
     */
    endTime?: pulumi.Input<number>;
    /**
     * Specify a list of event overlays to include in the dashboard. Note: These overlays correspond to the *suggested* event overlays specified in the web UI, and they're not automatically applied as active overlays. To set default active event overlays, use the `selectedEventOverlay` property instead.
     */
    eventOverlays?: pulumi.Input<pulumi.Input<inputs.DashboardEventOverlay>[]>;
    /**
     * Filter to apply to the charts when displaying the dashboard.
     */
    filters?: pulumi.Input<pulumi.Input<inputs.DashboardFilter>[]>;
    /**
     * Grid dashboard layout. Charts listed will be placed in a grid by row with the same width and height. If a chart cannot fit in a row, it will be placed automatically in the next row.
     */
    grids?: pulumi.Input<pulumi.Input<inputs.DashboardGrid>[]>;
    /**
     * Name of the dashboard.
     */
    name?: pulumi.Input<string>;
    /**
     * [Permissions](https://docs.splunk.com/Observability/infrastructure/terms-concepts/permissions.html) Controls who can view and/or edit your dashboard. **Note:** This feature is not present in all accounts. Please contact support if you are unsure.
     */
    permissions?: pulumi.Input<inputs.DashboardPermissions>;
    /**
     * Defines event overlays which are enabled by **default**. Any overlay specified here should have an accompanying entry in `eventOverlay`, which are similar to the properties here.
     */
    selectedEventOverlays?: pulumi.Input<pulumi.Input<inputs.DashboardSelectedEventOverlay>[]>;
    /**
     * Seconds since epoch. Used for visualization.
     */
    startTime?: pulumi.Input<number>;
    /**
     * Tags of the dashboard.
     */
    tags?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The time range prior to now to visualize. Splunk Observability Cloud time syntax (e.g. `"-5m"`, `"-1h"`).
     */
    timeRange?: pulumi.Input<string>;
    /**
     * The URL of the dashboard.
     */
    url?: pulumi.Input<string>;
    /**
     * Dashboard variable to apply to each chart in the dashboard.
     */
    variables?: pulumi.Input<pulumi.Input<inputs.DashboardVariable>[]>;
}

/**
 * The set of arguments for constructing a Dashboard resource.
 */
export interface DashboardArgs {
    /**
     * Team IDs that have write access to this dashboard group. Remember to use an admin's token if using this feature and to include that admin's team (or user id in `authorizedWriterTeams`). **Note:** Deprecated use `permissions` instead.
     *
     * @deprecated Please use permissions_* fields now
     */
    authorizedWriterTeams?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * User IDs that have write access to this dashboard group. Remember to use an admin's token if using this feature and to include that admin's user id (or team id in `authorizedWriterTeams`). **Note:** Deprecated use `permissions` instead.
     *
     * @deprecated Please use permissions fields now
     */
    authorizedWriterUsers?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Chart ID and layout information for the charts in the dashboard.
     */
    charts?: pulumi.Input<pulumi.Input<inputs.DashboardChart>[]>;
    /**
     * Specifies the chart data display resolution for charts in this dashboard. Value can be one of `"default"`, `"low"`, `"high"`, or `"highest"`.
     */
    chartsResolution?: pulumi.Input<string>;
    /**
     * Column layout. Charts listed will be placed in a single column with the same width and height.
     */
    columns?: pulumi.Input<pulumi.Input<inputs.DashboardColumn>[]>;
    /**
     * The ID of the dashboard group that contains the dashboard.
     */
    dashboardGroup: pulumi.Input<string>;
    /**
     * Description of the dashboard.
     */
    description?: pulumi.Input<string>;
    discoveryOptionsQuery?: pulumi.Input<string>;
    discoveryOptionsSelectors?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Seconds since epoch. Used for visualization.
     */
    endTime?: pulumi.Input<number>;
    /**
     * Specify a list of event overlays to include in the dashboard. Note: These overlays correspond to the *suggested* event overlays specified in the web UI, and they're not automatically applied as active overlays. To set default active event overlays, use the `selectedEventOverlay` property instead.
     */
    eventOverlays?: pulumi.Input<pulumi.Input<inputs.DashboardEventOverlay>[]>;
    /**
     * Filter to apply to the charts when displaying the dashboard.
     */
    filters?: pulumi.Input<pulumi.Input<inputs.DashboardFilter>[]>;
    /**
     * Grid dashboard layout. Charts listed will be placed in a grid by row with the same width and height. If a chart cannot fit in a row, it will be placed automatically in the next row.
     */
    grids?: pulumi.Input<pulumi.Input<inputs.DashboardGrid>[]>;
    /**
     * Name of the dashboard.
     */
    name?: pulumi.Input<string>;
    /**
     * [Permissions](https://docs.splunk.com/Observability/infrastructure/terms-concepts/permissions.html) Controls who can view and/or edit your dashboard. **Note:** This feature is not present in all accounts. Please contact support if you are unsure.
     */
    permissions?: pulumi.Input<inputs.DashboardPermissions>;
    /**
     * Defines event overlays which are enabled by **default**. Any overlay specified here should have an accompanying entry in `eventOverlay`, which are similar to the properties here.
     */
    selectedEventOverlays?: pulumi.Input<pulumi.Input<inputs.DashboardSelectedEventOverlay>[]>;
    /**
     * Seconds since epoch. Used for visualization.
     */
    startTime?: pulumi.Input<number>;
    /**
     * Tags of the dashboard.
     */
    tags?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The time range prior to now to visualize. Splunk Observability Cloud time syntax (e.g. `"-5m"`, `"-1h"`).
     */
    timeRange?: pulumi.Input<string>;
    /**
     * Dashboard variable to apply to each chart in the dashboard.
     */
    variables?: pulumi.Input<pulumi.Input<inputs.DashboardVariable>[]>;
}
