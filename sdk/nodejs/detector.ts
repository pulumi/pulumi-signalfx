// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * Provides a Splunk Observability Cloud detector resource. This can be used to create and manage detectors.
 *
 * If you're interested in using Splunk Observability Cloud detector features such as Historical Anomaly, Resource Running Out, or others, consider building them in the UI first and then use the "Show SignalFlow" feature to extract the value for `programText`. You can also see the [documentation for detector functions in signalflow-library](https://github.com/signalfx/signalflow-library/tree/master/library/signalfx/detectors).
 *
 * > **NOTE** When you want to change or remove write permissions for a user other than yourself regarding detectors, use a session token of an administrator to authenticate the Splunk Observability Cloud provider. See [Operations that require a session token for an administrator](https://dev.splunk.com/observability/docs/administration/authtokens#Operations-that-require-a-session-token-for-an-administrator).
 *
 * ## Example
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as signalfx from "@pulumi/signalfx";
 *
 * const config = new pulumi.Config();
 * const clusters = config.getObject("clusters") || [
 *     "clusterA",
 *     "clusterB",
 * ];
 * const applicationDelay: signalfx.Detector[] = [];
 * for (const range = {value: 0}; range.value < clusters.length; range.value++) {
 *     applicationDelay.push(new signalfx.Detector(`applicationDelay-${range.value}`, {
 *         description: `your application is slow - ${clusters[range.value]}`,
 *         maxDelay: 30,
 *         tags: [
 *             "app-backend",
 *             "staging",
 *         ],
 *         authorizedWriterTeams: [signalfx_team.mycoolteam.id],
 *         authorizedWriterUsers: ["abc123"],
 *         programText: `signal = data('app.delay', filter('cluster','${clusters[range.value]}'), extrapolation='last_value', maxExtrapolations=5).max()
 * detect(when(signal > 60, '5m')).publish('Processing old messages 5m')
 * detect(when(signal > 60, '30m')).publish('Processing old messages 30m')
 * `,
 *         rules: [
 *             {
 *                 description: "maximum > 60 for 5m",
 *                 severity: "Warning",
 *                 detectLabel: "Processing old messages 5m",
 *                 notifications: ["Email,foo-alerts@bar.com"],
 *             },
 *             {
 *                 description: "maximum > 60 for 30m",
 *                 severity: "Critical",
 *                 detectLabel: "Processing old messages 30m",
 *                 notifications: ["Email,foo-alerts@bar.com"],
 *             },
 *         ],
 *     }));
 * }
 * ```
 *
 * ## Notification format
 *
 * As Splunk Observability Cloud supports different notification mechanisms, use a comma-delimited string to provide inputs. If you want to specify multiple notifications, each must be a member in the list, like so:
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * ```
 *
 * See [Splunk Observability Cloud Docs](https://dev.splunk.com/observability/reference/api/detectors/latest) for more information.
 *
 * Here are some example of how to configure each notification type:
 *
 * ### Email
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * ```
 *
 * ### Jira
 *
 * Note that the `credentialId` is the Splunk-provided ID shown after setting up your Jira integration. See also `signalfx.jira.Integration`.
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * ```
 *
 * ### OpsGenie
 *
 * Note that the `credentialId` is the Splunk-provided ID shown after setting up your Opsgenie integration. `Team` here is hardcoded as the `responderType` as that is the only acceptable type as per the API docs.
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * ```
 *
 * ### PagerDuty
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * ```
 *
 * ### Slack
 *
 * Exclude the `#` on the channel name:
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * ```
 *
 * ### Team
 *
 * Sends [notifications to a team](https://docs.signalfx.com/en/latest/managing/teams/team-notifications.html).
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * ```
 *
 * ### TeamEmail
 *
 * Sends an email to every member of a team.
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * ```
 *
 * ### Splunk On-Call (formerly VictorOps)
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * ```
 *
 * ### Webhooks
 *
 * You need to include all the commas even if you only use a credential id.
 *
 * You can either configure a Webhook to use an existing integration's credential id:
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * ```
 *
 * Or configure one inline:
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * ```
 *
 * ## Arguments
 *
 * * `name` - (Required) Name of the detector.
 * * `programText` - (Required) Signalflow program text for the detector. More info [in the Splunk Observability Cloud docs](https://dev.splunk.com/observability/docs/signalflow/).
 * * `description` - (Optional) Description of the detector.
 * * `authorizedWriterTeams` - (Optional) Team IDs that have write access to this detector. Remember to use an admin's token if using this feature and to include that admin's team id (or user id in `authorizedWriterUsers`).
 * * `authorizedWriterUsers` - (Optional) User IDs that have write access to this detector. Remember to use an admin's token if using this feature and to include that admin's user id (or team id in `authorizedWriterTeams`).
 * * `maxDelay` - (Optional) How long (in seconds) to wait for late datapoints. See [Delayed Datapoints](https://docs.splunk.com/observability/en/data-visualization/charts/chart-builder.html#delayed-datapoints) for more info. Max value is `900` seconds (15 minutes). `Auto` (as little as possible) by default.
 * * `minDelay` - (Optional) How long (in seconds) to wait even if the datapoints are arriving in a timely fashion. Max value is 900 (15m).
 * * `showDataMarkers` - (Optional) When `true`, markers will be drawn for each datapoint within the visualization. `true` by default.
 * * `showEventLines` - (Optional) When `true`, the visualization will display a vertical line for each event trigger. `false` by default.
 * * `disableSampling` - (Optional) When `false`, the visualization may sample the output timeseries rather than displaying them all. `false` by default.
 * * `timeRange` - (Optional) Seconds to display in the visualization. This is a rolling range from the current time. Example: `3600` corresponds to `-1h` in web UI. `3600` by default.
 * * `startTime` - (Optional) Seconds since epoch. Used for visualization. Conflicts with `timeRange`.
 * * `endTime` - (Optional) Seconds since epoch. Used for visualization. Conflicts with `timeRange`.
 * * `tags` - (Optional) Tags associated with the detector.
 * * `teams` - (Optional) Team IDs to associate the detector to.
 * * `rule` - (Required) Set of rules used for alerting.
 *     * `detectLabel` - (Required) A detect label which matches a detect label within `programText`.
 *     * `severity` - (Required) The severity of the rule, must be one of: `"Critical"`, `"Major"`, `"Minor"`, `"Warning"`, `"Info"`.
 *     * `description` - (Optional) Description for the rule. Displays as the alert condition in the Alert Rules tab of the detector editor in the web UI.
 *     * `disabled` - (Optional) When true, notifications and events will not be generated for the detect label. `false` by default.
 *     * `notifications` - (Optional) List of strings specifying where notifications will be sent when an incident occurs. See [Create A Single Detector](https://dev.splunk.com/observability/reference/api/detectors/latest) for more info.
 *     * `parameterizedBody` - (Optional) Custom notification message body when an alert is triggered. See [Set Up Detectors to Trigger Alerts](https://docs.splunk.com/observability/en/alerts-detectors-notifications/create-detectors-for-alerts.html) for more info.
 *     * `parameterizedSubject` - (Optional) Custom notification message subject when an alert is triggered. See [Set Up Detectors to Trigger Alerts](https://docs.splunk.com/observability/en/alerts-detectors-notifications/create-detectors-for-alerts.html) for more info.
 *     * `runbookUrl` - (Optional) URL of page to consult when an alert is triggered. This can be used with custom notification messages.
 *     * `tip` - (Optional) Plain text suggested first course of action, such as a command line to execute. This can be used with custom notification messages.
 * * `vizOptions` - (Optional) Plot-level customization options, associated with a publish statement.
 *     * `label` - (Required) Label used in the publish statement that displays the plot (metric time series data) you want to customize.
 *     * `displayName` - (Optional) Specifies an alternate value for the Plot Name column of the Data Table associated with the chart.
 *     * `color` - (Optional) Color to use : gray, blue, azure, navy, brown, orange, yellow, iris, magenta, pink, purple, violet, lilac, emerald, green, aquamarine.
 *     * `valueUnit` - (Optional) A unit to attach to this plot. Units support automatic scaling (eg thousands of bytes will be displayed as kilobytes). Values values are `Bit, Kilobit, Megabit, Gigabit, Terabit, Petabit, Exabit, Zettabit, Yottabit, Byte, Kibibyte, Mebibyte, Gibibyte (note: this was previously typoed as Gigibyte), Tebibyte, Pebibyte, Exbibyte, Zebibyte, Yobibyte, Nanosecond, Microsecond, Millisecond, Second, Minute, Hour, Day, Week`.
 *     * `valuePrefix`, `valueSuffix` - (Optional) Arbitrary prefix/suffix to display with the value of this plot.
 *
 * **Notes**
 *
 * Use both `maxDelay` in your detector configuration and an `extrapolation` policy in your program text to reduce false positives and false negatives.
 *
 * - `maxDelay` allows Splunk Observability Cloud to continue with computation if there is a lag in receiving data points.
 * - `extrapolation` allows you to specify how to handle missing data. An extrapolation policy can be added to individual signals by updating the data block in your `programText`.
 *
 * See [Delayed Datapoints](https://docs.splunk.com/observability/en/data-visualization/charts/chart-builder.html#delayed-datapoints) for more info.
 *
 * ## Attributes
 *
 * In a addition to all arguments above, the following attributes are exported:
 *
 * * `id` - The ID of the detector.
 * * `labelResolutions` - The resolutions of the detector alerts in milliseconds that indicate how often data is analyzed to determine if an alert should be triggered.
 * * `url` - The URL of the detector.
 *
 * ## Import
 *
 * Detectors can be imported using their string ID (recoverable from URL`/#/detector/v2/abc123/edit`, e.g.
 *
 * ```sh
 *  $ pulumi import signalfx:index/detector:Detector application_delay abc123
 * ```
 */
export class Detector extends pulumi.CustomResource {
    /**
     * Get an existing Detector resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: DetectorState, opts?: pulumi.CustomResourceOptions): Detector {
        return new Detector(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'signalfx:index/detector:Detector';

    /**
     * Returns true if the given object is an instance of Detector.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Detector {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Detector.__pulumiType;
    }

    /**
     * Team IDs that have write access to this dashboard
     */
    public readonly authorizedWriterTeams!: pulumi.Output<string[] | undefined>;
    /**
     * User IDs that have write access to this dashboard
     */
    public readonly authorizedWriterUsers!: pulumi.Output<string[] | undefined>;
    /**
     * Description of the detector
     */
    public readonly description!: pulumi.Output<string | undefined>;
    /**
     * (false by default) When false, samples a subset of the output MTS in the visualization.
     */
    public readonly disableSampling!: pulumi.Output<boolean | undefined>;
    /**
     * Seconds since epoch. Used for visualization
     */
    public readonly endTime!: pulumi.Output<number | undefined>;
    /**
     * Resolutions of the detector alerts in milliseconds that indicate how often data is analyzed to determine if an alert
     * should be triggered
     */
    public /*out*/ readonly labelResolutions!: pulumi.Output<{[key: string]: number}>;
    /**
     * Maximum time (in seconds) to wait for late datapoints. Max value is 900 (15m)
     */
    public readonly maxDelay!: pulumi.Output<number | undefined>;
    /**
     * Minimum time (in seconds) for the computation to wait even if the datapoints are arriving in a timely fashion. Max value
     * is 900 (15m)
     */
    public readonly minDelay!: pulumi.Output<number | undefined>;
    /**
     * Name of the detector
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * Signalflow program text for the detector. More info at "https://developers.signalfx.com/docs/signalflow-overview"
     */
    public readonly programText!: pulumi.Output<string>;
    /**
     * Set of rules used for alerting
     */
    public readonly rules!: pulumi.Output<outputs.DetectorRule[]>;
    /**
     * (true by default) When true, markers will be drawn for each datapoint within the visualization.
     */
    public readonly showDataMarkers!: pulumi.Output<boolean | undefined>;
    /**
     * (false by default) When true, vertical lines will be drawn for each triggered event within the visualization.
     */
    public readonly showEventLines!: pulumi.Output<boolean | undefined>;
    /**
     * Seconds since epoch. Used for visualization
     */
    public readonly startTime!: pulumi.Output<number | undefined>;
    /**
     * Tags associated with the detector
     */
    public readonly tags!: pulumi.Output<string[] | undefined>;
    /**
     * Team IDs to associate the detector to
     */
    public readonly teams!: pulumi.Output<string[] | undefined>;
    /**
     * Seconds to display in the visualization. This is a rolling range from the current time. Example: 3600 = `-1h`. Defaults
     * to 3600
     */
    public readonly timeRange!: pulumi.Output<number | undefined>;
    /**
     * The property value is a string that denotes the geographic region associated with the time zone, (e.g. Australia/Sydney)
     */
    public readonly timezone!: pulumi.Output<string | undefined>;
    /**
     * URL of the detector
     */
    public /*out*/ readonly url!: pulumi.Output<string>;
    /**
     * Plot-level customization options, associated with a publish statement
     */
    public readonly vizOptions!: pulumi.Output<outputs.DetectorVizOption[] | undefined>;

    /**
     * Create a Detector resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: DetectorArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: DetectorArgs | DetectorState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as DetectorState | undefined;
            resourceInputs["authorizedWriterTeams"] = state ? state.authorizedWriterTeams : undefined;
            resourceInputs["authorizedWriterUsers"] = state ? state.authorizedWriterUsers : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["disableSampling"] = state ? state.disableSampling : undefined;
            resourceInputs["endTime"] = state ? state.endTime : undefined;
            resourceInputs["labelResolutions"] = state ? state.labelResolutions : undefined;
            resourceInputs["maxDelay"] = state ? state.maxDelay : undefined;
            resourceInputs["minDelay"] = state ? state.minDelay : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["programText"] = state ? state.programText : undefined;
            resourceInputs["rules"] = state ? state.rules : undefined;
            resourceInputs["showDataMarkers"] = state ? state.showDataMarkers : undefined;
            resourceInputs["showEventLines"] = state ? state.showEventLines : undefined;
            resourceInputs["startTime"] = state ? state.startTime : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["teams"] = state ? state.teams : undefined;
            resourceInputs["timeRange"] = state ? state.timeRange : undefined;
            resourceInputs["timezone"] = state ? state.timezone : undefined;
            resourceInputs["url"] = state ? state.url : undefined;
            resourceInputs["vizOptions"] = state ? state.vizOptions : undefined;
        } else {
            const args = argsOrState as DetectorArgs | undefined;
            if ((!args || args.programText === undefined) && !opts.urn) {
                throw new Error("Missing required property 'programText'");
            }
            if ((!args || args.rules === undefined) && !opts.urn) {
                throw new Error("Missing required property 'rules'");
            }
            resourceInputs["authorizedWriterTeams"] = args ? args.authorizedWriterTeams : undefined;
            resourceInputs["authorizedWriterUsers"] = args ? args.authorizedWriterUsers : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["disableSampling"] = args ? args.disableSampling : undefined;
            resourceInputs["endTime"] = args ? args.endTime : undefined;
            resourceInputs["maxDelay"] = args ? args.maxDelay : undefined;
            resourceInputs["minDelay"] = args ? args.minDelay : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["programText"] = args ? args.programText : undefined;
            resourceInputs["rules"] = args ? args.rules : undefined;
            resourceInputs["showDataMarkers"] = args ? args.showDataMarkers : undefined;
            resourceInputs["showEventLines"] = args ? args.showEventLines : undefined;
            resourceInputs["startTime"] = args ? args.startTime : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["teams"] = args ? args.teams : undefined;
            resourceInputs["timeRange"] = args ? args.timeRange : undefined;
            resourceInputs["timezone"] = args ? args.timezone : undefined;
            resourceInputs["vizOptions"] = args ? args.vizOptions : undefined;
            resourceInputs["labelResolutions"] = undefined /*out*/;
            resourceInputs["url"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Detector.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Detector resources.
 */
export interface DetectorState {
    /**
     * Team IDs that have write access to this dashboard
     */
    authorizedWriterTeams?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * User IDs that have write access to this dashboard
     */
    authorizedWriterUsers?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Description of the detector
     */
    description?: pulumi.Input<string>;
    /**
     * (false by default) When false, samples a subset of the output MTS in the visualization.
     */
    disableSampling?: pulumi.Input<boolean>;
    /**
     * Seconds since epoch. Used for visualization
     */
    endTime?: pulumi.Input<number>;
    /**
     * Resolutions of the detector alerts in milliseconds that indicate how often data is analyzed to determine if an alert
     * should be triggered
     */
    labelResolutions?: pulumi.Input<{[key: string]: pulumi.Input<number>}>;
    /**
     * Maximum time (in seconds) to wait for late datapoints. Max value is 900 (15m)
     */
    maxDelay?: pulumi.Input<number>;
    /**
     * Minimum time (in seconds) for the computation to wait even if the datapoints are arriving in a timely fashion. Max value
     * is 900 (15m)
     */
    minDelay?: pulumi.Input<number>;
    /**
     * Name of the detector
     */
    name?: pulumi.Input<string>;
    /**
     * Signalflow program text for the detector. More info at "https://developers.signalfx.com/docs/signalflow-overview"
     */
    programText?: pulumi.Input<string>;
    /**
     * Set of rules used for alerting
     */
    rules?: pulumi.Input<pulumi.Input<inputs.DetectorRule>[]>;
    /**
     * (true by default) When true, markers will be drawn for each datapoint within the visualization.
     */
    showDataMarkers?: pulumi.Input<boolean>;
    /**
     * (false by default) When true, vertical lines will be drawn for each triggered event within the visualization.
     */
    showEventLines?: pulumi.Input<boolean>;
    /**
     * Seconds since epoch. Used for visualization
     */
    startTime?: pulumi.Input<number>;
    /**
     * Tags associated with the detector
     */
    tags?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Team IDs to associate the detector to
     */
    teams?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Seconds to display in the visualization. This is a rolling range from the current time. Example: 3600 = `-1h`. Defaults
     * to 3600
     */
    timeRange?: pulumi.Input<number>;
    /**
     * The property value is a string that denotes the geographic region associated with the time zone, (e.g. Australia/Sydney)
     */
    timezone?: pulumi.Input<string>;
    /**
     * URL of the detector
     */
    url?: pulumi.Input<string>;
    /**
     * Plot-level customization options, associated with a publish statement
     */
    vizOptions?: pulumi.Input<pulumi.Input<inputs.DetectorVizOption>[]>;
}

/**
 * The set of arguments for constructing a Detector resource.
 */
export interface DetectorArgs {
    /**
     * Team IDs that have write access to this dashboard
     */
    authorizedWriterTeams?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * User IDs that have write access to this dashboard
     */
    authorizedWriterUsers?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Description of the detector
     */
    description?: pulumi.Input<string>;
    /**
     * (false by default) When false, samples a subset of the output MTS in the visualization.
     */
    disableSampling?: pulumi.Input<boolean>;
    /**
     * Seconds since epoch. Used for visualization
     */
    endTime?: pulumi.Input<number>;
    /**
     * Maximum time (in seconds) to wait for late datapoints. Max value is 900 (15m)
     */
    maxDelay?: pulumi.Input<number>;
    /**
     * Minimum time (in seconds) for the computation to wait even if the datapoints are arriving in a timely fashion. Max value
     * is 900 (15m)
     */
    minDelay?: pulumi.Input<number>;
    /**
     * Name of the detector
     */
    name?: pulumi.Input<string>;
    /**
     * Signalflow program text for the detector. More info at "https://developers.signalfx.com/docs/signalflow-overview"
     */
    programText: pulumi.Input<string>;
    /**
     * Set of rules used for alerting
     */
    rules: pulumi.Input<pulumi.Input<inputs.DetectorRule>[]>;
    /**
     * (true by default) When true, markers will be drawn for each datapoint within the visualization.
     */
    showDataMarkers?: pulumi.Input<boolean>;
    /**
     * (false by default) When true, vertical lines will be drawn for each triggered event within the visualization.
     */
    showEventLines?: pulumi.Input<boolean>;
    /**
     * Seconds since epoch. Used for visualization
     */
    startTime?: pulumi.Input<number>;
    /**
     * Tags associated with the detector
     */
    tags?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Team IDs to associate the detector to
     */
    teams?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Seconds to display in the visualization. This is a rolling range from the current time. Example: 3600 = `-1h`. Defaults
     * to 3600
     */
    timeRange?: pulumi.Input<number>;
    /**
     * The property value is a string that denotes the geographic region associated with the time zone, (e.g. Australia/Sydney)
     */
    timezone?: pulumi.Input<string>;
    /**
     * Plot-level customization options, associated with a publish statement
     */
    vizOptions?: pulumi.Input<pulumi.Input<inputs.DetectorVizOption>[]>;
}
