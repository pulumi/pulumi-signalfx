// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

declare var exports: any;
const __config = new pulumi.Config("signalfx");

/**
 * API URL for your Splunk Observability Cloud org, may include a realm
 */
export declare const apiUrl: string | undefined;
Object.defineProperty(exports, "apiUrl", {
    get() {
        return __config.get("apiUrl");
    },
    enumerable: true,
});

/**
 * Splunk Observability Cloud auth token
 */
export declare const authToken: string | undefined;
Object.defineProperty(exports, "authToken", {
    get() {
        return __config.get("authToken");
    },
    enumerable: true,
});

/**
 * Application URL for your Splunk Observability Cloud org, often customized for organizations using SSO
 */
export declare const customAppUrl: string | undefined;
Object.defineProperty(exports, "customAppUrl", {
    get() {
        return __config.get("customAppUrl");
    },
    enumerable: true,
});

/**
 * Used to create a session token instead of an API token, it requires the account to be configured to login with Email and
 * Password
 */
export declare const email: string | undefined;
Object.defineProperty(exports, "email", {
    get() {
        return __config.get("email");
    },
    enumerable: true,
});

/**
 * Allows for users to opt-in to new features that are considered experimental or not ready for general availabilty yet.
 */
export declare const featurePreview: {[key: string]: boolean} | undefined;
Object.defineProperty(exports, "featurePreview", {
    get() {
        return __config.getObject<{[key: string]: boolean}>("featurePreview");
    },
    enumerable: true,
});

/**
 * Required if the user is configured to be part of multiple organizations
 */
export declare const organizationId: string | undefined;
Object.defineProperty(exports, "organizationId", {
    get() {
        return __config.get("organizationId");
    },
    enumerable: true,
});

/**
 * Used to create a session token instead of an API token, it requires the account to be configured to login with Email and
 * Password
 */
export declare const password: string | undefined;
Object.defineProperty(exports, "password", {
    get() {
        return __config.get("password");
    },
    enumerable: true,
});

/**
 * Max retries for a single HTTP call. Defaults to 4
 */
export declare const retryMaxAttempts: number | undefined;
Object.defineProperty(exports, "retryMaxAttempts", {
    get() {
        return __config.getObject<number>("retryMaxAttempts");
    },
    enumerable: true,
});

/**
 * Maximum retry wait for a single HTTP call in seconds. Defaults to 30
 */
export declare const retryWaitMaxSeconds: number | undefined;
Object.defineProperty(exports, "retryWaitMaxSeconds", {
    get() {
        return __config.getObject<number>("retryWaitMaxSeconds");
    },
    enumerable: true,
});

/**
 * Minimum retry wait for a single HTTP call in seconds. Defaults to 1
 */
export declare const retryWaitMinSeconds: number | undefined;
Object.defineProperty(exports, "retryWaitMinSeconds", {
    get() {
        return __config.getObject<number>("retryWaitMinSeconds");
    },
    enumerable: true,
});

/**
 * Allows for Tags to be added by default to resources that allow for tags to be included. If there is already tags
 * configured, the global tags are added in prefix.
 */
export declare const tags: string[] | undefined;
Object.defineProperty(exports, "tags", {
    get() {
        return __config.getObject<string[]>("tags");
    },
    enumerable: true,
});

/**
 * Allows for teams to be defined at a provider level, and apply to all applicable resources created.
 */
export declare const teams: string[] | undefined;
Object.defineProperty(exports, "teams", {
    get() {
        return __config.getObject<string[]>("teams");
    },
    enumerable: true,
});

/**
 * Timeout duration for a single HTTP call in seconds. Defaults to 120
 */
export declare const timeoutSeconds: number | undefined;
Object.defineProperty(exports, "timeoutSeconds", {
    get() {
        return __config.getObject<number>("timeoutSeconds");
    },
    enumerable: true,
});

