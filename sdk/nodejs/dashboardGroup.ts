// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * In the Splunk Observability Cloud web UI, a [dashboard group](https://developers.signalfx.com/dashboard_groups_reference.html) is a collection of dashboards.
 *
 * Dashboard groups cannot be accessed directly. You can access them through a dashboard within a group.
 *
 * > **NOTE** When you want to change or remove write permissions for a user other than yourself regarding dashboard groups, use a session token of an administrator to authenticate the Splunk Observability Cloud provider. See [Operations that require a session token for an administrator](https://dev.splunk.com/observability/docs/administration/authtokens#Operations-that-require-a-session-token-for-an-administrator).
 *
 * ## Example
 *
 * ## Example with permissions
 *
 * ## Example With mirrored dashboards
 *
 * ## Arguments
 *
 * The following arguments are supported in the resource block:
 *
 * * `name` - (Required) Name of the dashboard group.
 * * `description` - (Required) Description of the dashboard group.
 * * `teams` - (Optional) Team IDs to associate the dashboard group to.
 * * `authorizedWriterTeams` - (Optional) Team IDs that have write access to this dashboard group. Remember to use an admin's token if using this feature and to include that admin's team (or user id in `authorizedWriterTeams`). **Note:** Deprecated use `permissions` instead.
 * * `authorizedWriterUsers` - (Optional) User IDs that have write access to this dashboard group. Remember to use an admin's token if using this feature and to include that admin's user id (or team id in `authorizedWriterTeams`). **Note:** Deprecated use `permissions` instead.
 * * `permissions` - (Optional) [Permissions](https://docs.splunk.com/Observability/infrastructure/terms-concepts/permissions.html) List of read and write permission configuration to specify which user, team, and organization can view and/or edit your dashboard group. **Note:** This feature is not present in all accounts. Please contact support if you are unsure.
 *   * `principalId` - (Required) ID of the user, team, or organization for which you're granting permissions.
 *   * `principalType` - (Required) Clarify whether this permission configuration is for a user, a team, or an organization. Value can be one of "USER", "TEAM", or "ORG".
 *   * `actions` - (Required) Action the user, team, or organization can take with the dashboard group. List of values (value can be "READ" or "WRITE").
 * * `dashboard` - (Optional) [Mirrored dashboards](https://docs.splunk.com/observability/en/data-visualization/dashboards/dashboard-share-clone-mirror.html#mirror-dashboard) in this dashboard group. **Note:** This feature is not present in all accounts. Please contact support if you are unsure.
 *   * `dashboardId` - (Required) The dashboard id to mirror
 *   * `nameOverride` - (Optional) The name that will override the original dashboards's name.
 *   * `descriptionOverride` - (Optional) The description that will override the original dashboards's description.
 *   * `filterOverride` - (Optional) The description that will override the original dashboards's description.
 *     * `property` - (Required) The name of a dimension to filter against.
 *     * `values` - (Required) A list of values to be used with the `property`, they will be combined via `OR`.
 *     * `negated` - (Optional) If true,  only data that does not match the specified value of the specified property appear in the event overlay. Defaults to `false`.
 *   * `filterOverride` - (Optional) The description that will override the original dashboards's description.
 *     * `property` - (Required) A metric time series dimension or property name.
 *     * `values` - (Optional) (Optional) List of of strings (which will be treated as an OR filter on the property).
 *     * `valuesSuggested` - (Optional) A list of strings of suggested values for this variable; these suggestions will receive priority when values are autosuggested for this variable.
 *
 * ## Attributes
 *
 * In a addition to all arguments above, the following attributes are exported:
 *
 * * `id` - The ID of the integration.
 * * `dashboard.config_id` - The ID of the association between the dashboard group and the dashboard
 */
export class DashboardGroup extends pulumi.CustomResource {
    /**
     * Get an existing DashboardGroup resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: DashboardGroupState, opts?: pulumi.CustomResourceOptions): DashboardGroup {
        return new DashboardGroup(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'signalfx:index/dashboardGroup:DashboardGroup';

    /**
     * Returns true if the given object is an instance of DashboardGroup.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is DashboardGroup {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === DashboardGroup.__pulumiType;
    }

    /**
     * Team IDs that have write access to this dashboard
     *
     * @deprecated Please use permissions field now
     */
    public readonly authorizedWriterTeams!: pulumi.Output<string[] | undefined>;
    /**
     * User IDs that have write access to this dashboard
     *
     * @deprecated Please use permissions field now
     */
    public readonly authorizedWriterUsers!: pulumi.Output<string[] | undefined>;
    /**
     * Dashboard IDs that are members of this dashboard group. Also handles 'mirrored' dashboards.
     */
    public readonly dashboards!: pulumi.Output<outputs.DashboardGroupDashboard[] | undefined>;
    /**
     * Description of the dashboard group
     */
    public readonly description!: pulumi.Output<string | undefined>;
    public readonly importQualifiers!: pulumi.Output<outputs.DashboardGroupImportQualifier[] | undefined>;
    /**
     * Name of the dashboard group
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * The custom access control list for this dashboard
     */
    public readonly permissions!: pulumi.Output<outputs.DashboardGroupPermission[]>;
    /**
     * Team IDs to associate the dashboard group to
     */
    public readonly teams!: pulumi.Output<string[] | undefined>;

    /**
     * Create a DashboardGroup resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: DashboardGroupArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: DashboardGroupArgs | DashboardGroupState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as DashboardGroupState | undefined;
            resourceInputs["authorizedWriterTeams"] = state ? state.authorizedWriterTeams : undefined;
            resourceInputs["authorizedWriterUsers"] = state ? state.authorizedWriterUsers : undefined;
            resourceInputs["dashboards"] = state ? state.dashboards : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["importQualifiers"] = state ? state.importQualifiers : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["permissions"] = state ? state.permissions : undefined;
            resourceInputs["teams"] = state ? state.teams : undefined;
        } else {
            const args = argsOrState as DashboardGroupArgs | undefined;
            resourceInputs["authorizedWriterTeams"] = args ? args.authorizedWriterTeams : undefined;
            resourceInputs["authorizedWriterUsers"] = args ? args.authorizedWriterUsers : undefined;
            resourceInputs["dashboards"] = args ? args.dashboards : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["importQualifiers"] = args ? args.importQualifiers : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["permissions"] = args ? args.permissions : undefined;
            resourceInputs["teams"] = args ? args.teams : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(DashboardGroup.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering DashboardGroup resources.
 */
export interface DashboardGroupState {
    /**
     * Team IDs that have write access to this dashboard
     *
     * @deprecated Please use permissions field now
     */
    authorizedWriterTeams?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * User IDs that have write access to this dashboard
     *
     * @deprecated Please use permissions field now
     */
    authorizedWriterUsers?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Dashboard IDs that are members of this dashboard group. Also handles 'mirrored' dashboards.
     */
    dashboards?: pulumi.Input<pulumi.Input<inputs.DashboardGroupDashboard>[]>;
    /**
     * Description of the dashboard group
     */
    description?: pulumi.Input<string>;
    importQualifiers?: pulumi.Input<pulumi.Input<inputs.DashboardGroupImportQualifier>[]>;
    /**
     * Name of the dashboard group
     */
    name?: pulumi.Input<string>;
    /**
     * The custom access control list for this dashboard
     */
    permissions?: pulumi.Input<pulumi.Input<inputs.DashboardGroupPermission>[]>;
    /**
     * Team IDs to associate the dashboard group to
     */
    teams?: pulumi.Input<pulumi.Input<string>[]>;
}

/**
 * The set of arguments for constructing a DashboardGroup resource.
 */
export interface DashboardGroupArgs {
    /**
     * Team IDs that have write access to this dashboard
     *
     * @deprecated Please use permissions field now
     */
    authorizedWriterTeams?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * User IDs that have write access to this dashboard
     *
     * @deprecated Please use permissions field now
     */
    authorizedWriterUsers?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Dashboard IDs that are members of this dashboard group. Also handles 'mirrored' dashboards.
     */
    dashboards?: pulumi.Input<pulumi.Input<inputs.DashboardGroupDashboard>[]>;
    /**
     * Description of the dashboard group
     */
    description?: pulumi.Input<string>;
    importQualifiers?: pulumi.Input<pulumi.Input<inputs.DashboardGroupImportQualifier>[]>;
    /**
     * Name of the dashboard group
     */
    name?: pulumi.Input<string>;
    /**
     * The custom access control list for this dashboard
     */
    permissions?: pulumi.Input<pulumi.Input<inputs.DashboardGroupPermission>[]>;
    /**
     * Team IDs to associate the dashboard group to
     */
    teams?: pulumi.Input<pulumi.Input<string>[]>;
}
