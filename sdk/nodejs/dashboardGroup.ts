// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import { input as inputs, output as outputs } from "./types";
import * as utilities from "./utilities";

/**
 * In the SignalFx web UI, a [dashboard group](https://developers.signalfx.com/dashboard_groups_reference.html) is a collection of dashboards.
 *
 * > **NOTE** Dashboard groups cannot be accessed directly, but just via a dashboard contained in them. This is the reason why make show won't show any of yours dashboard groups.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as signalfx from "@pulumi/signalfx";
 *
 * const mydashboardgroup0 = new signalfx.DashboardGroup("mydashboardgroup0", {
 *     description: "Cool dashboard group",
 *     authorizedWriterTeams: [signalfx_team.mycoolteam.id],
 *     authorizedWriterUsers: ["abc123"],
 * });
 * ```
 * ### With Permissions
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as signalfx from "@pulumi/signalfx";
 *
 * const mydashboardgroupWithpermissions = new signalfx.DashboardGroup("mydashboardgroup_withpermissions", {
 *     description: "Cool dashboard group",
 *     permissions: [
 *         // You can add up to 25 of entries for permission configurations. 
 *         // Make sure your account supports this feature!
 *         {
 *             actions: ["READ"],
 *             principalId: "abc123",
 *             principalType: "ORG",
 *         },
 *         {
 *             actions: [
 *                 "READ",
 *                 "WRITE",
 *             ],
 *             principalId: "abc456",
 *             principalType: "USER",
 *         },
 *     ],
 * });
 * ```
 * ### With Mirrored Dashboards
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as signalfx from "@pulumi/signalfx";
 *
 * const mydashboardgroupWithmirrors = new signalfx.DashboardGroup("mydashboardgroupWithmirrors", {
 *     description: "Cool dashboard group",
 *     dashboards: [{
 *         dashboardId: signalfx_dashboard.gc_dashboard.id,
 *         nameOverride: "GC For My Service",
 *         descriptionOverride: "Garbage Collection dashboard maintained by JVM team",
 *         filterOverrides: [{
 *             property: "service",
 *             values: ["myservice"],
 *             negated: false,
 *         }],
 *         variableOverrides: [{
 *             property: "region",
 *             values: ["us-west1"],
 *             valuesSuggesteds: [
 *                 "us-west-1",
 *                 "us-east-1",
 *             ],
 *         }],
 *     }],
 * });
 * ```
 */
export class DashboardGroup extends pulumi.CustomResource {
    /**
     * Get an existing DashboardGroup resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: DashboardGroupState, opts?: pulumi.CustomResourceOptions): DashboardGroup {
        return new DashboardGroup(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'signalfx:index/dashboardGroup:DashboardGroup';

    /**
     * Returns true if the given object is an instance of DashboardGroup.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is DashboardGroup {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === DashboardGroup.__pulumiType;
    }

    /**
     * Team IDs that have write access to this dashboard group. Remember to use an admin's token if using this feature and to include that admin's team (or user id in `authorizedWriterTeams`). **Note:** Deprecated use `permissions` instead.
     *
     * @deprecated Please use permissions field now
     */
    public readonly authorizedWriterTeams!: pulumi.Output<string[] | undefined>;
    /**
     * User IDs that have write access to this dashboard group. Remember to use an admin's token if using this feature and to include that admin's user id (or team id in `authorizedWriterTeams`). **Note:** Deprecated use `permissions` instead.
     *
     * @deprecated Please use permissions field now
     */
    public readonly authorizedWriterUsers!: pulumi.Output<string[] | undefined>;
    /**
     * [Mirrored dashboards](https://docs.signalfx.com/en/latest/dashboards/dashboard-mirrors.html) in this dashboard group. **Note:** This feature is not present in all accounts. Please contact support if you are unsure.
     */
    public readonly dashboards!: pulumi.Output<outputs.DashboardGroupDashboard[] | undefined>;
    /**
     * Description of the dashboard group.
     */
    public readonly description!: pulumi.Output<string | undefined>;
    public readonly importQualifiers!: pulumi.Output<outputs.DashboardGroupImportQualifier[] | undefined>;
    /**
     * Name of the dashboard group.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * [Permissions](https://docs.splunk.com/Observability/infrastructure/terms-concepts/permissions.html) List of read and write permission configuration to specify which user, team, and organization can view and/or edit your dashboard group. **Note:** This feature is not present in all accounts. Please contact support if you are unsure.
     */
    public readonly permissions!: pulumi.Output<outputs.DashboardGroupPermission[]>;
    /**
     * Team IDs to associate the dashboard group to.
     */
    public readonly teams!: pulumi.Output<string[] | undefined>;

    /**
     * Create a DashboardGroup resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: DashboardGroupArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: DashboardGroupArgs | DashboardGroupState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as DashboardGroupState | undefined;
            resourceInputs["authorizedWriterTeams"] = state ? state.authorizedWriterTeams : undefined;
            resourceInputs["authorizedWriterUsers"] = state ? state.authorizedWriterUsers : undefined;
            resourceInputs["dashboards"] = state ? state.dashboards : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["importQualifiers"] = state ? state.importQualifiers : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["permissions"] = state ? state.permissions : undefined;
            resourceInputs["teams"] = state ? state.teams : undefined;
        } else {
            const args = argsOrState as DashboardGroupArgs | undefined;
            resourceInputs["authorizedWriterTeams"] = args ? args.authorizedWriterTeams : undefined;
            resourceInputs["authorizedWriterUsers"] = args ? args.authorizedWriterUsers : undefined;
            resourceInputs["dashboards"] = args ? args.dashboards : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["importQualifiers"] = args ? args.importQualifiers : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["permissions"] = args ? args.permissions : undefined;
            resourceInputs["teams"] = args ? args.teams : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(DashboardGroup.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering DashboardGroup resources.
 */
export interface DashboardGroupState {
    /**
     * Team IDs that have write access to this dashboard group. Remember to use an admin's token if using this feature and to include that admin's team (or user id in `authorizedWriterTeams`). **Note:** Deprecated use `permissions` instead.
     *
     * @deprecated Please use permissions field now
     */
    authorizedWriterTeams?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * User IDs that have write access to this dashboard group. Remember to use an admin's token if using this feature and to include that admin's user id (or team id in `authorizedWriterTeams`). **Note:** Deprecated use `permissions` instead.
     *
     * @deprecated Please use permissions field now
     */
    authorizedWriterUsers?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * [Mirrored dashboards](https://docs.signalfx.com/en/latest/dashboards/dashboard-mirrors.html) in this dashboard group. **Note:** This feature is not present in all accounts. Please contact support if you are unsure.
     */
    dashboards?: pulumi.Input<pulumi.Input<inputs.DashboardGroupDashboard>[]>;
    /**
     * Description of the dashboard group.
     */
    description?: pulumi.Input<string>;
    importQualifiers?: pulumi.Input<pulumi.Input<inputs.DashboardGroupImportQualifier>[]>;
    /**
     * Name of the dashboard group.
     */
    name?: pulumi.Input<string>;
    /**
     * [Permissions](https://docs.splunk.com/Observability/infrastructure/terms-concepts/permissions.html) List of read and write permission configuration to specify which user, team, and organization can view and/or edit your dashboard group. **Note:** This feature is not present in all accounts. Please contact support if you are unsure.
     */
    permissions?: pulumi.Input<pulumi.Input<inputs.DashboardGroupPermission>[]>;
    /**
     * Team IDs to associate the dashboard group to.
     */
    teams?: pulumi.Input<pulumi.Input<string>[]>;
}

/**
 * The set of arguments for constructing a DashboardGroup resource.
 */
export interface DashboardGroupArgs {
    /**
     * Team IDs that have write access to this dashboard group. Remember to use an admin's token if using this feature and to include that admin's team (or user id in `authorizedWriterTeams`). **Note:** Deprecated use `permissions` instead.
     *
     * @deprecated Please use permissions field now
     */
    authorizedWriterTeams?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * User IDs that have write access to this dashboard group. Remember to use an admin's token if using this feature and to include that admin's user id (or team id in `authorizedWriterTeams`). **Note:** Deprecated use `permissions` instead.
     *
     * @deprecated Please use permissions field now
     */
    authorizedWriterUsers?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * [Mirrored dashboards](https://docs.signalfx.com/en/latest/dashboards/dashboard-mirrors.html) in this dashboard group. **Note:** This feature is not present in all accounts. Please contact support if you are unsure.
     */
    dashboards?: pulumi.Input<pulumi.Input<inputs.DashboardGroupDashboard>[]>;
    /**
     * Description of the dashboard group.
     */
    description?: pulumi.Input<string>;
    importQualifiers?: pulumi.Input<pulumi.Input<inputs.DashboardGroupImportQualifier>[]>;
    /**
     * Name of the dashboard group.
     */
    name?: pulumi.Input<string>;
    /**
     * [Permissions](https://docs.splunk.com/Observability/infrastructure/terms-concepts/permissions.html) List of read and write permission configuration to specify which user, team, and organization can view and/or edit your dashboard group. **Note:** This feature is not present in all accounts. Please contact support if you are unsure.
     */
    permissions?: pulumi.Input<pulumi.Input<inputs.DashboardGroupPermission>[]>;
    /**
     * Team IDs to associate the dashboard group to.
     */
    teams?: pulumi.Input<pulumi.Input<string>[]>;
}
