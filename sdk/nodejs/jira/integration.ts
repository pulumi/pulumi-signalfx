// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * Splunk Observability Cloud Jira integrations. For help with this integration see [Integration with Jira](https://docs.splunk.com/observability/en/admin/notif-services/jira.html).
 *
 * > **NOTE** When managing integrations, use a session token of an administrator to authenticate the Splunk Observability Cloud provider. See [Operations that require a session token for an administrator](https://dev.splunk.com/observability/docs/administration/authtokens#Operations-that-require-a-session-token-for-an-administrator). Otherwise you'll receive a 4xx error.
 *
 * ## Example
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as signalfx from "@pulumi/signalfx";
 *
 * const jiraMyteamXX = new signalfx.jira.Integration("jira_myteamXX", {
 *     name: "JiraFoo",
 *     enabled: false,
 *     authMethod: "UsernameAndPassword",
 *     username: "yoosername",
 *     password: "paasword",
 *     assigneeName: "testytesterson",
 *     assigneeDisplayName: "Testy Testerson",
 *     baseUrl: "https://www.example.com",
 *     issueType: "Story",
 *     projectKey: "TEST",
 * });
 * ```
 */
export class Integration extends pulumi.CustomResource {
    /**
     * Get an existing Integration resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: IntegrationState, opts?: pulumi.CustomResourceOptions): Integration {
        return new Integration(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'signalfx:jira/integration:Integration';

    /**
     * Returns true if the given object is an instance of Integration.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Integration {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Integration.__pulumiType;
    }

    /**
     * The API token for the user email
     */
    declare public readonly apiToken: pulumi.Output<string | undefined>;
    /**
     * Jira display name for the assignee.
     */
    declare public readonly assigneeDisplayName: pulumi.Output<string | undefined>;
    /**
     * Jira user name for the assignee.
     */
    declare public readonly assigneeName: pulumi.Output<string>;
    /**
     * Authentication method used when creating the Jira integration. One of `EmailAndToken` (using `userEmail` and `apiToken`) or `UsernameAndPassword` (using `username` and `password`).
     */
    declare public readonly authMethod: pulumi.Output<string>;
    /**
     * Base URL of the Jira instance that's integrated with SignalFx.
     */
    declare public readonly baseUrl: pulumi.Output<string>;
    /**
     * Whether the integration is enabled.
     */
    declare public readonly enabled: pulumi.Output<boolean>;
    /**
     * Issue type (for example, Story) for tickets that Jira creates for detector notifications. Splunk Observability Cloud validates issue types, so you must specify a type that's valid for the Jira project specified in `projectKey`.
     */
    declare public readonly issueType: pulumi.Output<string>;
    /**
     * Name of the integration.
     */
    declare public readonly name: pulumi.Output<string>;
    /**
     * Password used to authenticate the Jira integration.
     */
    declare public readonly password: pulumi.Output<string | undefined>;
    /**
     * Jira key of an existing project. When Jira creates a new ticket for a detector notification, the ticket is assigned to this project.
     */
    declare public readonly projectKey: pulumi.Output<string>;
    /**
     * Email address used to authenticate the Jira integration.
     */
    declare public readonly userEmail: pulumi.Output<string | undefined>;
    /**
     * User name used to authenticate the Jira integration.
     */
    declare public readonly username: pulumi.Output<string | undefined>;

    /**
     * Create a Integration resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: IntegrationArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: IntegrationArgs | IntegrationState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as IntegrationState | undefined;
            resourceInputs["apiToken"] = state?.apiToken;
            resourceInputs["assigneeDisplayName"] = state?.assigneeDisplayName;
            resourceInputs["assigneeName"] = state?.assigneeName;
            resourceInputs["authMethod"] = state?.authMethod;
            resourceInputs["baseUrl"] = state?.baseUrl;
            resourceInputs["enabled"] = state?.enabled;
            resourceInputs["issueType"] = state?.issueType;
            resourceInputs["name"] = state?.name;
            resourceInputs["password"] = state?.password;
            resourceInputs["projectKey"] = state?.projectKey;
            resourceInputs["userEmail"] = state?.userEmail;
            resourceInputs["username"] = state?.username;
        } else {
            const args = argsOrState as IntegrationArgs | undefined;
            if (args?.assigneeName === undefined && !opts.urn) {
                throw new Error("Missing required property 'assigneeName'");
            }
            if (args?.authMethod === undefined && !opts.urn) {
                throw new Error("Missing required property 'authMethod'");
            }
            if (args?.baseUrl === undefined && !opts.urn) {
                throw new Error("Missing required property 'baseUrl'");
            }
            if (args?.enabled === undefined && !opts.urn) {
                throw new Error("Missing required property 'enabled'");
            }
            if (args?.issueType === undefined && !opts.urn) {
                throw new Error("Missing required property 'issueType'");
            }
            if (args?.projectKey === undefined && !opts.urn) {
                throw new Error("Missing required property 'projectKey'");
            }
            resourceInputs["apiToken"] = args?.apiToken ? pulumi.secret(args.apiToken) : undefined;
            resourceInputs["assigneeDisplayName"] = args?.assigneeDisplayName;
            resourceInputs["assigneeName"] = args?.assigneeName;
            resourceInputs["authMethod"] = args?.authMethod;
            resourceInputs["baseUrl"] = args?.baseUrl;
            resourceInputs["enabled"] = args?.enabled;
            resourceInputs["issueType"] = args?.issueType;
            resourceInputs["name"] = args?.name;
            resourceInputs["password"] = args?.password ? pulumi.secret(args.password) : undefined;
            resourceInputs["projectKey"] = args?.projectKey;
            resourceInputs["userEmail"] = args?.userEmail;
            resourceInputs["username"] = args?.username;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["apiToken", "password"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(Integration.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Integration resources.
 */
export interface IntegrationState {
    /**
     * The API token for the user email
     */
    apiToken?: pulumi.Input<string>;
    /**
     * Jira display name for the assignee.
     */
    assigneeDisplayName?: pulumi.Input<string>;
    /**
     * Jira user name for the assignee.
     */
    assigneeName?: pulumi.Input<string>;
    /**
     * Authentication method used when creating the Jira integration. One of `EmailAndToken` (using `userEmail` and `apiToken`) or `UsernameAndPassword` (using `username` and `password`).
     */
    authMethod?: pulumi.Input<string>;
    /**
     * Base URL of the Jira instance that's integrated with SignalFx.
     */
    baseUrl?: pulumi.Input<string>;
    /**
     * Whether the integration is enabled.
     */
    enabled?: pulumi.Input<boolean>;
    /**
     * Issue type (for example, Story) for tickets that Jira creates for detector notifications. Splunk Observability Cloud validates issue types, so you must specify a type that's valid for the Jira project specified in `projectKey`.
     */
    issueType?: pulumi.Input<string>;
    /**
     * Name of the integration.
     */
    name?: pulumi.Input<string>;
    /**
     * Password used to authenticate the Jira integration.
     */
    password?: pulumi.Input<string>;
    /**
     * Jira key of an existing project. When Jira creates a new ticket for a detector notification, the ticket is assigned to this project.
     */
    projectKey?: pulumi.Input<string>;
    /**
     * Email address used to authenticate the Jira integration.
     */
    userEmail?: pulumi.Input<string>;
    /**
     * User name used to authenticate the Jira integration.
     */
    username?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Integration resource.
 */
export interface IntegrationArgs {
    /**
     * The API token for the user email
     */
    apiToken?: pulumi.Input<string>;
    /**
     * Jira display name for the assignee.
     */
    assigneeDisplayName?: pulumi.Input<string>;
    /**
     * Jira user name for the assignee.
     */
    assigneeName: pulumi.Input<string>;
    /**
     * Authentication method used when creating the Jira integration. One of `EmailAndToken` (using `userEmail` and `apiToken`) or `UsernameAndPassword` (using `username` and `password`).
     */
    authMethod: pulumi.Input<string>;
    /**
     * Base URL of the Jira instance that's integrated with SignalFx.
     */
    baseUrl: pulumi.Input<string>;
    /**
     * Whether the integration is enabled.
     */
    enabled: pulumi.Input<boolean>;
    /**
     * Issue type (for example, Story) for tickets that Jira creates for detector notifications. Splunk Observability Cloud validates issue types, so you must specify a type that's valid for the Jira project specified in `projectKey`.
     */
    issueType: pulumi.Input<string>;
    /**
     * Name of the integration.
     */
    name?: pulumi.Input<string>;
    /**
     * Password used to authenticate the Jira integration.
     */
    password?: pulumi.Input<string>;
    /**
     * Jira key of an existing project. When Jira creates a new ticket for a detector notification, the ticket is assigned to this project.
     */
    projectKey: pulumi.Input<string>;
    /**
     * Email address used to authenticate the Jira integration.
     */
    userEmail?: pulumi.Input<string>;
    /**
     * User name used to authenticate the Jira integration.
     */
    username?: pulumi.Input<string>;
}
