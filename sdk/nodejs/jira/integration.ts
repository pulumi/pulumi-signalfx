// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * SignalFx Jira integrations. For help with this integration see [Integration with Jira](https://docs.signalfx.com/en/latest/admin-guide/integrate-notifications.html#integrate-with-jira).
 *
 * > **NOTE** When managing integrations you'll need to use an admin token to authenticate the SignalFx provider. Otherwise you'll receive a 4xx error.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as signalfx from "@pulumi/signalfx";
 *
 * const jiraMyteamXX = new signalfx.jira.Integration("jira_myteamXX", {
 *     assigneeDisplayName: "Testy Testerson",
 *     assigneeName: "testytesterson",
 *     authMethod: "UsernameAndPassword",
 *     baseUrl: "https://www.example.com",
 *     enabled: false,
 *     issueType: "Story",
 *     password: "paasword",
 *     projectKey: "TEST",
 *     username: "yoosername",
 * });
 * ```
 */
export class Integration extends pulumi.CustomResource {
    /**
     * Get an existing Integration resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: IntegrationState, opts?: pulumi.CustomResourceOptions): Integration {
        return new Integration(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'signalfx:jira/integration:Integration';

    /**
     * Returns true if the given object is an instance of Integration.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Integration {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Integration.__pulumiType;
    }

    /**
     * The API token for the user email
     */
    public readonly apiToken!: pulumi.Output<string | undefined>;
    /**
     * Jira display name for the assignee.
     */
    public readonly assigneeDisplayName!: pulumi.Output<string | undefined>;
    /**
     * Jira user name for the assignee.
     */
    public readonly assigneeName!: pulumi.Output<string>;
    /**
     * Authentication method used when creating the Jira integration. One of `EmailAndToken` (using `userEmail` and `apiToken`) or `UsernameAndPassword` (using `username` and `password`).
     */
    public readonly authMethod!: pulumi.Output<string>;
    /**
     * Base URL of the Jira instance that's integrated with SignalFx.
     */
    public readonly baseUrl!: pulumi.Output<string>;
    /**
     * Whether the integration is enabled.
     */
    public readonly enabled!: pulumi.Output<boolean>;
    /**
     * Issue type (for example, Story) for tickets that Jira creates for detector notifications. SignalFx validates issue types, so you must specify a type that's valid for the Jira project specified in `projectKey`.
     */
    public readonly issueType!: pulumi.Output<string>;
    /**
     * Name of the integration.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * Password used to authenticate the Jira integration.
     */
    public readonly password!: pulumi.Output<string | undefined>;
    /**
     * Jira key of an existing project. When Jira creates a new ticket for a detector notification, the ticket is assigned to this project.
     */
    public readonly projectKey!: pulumi.Output<string>;
    /**
     * Email address used to authenticate the Jira integration.
     */
    public readonly userEmail!: pulumi.Output<string | undefined>;
    /**
     * User name used to authenticate the Jira integration.
     */
    public readonly username!: pulumi.Output<string | undefined>;

    /**
     * Create a Integration resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: IntegrationArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: IntegrationArgs | IntegrationState, opts?: pulumi.CustomResourceOptions) {
        let inputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as IntegrationState | undefined;
            inputs["apiToken"] = state ? state.apiToken : undefined;
            inputs["assigneeDisplayName"] = state ? state.assigneeDisplayName : undefined;
            inputs["assigneeName"] = state ? state.assigneeName : undefined;
            inputs["authMethod"] = state ? state.authMethod : undefined;
            inputs["baseUrl"] = state ? state.baseUrl : undefined;
            inputs["enabled"] = state ? state.enabled : undefined;
            inputs["issueType"] = state ? state.issueType : undefined;
            inputs["name"] = state ? state.name : undefined;
            inputs["password"] = state ? state.password : undefined;
            inputs["projectKey"] = state ? state.projectKey : undefined;
            inputs["userEmail"] = state ? state.userEmail : undefined;
            inputs["username"] = state ? state.username : undefined;
        } else {
            const args = argsOrState as IntegrationArgs | undefined;
            if ((!args || args.assigneeName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'assigneeName'");
            }
            if ((!args || args.authMethod === undefined) && !opts.urn) {
                throw new Error("Missing required property 'authMethod'");
            }
            if ((!args || args.baseUrl === undefined) && !opts.urn) {
                throw new Error("Missing required property 'baseUrl'");
            }
            if ((!args || args.enabled === undefined) && !opts.urn) {
                throw new Error("Missing required property 'enabled'");
            }
            if ((!args || args.issueType === undefined) && !opts.urn) {
                throw new Error("Missing required property 'issueType'");
            }
            if ((!args || args.projectKey === undefined) && !opts.urn) {
                throw new Error("Missing required property 'projectKey'");
            }
            inputs["apiToken"] = args ? args.apiToken : undefined;
            inputs["assigneeDisplayName"] = args ? args.assigneeDisplayName : undefined;
            inputs["assigneeName"] = args ? args.assigneeName : undefined;
            inputs["authMethod"] = args ? args.authMethod : undefined;
            inputs["baseUrl"] = args ? args.baseUrl : undefined;
            inputs["enabled"] = args ? args.enabled : undefined;
            inputs["issueType"] = args ? args.issueType : undefined;
            inputs["name"] = args ? args.name : undefined;
            inputs["password"] = args ? args.password : undefined;
            inputs["projectKey"] = args ? args.projectKey : undefined;
            inputs["userEmail"] = args ? args.userEmail : undefined;
            inputs["username"] = args ? args.username : undefined;
        }
        if (!opts.version) {
            opts = pulumi.mergeOptions(opts, { version: utilities.getVersion()});
        }
        super(Integration.__pulumiType, name, inputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Integration resources.
 */
export interface IntegrationState {
    /**
     * The API token for the user email
     */
    apiToken?: pulumi.Input<string>;
    /**
     * Jira display name for the assignee.
     */
    assigneeDisplayName?: pulumi.Input<string>;
    /**
     * Jira user name for the assignee.
     */
    assigneeName?: pulumi.Input<string>;
    /**
     * Authentication method used when creating the Jira integration. One of `EmailAndToken` (using `userEmail` and `apiToken`) or `UsernameAndPassword` (using `username` and `password`).
     */
    authMethod?: pulumi.Input<string>;
    /**
     * Base URL of the Jira instance that's integrated with SignalFx.
     */
    baseUrl?: pulumi.Input<string>;
    /**
     * Whether the integration is enabled.
     */
    enabled?: pulumi.Input<boolean>;
    /**
     * Issue type (for example, Story) for tickets that Jira creates for detector notifications. SignalFx validates issue types, so you must specify a type that's valid for the Jira project specified in `projectKey`.
     */
    issueType?: pulumi.Input<string>;
    /**
     * Name of the integration.
     */
    name?: pulumi.Input<string>;
    /**
     * Password used to authenticate the Jira integration.
     */
    password?: pulumi.Input<string>;
    /**
     * Jira key of an existing project. When Jira creates a new ticket for a detector notification, the ticket is assigned to this project.
     */
    projectKey?: pulumi.Input<string>;
    /**
     * Email address used to authenticate the Jira integration.
     */
    userEmail?: pulumi.Input<string>;
    /**
     * User name used to authenticate the Jira integration.
     */
    username?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Integration resource.
 */
export interface IntegrationArgs {
    /**
     * The API token for the user email
     */
    apiToken?: pulumi.Input<string>;
    /**
     * Jira display name for the assignee.
     */
    assigneeDisplayName?: pulumi.Input<string>;
    /**
     * Jira user name for the assignee.
     */
    assigneeName: pulumi.Input<string>;
    /**
     * Authentication method used when creating the Jira integration. One of `EmailAndToken` (using `userEmail` and `apiToken`) or `UsernameAndPassword` (using `username` and `password`).
     */
    authMethod: pulumi.Input<string>;
    /**
     * Base URL of the Jira instance that's integrated with SignalFx.
     */
    baseUrl: pulumi.Input<string>;
    /**
     * Whether the integration is enabled.
     */
    enabled: pulumi.Input<boolean>;
    /**
     * Issue type (for example, Story) for tickets that Jira creates for detector notifications. SignalFx validates issue types, so you must specify a type that's valid for the Jira project specified in `projectKey`.
     */
    issueType: pulumi.Input<string>;
    /**
     * Name of the integration.
     */
    name?: pulumi.Input<string>;
    /**
     * Password used to authenticate the Jira integration.
     */
    password?: pulumi.Input<string>;
    /**
     * Jira key of an existing project. When Jira creates a new ticket for a detector notification, the ticket is assigned to this project.
     */
    projectKey: pulumi.Input<string>;
    /**
     * Email address used to authenticate the Jira integration.
     */
    userEmail?: pulumi.Input<string>;
    /**
     * User name used to authenticate the Jira integration.
     */
    username?: pulumi.Input<string>;
}
