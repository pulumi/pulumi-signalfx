// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";

export interface AlertMutingRuleFilter {
    negated?: pulumi.Input<boolean>;
    property: pulumi.Input<string>;
    propertyValue: pulumi.Input<string>;
}

export interface DashboardChart {
    chartId: pulumi.Input<string>;
    column?: pulumi.Input<number>;
    height?: pulumi.Input<number>;
    row?: pulumi.Input<number>;
    width?: pulumi.Input<number>;
}

export interface DashboardColumn {
    chartIds: pulumi.Input<pulumi.Input<string>[]>;
    column?: pulumi.Input<number>;
    height?: pulumi.Input<number>;
    width?: pulumi.Input<number>;
}

export interface DashboardEventOverlay {
    color?: pulumi.Input<string>;
    label?: pulumi.Input<string>;
    line?: pulumi.Input<boolean>;
    signal: pulumi.Input<string>;
    sources?: pulumi.Input<pulumi.Input<inputs.DashboardEventOverlaySource>[]>;
    type?: pulumi.Input<string>;
}

export interface DashboardEventOverlaySource {
    negated?: pulumi.Input<boolean>;
    property: pulumi.Input<string>;
    values: pulumi.Input<pulumi.Input<string>[]>;
}

export interface DashboardFilter {
    applyIfExist?: pulumi.Input<boolean>;
    negated?: pulumi.Input<boolean>;
    property: pulumi.Input<string>;
    values: pulumi.Input<pulumi.Input<string>[]>;
}

export interface DashboardGrid {
    chartIds: pulumi.Input<pulumi.Input<string>[]>;
    height?: pulumi.Input<number>;
    width?: pulumi.Input<number>;
}

export interface DashboardGroupDashboard {
    configId?: pulumi.Input<string>;
    dashboardId: pulumi.Input<string>;
    descriptionOverride?: pulumi.Input<string>;
    filterOverrides?: pulumi.Input<pulumi.Input<inputs.DashboardGroupDashboardFilterOverride>[]>;
    nameOverride?: pulumi.Input<string>;
    variableOverrides?: pulumi.Input<pulumi.Input<inputs.DashboardGroupDashboardVariableOverride>[]>;
}

export interface DashboardGroupDashboardFilterOverride {
    negated?: pulumi.Input<boolean>;
    property: pulumi.Input<string>;
    values: pulumi.Input<pulumi.Input<string>[]>;
}

export interface DashboardGroupDashboardVariableOverride {
    property: pulumi.Input<string>;
    values?: pulumi.Input<pulumi.Input<string>[]>;
    valuesSuggesteds?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface DashboardGroupImportQualifier {
    filters?: pulumi.Input<pulumi.Input<inputs.DashboardGroupImportQualifierFilter>[]>;
    metric?: pulumi.Input<string>;
}

export interface DashboardGroupImportQualifierFilter {
    negated?: pulumi.Input<boolean>;
    property: pulumi.Input<string>;
    values: pulumi.Input<pulumi.Input<string>[]>;
}

export interface DashboardGroupPermission {
    actions?: pulumi.Input<pulumi.Input<string>[]>;
    principalId: pulumi.Input<string>;
    principalType: pulumi.Input<string>;
}

export interface DashboardPermissions {
    acls?: pulumi.Input<pulumi.Input<inputs.DashboardPermissionsAcl>[]>;
    parent?: pulumi.Input<string>;
}

export interface DashboardPermissionsAcl {
    actions?: pulumi.Input<pulumi.Input<string>[]>;
    principalId: pulumi.Input<string>;
    principalType: pulumi.Input<string>;
}

export interface DashboardSelectedEventOverlay {
    signal: pulumi.Input<string>;
    sources?: pulumi.Input<pulumi.Input<inputs.DashboardSelectedEventOverlaySource>[]>;
    type?: pulumi.Input<string>;
}

export interface DashboardSelectedEventOverlaySource {
    negated?: pulumi.Input<boolean>;
    property: pulumi.Input<string>;
    values: pulumi.Input<pulumi.Input<string>[]>;
}

export interface DashboardVariable {
    alias: pulumi.Input<string>;
    applyIfExist?: pulumi.Input<boolean>;
    description?: pulumi.Input<string>;
    property: pulumi.Input<string>;
    replaceOnly?: pulumi.Input<boolean>;
    restrictedSuggestions?: pulumi.Input<boolean>;
    valueRequired?: pulumi.Input<boolean>;
    values?: pulumi.Input<pulumi.Input<string>[]>;
    valuesSuggesteds?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface DataLinkTargetExternalUrl {
    minimumTimeWindow?: pulumi.Input<string>;
    name: pulumi.Input<string>;
    propertyKeyMapping?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    timeFormat?: pulumi.Input<string>;
    url: pulumi.Input<string>;
}

export interface DataLinkTargetSignalfxDashboard {
    dashboardGroupId: pulumi.Input<string>;
    dashboardId: pulumi.Input<string>;
    isDefault?: pulumi.Input<boolean>;
    name: pulumi.Input<string>;
}

export interface DataLinkTargetSplunk {
    name: pulumi.Input<string>;
    propertyKeyMapping?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
}

export interface DetectorRule {
    description?: pulumi.Input<string>;
    detectLabel: pulumi.Input<string>;
    disabled?: pulumi.Input<boolean>;
    notifications?: pulumi.Input<pulumi.Input<string>[]>;
    parameterizedBody?: pulumi.Input<string>;
    parameterizedSubject?: pulumi.Input<string>;
    runbookUrl?: pulumi.Input<string>;
    severity: pulumi.Input<string>;
    tip?: pulumi.Input<string>;
}

export interface DetectorVizOption {
    color?: pulumi.Input<string>;
    displayName?: pulumi.Input<string>;
    label: pulumi.Input<string>;
    valuePrefix?: pulumi.Input<string>;
    valueSuffix?: pulumi.Input<string>;
    valueUnit?: pulumi.Input<string>;
}

export interface HeatmapChartColorRange {
    color: pulumi.Input<string>;
    maxValue?: pulumi.Input<number>;
    minValue?: pulumi.Input<number>;
}

export interface HeatmapChartColorScale {
    color: pulumi.Input<string>;
    gt?: pulumi.Input<number>;
    gte?: pulumi.Input<number>;
    lt?: pulumi.Input<number>;
    lte?: pulumi.Input<number>;
}

export interface ListChartColorScale {
    color: pulumi.Input<string>;
    gt?: pulumi.Input<number>;
    gte?: pulumi.Input<number>;
    lt?: pulumi.Input<number>;
    lte?: pulumi.Input<number>;
}

export interface ListChartLegendOptionsField {
    enabled?: pulumi.Input<boolean>;
    property: pulumi.Input<string>;
}

export interface ListChartVizOption {
    color?: pulumi.Input<string>;
    displayName?: pulumi.Input<string>;
    label: pulumi.Input<string>;
    valuePrefix?: pulumi.Input<string>;
    valueSuffix?: pulumi.Input<string>;
    valueUnit?: pulumi.Input<string>;
}

export interface MetricRulesetAggregationRule {
    aggregators: pulumi.Input<pulumi.Input<inputs.MetricRulesetAggregationRuleAggregator>[]>;
    enabled: pulumi.Input<boolean>;
    matchers: pulumi.Input<pulumi.Input<inputs.MetricRulesetAggregationRuleMatcher>[]>;
    name?: pulumi.Input<string>;
}

export interface MetricRulesetAggregationRuleAggregator {
    dimensions: pulumi.Input<pulumi.Input<string>[]>;
    dropDimensions: pulumi.Input<boolean>;
    outputName: pulumi.Input<string>;
    type: pulumi.Input<string>;
}

export interface MetricRulesetAggregationRuleMatcher {
    filters?: pulumi.Input<pulumi.Input<inputs.MetricRulesetAggregationRuleMatcherFilter>[]>;
    type: pulumi.Input<string>;
}

export interface MetricRulesetAggregationRuleMatcherFilter {
    not: pulumi.Input<boolean>;
    property: pulumi.Input<string>;
    propertyValues: pulumi.Input<pulumi.Input<string>[]>;
}

export interface MetricRulesetRoutingRule {
    destination: pulumi.Input<string>;
}

export interface OrgTokenDpmLimits {
    dpmLimit: pulumi.Input<number>;
    dpmNotificationThreshold?: pulumi.Input<number>;
}

export interface OrgTokenHostOrUsageLimits {
    containerLimit?: pulumi.Input<number>;
    containerNotificationThreshold?: pulumi.Input<number>;
    customMetricsLimit?: pulumi.Input<number>;
    customMetricsNotificationThreshold?: pulumi.Input<number>;
    highResMetricsLimit?: pulumi.Input<number>;
    highResMetricsNotificationThreshold?: pulumi.Input<number>;
    hostLimit?: pulumi.Input<number>;
    hostNotificationThreshold?: pulumi.Input<number>;
}

export interface SingleValueChartColorScale {
    color: pulumi.Input<string>;
    gt?: pulumi.Input<number>;
    gte?: pulumi.Input<number>;
    lt?: pulumi.Input<number>;
    lte?: pulumi.Input<number>;
}

export interface SingleValueChartVizOption {
    color?: pulumi.Input<string>;
    displayName?: pulumi.Input<string>;
    label: pulumi.Input<string>;
    valuePrefix?: pulumi.Input<string>;
    valueSuffix?: pulumi.Input<string>;
    valueUnit?: pulumi.Input<string>;
}

export interface TableChartVizOption {
    color?: pulumi.Input<string>;
    displayName?: pulumi.Input<string>;
    label: pulumi.Input<string>;
    valuePrefix?: pulumi.Input<string>;
    valueSuffix?: pulumi.Input<string>;
    valueUnit?: pulumi.Input<string>;
}

export interface TimeChartAxisLeft {
    highWatermark?: pulumi.Input<number>;
    highWatermarkLabel?: pulumi.Input<string>;
    label?: pulumi.Input<string>;
    lowWatermark?: pulumi.Input<number>;
    lowWatermarkLabel?: pulumi.Input<string>;
    maxValue?: pulumi.Input<number>;
    minValue?: pulumi.Input<number>;
    watermarks?: pulumi.Input<pulumi.Input<inputs.TimeChartAxisLeftWatermark>[]>;
}

export interface TimeChartAxisLeftWatermark {
    label?: pulumi.Input<string>;
    value: pulumi.Input<number>;
}

export interface TimeChartAxisRight {
    highWatermark?: pulumi.Input<number>;
    highWatermarkLabel?: pulumi.Input<string>;
    label?: pulumi.Input<string>;
    lowWatermark?: pulumi.Input<number>;
    lowWatermarkLabel?: pulumi.Input<string>;
    maxValue?: pulumi.Input<number>;
    minValue?: pulumi.Input<number>;
    watermarks?: pulumi.Input<pulumi.Input<inputs.TimeChartAxisRightWatermark>[]>;
}

export interface TimeChartAxisRightWatermark {
    label?: pulumi.Input<string>;
    value: pulumi.Input<number>;
}

export interface TimeChartEventOption {
    color?: pulumi.Input<string>;
    displayName?: pulumi.Input<string>;
    label: pulumi.Input<string>;
}

export interface TimeChartHistogramOption {
    colorTheme?: pulumi.Input<string>;
}

export interface TimeChartLegendOptionsField {
    enabled?: pulumi.Input<boolean>;
    property: pulumi.Input<string>;
}

export interface TimeChartVizOption {
    axis?: pulumi.Input<string>;
    color?: pulumi.Input<string>;
    displayName?: pulumi.Input<string>;
    label: pulumi.Input<string>;
    plotType?: pulumi.Input<string>;
    valuePrefix?: pulumi.Input<string>;
    valueSuffix?: pulumi.Input<string>;
    valueUnit?: pulumi.Input<string>;
}

export interface WebhookIntegrationHeader {
    headerKey: pulumi.Input<string>;
    headerValue: pulumi.Input<string>;
}
export namespace aws {
    export interface IntegrationCustomNamespaceSyncRule {
        defaultAction?: pulumi.Input<string>;
        filterAction?: pulumi.Input<string>;
        filterSource?: pulumi.Input<string>;
        namespace: pulumi.Input<string>;
    }

    export interface IntegrationMetricStatsToSync {
        metric: pulumi.Input<string>;
        namespace: pulumi.Input<string>;
        stats: pulumi.Input<pulumi.Input<string>[]>;
    }

    export interface IntegrationNamespaceSyncRule {
        defaultAction?: pulumi.Input<string>;
        filterAction?: pulumi.Input<string>;
        filterSource?: pulumi.Input<string>;
        namespace: pulumi.Input<string>;
    }
}

export namespace azure {
    export interface IntegrationCustomNamespacesPerService {
        namespaces: pulumi.Input<pulumi.Input<string>[]>;
        service: pulumi.Input<string>;
    }

    export interface IntegrationResourceFilterRule {
        filterSource: pulumi.Input<string>;
    }
}

export namespace gcp {
    export interface IntegrationProjectServiceKey {
        projectId: pulumi.Input<string>;
        projectKey: pulumi.Input<string>;
    }
}

export namespace log {
    export interface ViewColumn {
        name: pulumi.Input<string>;
    }

    export interface ViewSortOption {
        descending: pulumi.Input<boolean>;
        field: pulumi.Input<string>;
    }
}
