// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";

export interface AlertMutingRuleFilter {
    negated?: boolean;
    property: string;
    propertyValue: string;
}

export interface DashboardChart {
    chartId: string;
    column?: number;
    height?: number;
    row?: number;
    width?: number;
}

export interface DashboardColumn {
    chartIds: string[];
    column?: number;
    height?: number;
    width?: number;
}

export interface DashboardEventOverlay {
    color?: string;
    label?: string;
    line?: boolean;
    signal: string;
    sources?: outputs.DashboardEventOverlaySource[];
    type?: string;
}

export interface DashboardEventOverlaySource {
    negated?: boolean;
    property: string;
    values: string[];
}

export interface DashboardFilter {
    applyIfExist?: boolean;
    negated?: boolean;
    property: string;
    values: string[];
}

export interface DashboardGrid {
    chartIds: string[];
    height?: number;
    width?: number;
}

export interface DashboardGroupDashboard {
    configId: string;
    dashboardId: string;
    descriptionOverride?: string;
    filterOverrides?: outputs.DashboardGroupDashboardFilterOverride[];
    nameOverride?: string;
    variableOverrides?: outputs.DashboardGroupDashboardVariableOverride[];
}

export interface DashboardGroupDashboardFilterOverride {
    negated?: boolean;
    property: string;
    values: string[];
}

export interface DashboardGroupDashboardVariableOverride {
    property: string;
    values?: string[];
    valuesSuggesteds?: string[];
}

export interface DashboardGroupImportQualifier {
    filters?: outputs.DashboardGroupImportQualifierFilter[];
    metric?: string;
}

export interface DashboardGroupImportQualifierFilter {
    negated?: boolean;
    property: string;
    values: string[];
}

export interface DashboardGroupPermission {
    actions?: string[];
    principalId: string;
    principalType: string;
}

export interface DashboardPermissions {
    acls?: outputs.DashboardPermissionsAcl[];
    parent?: string;
}

export interface DashboardPermissionsAcl {
    actions?: string[];
    principalId: string;
    principalType: string;
}

export interface DashboardSelectedEventOverlay {
    signal: string;
    sources?: outputs.DashboardSelectedEventOverlaySource[];
    type?: string;
}

export interface DashboardSelectedEventOverlaySource {
    negated?: boolean;
    property: string;
    values: string[];
}

export interface DashboardVariable {
    alias: string;
    applyIfExist?: boolean;
    description?: string;
    property: string;
    replaceOnly?: boolean;
    restrictedSuggestions?: boolean;
    valueRequired?: boolean;
    values?: string[];
    valuesSuggesteds?: string[];
}

export interface DataLinkTargetExternalUrl {
    minimumTimeWindow?: string;
    name: string;
    propertyKeyMapping?: {[key: string]: string};
    timeFormat?: string;
    url: string;
}

export interface DataLinkTargetSignalfxDashboard {
    dashboardGroupId: string;
    dashboardId: string;
    isDefault?: boolean;
    name: string;
}

export interface DataLinkTargetSplunk {
    name: string;
    propertyKeyMapping?: {[key: string]: string};
}

export interface DetectorRule {
    description?: string;
    detectLabel: string;
    disabled?: boolean;
    notifications?: string[];
    parameterizedBody?: string;
    parameterizedSubject?: string;
    runbookUrl?: string;
    severity: string;
    tip?: string;
}

export interface DetectorVizOption {
    color?: string;
    displayName?: string;
    label: string;
    valuePrefix?: string;
    valueSuffix?: string;
    valueUnit?: string;
}

export interface HeatmapChartColorRange {
    color: string;
    maxValue?: number;
    minValue?: number;
}

export interface HeatmapChartColorScale {
    color: string;
    gt?: number;
    gte?: number;
    lt?: number;
    lte?: number;
}

export interface ListChartColorScale {
    color: string;
    gt?: number;
    gte?: number;
    lt?: number;
    lte?: number;
}

export interface ListChartLegendOptionsField {
    enabled?: boolean;
    property: string;
}

export interface ListChartVizOption {
    color?: string;
    displayName?: string;
    label: string;
    valuePrefix?: string;
    valueSuffix?: string;
    valueUnit?: string;
}

export interface MetricRulesetAggregationRule {
    aggregators: outputs.MetricRulesetAggregationRuleAggregator[];
    enabled: boolean;
    matchers: outputs.MetricRulesetAggregationRuleMatcher[];
    name?: string;
}

export interface MetricRulesetAggregationRuleAggregator {
    dimensions: string[];
    dropDimensions: boolean;
    outputName: string;
    type: string;
}

export interface MetricRulesetAggregationRuleMatcher {
    filters?: outputs.MetricRulesetAggregationRuleMatcherFilter[];
    type: string;
}

export interface MetricRulesetAggregationRuleMatcherFilter {
    not: boolean;
    property: string;
    propertyValues: string[];
}

export interface MetricRulesetRoutingRule {
    destination: string;
}

export interface OrgTokenDpmLimits {
    dpmLimit: number;
    dpmNotificationThreshold?: number;
}

export interface OrgTokenHostOrUsageLimits {
    containerLimit?: number;
    containerNotificationThreshold?: number;
    customMetricsLimit?: number;
    customMetricsNotificationThreshold?: number;
    highResMetricsLimit?: number;
    highResMetricsNotificationThreshold?: number;
    hostLimit?: number;
    hostNotificationThreshold?: number;
}

export interface SingleValueChartColorScale {
    color: string;
    gt?: number;
    gte?: number;
    lt?: number;
    lte?: number;
}

export interface SingleValueChartVizOption {
    color?: string;
    displayName?: string;
    label: string;
    valuePrefix?: string;
    valueSuffix?: string;
    valueUnit?: string;
}

export interface TableChartVizOption {
    color?: string;
    displayName?: string;
    label: string;
    valuePrefix?: string;
    valueSuffix?: string;
    valueUnit?: string;
}

export interface TimeChartAxisLeft {
    highWatermark?: number;
    highWatermarkLabel?: string;
    label?: string;
    lowWatermark?: number;
    lowWatermarkLabel?: string;
    maxValue?: number;
    minValue?: number;
    watermarks?: outputs.TimeChartAxisLeftWatermark[];
}

export interface TimeChartAxisLeftWatermark {
    label?: string;
    value: number;
}

export interface TimeChartAxisRight {
    highWatermark?: number;
    highWatermarkLabel?: string;
    label?: string;
    lowWatermark?: number;
    lowWatermarkLabel?: string;
    maxValue?: number;
    minValue?: number;
    watermarks?: outputs.TimeChartAxisRightWatermark[];
}

export interface TimeChartAxisRightWatermark {
    label?: string;
    value: number;
}

export interface TimeChartEventOption {
    color?: string;
    displayName?: string;
    label: string;
}

export interface TimeChartHistogramOption {
    colorTheme?: string;
}

export interface TimeChartLegendOptionsField {
    enabled?: boolean;
    property: string;
}

export interface TimeChartVizOption {
    axis?: string;
    color?: string;
    displayName?: string;
    label: string;
    plotType?: string;
    valuePrefix?: string;
    valueSuffix?: string;
    valueUnit?: string;
}

export interface WebhookIntegrationHeader {
    headerKey: string;
    headerValue: string;
}

export namespace aws {
    export interface IntegrationCustomNamespaceSyncRule {
        defaultAction?: string;
        filterAction?: string;
        filterSource?: string;
        namespace: string;
    }

    export interface IntegrationMetricStatsToSync {
        metric: string;
        namespace: string;
        stats: string[];
    }

    export interface IntegrationNamespaceSyncRule {
        defaultAction?: string;
        filterAction?: string;
        filterSource?: string;
        namespace: string;
    }

}

export namespace azure {
    export interface IntegrationCustomNamespacesPerService {
        namespaces: string[];
        service: string;
    }

    export interface IntegrationResourceFilterRule {
        filterSource: string;
    }

}

export namespace gcp {
    export interface IntegrationProjectServiceKey {
        projectId: string;
        projectKey: string;
    }

}

export namespace log {
    export interface ViewColumn {
        name: string;
    }

    export interface ViewSortOption {
        descending: boolean;
        field: string;
    }

}
