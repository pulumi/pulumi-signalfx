// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * Provides a SignalFx resource for managing alert muting rules. See [Mute Notifications](https://docs.signalfx.com/en/latest/detect-alert/mute-notifications.html) for more information.
 *
 * > **WARNING** SignalFx does not allow the start time of a **currently active** muting rule to be modified. As such, attempting to modify a currently active rule will destroy the existing rule and create a new rule. This may result in the emission of notifications.
 *
 * ## Example Usage
 *
 *
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as signalfx from "@pulumi/signalfx";
 *
 * const roolMooterOne = new signalfx.AlertMutingRule("roolMooterOne", {
 *     description: "mooted it NEW",
 *     startTime: 1573063243,
 *     stopTime: 0,
 *     detectors: [signalfx_detector.some_detector_id],
 *     filter: [{
 *         property: "foo",
 *         propertyValue: "bar",
 *     }],
 * });
 * ```
 */
export class AlertMutingRule extends pulumi.CustomResource {
    /**
     * Get an existing AlertMutingRule resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: AlertMutingRuleState, opts?: pulumi.CustomResourceOptions): AlertMutingRule {
        return new AlertMutingRule(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'signalfx:index/alertMutingRule:AlertMutingRule';

    /**
     * Returns true if the given object is an instance of AlertMutingRule.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is AlertMutingRule {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === AlertMutingRule.__pulumiType;
    }

    /**
     * The description for this muting rule
     */
    public readonly description!: pulumi.Output<string>;
    /**
     * A convenience attribute that associated this muting rule with specific detector ids.
     */
    public readonly detectors!: pulumi.Output<string[] | undefined>;
    public /*out*/ readonly effectiveStartTime!: pulumi.Output<number>;
    /**
     * Filters for this rule. See [Creating muting rules from scratch](https://docs.signalfx.com/en/latest/detect-alert/mute-notifications.html#rule-from-scratch) for more information.
     */
    public readonly filters!: pulumi.Output<outputs.AlertMutingRuleFilter[]>;
    /**
     * Starting time of an alert muting rule as a Unit time stamp in seconds.
     */
    public readonly startTime!: pulumi.Output<number>;
    /**
     * Starting time of an alert muting rule as a Unix time stamp in seconds.
     */
    public readonly stopTime!: pulumi.Output<number | undefined>;

    /**
     * Create a AlertMutingRule resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: AlertMutingRuleArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: AlertMutingRuleArgs | AlertMutingRuleState, opts?: pulumi.CustomResourceOptions) {
        let inputs: pulumi.Inputs = {};
        if (opts && opts.id) {
            const state = argsOrState as AlertMutingRuleState | undefined;
            inputs["description"] = state ? state.description : undefined;
            inputs["detectors"] = state ? state.detectors : undefined;
            inputs["effectiveStartTime"] = state ? state.effectiveStartTime : undefined;
            inputs["filters"] = state ? state.filters : undefined;
            inputs["startTime"] = state ? state.startTime : undefined;
            inputs["stopTime"] = state ? state.stopTime : undefined;
        } else {
            const args = argsOrState as AlertMutingRuleArgs | undefined;
            if (!args || args.description === undefined) {
                throw new Error("Missing required property 'description'");
            }
            if (!args || args.filters === undefined) {
                throw new Error("Missing required property 'filters'");
            }
            if (!args || args.startTime === undefined) {
                throw new Error("Missing required property 'startTime'");
            }
            inputs["description"] = args ? args.description : undefined;
            inputs["detectors"] = args ? args.detectors : undefined;
            inputs["filters"] = args ? args.filters : undefined;
            inputs["startTime"] = args ? args.startTime : undefined;
            inputs["stopTime"] = args ? args.stopTime : undefined;
            inputs["effectiveStartTime"] = undefined /*out*/;
        }
        if (!opts) {
            opts = {}
        }

        if (!opts.version) {
            opts.version = utilities.getVersion();
        }
        super(AlertMutingRule.__pulumiType, name, inputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering AlertMutingRule resources.
 */
export interface AlertMutingRuleState {
    /**
     * The description for this muting rule
     */
    readonly description?: pulumi.Input<string>;
    /**
     * A convenience attribute that associated this muting rule with specific detector ids.
     */
    readonly detectors?: pulumi.Input<pulumi.Input<string>[]>;
    readonly effectiveStartTime?: pulumi.Input<number>;
    /**
     * Filters for this rule. See [Creating muting rules from scratch](https://docs.signalfx.com/en/latest/detect-alert/mute-notifications.html#rule-from-scratch) for more information.
     */
    readonly filters?: pulumi.Input<pulumi.Input<inputs.AlertMutingRuleFilter>[]>;
    /**
     * Starting time of an alert muting rule as a Unit time stamp in seconds.
     */
    readonly startTime?: pulumi.Input<number>;
    /**
     * Starting time of an alert muting rule as a Unix time stamp in seconds.
     */
    readonly stopTime?: pulumi.Input<number>;
}

/**
 * The set of arguments for constructing a AlertMutingRule resource.
 */
export interface AlertMutingRuleArgs {
    /**
     * The description for this muting rule
     */
    readonly description: pulumi.Input<string>;
    /**
     * A convenience attribute that associated this muting rule with specific detector ids.
     */
    readonly detectors?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Filters for this rule. See [Creating muting rules from scratch](https://docs.signalfx.com/en/latest/detect-alert/mute-notifications.html#rule-from-scratch) for more information.
     */
    readonly filters: pulumi.Input<pulumi.Input<inputs.AlertMutingRuleFilter>[]>;
    /**
     * Starting time of an alert muting rule as a Unit time stamp in seconds.
     */
    readonly startTime: pulumi.Input<number>;
    /**
     * Starting time of an alert muting rule as a Unix time stamp in seconds.
     */
    readonly stopTime?: pulumi.Input<number>;
}
