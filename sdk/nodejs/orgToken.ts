// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * Manage SignalFx org tokens.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as signalfx from "@pulumi/signalfx";
 *
 * const myteamkey0 = new signalfx.OrgToken("myteamkey0", {
 *     description: "My team's rad key",
 *     hostOrUsageLimits: {
 *         containerLimit: 200,
 *         containerNotificationThreshold: 180,
 *         customMetricsLimit: 1000,
 *         customMetricsNotificationThreshold: 900,
 *         highResMetricsLimit: 1000,
 *         highResMetricsNotificationThreshold: 900,
 *         hostLimit: 100,
 *         hostNotificationThreshold: 90,
 *     },
 *     notifications: ["Email,foo-alerts@bar.com"],
 * });
 * ```
 */
export class OrgToken extends pulumi.CustomResource {
    /**
     * Get an existing OrgToken resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: OrgTokenState, opts?: pulumi.CustomResourceOptions): OrgToken {
        return new OrgToken(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'signalfx:index/orgToken:OrgToken';

    /**
     * Returns true if the given object is an instance of OrgToken.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is OrgToken {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === OrgToken.__pulumiType;
    }

    /**
     * Description of the token.
     */
    public readonly description!: pulumi.Output<string | undefined>;
    /**
     * Flag that controls enabling the token. If set to `true`, the token is disabled, and you can't use it for authentication. Defaults to `false`.
     */
    public readonly disabled!: pulumi.Output<boolean | undefined>;
    /**
     * Specify DPM-based limits for this token.
     */
    public readonly dpmLimits!: pulumi.Output<outputs.OrgTokenDpmLimits | undefined>;
    /**
     * Specify Usage-based limits for this token.
     */
    public readonly hostOrUsageLimits!: pulumi.Output<outputs.OrgTokenHostOrUsageLimits | undefined>;
    /**
     * Name of the token.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * Where to send notifications about this token's limits. Please consult the `Notification Format` laid out in detectors.
     */
    public readonly notifications!: pulumi.Output<string[] | undefined>;
    /**
     * The secret token created by the API. You cannot set this value.
     */
    public /*out*/ readonly secret!: pulumi.Output<string>;

    /**
     * Create a OrgToken resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: OrgTokenArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: OrgTokenArgs | OrgTokenState, opts?: pulumi.CustomResourceOptions) {
        let inputs: pulumi.Inputs = {};
        if (opts && opts.id) {
            const state = argsOrState as OrgTokenState | undefined;
            inputs["description"] = state ? state.description : undefined;
            inputs["disabled"] = state ? state.disabled : undefined;
            inputs["dpmLimits"] = state ? state.dpmLimits : undefined;
            inputs["hostOrUsageLimits"] = state ? state.hostOrUsageLimits : undefined;
            inputs["name"] = state ? state.name : undefined;
            inputs["notifications"] = state ? state.notifications : undefined;
            inputs["secret"] = state ? state.secret : undefined;
        } else {
            const args = argsOrState as OrgTokenArgs | undefined;
            inputs["description"] = args ? args.description : undefined;
            inputs["disabled"] = args ? args.disabled : undefined;
            inputs["dpmLimits"] = args ? args.dpmLimits : undefined;
            inputs["hostOrUsageLimits"] = args ? args.hostOrUsageLimits : undefined;
            inputs["name"] = args ? args.name : undefined;
            inputs["notifications"] = args ? args.notifications : undefined;
            inputs["secret"] = undefined /*out*/;
        }
        if (!opts) {
            opts = {}
        }

        if (!opts.version) {
            opts.version = utilities.getVersion();
        }
        super(OrgToken.__pulumiType, name, inputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering OrgToken resources.
 */
export interface OrgTokenState {
    /**
     * Description of the token.
     */
    readonly description?: pulumi.Input<string>;
    /**
     * Flag that controls enabling the token. If set to `true`, the token is disabled, and you can't use it for authentication. Defaults to `false`.
     */
    readonly disabled?: pulumi.Input<boolean>;
    /**
     * Specify DPM-based limits for this token.
     */
    readonly dpmLimits?: pulumi.Input<inputs.OrgTokenDpmLimits>;
    /**
     * Specify Usage-based limits for this token.
     */
    readonly hostOrUsageLimits?: pulumi.Input<inputs.OrgTokenHostOrUsageLimits>;
    /**
     * Name of the token.
     */
    readonly name?: pulumi.Input<string>;
    /**
     * Where to send notifications about this token's limits. Please consult the `Notification Format` laid out in detectors.
     */
    readonly notifications?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The secret token created by the API. You cannot set this value.
     */
    readonly secret?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a OrgToken resource.
 */
export interface OrgTokenArgs {
    /**
     * Description of the token.
     */
    readonly description?: pulumi.Input<string>;
    /**
     * Flag that controls enabling the token. If set to `true`, the token is disabled, and you can't use it for authentication. Defaults to `false`.
     */
    readonly disabled?: pulumi.Input<boolean>;
    /**
     * Specify DPM-based limits for this token.
     */
    readonly dpmLimits?: pulumi.Input<inputs.OrgTokenDpmLimits>;
    /**
     * Specify Usage-based limits for this token.
     */
    readonly hostOrUsageLimits?: pulumi.Input<inputs.OrgTokenHostOrUsageLimits>;
    /**
     * Name of the token.
     */
    readonly name?: pulumi.Input<string>;
    /**
     * Where to send notifications about this token's limits. Please consult the `Notification Format` laid out in detectors.
     */
    readonly notifications?: pulumi.Input<pulumi.Input<string>[]>;
}
