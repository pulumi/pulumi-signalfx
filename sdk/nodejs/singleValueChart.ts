// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * This chart type displays a single number in a large font, representing the current value of a single metric on a plot line.
 *
 * If the time period is in the past, the number represents the value of the metric near the end of the time period.
 *
 * ## Example
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as signalfx from "@pulumi/signalfx";
 *
 * const mysvchart0 = new signalfx.SingleValueChart("mysvchart0", {
 *     name: "CPU Total Idle - Single Value",
 *     programText: `myfilters = filter("cluster_name", "prod") and filter("role", "search")
 * data("cpu.total.idle", filter=myfilters).publish()
 * `,
 *     description: "Very cool Single Value Chart",
 *     colorBy: "Dimension",
 *     maxDelay: 2,
 *     refreshInterval: 1,
 *     maxPrecision: 2,
 *     isTimestampHidden: true,
 * });
 * ```
 */
export class SingleValueChart extends pulumi.CustomResource {
    /**
     * Get an existing SingleValueChart resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: SingleValueChartState, opts?: pulumi.CustomResourceOptions): SingleValueChart {
        return new SingleValueChart(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'signalfx:index/singleValueChart:SingleValueChart';

    /**
     * Returns true if the given object is an instance of SingleValueChart.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is SingleValueChart {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === SingleValueChart.__pulumiType;
    }

    /**
     * Must be `"Dimension"`, `"Scale"` or `"Metric"`. `"Dimension"` by default.
     */
    declare public readonly colorBy: pulumi.Output<string | undefined>;
    /**
     * Single color range including both the color to display for that range and the borders of the range. Example: `[{ gt = 60, color = "blue" }, { lte = 60, color = "yellow" }]`. Look at this [link](https://docs.signalfx.com/en/latest/charts/chart-options-tab.html).
     */
    declare public readonly colorScales: pulumi.Output<outputs.SingleValueChartColorScale[] | undefined>;
    /**
     * Description of the chart.
     */
    declare public readonly description: pulumi.Output<string | undefined>;
    /**
     * Whether to hide the timestamp in the chart. `false` by default.
     */
    declare public readonly isTimestampHidden: pulumi.Output<boolean | undefined>;
    /**
     * How long (in seconds) to wait for late datapoints
     */
    declare public readonly maxDelay: pulumi.Output<number | undefined>;
    /**
     * The maximum precision to for value displayed.
     */
    declare public readonly maxPrecision: pulumi.Output<number | undefined>;
    /**
     * Name of the chart.
     */
    declare public readonly name: pulumi.Output<string>;
    /**
     * Signalflow program text for the chart. More info [in the Splunk Observability Cloud docs](https://dev.splunk.com/observability/docs/signalflow/).
     */
    declare public readonly programText: pulumi.Output<string>;
    /**
     * How often (in seconds) to refresh the value.
     */
    declare public readonly refreshInterval: pulumi.Output<number | undefined>;
    /**
     * The type of secondary visualization. Can be `None`, `Radial`, `Linear`, or `Sparkline`. If unset, the Splunk Observability Cloud default is used (`None`).
     */
    declare public readonly secondaryVisualization: pulumi.Output<string | undefined>;
    /**
     * Whether to show a trend line below the current value. `false` by default.
     */
    declare public readonly showSparkLine: pulumi.Output<boolean | undefined>;
    /**
     * Tags associated with the resource
     */
    declare public readonly tags: pulumi.Output<string[] | undefined>;
    /**
     * The property value is a string that denotes the geographic region associated with the time zone, (e.g. Australia/Sydney)
     */
    declare public readonly timezone: pulumi.Output<string | undefined>;
    /**
     * Must be `"Metric"` or `"Binary"`. `"Metric"` by default.
     */
    declare public readonly unitPrefix: pulumi.Output<string | undefined>;
    /**
     * The URL of the chart.
     */
    declare public /*out*/ readonly url: pulumi.Output<string>;
    /**
     * Plot-level customization options, associated with a publish statement.
     */
    declare public readonly vizOptions: pulumi.Output<outputs.SingleValueChartVizOption[] | undefined>;

    /**
     * Create a SingleValueChart resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: SingleValueChartArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: SingleValueChartArgs | SingleValueChartState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as SingleValueChartState | undefined;
            resourceInputs["colorBy"] = state?.colorBy;
            resourceInputs["colorScales"] = state?.colorScales;
            resourceInputs["description"] = state?.description;
            resourceInputs["isTimestampHidden"] = state?.isTimestampHidden;
            resourceInputs["maxDelay"] = state?.maxDelay;
            resourceInputs["maxPrecision"] = state?.maxPrecision;
            resourceInputs["name"] = state?.name;
            resourceInputs["programText"] = state?.programText;
            resourceInputs["refreshInterval"] = state?.refreshInterval;
            resourceInputs["secondaryVisualization"] = state?.secondaryVisualization;
            resourceInputs["showSparkLine"] = state?.showSparkLine;
            resourceInputs["tags"] = state?.tags;
            resourceInputs["timezone"] = state?.timezone;
            resourceInputs["unitPrefix"] = state?.unitPrefix;
            resourceInputs["url"] = state?.url;
            resourceInputs["vizOptions"] = state?.vizOptions;
        } else {
            const args = argsOrState as SingleValueChartArgs | undefined;
            if (args?.programText === undefined && !opts.urn) {
                throw new Error("Missing required property 'programText'");
            }
            resourceInputs["colorBy"] = args?.colorBy;
            resourceInputs["colorScales"] = args?.colorScales;
            resourceInputs["description"] = args?.description;
            resourceInputs["isTimestampHidden"] = args?.isTimestampHidden;
            resourceInputs["maxDelay"] = args?.maxDelay;
            resourceInputs["maxPrecision"] = args?.maxPrecision;
            resourceInputs["name"] = args?.name;
            resourceInputs["programText"] = args?.programText;
            resourceInputs["refreshInterval"] = args?.refreshInterval;
            resourceInputs["secondaryVisualization"] = args?.secondaryVisualization;
            resourceInputs["showSparkLine"] = args?.showSparkLine;
            resourceInputs["tags"] = args?.tags;
            resourceInputs["timezone"] = args?.timezone;
            resourceInputs["unitPrefix"] = args?.unitPrefix;
            resourceInputs["vizOptions"] = args?.vizOptions;
            resourceInputs["url"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(SingleValueChart.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering SingleValueChart resources.
 */
export interface SingleValueChartState {
    /**
     * Must be `"Dimension"`, `"Scale"` or `"Metric"`. `"Dimension"` by default.
     */
    colorBy?: pulumi.Input<string>;
    /**
     * Single color range including both the color to display for that range and the borders of the range. Example: `[{ gt = 60, color = "blue" }, { lte = 60, color = "yellow" }]`. Look at this [link](https://docs.signalfx.com/en/latest/charts/chart-options-tab.html).
     */
    colorScales?: pulumi.Input<pulumi.Input<inputs.SingleValueChartColorScale>[]>;
    /**
     * Description of the chart.
     */
    description?: pulumi.Input<string>;
    /**
     * Whether to hide the timestamp in the chart. `false` by default.
     */
    isTimestampHidden?: pulumi.Input<boolean>;
    /**
     * How long (in seconds) to wait for late datapoints
     */
    maxDelay?: pulumi.Input<number>;
    /**
     * The maximum precision to for value displayed.
     */
    maxPrecision?: pulumi.Input<number>;
    /**
     * Name of the chart.
     */
    name?: pulumi.Input<string>;
    /**
     * Signalflow program text for the chart. More info [in the Splunk Observability Cloud docs](https://dev.splunk.com/observability/docs/signalflow/).
     */
    programText?: pulumi.Input<string>;
    /**
     * How often (in seconds) to refresh the value.
     */
    refreshInterval?: pulumi.Input<number>;
    /**
     * The type of secondary visualization. Can be `None`, `Radial`, `Linear`, or `Sparkline`. If unset, the Splunk Observability Cloud default is used (`None`).
     */
    secondaryVisualization?: pulumi.Input<string>;
    /**
     * Whether to show a trend line below the current value. `false` by default.
     */
    showSparkLine?: pulumi.Input<boolean>;
    /**
     * Tags associated with the resource
     */
    tags?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The property value is a string that denotes the geographic region associated with the time zone, (e.g. Australia/Sydney)
     */
    timezone?: pulumi.Input<string>;
    /**
     * Must be `"Metric"` or `"Binary"`. `"Metric"` by default.
     */
    unitPrefix?: pulumi.Input<string>;
    /**
     * The URL of the chart.
     */
    url?: pulumi.Input<string>;
    /**
     * Plot-level customization options, associated with a publish statement.
     */
    vizOptions?: pulumi.Input<pulumi.Input<inputs.SingleValueChartVizOption>[]>;
}

/**
 * The set of arguments for constructing a SingleValueChart resource.
 */
export interface SingleValueChartArgs {
    /**
     * Must be `"Dimension"`, `"Scale"` or `"Metric"`. `"Dimension"` by default.
     */
    colorBy?: pulumi.Input<string>;
    /**
     * Single color range including both the color to display for that range and the borders of the range. Example: `[{ gt = 60, color = "blue" }, { lte = 60, color = "yellow" }]`. Look at this [link](https://docs.signalfx.com/en/latest/charts/chart-options-tab.html).
     */
    colorScales?: pulumi.Input<pulumi.Input<inputs.SingleValueChartColorScale>[]>;
    /**
     * Description of the chart.
     */
    description?: pulumi.Input<string>;
    /**
     * Whether to hide the timestamp in the chart. `false` by default.
     */
    isTimestampHidden?: pulumi.Input<boolean>;
    /**
     * How long (in seconds) to wait for late datapoints
     */
    maxDelay?: pulumi.Input<number>;
    /**
     * The maximum precision to for value displayed.
     */
    maxPrecision?: pulumi.Input<number>;
    /**
     * Name of the chart.
     */
    name?: pulumi.Input<string>;
    /**
     * Signalflow program text for the chart. More info [in the Splunk Observability Cloud docs](https://dev.splunk.com/observability/docs/signalflow/).
     */
    programText: pulumi.Input<string>;
    /**
     * How often (in seconds) to refresh the value.
     */
    refreshInterval?: pulumi.Input<number>;
    /**
     * The type of secondary visualization. Can be `None`, `Radial`, `Linear`, or `Sparkline`. If unset, the Splunk Observability Cloud default is used (`None`).
     */
    secondaryVisualization?: pulumi.Input<string>;
    /**
     * Whether to show a trend line below the current value. `false` by default.
     */
    showSparkLine?: pulumi.Input<boolean>;
    /**
     * Tags associated with the resource
     */
    tags?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The property value is a string that denotes the geographic region associated with the time zone, (e.g. Australia/Sydney)
     */
    timezone?: pulumi.Input<string>;
    /**
     * Must be `"Metric"` or `"Binary"`. `"Metric"` by default.
     */
    unitPrefix?: pulumi.Input<string>;
    /**
     * Plot-level customization options, associated with a publish statement.
     */
    vizOptions?: pulumi.Input<pulumi.Input<inputs.SingleValueChartVizOption>[]>;
}
