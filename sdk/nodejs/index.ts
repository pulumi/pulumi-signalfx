// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

// Export members:
export * from "./alertMutingRule";
export * from "./dashboard";
export * from "./dashboardGroup";
export * from "./dataLink";
export * from "./detector";
export * from "./eventFeedChart";
export * from "./getAwsServices";
export * from "./getAzureServices";
export * from "./getDimensionValues";
export * from "./heatmapChart";
export * from "./listChart";
export * from "./orgToken";
export * from "./provider";
export * from "./singleValueChart";
export * from "./team";
export * from "./textChart";
export * from "./timeChart";
export * from "./webhookIntegration";

// Export sub-modules:
import * as aws from "./aws";
import * as azure from "./azure";
import * as config from "./config";
import * as gcp from "./gcp";
import * as jira from "./jira";
import * as opsgenie from "./opsgenie";
import * as pagerduty from "./pagerduty";
import * as servicenow from "./servicenow";
import * as slack from "./slack";
import * as types from "./types";
import * as victorops from "./victorops";

export {
    aws,
    azure,
    config,
    gcp,
    jira,
    opsgenie,
    pagerduty,
    servicenow,
    slack,
    types,
    victorops,
};

// Import resources to register:
import { AlertMutingRule } from "./alertMutingRule";
import { Dashboard } from "./dashboard";
import { DashboardGroup } from "./dashboardGroup";
import { DataLink } from "./dataLink";
import { Detector } from "./detector";
import { EventFeedChart } from "./eventFeedChart";
import { HeatmapChart } from "./heatmapChart";
import { ListChart } from "./listChart";
import { OrgToken } from "./orgToken";
import { SingleValueChart } from "./singleValueChart";
import { Team } from "./team";
import { TextChart } from "./textChart";
import { TimeChart } from "./timeChart";
import { WebhookIntegration } from "./webhookIntegration";

const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "signalfx:index/alertMutingRule:AlertMutingRule":
                return new AlertMutingRule(name, <any>undefined, { urn })
            case "signalfx:index/dashboard:Dashboard":
                return new Dashboard(name, <any>undefined, { urn })
            case "signalfx:index/dashboardGroup:DashboardGroup":
                return new DashboardGroup(name, <any>undefined, { urn })
            case "signalfx:index/dataLink:DataLink":
                return new DataLink(name, <any>undefined, { urn })
            case "signalfx:index/detector:Detector":
                return new Detector(name, <any>undefined, { urn })
            case "signalfx:index/eventFeedChart:EventFeedChart":
                return new EventFeedChart(name, <any>undefined, { urn })
            case "signalfx:index/heatmapChart:HeatmapChart":
                return new HeatmapChart(name, <any>undefined, { urn })
            case "signalfx:index/listChart:ListChart":
                return new ListChart(name, <any>undefined, { urn })
            case "signalfx:index/orgToken:OrgToken":
                return new OrgToken(name, <any>undefined, { urn })
            case "signalfx:index/singleValueChart:SingleValueChart":
                return new SingleValueChart(name, <any>undefined, { urn })
            case "signalfx:index/team:Team":
                return new Team(name, <any>undefined, { urn })
            case "signalfx:index/textChart:TextChart":
                return new TextChart(name, <any>undefined, { urn })
            case "signalfx:index/timeChart:TimeChart":
                return new TimeChart(name, <any>undefined, { urn })
            case "signalfx:index/webhookIntegration:WebhookIntegration":
                return new WebhookIntegration(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("signalfx", "index/alertMutingRule", _module)
pulumi.runtime.registerResourceModule("signalfx", "index/dashboard", _module)
pulumi.runtime.registerResourceModule("signalfx", "index/dashboardGroup", _module)
pulumi.runtime.registerResourceModule("signalfx", "index/dataLink", _module)
pulumi.runtime.registerResourceModule("signalfx", "index/detector", _module)
pulumi.runtime.registerResourceModule("signalfx", "index/eventFeedChart", _module)
pulumi.runtime.registerResourceModule("signalfx", "index/heatmapChart", _module)
pulumi.runtime.registerResourceModule("signalfx", "index/listChart", _module)
pulumi.runtime.registerResourceModule("signalfx", "index/orgToken", _module)
pulumi.runtime.registerResourceModule("signalfx", "index/singleValueChart", _module)
pulumi.runtime.registerResourceModule("signalfx", "index/team", _module)
pulumi.runtime.registerResourceModule("signalfx", "index/textChart", _module)
pulumi.runtime.registerResourceModule("signalfx", "index/timeChart", _module)
pulumi.runtime.registerResourceModule("signalfx", "index/webhookIntegration", _module)

import { Provider } from "./provider";

pulumi.runtime.registerResourcePackage("signalfx", {
    version: utilities.getVersion(),
    constructProvider: (name: string, type: string, urn: string): pulumi.ProviderResource => {
        if (type !== "pulumi:providers:signalfx") {
            throw new Error(`unknown provider type ${type}`);
        }
        return new Provider(name, <any>undefined, { urn });
    },
});
