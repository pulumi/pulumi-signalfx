// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.signalfx.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class DashboardChart {
    /**
     * @return ID of the chart to display.
     * 
     */
    private final String chartId;
    /**
     * @return Column number for the layout.
     * 
     */
    private final @Nullable Integer column;
    /**
     * @return How many rows every chart should take up (greater than or equal to 1). 1 by default.
     * 
     */
    private final @Nullable Integer height;
    /**
     * @return The row to show the chart in (zero-based); if `height &gt; 1`, this value represents the topmost row of the chart (greater than or equal to `0`).
     * 
     */
    private final @Nullable Integer row;
    /**
     * @return How many columns (out of a total of `12`) every chart should take up (between `1` and `12`). `12` by default.
     * 
     */
    private final @Nullable Integer width;

    @CustomType.Constructor
    private DashboardChart(
        @CustomType.Parameter("chartId") String chartId,
        @CustomType.Parameter("column") @Nullable Integer column,
        @CustomType.Parameter("height") @Nullable Integer height,
        @CustomType.Parameter("row") @Nullable Integer row,
        @CustomType.Parameter("width") @Nullable Integer width) {
        this.chartId = chartId;
        this.column = column;
        this.height = height;
        this.row = row;
        this.width = width;
    }

    /**
     * @return ID of the chart to display.
     * 
     */
    public String chartId() {
        return this.chartId;
    }
    /**
     * @return Column number for the layout.
     * 
     */
    public Optional<Integer> column() {
        return Optional.ofNullable(this.column);
    }
    /**
     * @return How many rows every chart should take up (greater than or equal to 1). 1 by default.
     * 
     */
    public Optional<Integer> height() {
        return Optional.ofNullable(this.height);
    }
    /**
     * @return The row to show the chart in (zero-based); if `height &gt; 1`, this value represents the topmost row of the chart (greater than or equal to `0`).
     * 
     */
    public Optional<Integer> row() {
        return Optional.ofNullable(this.row);
    }
    /**
     * @return How many columns (out of a total of `12`) every chart should take up (between `1` and `12`). `12` by default.
     * 
     */
    public Optional<Integer> width() {
        return Optional.ofNullable(this.width);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(DashboardChart defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private String chartId;
        private @Nullable Integer column;
        private @Nullable Integer height;
        private @Nullable Integer row;
        private @Nullable Integer width;

        public Builder() {
    	      // Empty
        }

        public Builder(DashboardChart defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.chartId = defaults.chartId;
    	      this.column = defaults.column;
    	      this.height = defaults.height;
    	      this.row = defaults.row;
    	      this.width = defaults.width;
        }

        public Builder chartId(String chartId) {
            this.chartId = Objects.requireNonNull(chartId);
            return this;
        }
        public Builder column(@Nullable Integer column) {
            this.column = column;
            return this;
        }
        public Builder height(@Nullable Integer height) {
            this.height = height;
            return this;
        }
        public Builder row(@Nullable Integer row) {
            this.row = row;
            return this;
        }
        public Builder width(@Nullable Integer width) {
            this.width = width;
            return this;
        }        public DashboardChart build() {
            return new DashboardChart(chartId, column, height, row, width);
        }
    }
}
