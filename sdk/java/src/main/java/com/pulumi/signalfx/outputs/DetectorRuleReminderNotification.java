// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.signalfx.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class DetectorRuleReminderNotification {
    /**
     * @return The interval at which you want to receive the notifications, in milliseconds.
     * 
     */
    private Integer intervalMs;
    /**
     * @return The duration during which repeat notifications are sent, in milliseconds.
     * 
     */
    private @Nullable Integer timeoutMs;
    /**
     * @return Type of reminder notification. Currently, the only supported value is TIMEOUT.
     * 
     */
    private String type;

    private DetectorRuleReminderNotification() {}
    /**
     * @return The interval at which you want to receive the notifications, in milliseconds.
     * 
     */
    public Integer intervalMs() {
        return this.intervalMs;
    }
    /**
     * @return The duration during which repeat notifications are sent, in milliseconds.
     * 
     */
    public Optional<Integer> timeoutMs() {
        return Optional.ofNullable(this.timeoutMs);
    }
    /**
     * @return Type of reminder notification. Currently, the only supported value is TIMEOUT.
     * 
     */
    public String type() {
        return this.type;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(DetectorRuleReminderNotification defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private Integer intervalMs;
        private @Nullable Integer timeoutMs;
        private String type;
        public Builder() {}
        public Builder(DetectorRuleReminderNotification defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.intervalMs = defaults.intervalMs;
    	      this.timeoutMs = defaults.timeoutMs;
    	      this.type = defaults.type;
        }

        @CustomType.Setter
        public Builder intervalMs(Integer intervalMs) {
            if (intervalMs == null) {
              throw new MissingRequiredPropertyException("DetectorRuleReminderNotification", "intervalMs");
            }
            this.intervalMs = intervalMs;
            return this;
        }
        @CustomType.Setter
        public Builder timeoutMs(@Nullable Integer timeoutMs) {

            this.timeoutMs = timeoutMs;
            return this;
        }
        @CustomType.Setter
        public Builder type(String type) {
            if (type == null) {
              throw new MissingRequiredPropertyException("DetectorRuleReminderNotification", "type");
            }
            this.type = type;
            return this;
        }
        public DetectorRuleReminderNotification build() {
            final var _resultValue = new DetectorRuleReminderNotification();
            _resultValue.intervalMs = intervalMs;
            _resultValue.timeoutMs = timeoutMs;
            _resultValue.type = type;
            return _resultValue;
        }
    }
}
