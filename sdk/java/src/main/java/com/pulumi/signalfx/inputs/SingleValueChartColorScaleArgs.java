// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.signalfx.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Double;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class SingleValueChartColorScaleArgs extends com.pulumi.resources.ResourceArgs {

    public static final SingleValueChartColorScaleArgs Empty = new SingleValueChartColorScaleArgs();

    @Import(name="color", required=true)
    private Output<String> color;

    public Output<String> color() {
        return this.color;
    }

    @Import(name="gt")
    private @Nullable Output<Double> gt;

    public Optional<Output<Double>> gt() {
        return Optional.ofNullable(this.gt);
    }

    @Import(name="gte")
    private @Nullable Output<Double> gte;

    public Optional<Output<Double>> gte() {
        return Optional.ofNullable(this.gte);
    }

    @Import(name="lt")
    private @Nullable Output<Double> lt;

    public Optional<Output<Double>> lt() {
        return Optional.ofNullable(this.lt);
    }

    @Import(name="lte")
    private @Nullable Output<Double> lte;

    public Optional<Output<Double>> lte() {
        return Optional.ofNullable(this.lte);
    }

    private SingleValueChartColorScaleArgs() {}

    private SingleValueChartColorScaleArgs(SingleValueChartColorScaleArgs $) {
        this.color = $.color;
        this.gt = $.gt;
        this.gte = $.gte;
        this.lt = $.lt;
        this.lte = $.lte;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(SingleValueChartColorScaleArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private SingleValueChartColorScaleArgs $;

        public Builder() {
            $ = new SingleValueChartColorScaleArgs();
        }

        public Builder(SingleValueChartColorScaleArgs defaults) {
            $ = new SingleValueChartColorScaleArgs(Objects.requireNonNull(defaults));
        }

        public Builder color(Output<String> color) {
            $.color = color;
            return this;
        }

        public Builder color(String color) {
            return color(Output.of(color));
        }

        public Builder gt(@Nullable Output<Double> gt) {
            $.gt = gt;
            return this;
        }

        public Builder gt(Double gt) {
            return gt(Output.of(gt));
        }

        public Builder gte(@Nullable Output<Double> gte) {
            $.gte = gte;
            return this;
        }

        public Builder gte(Double gte) {
            return gte(Output.of(gte));
        }

        public Builder lt(@Nullable Output<Double> lt) {
            $.lt = lt;
            return this;
        }

        public Builder lt(Double lt) {
            return lt(Output.of(lt));
        }

        public Builder lte(@Nullable Output<Double> lte) {
            $.lte = lte;
            return this;
        }

        public Builder lte(Double lte) {
            return lte(Output.of(lte));
        }

        public SingleValueChartColorScaleArgs build() {
            if ($.color == null) {
                throw new MissingRequiredPropertyException("SingleValueChartColorScaleArgs", "color");
            }
            return $;
        }
    }

}
