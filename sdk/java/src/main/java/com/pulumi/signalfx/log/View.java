// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.signalfx.log;

import com.pulumi.core.Alias;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import com.pulumi.signalfx.Utilities;
import com.pulumi.signalfx.log.ViewArgs;
import com.pulumi.signalfx.log.inputs.ViewState;
import com.pulumi.signalfx.log.outputs.ViewColumn;
import com.pulumi.signalfx.log.outputs.ViewSortOption;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Optional;
import javax.annotation.Nullable;

/**
 * You can add logs data to your Observability Cloud dashboards without turning your logs into metrics first.
 * 
 * A log view displays log lines in a table form in a dashboard and shows you in detail what is happening and why.
 * 
 * ## Example
 * 
 * &lt;!--Start PulumiCodeChooser --&gt;
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.signalfx.log.View;
 * import com.pulumi.signalfx.log.ViewArgs;
 * import com.pulumi.signalfx.log.inputs.ViewSortOptionArgs;
 * import com.pulumi.signalfx.log.inputs.ViewColumnArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var myLogView = new View("myLogView", ViewArgs.builder()
 *             .name("Sample Log View")
 *             .description("Lorem ipsum dolor sit amet, laudem tibique iracundia at mea. Nam posse dolores ex, nec cu adhuc putent honestatis")
 *             .programText("""
 * logs(filter=field('message') == 'Transaction processed' and field('service.name') == 'paymentservice').publish()
 *             """)
 *             .timeRange(900)
 *             .sortOptions(ViewSortOptionArgs.builder()
 *                 .descending(false)
 *                 .field("severity")
 *                 .build())
 *             .columns(            
 *                 ViewColumnArgs.builder()
 *                     .name("severity")
 *                     .build(),
 *                 ViewColumnArgs.builder()
 *                     .name("time")
 *                     .build(),
 *                 ViewColumnArgs.builder()
 *                     .name("amount.currency_code")
 *                     .build(),
 *                 ViewColumnArgs.builder()
 *                     .name("amount.nanos")
 *                     .build(),
 *                 ViewColumnArgs.builder()
 *                     .name("amount.units")
 *                     .build(),
 *                 ViewColumnArgs.builder()
 *                     .name("message")
 *                     .build())
 *             .build());
 * 
 *     }
 * }
 * }
 * </pre>
 * &lt;!--End PulumiCodeChooser --&gt;
 * 
 */
@ResourceType(type="signalfx:log/view:View")
public class View extends com.pulumi.resources.CustomResource {
    /**
     * The column headers to show on the log view.
     * 
     */
    @Export(name="columns", refs={List.class,ViewColumn.class}, tree="[0,1]")
    private Output</* @Nullable */ List<ViewColumn>> columns;

    /**
     * @return The column headers to show on the log view.
     * 
     */
    public Output<Optional<List<ViewColumn>>> columns() {
        return Codegen.optional(this.columns);
    }
    /**
     * The connection that the log view uses to fetch data. This could be Splunk Enterprise, Splunk Enterprise Cloud or Observability Cloud.
     * 
     */
    @Export(name="defaultConnection", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> defaultConnection;

    /**
     * @return The connection that the log view uses to fetch data. This could be Splunk Enterprise, Splunk Enterprise Cloud or Observability Cloud.
     * 
     */
    public Output<Optional<String>> defaultConnection() {
        return Codegen.optional(this.defaultConnection);
    }
    /**
     * Description of the log view.
     * 
     */
    @Export(name="description", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> description;

    /**
     * @return Description of the log view.
     * 
     */
    public Output<Optional<String>> description() {
        return Codegen.optional(this.description);
    }
    /**
     * Seconds since epoch. Used for visualization. Conflicts with `time_range`.
     * 
     */
    @Export(name="endTime", refs={Integer.class}, tree="[0]")
    private Output</* @Nullable */ Integer> endTime;

    /**
     * @return Seconds since epoch. Used for visualization. Conflicts with `time_range`.
     * 
     */
    public Output<Optional<Integer>> endTime() {
        return Codegen.optional(this.endTime);
    }
    /**
     * Name of the log view.
     * 
     */
    @Export(name="name", refs={String.class}, tree="[0]")
    private Output<String> name;

    /**
     * @return Name of the log view.
     * 
     */
    public Output<String> name() {
        return this.name;
    }
    /**
     * Signalflow program text for the log view. More info at https://developers.signalfx.com/docs/signalflow-overview.
     * 
     */
    @Export(name="programText", refs={String.class}, tree="[0]")
    private Output<String> programText;

    /**
     * @return Signalflow program text for the log view. More info at https://developers.signalfx.com/docs/signalflow-overview.
     * 
     */
    public Output<String> programText() {
        return this.programText;
    }
    /**
     * The sorting options configuration to specify if the log view table needs to be sorted in a particular field.
     * 
     */
    @Export(name="sortOptions", refs={List.class,ViewSortOption.class}, tree="[0,1]")
    private Output</* @Nullable */ List<ViewSortOption>> sortOptions;

    /**
     * @return The sorting options configuration to specify if the log view table needs to be sorted in a particular field.
     * 
     */
    public Output<Optional<List<ViewSortOption>>> sortOptions() {
        return Codegen.optional(this.sortOptions);
    }
    /**
     * Seconds since epoch. Used for visualization. Conflicts with `time_range`.
     * 
     */
    @Export(name="startTime", refs={Integer.class}, tree="[0]")
    private Output</* @Nullable */ Integer> startTime;

    /**
     * @return Seconds since epoch. Used for visualization. Conflicts with `time_range`.
     * 
     */
    public Output<Optional<Integer>> startTime() {
        return Codegen.optional(this.startTime);
    }
    /**
     * Tags associated with the resource
     * 
     */
    @Export(name="tags", refs={List.class,String.class}, tree="[0,1]")
    private Output</* @Nullable */ List<String>> tags;

    /**
     * @return Tags associated with the resource
     * 
     */
    public Output<Optional<List<String>>> tags() {
        return Codegen.optional(this.tags);
    }
    /**
     * From when to display data. Splunk Observability Cloud time syntax (e.g. `&#34;-5m&#34;`, `&#34;-1h&#34;`). Conflicts with `start_time` and `end_time`.
     * 
     */
    @Export(name="timeRange", refs={Integer.class}, tree="[0]")
    private Output</* @Nullable */ Integer> timeRange;

    /**
     * @return From when to display data. Splunk Observability Cloud time syntax (e.g. `&#34;-5m&#34;`, `&#34;-1h&#34;`). Conflicts with `start_time` and `end_time`.
     * 
     */
    public Output<Optional<Integer>> timeRange() {
        return Codegen.optional(this.timeRange);
    }
    /**
     * The URL of the log view.
     * 
     */
    @Export(name="url", refs={String.class}, tree="[0]")
    private Output<String> url;

    /**
     * @return The URL of the log view.
     * 
     */
    public Output<String> url() {
        return this.url;
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public View(java.lang.String name) {
        this(name, ViewArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public View(java.lang.String name, ViewArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public View(java.lang.String name, ViewArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("signalfx:log/view:View", name, makeArgs(args, options), makeResourceOptions(options, Codegen.empty()), false);
    }

    private View(java.lang.String name, Output<java.lang.String> id, @Nullable ViewState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("signalfx:log/view:View", name, state, makeResourceOptions(options, id), false);
    }

    private static ViewArgs makeArgs(ViewArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        if (options != null && options.getUrn().isPresent()) {
            return null;
        }
        return args == null ? ViewArgs.Empty : args;
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<java.lang.String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .aliases(List.of(
                Output.of(Alias.builder().type("signalfx:logs/view:View").build())
            ))
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static View get(java.lang.String name, Output<java.lang.String> id, @Nullable ViewState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new View(name, id, state, options);
    }
}
