// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.signalfx.log;

import com.pulumi.core.Alias;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import com.pulumi.signalfx.Utilities;
import com.pulumi.signalfx.log.ViewArgs;
import com.pulumi.signalfx.log.inputs.ViewState;
import com.pulumi.signalfx.log.outputs.ViewColumn;
import com.pulumi.signalfx.log.outputs.ViewSortOption;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Optional;
import javax.annotation.Nullable;

/**
 * You can add logs data to your Observability Cloud dashboards without turning your logs into metrics first.
 * 
 * A log view displays log lines in a table form in a dashboard and shows you in detail what is happening and why.
 * 
 * ## Example
 * 
 * ## Arguments
 * 
 * The following arguments are supported in the resource block:
 * 
 * * `name` - (Required) Name of the log view.
 * * `program_text` - (Required) Signalflow program text for the log view. More info at https://developers.signalfx.com/docs/signalflow-overview.
 * * `description` - (Optional) Description of the log view.
 * * `time_range` - (Optional) From when to display data. Splunk Observability Cloud time syntax (e.g. `&#34;-5m&#34;`, `&#34;-1h&#34;`). Conflicts with `start_time` and `end_time`.
 * * `start_time` - (Optional) Seconds since epoch. Used for visualization. Conflicts with `time_range`.
 * * `end_time` - (Optional) Seconds since epoch. Used for visualization. Conflicts with `time_range`.
 * * `columns` - (Optional) The column headers to show on the log view.
 * * `sort_options` - (Optional) The sorting options configuration to specify if the log view table needs to be sorted in a particular field.
 * * `default_connection` - (Optional) The connection that the log view uses to fetch data. This could be Splunk Enterprise, Splunk Enterprise Cloud or Observability Cloud.
 * 
 * ## Attributes
 * 
 * In a addition to all arguments above, the following attributes are exported:
 * 
 * * `id` - The ID of the log view.
 * * `url` - The URL of the log view.
 * 
 */
@ResourceType(type="signalfx:log/view:View")
public class View extends com.pulumi.resources.CustomResource {
    /**
     * Column configuration
     * 
     */
    @Export(name="columns", refs={List.class,ViewColumn.class}, tree="[0,1]")
    private Output</* @Nullable */ List<ViewColumn>> columns;

    /**
     * @return Column configuration
     * 
     */
    public Output<Optional<List<ViewColumn>>> columns() {
        return Codegen.optional(this.columns);
    }
    /**
     * default connection that the dashboard uses
     * 
     */
    @Export(name="defaultConnection", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> defaultConnection;

    /**
     * @return default connection that the dashboard uses
     * 
     */
    public Output<Optional<String>> defaultConnection() {
        return Codegen.optional(this.defaultConnection);
    }
    /**
     * Description of the chart (Optional)
     * 
     */
    @Export(name="description", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> description;

    /**
     * @return Description of the chart (Optional)
     * 
     */
    public Output<Optional<String>> description() {
        return Codegen.optional(this.description);
    }
    /**
     * Seconds since epoch to end the visualization
     * 
     */
    @Export(name="endTime", refs={Integer.class}, tree="[0]")
    private Output</* @Nullable */ Integer> endTime;

    /**
     * @return Seconds since epoch to end the visualization
     * 
     */
    public Output<Optional<Integer>> endTime() {
        return Codegen.optional(this.endTime);
    }
    /**
     * Name of the chart
     * 
     */
    @Export(name="name", refs={String.class}, tree="[0]")
    private Output<String> name;

    /**
     * @return Name of the chart
     * 
     */
    public Output<String> name() {
        return this.name;
    }
    /**
     * Signalflow program text for the chart. More info at &#34;https://developers.signalfx.com/docs/signalflow-overview&#34;
     * 
     */
    @Export(name="programText", refs={String.class}, tree="[0]")
    private Output<String> programText;

    /**
     * @return Signalflow program text for the chart. More info at &#34;https://developers.signalfx.com/docs/signalflow-overview&#34;
     * 
     */
    public Output<String> programText() {
        return this.programText;
    }
    /**
     * Sorting options configuration
     * 
     */
    @Export(name="sortOptions", refs={List.class,ViewSortOption.class}, tree="[0,1]")
    private Output</* @Nullable */ List<ViewSortOption>> sortOptions;

    /**
     * @return Sorting options configuration
     * 
     */
    public Output<Optional<List<ViewSortOption>>> sortOptions() {
        return Codegen.optional(this.sortOptions);
    }
    /**
     * Seconds since epoch to start the visualization
     * 
     */
    @Export(name="startTime", refs={Integer.class}, tree="[0]")
    private Output</* @Nullable */ Integer> startTime;

    /**
     * @return Seconds since epoch to start the visualization
     * 
     */
    public Output<Optional<Integer>> startTime() {
        return Codegen.optional(this.startTime);
    }
    /**
     * Seconds to display in the visualization. This is a rolling range from the current time. Example: 3600 = `-1h`
     * 
     */
    @Export(name="timeRange", refs={Integer.class}, tree="[0]")
    private Output</* @Nullable */ Integer> timeRange;

    /**
     * @return Seconds to display in the visualization. This is a rolling range from the current time. Example: 3600 = `-1h`
     * 
     */
    public Output<Optional<Integer>> timeRange() {
        return Codegen.optional(this.timeRange);
    }
    /**
     * URL of the chart
     * 
     */
    @Export(name="url", refs={String.class}, tree="[0]")
    private Output<String> url;

    /**
     * @return URL of the chart
     * 
     */
    public Output<String> url() {
        return this.url;
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public View(String name) {
        this(name, ViewArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public View(String name, ViewArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public View(String name, ViewArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("signalfx:log/view:View", name, args == null ? ViewArgs.Empty : args, makeResourceOptions(options, Codegen.empty()));
    }

    private View(String name, Output<String> id, @Nullable ViewState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("signalfx:log/view:View", name, state, makeResourceOptions(options, id));
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .aliases(List.of(
                Output.of(Alias.builder().type("signalfx:logs/view:View").build())
            ))
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static View get(String name, Output<String> id, @Nullable ViewState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new View(name, id, state, options);
    }
}
