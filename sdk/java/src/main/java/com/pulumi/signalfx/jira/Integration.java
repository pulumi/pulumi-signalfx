// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.signalfx.jira;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import com.pulumi.signalfx.Utilities;
import com.pulumi.signalfx.jira.IntegrationArgs;
import com.pulumi.signalfx.jira.inputs.IntegrationState;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Optional;
import javax.annotation.Nullable;

/**
 * SignalFx Jira integrations. For help with this integration see [Integration with Jira](https://docs.signalfx.com/en/latest/admin-guide/integrate-notifications.html#integrate-with-jira).
 * 
 * &gt; **NOTE** When managing integrations, use a session token of an administrator to authenticate the SignalFx provider. See [Operations that require a session token for an administrator](https://dev.splunk.com/observability/docs/administration/authtokens#Operations-that-require-a-session-token-for-an-administrator). Otherwise you&#39;ll receive a 4xx error.
 * 
 * ## Example Usage
 * ```java
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.signalfx.jira.Integration;
 * import com.pulumi.signalfx.jira.IntegrationArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var jiraMyteamXX = new Integration(&#34;jiraMyteamXX&#34;, IntegrationArgs.builder()        
 *             .assigneeDisplayName(&#34;Testy Testerson&#34;)
 *             .assigneeName(&#34;testytesterson&#34;)
 *             .authMethod(&#34;UsernameAndPassword&#34;)
 *             .baseUrl(&#34;https://www.example.com&#34;)
 *             .enabled(false)
 *             .issueType(&#34;Story&#34;)
 *             .password(&#34;paasword&#34;)
 *             .projectKey(&#34;TEST&#34;)
 *             .username(&#34;yoosername&#34;)
 *             .build());
 * 
 *     }
 * }
 * ```
 * 
 */
@ResourceType(type="signalfx:jira/integration:Integration")
public class Integration extends com.pulumi.resources.CustomResource {
    /**
     * The API token for the user email
     * 
     */
    @Export(name="apiToken", type=String.class, parameters={})
    private Output</* @Nullable */ String> apiToken;

    /**
     * @return The API token for the user email
     * 
     */
    public Output<Optional<String>> apiToken() {
        return Codegen.optional(this.apiToken);
    }
    /**
     * Jira display name for the assignee.
     * 
     */
    @Export(name="assigneeDisplayName", type=String.class, parameters={})
    private Output</* @Nullable */ String> assigneeDisplayName;

    /**
     * @return Jira display name for the assignee.
     * 
     */
    public Output<Optional<String>> assigneeDisplayName() {
        return Codegen.optional(this.assigneeDisplayName);
    }
    /**
     * Jira user name for the assignee.
     * 
     */
    @Export(name="assigneeName", type=String.class, parameters={})
    private Output<String> assigneeName;

    /**
     * @return Jira user name for the assignee.
     * 
     */
    public Output<String> assigneeName() {
        return this.assigneeName;
    }
    /**
     * Authentication method used when creating the Jira integration. One of `EmailAndToken` (using `user_email` and `api_token`) or `UsernameAndPassword` (using `username` and `password`).
     * 
     */
    @Export(name="authMethod", type=String.class, parameters={})
    private Output<String> authMethod;

    /**
     * @return Authentication method used when creating the Jira integration. One of `EmailAndToken` (using `user_email` and `api_token`) or `UsernameAndPassword` (using `username` and `password`).
     * 
     */
    public Output<String> authMethod() {
        return this.authMethod;
    }
    /**
     * Base URL of the Jira instance that&#39;s integrated with SignalFx.
     * 
     */
    @Export(name="baseUrl", type=String.class, parameters={})
    private Output<String> baseUrl;

    /**
     * @return Base URL of the Jira instance that&#39;s integrated with SignalFx.
     * 
     */
    public Output<String> baseUrl() {
        return this.baseUrl;
    }
    /**
     * Whether the integration is enabled.
     * 
     */
    @Export(name="enabled", type=Boolean.class, parameters={})
    private Output<Boolean> enabled;

    /**
     * @return Whether the integration is enabled.
     * 
     */
    public Output<Boolean> enabled() {
        return this.enabled;
    }
    /**
     * Issue type (for example, Story) for tickets that Jira creates for detector notifications. SignalFx validates issue types, so you must specify a type that&#39;s valid for the Jira project specified in `projectKey`.
     * 
     */
    @Export(name="issueType", type=String.class, parameters={})
    private Output<String> issueType;

    /**
     * @return Issue type (for example, Story) for tickets that Jira creates for detector notifications. SignalFx validates issue types, so you must specify a type that&#39;s valid for the Jira project specified in `projectKey`.
     * 
     */
    public Output<String> issueType() {
        return this.issueType;
    }
    /**
     * Name of the integration.
     * 
     */
    @Export(name="name", type=String.class, parameters={})
    private Output<String> name;

    /**
     * @return Name of the integration.
     * 
     */
    public Output<String> name() {
        return this.name;
    }
    /**
     * Password used to authenticate the Jira integration.
     * 
     */
    @Export(name="password", type=String.class, parameters={})
    private Output</* @Nullable */ String> password;

    /**
     * @return Password used to authenticate the Jira integration.
     * 
     */
    public Output<Optional<String>> password() {
        return Codegen.optional(this.password);
    }
    /**
     * Jira key of an existing project. When Jira creates a new ticket for a detector notification, the ticket is assigned to this project.
     * 
     */
    @Export(name="projectKey", type=String.class, parameters={})
    private Output<String> projectKey;

    /**
     * @return Jira key of an existing project. When Jira creates a new ticket for a detector notification, the ticket is assigned to this project.
     * 
     */
    public Output<String> projectKey() {
        return this.projectKey;
    }
    /**
     * Email address used to authenticate the Jira integration.
     * 
     */
    @Export(name="userEmail", type=String.class, parameters={})
    private Output</* @Nullable */ String> userEmail;

    /**
     * @return Email address used to authenticate the Jira integration.
     * 
     */
    public Output<Optional<String>> userEmail() {
        return Codegen.optional(this.userEmail);
    }
    /**
     * User name used to authenticate the Jira integration.
     * 
     */
    @Export(name="username", type=String.class, parameters={})
    private Output</* @Nullable */ String> username;

    /**
     * @return User name used to authenticate the Jira integration.
     * 
     */
    public Output<Optional<String>> username() {
        return Codegen.optional(this.username);
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public Integration(String name) {
        this(name, IntegrationArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public Integration(String name, IntegrationArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public Integration(String name, IntegrationArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("signalfx:jira/integration:Integration", name, args == null ? IntegrationArgs.Empty : args, makeResourceOptions(options, Codegen.empty()));
    }

    private Integration(String name, Output<String> id, @Nullable IntegrationState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("signalfx:jira/integration:Integration", name, state, makeResourceOptions(options, id));
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .additionalSecretOutputs(List.of(
                "apiToken",
                "password"
            ))
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static Integration get(String name, Output<String> id, @Nullable IntegrationState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new Integration(name, id, state, options);
    }
}
