// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.signalfx.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Integer;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class OrgTokenDpmLimitsArgs extends com.pulumi.resources.ResourceArgs {

    public static final OrgTokenDpmLimitsArgs Empty = new OrgTokenDpmLimitsArgs();

    /**
     * The datapoints per minute (dpm) limit for this token. If you exceed this limit, SignalFx sends out an alert.
     * 
     */
    @Import(name="dpmLimit", required=true)
    private Output<Integer> dpmLimit;

    /**
     * @return The datapoints per minute (dpm) limit for this token. If you exceed this limit, SignalFx sends out an alert.
     * 
     */
    public Output<Integer> dpmLimit() {
        return this.dpmLimit;
    }

    /**
     * DPM level at which SignalFx sends the notification for this token. If you don&#39;t specify a notification, SignalFx sends the generic notification.
     * 
     */
    @Import(name="dpmNotificationThreshold")
    private @Nullable Output<Integer> dpmNotificationThreshold;

    /**
     * @return DPM level at which SignalFx sends the notification for this token. If you don&#39;t specify a notification, SignalFx sends the generic notification.
     * 
     */
    public Optional<Output<Integer>> dpmNotificationThreshold() {
        return Optional.ofNullable(this.dpmNotificationThreshold);
    }

    private OrgTokenDpmLimitsArgs() {}

    private OrgTokenDpmLimitsArgs(OrgTokenDpmLimitsArgs $) {
        this.dpmLimit = $.dpmLimit;
        this.dpmNotificationThreshold = $.dpmNotificationThreshold;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(OrgTokenDpmLimitsArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private OrgTokenDpmLimitsArgs $;

        public Builder() {
            $ = new OrgTokenDpmLimitsArgs();
        }

        public Builder(OrgTokenDpmLimitsArgs defaults) {
            $ = new OrgTokenDpmLimitsArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param dpmLimit The datapoints per minute (dpm) limit for this token. If you exceed this limit, SignalFx sends out an alert.
         * 
         * @return builder
         * 
         */
        public Builder dpmLimit(Output<Integer> dpmLimit) {
            $.dpmLimit = dpmLimit;
            return this;
        }

        /**
         * @param dpmLimit The datapoints per minute (dpm) limit for this token. If you exceed this limit, SignalFx sends out an alert.
         * 
         * @return builder
         * 
         */
        public Builder dpmLimit(Integer dpmLimit) {
            return dpmLimit(Output.of(dpmLimit));
        }

        /**
         * @param dpmNotificationThreshold DPM level at which SignalFx sends the notification for this token. If you don&#39;t specify a notification, SignalFx sends the generic notification.
         * 
         * @return builder
         * 
         */
        public Builder dpmNotificationThreshold(@Nullable Output<Integer> dpmNotificationThreshold) {
            $.dpmNotificationThreshold = dpmNotificationThreshold;
            return this;
        }

        /**
         * @param dpmNotificationThreshold DPM level at which SignalFx sends the notification for this token. If you don&#39;t specify a notification, SignalFx sends the generic notification.
         * 
         * @return builder
         * 
         */
        public Builder dpmNotificationThreshold(Integer dpmNotificationThreshold) {
            return dpmNotificationThreshold(Output.of(dpmNotificationThreshold));
        }

        public OrgTokenDpmLimitsArgs build() {
            $.dpmLimit = Objects.requireNonNull($.dpmLimit, "expected parameter 'dpmLimit' to be non-null");
            return $;
        }
    }

}
