// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.signalfx.jira;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class IntegrationArgs extends com.pulumi.resources.ResourceArgs {

    public static final IntegrationArgs Empty = new IntegrationArgs();

    /**
     * The API token for the user email
     * 
     */
    @Import(name="apiToken")
    private @Nullable Output<String> apiToken;

    /**
     * @return The API token for the user email
     * 
     */
    public Optional<Output<String>> apiToken() {
        return Optional.ofNullable(this.apiToken);
    }

    /**
     * Jira display name for the assignee.
     * 
     */
    @Import(name="assigneeDisplayName")
    private @Nullable Output<String> assigneeDisplayName;

    /**
     * @return Jira display name for the assignee.
     * 
     */
    public Optional<Output<String>> assigneeDisplayName() {
        return Optional.ofNullable(this.assigneeDisplayName);
    }

    /**
     * Jira user name for the assignee.
     * 
     */
    @Import(name="assigneeName", required=true)
    private Output<String> assigneeName;

    /**
     * @return Jira user name for the assignee.
     * 
     */
    public Output<String> assigneeName() {
        return this.assigneeName;
    }

    /**
     * Authentication method used when creating the Jira integration. One of `EmailAndToken` (using `user_email` and `api_token`) or `UsernameAndPassword` (using `username` and `password`).
     * 
     */
    @Import(name="authMethod", required=true)
    private Output<String> authMethod;

    /**
     * @return Authentication method used when creating the Jira integration. One of `EmailAndToken` (using `user_email` and `api_token`) or `UsernameAndPassword` (using `username` and `password`).
     * 
     */
    public Output<String> authMethod() {
        return this.authMethod;
    }

    /**
     * Base URL of the Jira instance that&#39;s integrated with SignalFx.
     * 
     */
    @Import(name="baseUrl", required=true)
    private Output<String> baseUrl;

    /**
     * @return Base URL of the Jira instance that&#39;s integrated with SignalFx.
     * 
     */
    public Output<String> baseUrl() {
        return this.baseUrl;
    }

    /**
     * Whether the integration is enabled.
     * 
     */
    @Import(name="enabled", required=true)
    private Output<Boolean> enabled;

    /**
     * @return Whether the integration is enabled.
     * 
     */
    public Output<Boolean> enabled() {
        return this.enabled;
    }

    /**
     * Issue type (for example, Story) for tickets that Jira creates for detector notifications. Splunk Observability Cloud validates issue types, so you must specify a type that&#39;s valid for the Jira project specified in `projectKey`.
     * 
     */
    @Import(name="issueType", required=true)
    private Output<String> issueType;

    /**
     * @return Issue type (for example, Story) for tickets that Jira creates for detector notifications. Splunk Observability Cloud validates issue types, so you must specify a type that&#39;s valid for the Jira project specified in `projectKey`.
     * 
     */
    public Output<String> issueType() {
        return this.issueType;
    }

    /**
     * Name of the integration.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return Name of the integration.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * Password used to authenticate the Jira integration.
     * 
     */
    @Import(name="password")
    private @Nullable Output<String> password;

    /**
     * @return Password used to authenticate the Jira integration.
     * 
     */
    public Optional<Output<String>> password() {
        return Optional.ofNullable(this.password);
    }

    /**
     * Jira key of an existing project. When Jira creates a new ticket for a detector notification, the ticket is assigned to this project.
     * 
     */
    @Import(name="projectKey", required=true)
    private Output<String> projectKey;

    /**
     * @return Jira key of an existing project. When Jira creates a new ticket for a detector notification, the ticket is assigned to this project.
     * 
     */
    public Output<String> projectKey() {
        return this.projectKey;
    }

    /**
     * Email address used to authenticate the Jira integration.
     * 
     */
    @Import(name="userEmail")
    private @Nullable Output<String> userEmail;

    /**
     * @return Email address used to authenticate the Jira integration.
     * 
     */
    public Optional<Output<String>> userEmail() {
        return Optional.ofNullable(this.userEmail);
    }

    /**
     * User name used to authenticate the Jira integration.
     * 
     */
    @Import(name="username")
    private @Nullable Output<String> username;

    /**
     * @return User name used to authenticate the Jira integration.
     * 
     */
    public Optional<Output<String>> username() {
        return Optional.ofNullable(this.username);
    }

    private IntegrationArgs() {}

    private IntegrationArgs(IntegrationArgs $) {
        this.apiToken = $.apiToken;
        this.assigneeDisplayName = $.assigneeDisplayName;
        this.assigneeName = $.assigneeName;
        this.authMethod = $.authMethod;
        this.baseUrl = $.baseUrl;
        this.enabled = $.enabled;
        this.issueType = $.issueType;
        this.name = $.name;
        this.password = $.password;
        this.projectKey = $.projectKey;
        this.userEmail = $.userEmail;
        this.username = $.username;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(IntegrationArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private IntegrationArgs $;

        public Builder() {
            $ = new IntegrationArgs();
        }

        public Builder(IntegrationArgs defaults) {
            $ = new IntegrationArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param apiToken The API token for the user email
         * 
         * @return builder
         * 
         */
        public Builder apiToken(@Nullable Output<String> apiToken) {
            $.apiToken = apiToken;
            return this;
        }

        /**
         * @param apiToken The API token for the user email
         * 
         * @return builder
         * 
         */
        public Builder apiToken(String apiToken) {
            return apiToken(Output.of(apiToken));
        }

        /**
         * @param assigneeDisplayName Jira display name for the assignee.
         * 
         * @return builder
         * 
         */
        public Builder assigneeDisplayName(@Nullable Output<String> assigneeDisplayName) {
            $.assigneeDisplayName = assigneeDisplayName;
            return this;
        }

        /**
         * @param assigneeDisplayName Jira display name for the assignee.
         * 
         * @return builder
         * 
         */
        public Builder assigneeDisplayName(String assigneeDisplayName) {
            return assigneeDisplayName(Output.of(assigneeDisplayName));
        }

        /**
         * @param assigneeName Jira user name for the assignee.
         * 
         * @return builder
         * 
         */
        public Builder assigneeName(Output<String> assigneeName) {
            $.assigneeName = assigneeName;
            return this;
        }

        /**
         * @param assigneeName Jira user name for the assignee.
         * 
         * @return builder
         * 
         */
        public Builder assigneeName(String assigneeName) {
            return assigneeName(Output.of(assigneeName));
        }

        /**
         * @param authMethod Authentication method used when creating the Jira integration. One of `EmailAndToken` (using `user_email` and `api_token`) or `UsernameAndPassword` (using `username` and `password`).
         * 
         * @return builder
         * 
         */
        public Builder authMethod(Output<String> authMethod) {
            $.authMethod = authMethod;
            return this;
        }

        /**
         * @param authMethod Authentication method used when creating the Jira integration. One of `EmailAndToken` (using `user_email` and `api_token`) or `UsernameAndPassword` (using `username` and `password`).
         * 
         * @return builder
         * 
         */
        public Builder authMethod(String authMethod) {
            return authMethod(Output.of(authMethod));
        }

        /**
         * @param baseUrl Base URL of the Jira instance that&#39;s integrated with SignalFx.
         * 
         * @return builder
         * 
         */
        public Builder baseUrl(Output<String> baseUrl) {
            $.baseUrl = baseUrl;
            return this;
        }

        /**
         * @param baseUrl Base URL of the Jira instance that&#39;s integrated with SignalFx.
         * 
         * @return builder
         * 
         */
        public Builder baseUrl(String baseUrl) {
            return baseUrl(Output.of(baseUrl));
        }

        /**
         * @param enabled Whether the integration is enabled.
         * 
         * @return builder
         * 
         */
        public Builder enabled(Output<Boolean> enabled) {
            $.enabled = enabled;
            return this;
        }

        /**
         * @param enabled Whether the integration is enabled.
         * 
         * @return builder
         * 
         */
        public Builder enabled(Boolean enabled) {
            return enabled(Output.of(enabled));
        }

        /**
         * @param issueType Issue type (for example, Story) for tickets that Jira creates for detector notifications. Splunk Observability Cloud validates issue types, so you must specify a type that&#39;s valid for the Jira project specified in `projectKey`.
         * 
         * @return builder
         * 
         */
        public Builder issueType(Output<String> issueType) {
            $.issueType = issueType;
            return this;
        }

        /**
         * @param issueType Issue type (for example, Story) for tickets that Jira creates for detector notifications. Splunk Observability Cloud validates issue types, so you must specify a type that&#39;s valid for the Jira project specified in `projectKey`.
         * 
         * @return builder
         * 
         */
        public Builder issueType(String issueType) {
            return issueType(Output.of(issueType));
        }

        /**
         * @param name Name of the integration.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name Name of the integration.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param password Password used to authenticate the Jira integration.
         * 
         * @return builder
         * 
         */
        public Builder password(@Nullable Output<String> password) {
            $.password = password;
            return this;
        }

        /**
         * @param password Password used to authenticate the Jira integration.
         * 
         * @return builder
         * 
         */
        public Builder password(String password) {
            return password(Output.of(password));
        }

        /**
         * @param projectKey Jira key of an existing project. When Jira creates a new ticket for a detector notification, the ticket is assigned to this project.
         * 
         * @return builder
         * 
         */
        public Builder projectKey(Output<String> projectKey) {
            $.projectKey = projectKey;
            return this;
        }

        /**
         * @param projectKey Jira key of an existing project. When Jira creates a new ticket for a detector notification, the ticket is assigned to this project.
         * 
         * @return builder
         * 
         */
        public Builder projectKey(String projectKey) {
            return projectKey(Output.of(projectKey));
        }

        /**
         * @param userEmail Email address used to authenticate the Jira integration.
         * 
         * @return builder
         * 
         */
        public Builder userEmail(@Nullable Output<String> userEmail) {
            $.userEmail = userEmail;
            return this;
        }

        /**
         * @param userEmail Email address used to authenticate the Jira integration.
         * 
         * @return builder
         * 
         */
        public Builder userEmail(String userEmail) {
            return userEmail(Output.of(userEmail));
        }

        /**
         * @param username User name used to authenticate the Jira integration.
         * 
         * @return builder
         * 
         */
        public Builder username(@Nullable Output<String> username) {
            $.username = username;
            return this;
        }

        /**
         * @param username User name used to authenticate the Jira integration.
         * 
         * @return builder
         * 
         */
        public Builder username(String username) {
            return username(Output.of(username));
        }

        public IntegrationArgs build() {
            if ($.assigneeName == null) {
                throw new MissingRequiredPropertyException("IntegrationArgs", "assigneeName");
            }
            if ($.authMethod == null) {
                throw new MissingRequiredPropertyException("IntegrationArgs", "authMethod");
            }
            if ($.baseUrl == null) {
                throw new MissingRequiredPropertyException("IntegrationArgs", "baseUrl");
            }
            if ($.enabled == null) {
                throw new MissingRequiredPropertyException("IntegrationArgs", "enabled");
            }
            if ($.issueType == null) {
                throw new MissingRequiredPropertyException("IntegrationArgs", "issueType");
            }
            if ($.projectKey == null) {
                throw new MissingRequiredPropertyException("IntegrationArgs", "projectKey");
            }
            return $;
        }
    }

}
