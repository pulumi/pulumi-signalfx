// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.signalfx;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import com.pulumi.signalfx.ListChartArgs;
import com.pulumi.signalfx.Utilities;
import com.pulumi.signalfx.inputs.ListChartState;
import com.pulumi.signalfx.outputs.ListChartColorScale;
import com.pulumi.signalfx.outputs.ListChartLegendOptionsField;
import com.pulumi.signalfx.outputs.ListChartVizOption;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Optional;
import javax.annotation.Nullable;

/**
 * This chart type displays current data values in a list format.
 * 
 * The name of each value in the chart reflects the name of the plot and any associated dimensions. We recommend you click the Pencil icon and give the plot a meaningful name, as in plot B from the example. Otherwise, just the raw metric name will be displayed on the chart, as in plot A from the example.
 * 
 * ## Example
 * 
 * &lt;!--Start PulumiCodeChooser --&gt;
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.signalfx.ListChart;
 * import com.pulumi.signalfx.ListChartArgs;
 * import com.pulumi.signalfx.inputs.ListChartLegendOptionsFieldArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var mylistchart0 = new ListChart("mylistchart0", ListChartArgs.builder()
 *             .name("CPU Total Idle - List")
 *             .programText("""
 * myfilters = filter("cluster_name", "prod") and filter("role", "search")
 * data("cpu.total.idle", filter=myfilters).publish()
 *             """)
 *             .description("Very cool List Chart")
 *             .colorBy("Metric")
 *             .maxDelay(2)
 *             .timezone("Europe/Paris")
 *             .disableSampling(true)
 *             .refreshInterval(1)
 *             .hideMissingValues(true)
 *             .legendOptionsFields(            
 *                 ListChartLegendOptionsFieldArgs.builder()
 *                     .property("collector")
 *                     .enabled(false)
 *                     .build(),
 *                 ListChartLegendOptionsFieldArgs.builder()
 *                     .property("cluster_name")
 *                     .enabled(true)
 *                     .build(),
 *                 ListChartLegendOptionsFieldArgs.builder()
 *                     .property("role")
 *                     .enabled(true)
 *                     .build(),
 *                 ListChartLegendOptionsFieldArgs.builder()
 *                     .property("collector")
 *                     .enabled(false)
 *                     .build(),
 *                 ListChartLegendOptionsFieldArgs.builder()
 *                     .property("host")
 *                     .enabled(false)
 *                     .build())
 *             .maxPrecision(2)
 *             .sortBy("-value")
 *             .build());
 * 
 *     }
 * }
 * }
 * </pre>
 * &lt;!--End PulumiCodeChooser --&gt;
 * 
 */
@ResourceType(type="signalfx:index/listChart:ListChart")
public class ListChart extends com.pulumi.resources.CustomResource {
    /**
     * Must be one of `&#34;Scale&#34;`, `&#34;Dimension&#34;` or `&#34;Metric&#34;`. `&#34;Dimension&#34;` by default.
     * 
     */
    @Export(name="colorBy", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> colorBy;

    /**
     * @return Must be one of `&#34;Scale&#34;`, `&#34;Dimension&#34;` or `&#34;Metric&#34;`. `&#34;Dimension&#34;` by default.
     * 
     */
    public Output<Optional<String>> colorBy() {
        return Codegen.optional(this.colorBy);
    }
    /**
     * Single color range including both the color to display for that range and the borders of the range. Example: `[{ gt = 60, color = &#34;blue&#34; }, { lte = 60, color = &#34;yellow&#34; }]`. Look at this [link](https://docs.splunk.com/observability/en/data-visualization/charts/chart-options.html).
     * 
     */
    @Export(name="colorScales", refs={List.class,ListChartColorScale.class}, tree="[0,1]")
    private Output</* @Nullable */ List<ListChartColorScale>> colorScales;

    /**
     * @return Single color range including both the color to display for that range and the borders of the range. Example: `[{ gt = 60, color = &#34;blue&#34; }, { lte = 60, color = &#34;yellow&#34; }]`. Look at this [link](https://docs.splunk.com/observability/en/data-visualization/charts/chart-options.html).
     * 
     */
    public Output<Optional<List<ListChartColorScale>>> colorScales() {
        return Codegen.optional(this.colorScales);
    }
    /**
     * Description of the chart.
     * 
     */
    @Export(name="description", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> description;

    /**
     * @return Description of the chart.
     * 
     */
    public Output<Optional<String>> description() {
        return Codegen.optional(this.description);
    }
    /**
     * If `false`, samples a subset of the output MTS, which improves UI performance. `false` by default.
     * 
     */
    @Export(name="disableSampling", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> disableSampling;

    /**
     * @return If `false`, samples a subset of the output MTS, which improves UI performance. `false` by default.
     * 
     */
    public Output<Optional<Boolean>> disableSampling() {
        return Codegen.optional(this.disableSampling);
    }
    /**
     * Seconds since epoch. Used for visualization. Conflicts with `time_range`.
     * 
     */
    @Export(name="endTime", refs={Integer.class}, tree="[0]")
    private Output</* @Nullable */ Integer> endTime;

    /**
     * @return Seconds since epoch. Used for visualization. Conflicts with `time_range`.
     * 
     */
    public Output<Optional<Integer>> endTime() {
        return Codegen.optional(this.endTime);
    }
    /**
     * Determines whether to hide missing data points in the chart. If `true`, missing data points in the chart would be hidden. `false` by default.
     * 
     */
    @Export(name="hideMissingValues", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> hideMissingValues;

    /**
     * @return Determines whether to hide missing data points in the chart. If `true`, missing data points in the chart would be hidden. `false` by default.
     * 
     */
    public Output<Optional<Boolean>> hideMissingValues() {
        return Codegen.optional(this.hideMissingValues);
    }
    /**
     * List of properties that should not be displayed in the chart legend (i.e. dimension names). All the properties are visible by default. Deprecated, please use `legend_options_fields`.
     * 
     * @deprecated
     * Please use legend_options_fields
     * 
     */
    @Deprecated /* Please use legend_options_fields */
    @Export(name="legendFieldsToHides", refs={List.class,String.class}, tree="[0,1]")
    private Output</* @Nullable */ List<String>> legendFieldsToHides;

    /**
     * @return List of properties that should not be displayed in the chart legend (i.e. dimension names). All the properties are visible by default. Deprecated, please use `legend_options_fields`.
     * 
     */
    public Output<Optional<List<String>>> legendFieldsToHides() {
        return Codegen.optional(this.legendFieldsToHides);
    }
    /**
     * List of property names and enabled flags that should be displayed in the data table for the chart, in the order provided. This option cannot be used with `legend_fields_to_hide`.
     * 
     */
    @Export(name="legendOptionsFields", refs={List.class,ListChartLegendOptionsField.class}, tree="[0,1]")
    private Output</* @Nullable */ List<ListChartLegendOptionsField>> legendOptionsFields;

    /**
     * @return List of property names and enabled flags that should be displayed in the data table for the chart, in the order provided. This option cannot be used with `legend_fields_to_hide`.
     * 
     */
    public Output<Optional<List<ListChartLegendOptionsField>>> legendOptionsFields() {
        return Codegen.optional(this.legendOptionsFields);
    }
    /**
     * How long (in seconds) to wait for late datapoints.
     * 
     */
    @Export(name="maxDelay", refs={Integer.class}, tree="[0]")
    private Output</* @Nullable */ Integer> maxDelay;

    /**
     * @return How long (in seconds) to wait for late datapoints.
     * 
     */
    public Output<Optional<Integer>> maxDelay() {
        return Codegen.optional(this.maxDelay);
    }
    /**
     * Maximum number of digits to display when rounding values up or down.
     * 
     */
    @Export(name="maxPrecision", refs={Integer.class}, tree="[0]")
    private Output</* @Nullable */ Integer> maxPrecision;

    /**
     * @return Maximum number of digits to display when rounding values up or down.
     * 
     */
    public Output<Optional<Integer>> maxPrecision() {
        return Codegen.optional(this.maxPrecision);
    }
    /**
     * Name of the chart.
     * 
     */
    @Export(name="name", refs={String.class}, tree="[0]")
    private Output<String> name;

    /**
     * @return Name of the chart.
     * 
     */
    public Output<String> name() {
        return this.name;
    }
    /**
     * Signalflow program text for the chart. More info[in the Splunk Observability Cloud docs](https://developers.signalfx.com/signalflow_analytics/signalflow_overview.html#_signalflow_programming_language).
     * 
     */
    @Export(name="programText", refs={String.class}, tree="[0]")
    private Output<String> programText;

    /**
     * @return Signalflow program text for the chart. More info[in the Splunk Observability Cloud docs](https://developers.signalfx.com/signalflow_analytics/signalflow_overview.html#_signalflow_programming_language).
     * 
     */
    public Output<String> programText() {
        return this.programText;
    }
    /**
     * How often (in seconds) to refresh the values of the list.
     * 
     */
    @Export(name="refreshInterval", refs={Integer.class}, tree="[0]")
    private Output</* @Nullable */ Integer> refreshInterval;

    /**
     * @return How often (in seconds) to refresh the values of the list.
     * 
     */
    public Output<Optional<Integer>> refreshInterval() {
        return Codegen.optional(this.refreshInterval);
    }
    /**
     * The type of secondary visualization. Can be `None`, `Radial`, `Linear`, or `Sparkline`. If unset, the Splunk Observability Cloud default is used (`Sparkline`).
     * 
     */
    @Export(name="secondaryVisualization", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> secondaryVisualization;

    /**
     * @return The type of secondary visualization. Can be `None`, `Radial`, `Linear`, or `Sparkline`. If unset, the Splunk Observability Cloud default is used (`Sparkline`).
     * 
     */
    public Output<Optional<String>> secondaryVisualization() {
        return Codegen.optional(this.secondaryVisualization);
    }
    /**
     * The property to use when sorting the elements. Use `value` if you want to sort by value. Must be prepended with `+` for ascending or `-` for descending (e.g. `-foo`). Note there are some special values for some of the options provided in the UX: `&#34;value&#34;` for Value, `&#34;sf_originatingMetric&#34;` for Metric, and `&#34;sf_metric&#34;` for plot.
     * 
     */
    @Export(name="sortBy", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> sortBy;

    /**
     * @return The property to use when sorting the elements. Use `value` if you want to sort by value. Must be prepended with `+` for ascending or `-` for descending (e.g. `-foo`). Note there are some special values for some of the options provided in the UX: `&#34;value&#34;` for Value, `&#34;sf_originatingMetric&#34;` for Metric, and `&#34;sf_metric&#34;` for plot.
     * 
     */
    public Output<Optional<String>> sortBy() {
        return Codegen.optional(this.sortBy);
    }
    /**
     * Seconds since epoch. Used for visualization. Conflicts with `time_range`.
     * 
     */
    @Export(name="startTime", refs={Integer.class}, tree="[0]")
    private Output</* @Nullable */ Integer> startTime;

    /**
     * @return Seconds since epoch. Used for visualization. Conflicts with `time_range`.
     * 
     */
    public Output<Optional<Integer>> startTime() {
        return Codegen.optional(this.startTime);
    }
    /**
     * How many seconds ago from which to display data. For example, the last hour would be `3600`, etc. Conflicts with `start_time` and `end_time`.
     * 
     */
    @Export(name="timeRange", refs={Integer.class}, tree="[0]")
    private Output</* @Nullable */ Integer> timeRange;

    /**
     * @return How many seconds ago from which to display data. For example, the last hour would be `3600`, etc. Conflicts with `start_time` and `end_time`.
     * 
     */
    public Output<Optional<Integer>> timeRange() {
        return Codegen.optional(this.timeRange);
    }
    /**
     * The property value is a string that denotes the geographic region associated with the time zone, (default UTC).
     * 
     */
    @Export(name="timezone", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> timezone;

    /**
     * @return The property value is a string that denotes the geographic region associated with the time zone, (default UTC).
     * 
     */
    public Output<Optional<String>> timezone() {
        return Codegen.optional(this.timezone);
    }
    /**
     * Must be `&#34;Metric&#34;` or `&#34;Binary`&#34;. `&#34;Metric&#34;` by default.
     * 
     */
    @Export(name="unitPrefix", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> unitPrefix;

    /**
     * @return Must be `&#34;Metric&#34;` or `&#34;Binary`&#34;. `&#34;Metric&#34;` by default.
     * 
     */
    public Output<Optional<String>> unitPrefix() {
        return Codegen.optional(this.unitPrefix);
    }
    /**
     * The URL of the chart.
     * 
     */
    @Export(name="url", refs={String.class}, tree="[0]")
    private Output<String> url;

    /**
     * @return The URL of the chart.
     * 
     */
    public Output<String> url() {
        return this.url;
    }
    /**
     * Plot-level customization options, associated with a publish statement.
     * 
     */
    @Export(name="vizOptions", refs={List.class,ListChartVizOption.class}, tree="[0,1]")
    private Output</* @Nullable */ List<ListChartVizOption>> vizOptions;

    /**
     * @return Plot-level customization options, associated with a publish statement.
     * 
     */
    public Output<Optional<List<ListChartVizOption>>> vizOptions() {
        return Codegen.optional(this.vizOptions);
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public ListChart(java.lang.String name) {
        this(name, ListChartArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public ListChart(java.lang.String name, ListChartArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public ListChart(java.lang.String name, ListChartArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("signalfx:index/listChart:ListChart", name, makeArgs(args, options), makeResourceOptions(options, Codegen.empty()), false);
    }

    private ListChart(java.lang.String name, Output<java.lang.String> id, @Nullable ListChartState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("signalfx:index/listChart:ListChart", name, state, makeResourceOptions(options, id), false);
    }

    private static ListChartArgs makeArgs(ListChartArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        if (options != null && options.getUrn().isPresent()) {
            return null;
        }
        return args == null ? ListChartArgs.Empty : args;
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<java.lang.String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static ListChart get(java.lang.String name, Output<java.lang.String> id, @Nullable ListChartState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new ListChart(name, id, state, options);
    }
}
