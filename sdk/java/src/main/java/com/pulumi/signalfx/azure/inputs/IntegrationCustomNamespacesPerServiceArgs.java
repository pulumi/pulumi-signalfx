// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.signalfx.azure.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.List;
import java.util.Objects;


public final class IntegrationCustomNamespacesPerServiceArgs extends com.pulumi.resources.ResourceArgs {

    public static final IntegrationCustomNamespacesPerServiceArgs Empty = new IntegrationCustomNamespacesPerServiceArgs();

    /**
     * The namespaces to sync
     * 
     */
    @Import(name="namespaces", required=true)
    private Output<List<String>> namespaces;

    /**
     * @return The namespaces to sync
     * 
     */
    public Output<List<String>> namespaces() {
        return this.namespaces;
    }

    /**
     * The name of the service
     * 
     */
    @Import(name="service", required=true)
    private Output<String> service;

    /**
     * @return The name of the service
     * 
     */
    public Output<String> service() {
        return this.service;
    }

    private IntegrationCustomNamespacesPerServiceArgs() {}

    private IntegrationCustomNamespacesPerServiceArgs(IntegrationCustomNamespacesPerServiceArgs $) {
        this.namespaces = $.namespaces;
        this.service = $.service;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(IntegrationCustomNamespacesPerServiceArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private IntegrationCustomNamespacesPerServiceArgs $;

        public Builder() {
            $ = new IntegrationCustomNamespacesPerServiceArgs();
        }

        public Builder(IntegrationCustomNamespacesPerServiceArgs defaults) {
            $ = new IntegrationCustomNamespacesPerServiceArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param namespaces The namespaces to sync
         * 
         * @return builder
         * 
         */
        public Builder namespaces(Output<List<String>> namespaces) {
            $.namespaces = namespaces;
            return this;
        }

        /**
         * @param namespaces The namespaces to sync
         * 
         * @return builder
         * 
         */
        public Builder namespaces(List<String> namespaces) {
            return namespaces(Output.of(namespaces));
        }

        /**
         * @param namespaces The namespaces to sync
         * 
         * @return builder
         * 
         */
        public Builder namespaces(String... namespaces) {
            return namespaces(List.of(namespaces));
        }

        /**
         * @param service The name of the service
         * 
         * @return builder
         * 
         */
        public Builder service(Output<String> service) {
            $.service = service;
            return this;
        }

        /**
         * @param service The name of the service
         * 
         * @return builder
         * 
         */
        public Builder service(String service) {
            return service(Output.of(service));
        }

        public IntegrationCustomNamespacesPerServiceArgs build() {
            if ($.namespaces == null) {
                throw new MissingRequiredPropertyException("IntegrationCustomNamespacesPerServiceArgs", "namespaces");
            }
            if ($.service == null) {
                throw new MissingRequiredPropertyException("IntegrationCustomNamespacesPerServiceArgs", "service");
            }
            return $;
        }
    }

}
