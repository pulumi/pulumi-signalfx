// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.signalfx.aws;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import com.pulumi.signalfx.Utilities;
import com.pulumi.signalfx.aws.IntegrationArgs;
import com.pulumi.signalfx.aws.inputs.IntegrationState;
import com.pulumi.signalfx.aws.outputs.IntegrationCustomNamespaceSyncRule;
import com.pulumi.signalfx.aws.outputs.IntegrationMetricStatsToSync;
import com.pulumi.signalfx.aws.outputs.IntegrationNamespaceSyncRule;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Optional;
import javax.annotation.Nullable;

/**
 * SignalFx AWS CloudWatch integrations. For help with this integration see [Monitoring Amazon Web Services](https://docs.signalfx.com/en/latest/integrations/amazon-web-services.html#monitor-amazon-web-services).
 * 
 * &gt; **NOTE** When managing integrations use a session token for an administrator to authenticate the SignalFx provider. See [Operations that require a session token for an administrator](https://dev.splunk.com/observability/docs/administration/authtokens#Operations-that-require-a-session-token-for-an-administrator).
 * 
 * &gt; **WARNING** This resource implements a part of a workflow. You must use it with one of either `signalfx.aws.ExternalIntegration` or `signalfx.aws.TokenIntegration`.
 * 
 * ## Example Usage
 * ```java
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.signalfx.aws.ExternalIntegration;
 * import com.pulumi.aws.iam.Role;
 * import com.pulumi.signalfx.aws.Integration;
 * import com.pulumi.signalfx.aws.IntegrationArgs;
 * import com.pulumi.signalfx.aws.inputs.IntegrationCustomNamespaceSyncRuleArgs;
 * import com.pulumi.signalfx.aws.inputs.IntegrationNamespaceSyncRuleArgs;
 * import com.pulumi.signalfx.aws.inputs.IntegrationMetricStatsToSyncArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var awsMyteamExternal = new ExternalIntegration(&#34;awsMyteamExternal&#34;);
 * 
 *         var awsSfxRole = new Role(&#34;awsSfxRole&#34;);
 * 
 *         var awsMyteam = new Integration(&#34;awsMyteam&#34;, IntegrationArgs.builder()        
 *             .enabled(true)
 *             .integrationId(awsMyteamExternal.id())
 *             .externalId(awsMyteamExternal.externalId())
 *             .roleArn(awsSfxRole.arn())
 *             .regions(&#34;us-east-1&#34;)
 *             .pollRate(300)
 *             .importCloudWatch(true)
 *             .enableAwsUsage(true)
 *             .customNamespaceSyncRules(IntegrationCustomNamespaceSyncRuleArgs.builder()
 *                 .defaultAction(&#34;Exclude&#34;)
 *                 .filterAction(&#34;Include&#34;)
 *                 .filterSource(&#34;filter(&#39;code&#39;, &#39;200&#39;)&#34;)
 *                 .namespace(&#34;my-custom-namespace&#34;)
 *                 .build())
 *             .namespaceSyncRules(IntegrationNamespaceSyncRuleArgs.builder()
 *                 .defaultAction(&#34;Exclude&#34;)
 *                 .filterAction(&#34;Include&#34;)
 *                 .filterSource(&#34;filter(&#39;code&#39;, &#39;200&#39;)&#34;)
 *                 .namespace(&#34;AWS/EC2&#34;)
 *                 .build())
 *             .metricStatsToSyncs(IntegrationMetricStatsToSyncArgs.builder()
 *                 .namespace(&#34;AWS/EC2&#34;)
 *                 .metric(&#34;NetworkPacketsIn&#34;)
 *                 .stats(&#34;upper&#34;)
 *                 .build())
 *             .build());
 * 
 *     }
 * }
 * ```
 * ## Service Names
 * 
 * &gt; **NOTE** You can use the data source &#34;signalfx.aws.getServices&#34; to specify all services.
 * 
 */
@ResourceType(type="signalfx:aws/integration:Integration")
public class Integration extends com.pulumi.resources.CustomResource {
    /**
     * List of custom AWS CloudWatch namespaces to monitor. Custom namespaces contain custom metrics that you define in AWS; SignalFx imports the metrics so you can monitor them.
     * 
     */
    @Export(name="customCloudwatchNamespaces", type=List.class, parameters={String.class})
    private Output</* @Nullable */ List<String>> customCloudwatchNamespaces;

    /**
     * @return List of custom AWS CloudWatch namespaces to monitor. Custom namespaces contain custom metrics that you define in AWS; SignalFx imports the metrics so you can monitor them.
     * 
     */
    public Output<Optional<List<String>>> customCloudwatchNamespaces() {
        return Codegen.optional(this.customCloudwatchNamespaces);
    }
    /**
     * Each element controls the data collected by SignalFx for the specified namespace. Conflicts with the `custom_cloudwatch_namespaces` property.
     * 
     */
    @Export(name="customNamespaceSyncRules", type=List.class, parameters={IntegrationCustomNamespaceSyncRule.class})
    private Output</* @Nullable */ List<IntegrationCustomNamespaceSyncRule>> customNamespaceSyncRules;

    /**
     * @return Each element controls the data collected by SignalFx for the specified namespace. Conflicts with the `custom_cloudwatch_namespaces` property.
     * 
     */
    public Output<Optional<List<IntegrationCustomNamespaceSyncRule>>> customNamespaceSyncRules() {
        return Codegen.optional(this.customNamespaceSyncRules);
    }
    /**
     * Flag that controls how SignalFx imports usage metrics from AWS to use with AWS Cost Optimizer. If `true`, SignalFx imports the metrics.
     * 
     */
    @Export(name="enableAwsUsage", type=Boolean.class, parameters={})
    private Output</* @Nullable */ Boolean> enableAwsUsage;

    /**
     * @return Flag that controls how SignalFx imports usage metrics from AWS to use with AWS Cost Optimizer. If `true`, SignalFx imports the metrics.
     * 
     */
    public Output<Optional<Boolean>> enableAwsUsage() {
        return Codegen.optional(this.enableAwsUsage);
    }
    /**
     * Controls how SignalFx checks for large amounts of data for this AWS integration. If `true`, SignalFx monitors the amount of data coming in from the integration.
     * 
     */
    @Export(name="enableCheckLargeVolume", type=Boolean.class, parameters={})
    private Output</* @Nullable */ Boolean> enableCheckLargeVolume;

    /**
     * @return Controls how SignalFx checks for large amounts of data for this AWS integration. If `true`, SignalFx monitors the amount of data coming in from the integration.
     * 
     */
    public Output<Optional<Boolean>> enableCheckLargeVolume() {
        return Codegen.optional(this.enableCheckLargeVolume);
    }
    /**
     * Enable the AWS logs synchronization. Note that this requires the inclusion of `&#34;logs:DescribeLogGroups&#34;`,  `&#34;logs:DeleteSubscriptionFilter&#34;`, `&#34;logs:DescribeSubscriptionFilters&#34;`, `&#34;logs:PutSubscriptionFilter&#34;`, and `&#34;s3:GetBucketLogging&#34;`,  `&#34;s3:GetBucketNotification&#34;`, `&#34;s3:PutBucketNotification&#34;` permissions. Additional permissions may be required to capture logs from specific AWS services.
     * 
     */
    @Export(name="enableLogsSync", type=Boolean.class, parameters={})
    private Output<Boolean> enableLogsSync;

    /**
     * @return Enable the AWS logs synchronization. Note that this requires the inclusion of `&#34;logs:DescribeLogGroups&#34;`,  `&#34;logs:DeleteSubscriptionFilter&#34;`, `&#34;logs:DescribeSubscriptionFilters&#34;`, `&#34;logs:PutSubscriptionFilter&#34;`, and `&#34;s3:GetBucketLogging&#34;`,  `&#34;s3:GetBucketNotification&#34;`, `&#34;s3:PutBucketNotification&#34;` permissions. Additional permissions may be required to capture logs from specific AWS services.
     * 
     */
    public Output<Boolean> enableLogsSync() {
        return this.enableLogsSync;
    }
    /**
     * Whether the integration is enabled.
     * 
     */
    @Export(name="enabled", type=Boolean.class, parameters={})
    private Output<Boolean> enabled;

    /**
     * @return Whether the integration is enabled.
     * 
     */
    public Output<Boolean> enabled() {
        return this.enabled;
    }
    /**
     * The `external_id` property from one of a `signalfx.aws.ExternalIntegration` or `signalfx.aws.TokenIntegration`
     * 
     */
    @Export(name="externalId", type=String.class, parameters={})
    private Output</* @Nullable */ String> externalId;

    /**
     * @return The `external_id` property from one of a `signalfx.aws.ExternalIntegration` or `signalfx.aws.TokenIntegration`
     * 
     */
    public Output<Optional<String>> externalId() {
        return Codegen.optional(this.externalId);
    }
    /**
     * Flag that controls how SignalFx imports Cloud Watch metrics. If true, SignalFx imports Cloud Watch metrics from AWS.
     * 
     */
    @Export(name="importCloudWatch", type=Boolean.class, parameters={})
    private Output</* @Nullable */ Boolean> importCloudWatch;

    /**
     * @return Flag that controls how SignalFx imports Cloud Watch metrics. If true, SignalFx imports Cloud Watch metrics from AWS.
     * 
     */
    public Output<Optional<Boolean>> importCloudWatch() {
        return Codegen.optional(this.importCloudWatch);
    }
    /**
     * The id of one of a `signalfx.aws.ExternalIntegration` or `signalfx.aws.TokenIntegration`.
     * 
     */
    @Export(name="integrationId", type=String.class, parameters={})
    private Output<String> integrationId;

    /**
     * @return The id of one of a `signalfx.aws.ExternalIntegration` or `signalfx.aws.TokenIntegration`.
     * 
     */
    public Output<String> integrationId() {
        return this.integrationId;
    }
    /**
     * If you specify `auth_method = \&#34;SecurityToken\&#34;` in your request to create an AWS integration object, use this property to specify the key (this is typically equivalent to the `AWS_SECRET_ACCESS_KEY` environment variable).
     * 
     */
    @Export(name="key", type=String.class, parameters={})
    private Output</* @Nullable */ String> key;

    /**
     * @return If you specify `auth_method = \&#34;SecurityToken\&#34;` in your request to create an AWS integration object, use this property to specify the key (this is typically equivalent to the `AWS_SECRET_ACCESS_KEY` environment variable).
     * 
     */
    public Output<Optional<String>> key() {
        return Codegen.optional(this.key);
    }
    /**
     * Each element in the array is an object that contains an AWS namespace name, AWS metric name and a list of statistics that SignalFx collects for this metric. If you specify this property, SignalFx retrieves only specified AWS statistics when AWS metric streams are not used. When AWS metric streams are used this property specifies additional extended statistics to collect (please note that AWS metric streams API supports percentile stats only; other stats are ignored). If you don&#39;t specify this property, SignalFx retrieves the AWS standard set of statistics.
     * 
     */
    @Export(name="metricStatsToSyncs", type=List.class, parameters={IntegrationMetricStatsToSync.class})
    private Output</* @Nullable */ List<IntegrationMetricStatsToSync>> metricStatsToSyncs;

    /**
     * @return Each element in the array is an object that contains an AWS namespace name, AWS metric name and a list of statistics that SignalFx collects for this metric. If you specify this property, SignalFx retrieves only specified AWS statistics when AWS metric streams are not used. When AWS metric streams are used this property specifies additional extended statistics to collect (please note that AWS metric streams API supports percentile stats only; other stats are ignored). If you don&#39;t specify this property, SignalFx retrieves the AWS standard set of statistics.
     * 
     */
    public Output<Optional<List<IntegrationMetricStatsToSync>>> metricStatsToSyncs() {
        return Codegen.optional(this.metricStatsToSyncs);
    }
    /**
     * Name of the org token to be used for data ingestion. If not specified then default access token is used.
     * 
     */
    @Export(name="namedToken", type=String.class, parameters={})
    private Output</* @Nullable */ String> namedToken;

    /**
     * @return Name of the org token to be used for data ingestion. If not specified then default access token is used.
     * 
     */
    public Output<Optional<String>> namedToken() {
        return Codegen.optional(this.namedToken);
    }
    /**
     * Each element in the array is an object that contains an AWS namespace name and a filter that controls the data that SignalFx collects for the namespace. Conflicts with the `services` property. If you don&#39;t specify either property, SignalFx syncs all data in all AWS namespaces.
     * 
     */
    @Export(name="namespaceSyncRules", type=List.class, parameters={IntegrationNamespaceSyncRule.class})
    private Output</* @Nullable */ List<IntegrationNamespaceSyncRule>> namespaceSyncRules;

    /**
     * @return Each element in the array is an object that contains an AWS namespace name and a filter that controls the data that SignalFx collects for the namespace. Conflicts with the `services` property. If you don&#39;t specify either property, SignalFx syncs all data in all AWS namespaces.
     * 
     */
    public Output<Optional<List<IntegrationNamespaceSyncRule>>> namespaceSyncRules() {
        return Codegen.optional(this.namespaceSyncRules);
    }
    /**
     * AWS poll rate (in seconds). Value between `60` and `600`. Default: `300`.
     * 
     */
    @Export(name="pollRate", type=Integer.class, parameters={})
    private Output</* @Nullable */ Integer> pollRate;

    /**
     * @return AWS poll rate (in seconds). Value between `60` and `600`. Default: `300`.
     * 
     */
    public Output<Optional<Integer>> pollRate() {
        return Codegen.optional(this.pollRate);
    }
    /**
     * List of AWS regions that SignalFx should monitor.
     * 
     */
    @Export(name="regions", type=List.class, parameters={String.class})
    private Output</* @Nullable */ List<String>> regions;

    /**
     * @return List of AWS regions that SignalFx should monitor.
     * 
     */
    public Output<Optional<List<String>>> regions() {
        return Codegen.optional(this.regions);
    }
    /**
     * Role ARN that you add to an existing AWS integration object. **Note**: Ensure you use the `arn` property of your role, not the id!
     * 
     */
    @Export(name="roleArn", type=String.class, parameters={})
    private Output</* @Nullable */ String> roleArn;

    /**
     * @return Role ARN that you add to an existing AWS integration object. **Note**: Ensure you use the `arn` property of your role, not the id!
     * 
     */
    public Output<Optional<String>> roleArn() {
        return Codegen.optional(this.roleArn);
    }
    /**
     * List of AWS services that you want SignalFx to monitor. Each element is a string designating an AWS service. Conflicts with `namespace_sync_rule`. See the documentation for [Creating Integrations](https://developers.signalfx.com/integrations_reference.html#operation/Create%20Integration) for valida values.
     * 
     */
    @Export(name="services", type=List.class, parameters={String.class})
    private Output</* @Nullable */ List<String>> services;

    /**
     * @return List of AWS services that you want SignalFx to monitor. Each element is a string designating an AWS service. Conflicts with `namespace_sync_rule`. See the documentation for [Creating Integrations](https://developers.signalfx.com/integrations_reference.html#operation/Create%20Integration) for valida values.
     * 
     */
    public Output<Optional<List<String>>> services() {
        return Codegen.optional(this.services);
    }
    /**
     * Indicates that SignalFx should sync metrics and metadata from custom AWS namespaces only (see the `custom_namespace_sync_rule` above). Defaults to `false`.
     * 
     */
    @Export(name="syncCustomNamespacesOnly", type=Boolean.class, parameters={})
    private Output</* @Nullable */ Boolean> syncCustomNamespacesOnly;

    /**
     * @return Indicates that SignalFx should sync metrics and metadata from custom AWS namespaces only (see the `custom_namespace_sync_rule` above). Defaults to `false`.
     * 
     */
    public Output<Optional<Boolean>> syncCustomNamespacesOnly() {
        return Codegen.optional(this.syncCustomNamespacesOnly);
    }
    /**
     * If you specify `auth_method = \&#34;SecurityToken\&#34;` in your request to create an AWS integration object, use this property to specify the token (this is typically equivalent to the `AWS_ACCESS_KEY_ID` environment variable).
     * 
     */
    @Export(name="token", type=String.class, parameters={})
    private Output</* @Nullable */ String> token;

    /**
     * @return If you specify `auth_method = \&#34;SecurityToken\&#34;` in your request to create an AWS integration object, use this property to specify the token (this is typically equivalent to the `AWS_ACCESS_KEY_ID` environment variable).
     * 
     */
    public Output<Optional<String>> token() {
        return Codegen.optional(this.token);
    }
    /**
     * Enable the use of Amazon&#39;s `GetMetricData` for collecting metrics. Note that this requires the inclusion of the `&#34;cloudwatch:GetMetricData&#34;` permission.
     * 
     */
    @Export(name="useGetMetricDataMethod", type=Boolean.class, parameters={})
    private Output</* @Nullable */ Boolean> useGetMetricDataMethod;

    /**
     * @return Enable the use of Amazon&#39;s `GetMetricData` for collecting metrics. Note that this requires the inclusion of the `&#34;cloudwatch:GetMetricData&#34;` permission.
     * 
     */
    public Output<Optional<Boolean>> useGetMetricDataMethod() {
        return Codegen.optional(this.useGetMetricDataMethod);
    }
    /**
     * Enable the use of Amazon Cloudwatch Metric Streams for ingesting metrics. Note that this requires the inclusion of `&#34;cloudwatch:ListMetricStreams&#34;`,`&#34;cloudwatch:GetMetricStream&#34;`, `&#34;cloudwatch:PutMetricStream&#34;`, `&#34;cloudwatch:DeleteMetricStream&#34;`, `&#34;cloudwatch:StartMetricStreams&#34;`, `&#34;cloudwatch:StopMetricStreams&#34;` and `&#34;iam:PassRole&#34;` permissions.
     * 
     */
    @Export(name="useMetricStreamsSync", type=Boolean.class, parameters={})
    private Output<Boolean> useMetricStreamsSync;

    /**
     * @return Enable the use of Amazon Cloudwatch Metric Streams for ingesting metrics. Note that this requires the inclusion of `&#34;cloudwatch:ListMetricStreams&#34;`,`&#34;cloudwatch:GetMetricStream&#34;`, `&#34;cloudwatch:PutMetricStream&#34;`, `&#34;cloudwatch:DeleteMetricStream&#34;`, `&#34;cloudwatch:StartMetricStreams&#34;`, `&#34;cloudwatch:StopMetricStreams&#34;` and `&#34;iam:PassRole&#34;` permissions.
     * 
     */
    public Output<Boolean> useMetricStreamsSync() {
        return this.useMetricStreamsSync;
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public Integration(String name) {
        this(name, IntegrationArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public Integration(String name, IntegrationArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public Integration(String name, IntegrationArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("signalfx:aws/integration:Integration", name, args == null ? IntegrationArgs.Empty : args, makeResourceOptions(options, Codegen.empty()));
    }

    private Integration(String name, Output<String> id, @Nullable IntegrationState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("signalfx:aws/integration:Integration", name, state, makeResourceOptions(options, id));
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static Integration get(String name, Output<String> id, @Nullable IntegrationState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new Integration(name, id, state, options);
    }
}
