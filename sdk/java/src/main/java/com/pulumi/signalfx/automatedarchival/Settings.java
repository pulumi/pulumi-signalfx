// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.signalfx.automatedarchival;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import com.pulumi.signalfx.Utilities;
import com.pulumi.signalfx.automatedarchival.SettingsArgs;
import com.pulumi.signalfx.automatedarchival.inputs.SettingsState;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Optional;
import javax.annotation.Nullable;

@ResourceType(type="signalfx:automatedarchival/settings:Settings")
public class Settings extends com.pulumi.resources.CustomResource {
    /**
     * Timestamp of when the automated archival setting was created
     * 
     */
    @Export(name="created", refs={Integer.class}, tree="[0]")
    private Output<Integer> created;

    /**
     * @return Timestamp of when the automated archival setting was created
     * 
     */
    public Output<Integer> created() {
        return this.created;
    }
    /**
     * ID of the creator of the automated archival setting
     * 
     */
    @Export(name="creator", refs={String.class}, tree="[0]")
    private Output<String> creator;

    /**
     * @return ID of the creator of the automated archival setting
     * 
     */
    public Output<String> creator() {
        return this.creator;
    }
    /**
     * Whether the automated archival is enabled for this organization or not
     * 
     */
    @Export(name="enabled", refs={Boolean.class}, tree="[0]")
    private Output<Boolean> enabled;

    /**
     * @return Whether the automated archival is enabled for this organization or not
     * 
     */
    public Output<Boolean> enabled() {
        return this.enabled;
    }
    /**
     * Grace period is an org level setting that applies to the newly created metrics. This allows customers to protect newly added metrics that users haven’t had the time to use in charts and detectors from being automatically archived The value here uses ISO 8061 duration format. Examples - &#39;P0D&#39;, &#39;P15D&#39;, &#39;P30D&#39;, &#39;P45D&#39;, &#39;P60D&#39;
     * 
     */
    @Export(name="gracePeriod", refs={String.class}, tree="[0]")
    private Output<String> gracePeriod;

    /**
     * @return Grace period is an org level setting that applies to the newly created metrics. This allows customers to protect newly added metrics that users haven’t had the time to use in charts and detectors from being automatically archived The value here uses ISO 8061 duration format. Examples - &#39;P0D&#39;, &#39;P15D&#39;, &#39;P30D&#39;, &#39;P45D&#39;, &#39;P60D&#39;
     * 
     */
    public Output<String> gracePeriod() {
        return this.gracePeriod;
    }
    /**
     * Timestamp of when the automated archival setting was last updated
     * 
     */
    @Export(name="lastUpdated", refs={Integer.class}, tree="[0]")
    private Output<Integer> lastUpdated;

    /**
     * @return Timestamp of when the automated archival setting was last updated
     * 
     */
    public Output<Integer> lastUpdated() {
        return this.lastUpdated;
    }
    /**
     * ID of user who last updated the automated archival setting
     * 
     */
    @Export(name="lastUpdatedBy", refs={String.class}, tree="[0]")
    private Output<String> lastUpdatedBy;

    /**
     * @return ID of user who last updated the automated archival setting
     * 
     */
    public Output<String> lastUpdatedBy() {
        return this.lastUpdatedBy;
    }
    /**
     * This tracks if a metric was unused in the past N number of days (N one of 30, 45, or 60). We’ll archive a metric if it wasn’t used in the lookback period. The value here uses ISO 8061 duration format. Examples - &#39;P30D&#39;, &#39;P45D&#39;, &#39;P60D&#39;
     * 
     */
    @Export(name="lookbackPeriod", refs={String.class}, tree="[0]")
    private Output<String> lookbackPeriod;

    /**
     * @return This tracks if a metric was unused in the past N number of days (N one of 30, 45, or 60). We’ll archive a metric if it wasn’t used in the lookback period. The value here uses ISO 8061 duration format. Examples - &#39;P30D&#39;, &#39;P45D&#39;, &#39;P60D&#39;
     * 
     */
    public Output<String> lookbackPeriod() {
        return this.lookbackPeriod;
    }
    /**
     * Org limit for the number of rulesets that can be created
     * 
     */
    @Export(name="rulesetLimit", refs={Integer.class}, tree="[0]")
    private Output</* @Nullable */ Integer> rulesetLimit;

    /**
     * @return Org limit for the number of rulesets that can be created
     * 
     */
    public Output<Optional<Integer>> rulesetLimit() {
        return Codegen.optional(this.rulesetLimit);
    }
    /**
     * Version of the automated archival setting
     * 
     */
    @Export(name="version", refs={String.class}, tree="[0]")
    private Output<String> version;

    /**
     * @return Version of the automated archival setting
     * 
     */
    public Output<String> version() {
        return this.version;
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public Settings(java.lang.String name) {
        this(name, SettingsArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public Settings(java.lang.String name, SettingsArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public Settings(java.lang.String name, SettingsArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("signalfx:automatedarchival/settings:Settings", name, makeArgs(args, options), makeResourceOptions(options, Codegen.empty()), false);
    }

    private Settings(java.lang.String name, Output<java.lang.String> id, @Nullable SettingsState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("signalfx:automatedarchival/settings:Settings", name, state, makeResourceOptions(options, id), false);
    }

    private static SettingsArgs makeArgs(SettingsArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        if (options != null && options.getUrn().isPresent()) {
            return null;
        }
        return args == null ? SettingsArgs.Empty : args;
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<java.lang.String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static Settings get(java.lang.String name, Output<java.lang.String> id, @Nullable SettingsState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new Settings(name, id, state, options);
    }
}
