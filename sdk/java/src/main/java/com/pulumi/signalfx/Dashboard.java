// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.signalfx;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import com.pulumi.signalfx.DashboardArgs;
import com.pulumi.signalfx.Utilities;
import com.pulumi.signalfx.inputs.DashboardState;
import com.pulumi.signalfx.outputs.DashboardChart;
import com.pulumi.signalfx.outputs.DashboardColumn;
import com.pulumi.signalfx.outputs.DashboardEventOverlay;
import com.pulumi.signalfx.outputs.DashboardFilter;
import com.pulumi.signalfx.outputs.DashboardGrid;
import com.pulumi.signalfx.outputs.DashboardPermissions;
import com.pulumi.signalfx.outputs.DashboardSelectedEventOverlay;
import com.pulumi.signalfx.outputs.DashboardVariable;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Optional;
import javax.annotation.Nullable;

@ResourceType(type="signalfx:index/dashboard:Dashboard")
public class Dashboard extends com.pulumi.resources.CustomResource {
    /**
     * Team IDs that have write access to this dashboard
     * 
     * @deprecated
     * Please use permissions_* fields now
     * 
     */
    @Deprecated /* Please use permissions_* fields now */
    @Export(name="authorizedWriterTeams", refs={List.class,String.class}, tree="[0,1]")
    private Output</* @Nullable */ List<String>> authorizedWriterTeams;

    /**
     * @return Team IDs that have write access to this dashboard
     * 
     */
    public Output<Optional<List<String>>> authorizedWriterTeams() {
        return Codegen.optional(this.authorizedWriterTeams);
    }
    /**
     * User IDs that have write access to this dashboard
     * 
     * @deprecated
     * Please use permissions fields now
     * 
     */
    @Deprecated /* Please use permissions fields now */
    @Export(name="authorizedWriterUsers", refs={List.class,String.class}, tree="[0,1]")
    private Output</* @Nullable */ List<String>> authorizedWriterUsers;

    /**
     * @return User IDs that have write access to this dashboard
     * 
     */
    public Output<Optional<List<String>>> authorizedWriterUsers() {
        return Codegen.optional(this.authorizedWriterUsers);
    }
    /**
     * Chart ID and layout information for the charts in the dashboard
     * 
     */
    @Export(name="charts", refs={List.class,DashboardChart.class}, tree="[0,1]")
    private Output</* @Nullable */ List<DashboardChart>> charts;

    /**
     * @return Chart ID and layout information for the charts in the dashboard
     * 
     */
    public Output<Optional<List<DashboardChart>>> charts() {
        return Codegen.optional(this.charts);
    }
    /**
     * Specifies the chart data display resolution for charts in this dashboard. Value can be one of &#34;default&#34;, &#34;low&#34;, &#34;high&#34;,
     * or &#34;highest&#34;. default by default
     * 
     */
    @Export(name="chartsResolution", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> chartsResolution;

    /**
     * @return Specifies the chart data display resolution for charts in this dashboard. Value can be one of &#34;default&#34;, &#34;low&#34;, &#34;high&#34;,
     * or &#34;highest&#34;. default by default
     * 
     */
    public Output<Optional<String>> chartsResolution() {
        return Codegen.optional(this.chartsResolution);
    }
    /**
     * Column layout. Charts listed, will be placed in a single column with the same width and height
     * 
     */
    @Export(name="columns", refs={List.class,DashboardColumn.class}, tree="[0,1]")
    private Output</* @Nullable */ List<DashboardColumn>> columns;

    /**
     * @return Column layout. Charts listed, will be placed in a single column with the same width and height
     * 
     */
    public Output<Optional<List<DashboardColumn>>> columns() {
        return Codegen.optional(this.columns);
    }
    /**
     * The ID of the dashboard group that contains the dashboard. If an ID is not provided during creation, the dashboard will
     * be placed in a newly created dashboard group
     * 
     */
    @Export(name="dashboardGroup", refs={String.class}, tree="[0]")
    private Output<String> dashboardGroup;

    /**
     * @return The ID of the dashboard group that contains the dashboard. If an ID is not provided during creation, the dashboard will
     * be placed in a newly created dashboard group
     * 
     */
    public Output<String> dashboardGroup() {
        return this.dashboardGroup;
    }
    /**
     * Description of the dashboard (Optional)
     * 
     */
    @Export(name="description", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> description;

    /**
     * @return Description of the dashboard (Optional)
     * 
     */
    public Output<Optional<String>> description() {
        return Codegen.optional(this.description);
    }
    @Export(name="discoveryOptionsQuery", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> discoveryOptionsQuery;

    public Output<Optional<String>> discoveryOptionsQuery() {
        return Codegen.optional(this.discoveryOptionsQuery);
    }
    @Export(name="discoveryOptionsSelectors", refs={List.class,String.class}, tree="[0,1]")
    private Output</* @Nullable */ List<String>> discoveryOptionsSelectors;

    public Output<Optional<List<String>>> discoveryOptionsSelectors() {
        return Codegen.optional(this.discoveryOptionsSelectors);
    }
    /**
     * Seconds since epoch to end the visualization
     * 
     */
    @Export(name="endTime", refs={Integer.class}, tree="[0]")
    private Output</* @Nullable */ Integer> endTime;

    /**
     * @return Seconds since epoch to end the visualization
     * 
     */
    public Output<Optional<Integer>> endTime() {
        return Codegen.optional(this.endTime);
    }
    /**
     * Event overlay to add to charts
     * 
     */
    @Export(name="eventOverlays", refs={List.class,DashboardEventOverlay.class}, tree="[0,1]")
    private Output</* @Nullable */ List<DashboardEventOverlay>> eventOverlays;

    /**
     * @return Event overlay to add to charts
     * 
     */
    public Output<Optional<List<DashboardEventOverlay>>> eventOverlays() {
        return Codegen.optional(this.eventOverlays);
    }
    /**
     * Filter to apply to each chart in the dashboard
     * 
     */
    @Export(name="filters", refs={List.class,DashboardFilter.class}, tree="[0,1]")
    private Output</* @Nullable */ List<DashboardFilter>> filters;

    /**
     * @return Filter to apply to each chart in the dashboard
     * 
     */
    public Output<Optional<List<DashboardFilter>>> filters() {
        return Codegen.optional(this.filters);
    }
    /**
     * Grid dashboard layout. Charts listed will be placed in a grid by row with the same width and height. If a chart can&#39;t
     * fit in a row, it will be placed automatically in the next row
     * 
     */
    @Export(name="grids", refs={List.class,DashboardGrid.class}, tree="[0,1]")
    private Output</* @Nullable */ List<DashboardGrid>> grids;

    /**
     * @return Grid dashboard layout. Charts listed will be placed in a grid by row with the same width and height. If a chart can&#39;t
     * fit in a row, it will be placed automatically in the next row
     * 
     */
    public Output<Optional<List<DashboardGrid>>> grids() {
        return Codegen.optional(this.grids);
    }
    /**
     * Name of the dashboard
     * 
     */
    @Export(name="name", refs={String.class}, tree="[0]")
    private Output<String> name;

    /**
     * @return Name of the dashboard
     * 
     */
    public Output<String> name() {
        return this.name;
    }
    @Export(name="permissions", refs={DashboardPermissions.class}, tree="[0]")
    private Output<DashboardPermissions> permissions;

    public Output<DashboardPermissions> permissions() {
        return this.permissions;
    }
    /**
     * Event overlay added to charts by default to charts
     * 
     */
    @Export(name="selectedEventOverlays", refs={List.class,DashboardSelectedEventOverlay.class}, tree="[0,1]")
    private Output</* @Nullable */ List<DashboardSelectedEventOverlay>> selectedEventOverlays;

    /**
     * @return Event overlay added to charts by default to charts
     * 
     */
    public Output<Optional<List<DashboardSelectedEventOverlay>>> selectedEventOverlays() {
        return Codegen.optional(this.selectedEventOverlays);
    }
    /**
     * Seconds since epoch to start the visualization
     * 
     */
    @Export(name="startTime", refs={Integer.class}, tree="[0]")
    private Output</* @Nullable */ Integer> startTime;

    /**
     * @return Seconds since epoch to start the visualization
     * 
     */
    public Output<Optional<Integer>> startTime() {
        return Codegen.optional(this.startTime);
    }
    /**
     * Tags of the dashboard
     * 
     */
    @Export(name="tags", refs={List.class,String.class}, tree="[0,1]")
    private Output</* @Nullable */ List<String>> tags;

    /**
     * @return Tags of the dashboard
     * 
     */
    public Output<Optional<List<String>>> tags() {
        return Codegen.optional(this.tags);
    }
    /**
     * From when to display data. Splunk Observability Cloud time syntax (e.g. -5m, -1h)
     * 
     */
    @Export(name="timeRange", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> timeRange;

    /**
     * @return From when to display data. Splunk Observability Cloud time syntax (e.g. -5m, -1h)
     * 
     */
    public Output<Optional<String>> timeRange() {
        return Codegen.optional(this.timeRange);
    }
    /**
     * URL of the dashboard
     * 
     */
    @Export(name="url", refs={String.class}, tree="[0]")
    private Output<String> url;

    /**
     * @return URL of the dashboard
     * 
     */
    public Output<String> url() {
        return this.url;
    }
    /**
     * Dashboard variable to apply to each chart in the dashboard
     * 
     */
    @Export(name="variables", refs={List.class,DashboardVariable.class}, tree="[0,1]")
    private Output</* @Nullable */ List<DashboardVariable>> variables;

    /**
     * @return Dashboard variable to apply to each chart in the dashboard
     * 
     */
    public Output<Optional<List<DashboardVariable>>> variables() {
        return Codegen.optional(this.variables);
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public Dashboard(String name) {
        this(name, DashboardArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public Dashboard(String name, DashboardArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public Dashboard(String name, DashboardArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("signalfx:index/dashboard:Dashboard", name, args == null ? DashboardArgs.Empty : args, makeResourceOptions(options, Codegen.empty()));
    }

    private Dashboard(String name, Output<String> id, @Nullable DashboardState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("signalfx:index/dashboard:Dashboard", name, state, makeResourceOptions(options, id));
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static Dashboard get(String name, Output<String> id, @Nullable DashboardState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new Dashboard(name, id, state, options);
    }
}
