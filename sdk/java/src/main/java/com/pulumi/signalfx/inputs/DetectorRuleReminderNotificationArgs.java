// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.signalfx.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class DetectorRuleReminderNotificationArgs extends com.pulumi.resources.ResourceArgs {

    public static final DetectorRuleReminderNotificationArgs Empty = new DetectorRuleReminderNotificationArgs();

    /**
     * The interval at which you want to receive the notifications, in milliseconds.
     * 
     */
    @Import(name="intervalMs", required=true)
    private Output<Integer> intervalMs;

    /**
     * @return The interval at which you want to receive the notifications, in milliseconds.
     * 
     */
    public Output<Integer> intervalMs() {
        return this.intervalMs;
    }

    /**
     * The duration during which repeat notifications are sent, in milliseconds.
     * 
     */
    @Import(name="timeoutMs")
    private @Nullable Output<Integer> timeoutMs;

    /**
     * @return The duration during which repeat notifications are sent, in milliseconds.
     * 
     */
    public Optional<Output<Integer>> timeoutMs() {
        return Optional.ofNullable(this.timeoutMs);
    }

    /**
     * Type of reminder notification. Currently, the only supported value is TIMEOUT.
     * 
     */
    @Import(name="type", required=true)
    private Output<String> type;

    /**
     * @return Type of reminder notification. Currently, the only supported value is TIMEOUT.
     * 
     */
    public Output<String> type() {
        return this.type;
    }

    private DetectorRuleReminderNotificationArgs() {}

    private DetectorRuleReminderNotificationArgs(DetectorRuleReminderNotificationArgs $) {
        this.intervalMs = $.intervalMs;
        this.timeoutMs = $.timeoutMs;
        this.type = $.type;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(DetectorRuleReminderNotificationArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private DetectorRuleReminderNotificationArgs $;

        public Builder() {
            $ = new DetectorRuleReminderNotificationArgs();
        }

        public Builder(DetectorRuleReminderNotificationArgs defaults) {
            $ = new DetectorRuleReminderNotificationArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param intervalMs The interval at which you want to receive the notifications, in milliseconds.
         * 
         * @return builder
         * 
         */
        public Builder intervalMs(Output<Integer> intervalMs) {
            $.intervalMs = intervalMs;
            return this;
        }

        /**
         * @param intervalMs The interval at which you want to receive the notifications, in milliseconds.
         * 
         * @return builder
         * 
         */
        public Builder intervalMs(Integer intervalMs) {
            return intervalMs(Output.of(intervalMs));
        }

        /**
         * @param timeoutMs The duration during which repeat notifications are sent, in milliseconds.
         * 
         * @return builder
         * 
         */
        public Builder timeoutMs(@Nullable Output<Integer> timeoutMs) {
            $.timeoutMs = timeoutMs;
            return this;
        }

        /**
         * @param timeoutMs The duration during which repeat notifications are sent, in milliseconds.
         * 
         * @return builder
         * 
         */
        public Builder timeoutMs(Integer timeoutMs) {
            return timeoutMs(Output.of(timeoutMs));
        }

        /**
         * @param type Type of reminder notification. Currently, the only supported value is TIMEOUT.
         * 
         * @return builder
         * 
         */
        public Builder type(Output<String> type) {
            $.type = type;
            return this;
        }

        /**
         * @param type Type of reminder notification. Currently, the only supported value is TIMEOUT.
         * 
         * @return builder
         * 
         */
        public Builder type(String type) {
            return type(Output.of(type));
        }

        public DetectorRuleReminderNotificationArgs build() {
            if ($.intervalMs == null) {
                throw new MissingRequiredPropertyException("DetectorRuleReminderNotificationArgs", "intervalMs");
            }
            if ($.type == null) {
                throw new MissingRequiredPropertyException("DetectorRuleReminderNotificationArgs", "type");
            }
            return $;
        }
    }

}
