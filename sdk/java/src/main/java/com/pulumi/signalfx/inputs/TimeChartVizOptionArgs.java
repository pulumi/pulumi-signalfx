// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.signalfx.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class TimeChartVizOptionArgs extends com.pulumi.resources.ResourceArgs {

    public static final TimeChartVizOptionArgs Empty = new TimeChartVizOptionArgs();

    /**
     * The Y-axis associated with values for this plot. Must be either &#34;right&#34; or &#34;left&#34;. Defaults to &#34;left&#34;.
     * 
     */
    @Import(name="axis")
    private @Nullable Output<String> axis;

    /**
     * @return The Y-axis associated with values for this plot. Must be either &#34;right&#34; or &#34;left&#34;. Defaults to &#34;left&#34;.
     * 
     */
    public Optional<Output<String>> axis() {
        return Optional.ofNullable(this.axis);
    }

    /**
     * Color to use
     * 
     */
    @Import(name="color")
    private @Nullable Output<String> color;

    /**
     * @return Color to use
     * 
     */
    public Optional<Output<String>> color() {
        return Optional.ofNullable(this.color);
    }

    /**
     * Specifies an alternate value for the Plot Name column of the Data Table associated with the chart.
     * 
     */
    @Import(name="displayName")
    private @Nullable Output<String> displayName;

    /**
     * @return Specifies an alternate value for the Plot Name column of the Data Table associated with the chart.
     * 
     */
    public Optional<Output<String>> displayName() {
        return Optional.ofNullable(this.displayName);
    }

    /**
     * The label used in the publish statement that displays the plot (metric time series data) you want to customize
     * 
     */
    @Import(name="label", required=true)
    private Output<String> label;

    /**
     * @return The label used in the publish statement that displays the plot (metric time series data) you want to customize
     * 
     */
    public Output<String> label() {
        return this.label;
    }

    /**
     * (Chart plot_type by default) The visualization style to use. Must be &#34;LineChart&#34;, &#34;AreaChart&#34;, &#34;ColumnChart&#34;, or &#34;Histogram&#34;
     * 
     */
    @Import(name="plotType")
    private @Nullable Output<String> plotType;

    /**
     * @return (Chart plot_type by default) The visualization style to use. Must be &#34;LineChart&#34;, &#34;AreaChart&#34;, &#34;ColumnChart&#34;, or &#34;Histogram&#34;
     * 
     */
    public Optional<Output<String>> plotType() {
        return Optional.ofNullable(this.plotType);
    }

    /**
     * An arbitrary prefix to display with the value of this plot
     * 
     */
    @Import(name="valuePrefix")
    private @Nullable Output<String> valuePrefix;

    /**
     * @return An arbitrary prefix to display with the value of this plot
     * 
     */
    public Optional<Output<String>> valuePrefix() {
        return Optional.ofNullable(this.valuePrefix);
    }

    /**
     * An arbitrary suffix to display with the value of this plot
     * 
     */
    @Import(name="valueSuffix")
    private @Nullable Output<String> valueSuffix;

    /**
     * @return An arbitrary suffix to display with the value of this plot
     * 
     */
    public Optional<Output<String>> valueSuffix() {
        return Optional.ofNullable(this.valueSuffix);
    }

    /**
     * A unit to attach to this plot. Units support automatic scaling (eg thousands of bytes will be displayed as kilobytes)
     * 
     */
    @Import(name="valueUnit")
    private @Nullable Output<String> valueUnit;

    /**
     * @return A unit to attach to this plot. Units support automatic scaling (eg thousands of bytes will be displayed as kilobytes)
     * 
     */
    public Optional<Output<String>> valueUnit() {
        return Optional.ofNullable(this.valueUnit);
    }

    private TimeChartVizOptionArgs() {}

    private TimeChartVizOptionArgs(TimeChartVizOptionArgs $) {
        this.axis = $.axis;
        this.color = $.color;
        this.displayName = $.displayName;
        this.label = $.label;
        this.plotType = $.plotType;
        this.valuePrefix = $.valuePrefix;
        this.valueSuffix = $.valueSuffix;
        this.valueUnit = $.valueUnit;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(TimeChartVizOptionArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private TimeChartVizOptionArgs $;

        public Builder() {
            $ = new TimeChartVizOptionArgs();
        }

        public Builder(TimeChartVizOptionArgs defaults) {
            $ = new TimeChartVizOptionArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param axis The Y-axis associated with values for this plot. Must be either &#34;right&#34; or &#34;left&#34;. Defaults to &#34;left&#34;.
         * 
         * @return builder
         * 
         */
        public Builder axis(@Nullable Output<String> axis) {
            $.axis = axis;
            return this;
        }

        /**
         * @param axis The Y-axis associated with values for this plot. Must be either &#34;right&#34; or &#34;left&#34;. Defaults to &#34;left&#34;.
         * 
         * @return builder
         * 
         */
        public Builder axis(String axis) {
            return axis(Output.of(axis));
        }

        /**
         * @param color Color to use
         * 
         * @return builder
         * 
         */
        public Builder color(@Nullable Output<String> color) {
            $.color = color;
            return this;
        }

        /**
         * @param color Color to use
         * 
         * @return builder
         * 
         */
        public Builder color(String color) {
            return color(Output.of(color));
        }

        /**
         * @param displayName Specifies an alternate value for the Plot Name column of the Data Table associated with the chart.
         * 
         * @return builder
         * 
         */
        public Builder displayName(@Nullable Output<String> displayName) {
            $.displayName = displayName;
            return this;
        }

        /**
         * @param displayName Specifies an alternate value for the Plot Name column of the Data Table associated with the chart.
         * 
         * @return builder
         * 
         */
        public Builder displayName(String displayName) {
            return displayName(Output.of(displayName));
        }

        /**
         * @param label The label used in the publish statement that displays the plot (metric time series data) you want to customize
         * 
         * @return builder
         * 
         */
        public Builder label(Output<String> label) {
            $.label = label;
            return this;
        }

        /**
         * @param label The label used in the publish statement that displays the plot (metric time series data) you want to customize
         * 
         * @return builder
         * 
         */
        public Builder label(String label) {
            return label(Output.of(label));
        }

        /**
         * @param plotType (Chart plot_type by default) The visualization style to use. Must be &#34;LineChart&#34;, &#34;AreaChart&#34;, &#34;ColumnChart&#34;, or &#34;Histogram&#34;
         * 
         * @return builder
         * 
         */
        public Builder plotType(@Nullable Output<String> plotType) {
            $.plotType = plotType;
            return this;
        }

        /**
         * @param plotType (Chart plot_type by default) The visualization style to use. Must be &#34;LineChart&#34;, &#34;AreaChart&#34;, &#34;ColumnChart&#34;, or &#34;Histogram&#34;
         * 
         * @return builder
         * 
         */
        public Builder plotType(String plotType) {
            return plotType(Output.of(plotType));
        }

        /**
         * @param valuePrefix An arbitrary prefix to display with the value of this plot
         * 
         * @return builder
         * 
         */
        public Builder valuePrefix(@Nullable Output<String> valuePrefix) {
            $.valuePrefix = valuePrefix;
            return this;
        }

        /**
         * @param valuePrefix An arbitrary prefix to display with the value of this plot
         * 
         * @return builder
         * 
         */
        public Builder valuePrefix(String valuePrefix) {
            return valuePrefix(Output.of(valuePrefix));
        }

        /**
         * @param valueSuffix An arbitrary suffix to display with the value of this plot
         * 
         * @return builder
         * 
         */
        public Builder valueSuffix(@Nullable Output<String> valueSuffix) {
            $.valueSuffix = valueSuffix;
            return this;
        }

        /**
         * @param valueSuffix An arbitrary suffix to display with the value of this plot
         * 
         * @return builder
         * 
         */
        public Builder valueSuffix(String valueSuffix) {
            return valueSuffix(Output.of(valueSuffix));
        }

        /**
         * @param valueUnit A unit to attach to this plot. Units support automatic scaling (eg thousands of bytes will be displayed as kilobytes)
         * 
         * @return builder
         * 
         */
        public Builder valueUnit(@Nullable Output<String> valueUnit) {
            $.valueUnit = valueUnit;
            return this;
        }

        /**
         * @param valueUnit A unit to attach to this plot. Units support automatic scaling (eg thousands of bytes will be displayed as kilobytes)
         * 
         * @return builder
         * 
         */
        public Builder valueUnit(String valueUnit) {
            return valueUnit(Output.of(valueUnit));
        }

        public TimeChartVizOptionArgs build() {
            if ($.label == null) {
                throw new MissingRequiredPropertyException("TimeChartVizOptionArgs", "label");
            }
            return $;
        }
    }

}
