// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.signalfx.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class DashboardVariable {
    /**
     * @return An alias for the dashboard variable. This text will appear as the label for the dropdown field on the dashboard.
     * 
     */
    private final String alias;
    /**
     * @return If true, this variable will also match data that doesn&#39;t have this property at all.
     * 
     */
    private final @Nullable Boolean applyIfExist;
    /**
     * @return Variable description.
     * 
     */
    private final @Nullable String description;
    /**
     * @return The name of a dimension to filter against.
     * 
     */
    private final String property;
    /**
     * @return If `true`, this variable will only apply to charts that have a filter for the property.
     * 
     */
    private final @Nullable Boolean replaceOnly;
    /**
     * @return If `true`, this variable may only be set to the values listed in `values_suggested` and only these values will appear in autosuggestion menus. `false` by default.
     * 
     */
    private final @Nullable Boolean restrictedSuggestions;
    /**
     * @return Determines whether a value is required for this variable (and therefore whether it will be possible to view this dashboard without this filter applied). `false` by default.
     * 
     */
    private final @Nullable Boolean valueRequired;
    /**
     * @return A list of values to be used with the `property`, they will be combined via `OR`.
     * 
     */
    private final @Nullable List<String> values;
    /**
     * @return A list of strings of suggested values for this variable; these suggestions will receive priority when values are autosuggested for this variable.
     * 
     */
    private final @Nullable List<String> valuesSuggesteds;

    @CustomType.Constructor
    private DashboardVariable(
        @CustomType.Parameter("alias") String alias,
        @CustomType.Parameter("applyIfExist") @Nullable Boolean applyIfExist,
        @CustomType.Parameter("description") @Nullable String description,
        @CustomType.Parameter("property") String property,
        @CustomType.Parameter("replaceOnly") @Nullable Boolean replaceOnly,
        @CustomType.Parameter("restrictedSuggestions") @Nullable Boolean restrictedSuggestions,
        @CustomType.Parameter("valueRequired") @Nullable Boolean valueRequired,
        @CustomType.Parameter("values") @Nullable List<String> values,
        @CustomType.Parameter("valuesSuggesteds") @Nullable List<String> valuesSuggesteds) {
        this.alias = alias;
        this.applyIfExist = applyIfExist;
        this.description = description;
        this.property = property;
        this.replaceOnly = replaceOnly;
        this.restrictedSuggestions = restrictedSuggestions;
        this.valueRequired = valueRequired;
        this.values = values;
        this.valuesSuggesteds = valuesSuggesteds;
    }

    /**
     * @return An alias for the dashboard variable. This text will appear as the label for the dropdown field on the dashboard.
     * 
     */
    public String alias() {
        return this.alias;
    }
    /**
     * @return If true, this variable will also match data that doesn&#39;t have this property at all.
     * 
     */
    public Optional<Boolean> applyIfExist() {
        return Optional.ofNullable(this.applyIfExist);
    }
    /**
     * @return Variable description.
     * 
     */
    public Optional<String> description() {
        return Optional.ofNullable(this.description);
    }
    /**
     * @return The name of a dimension to filter against.
     * 
     */
    public String property() {
        return this.property;
    }
    /**
     * @return If `true`, this variable will only apply to charts that have a filter for the property.
     * 
     */
    public Optional<Boolean> replaceOnly() {
        return Optional.ofNullable(this.replaceOnly);
    }
    /**
     * @return If `true`, this variable may only be set to the values listed in `values_suggested` and only these values will appear in autosuggestion menus. `false` by default.
     * 
     */
    public Optional<Boolean> restrictedSuggestions() {
        return Optional.ofNullable(this.restrictedSuggestions);
    }
    /**
     * @return Determines whether a value is required for this variable (and therefore whether it will be possible to view this dashboard without this filter applied). `false` by default.
     * 
     */
    public Optional<Boolean> valueRequired() {
        return Optional.ofNullable(this.valueRequired);
    }
    /**
     * @return A list of values to be used with the `property`, they will be combined via `OR`.
     * 
     */
    public List<String> values() {
        return this.values == null ? List.of() : this.values;
    }
    /**
     * @return A list of strings of suggested values for this variable; these suggestions will receive priority when values are autosuggested for this variable.
     * 
     */
    public List<String> valuesSuggesteds() {
        return this.valuesSuggesteds == null ? List.of() : this.valuesSuggesteds;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(DashboardVariable defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private String alias;
        private @Nullable Boolean applyIfExist;
        private @Nullable String description;
        private String property;
        private @Nullable Boolean replaceOnly;
        private @Nullable Boolean restrictedSuggestions;
        private @Nullable Boolean valueRequired;
        private @Nullable List<String> values;
        private @Nullable List<String> valuesSuggesteds;

        public Builder() {
    	      // Empty
        }

        public Builder(DashboardVariable defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.alias = defaults.alias;
    	      this.applyIfExist = defaults.applyIfExist;
    	      this.description = defaults.description;
    	      this.property = defaults.property;
    	      this.replaceOnly = defaults.replaceOnly;
    	      this.restrictedSuggestions = defaults.restrictedSuggestions;
    	      this.valueRequired = defaults.valueRequired;
    	      this.values = defaults.values;
    	      this.valuesSuggesteds = defaults.valuesSuggesteds;
        }

        public Builder alias(String alias) {
            this.alias = Objects.requireNonNull(alias);
            return this;
        }
        public Builder applyIfExist(@Nullable Boolean applyIfExist) {
            this.applyIfExist = applyIfExist;
            return this;
        }
        public Builder description(@Nullable String description) {
            this.description = description;
            return this;
        }
        public Builder property(String property) {
            this.property = Objects.requireNonNull(property);
            return this;
        }
        public Builder replaceOnly(@Nullable Boolean replaceOnly) {
            this.replaceOnly = replaceOnly;
            return this;
        }
        public Builder restrictedSuggestions(@Nullable Boolean restrictedSuggestions) {
            this.restrictedSuggestions = restrictedSuggestions;
            return this;
        }
        public Builder valueRequired(@Nullable Boolean valueRequired) {
            this.valueRequired = valueRequired;
            return this;
        }
        public Builder values(@Nullable List<String> values) {
            this.values = values;
            return this;
        }
        public Builder values(String... values) {
            return values(List.of(values));
        }
        public Builder valuesSuggesteds(@Nullable List<String> valuesSuggesteds) {
            this.valuesSuggesteds = valuesSuggesteds;
            return this;
        }
        public Builder valuesSuggesteds(String... valuesSuggesteds) {
            return valuesSuggesteds(List.of(valuesSuggesteds));
        }        public DashboardVariable build() {
            return new DashboardVariable(alias, applyIfExist, description, property, replaceOnly, restrictedSuggestions, valueRequired, values, valuesSuggesteds);
        }
    }
}
