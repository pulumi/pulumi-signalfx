// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.signalfx.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Double;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ListChartColorScaleArgs extends com.pulumi.resources.ResourceArgs {

    public static final ListChartColorScaleArgs Empty = new ListChartColorScaleArgs();

    /**
     * The color to use. Must be one of red, gold, iris, green, jade, gray, blue, azure, navy, brown, orange, yellow, magenta, cerise, pink, violet, purple, lilac, emerald, chartreuse, yellowgreen, aquamarine.
     * 
     */
    @Import(name="color", required=true)
    private Output<String> color;

    /**
     * @return The color to use. Must be one of red, gold, iris, green, jade, gray, blue, azure, navy, brown, orange, yellow, magenta, cerise, pink, violet, purple, lilac, emerald, chartreuse, yellowgreen, aquamarine.
     * 
     */
    public Output<String> color() {
        return this.color;
    }

    /**
     * Indicates the lower threshold non-inclusive value for this range.
     * 
     */
    @Import(name="gt")
    private @Nullable Output<Double> gt;

    /**
     * @return Indicates the lower threshold non-inclusive value for this range.
     * 
     */
    public Optional<Output<Double>> gt() {
        return Optional.ofNullable(this.gt);
    }

    /**
     * Indicates the lower threshold inclusive value for this range.
     * 
     */
    @Import(name="gte")
    private @Nullable Output<Double> gte;

    /**
     * @return Indicates the lower threshold inclusive value for this range.
     * 
     */
    public Optional<Output<Double>> gte() {
        return Optional.ofNullable(this.gte);
    }

    /**
     * Indicates the upper threshold non-inculsive value for this range.
     * 
     */
    @Import(name="lt")
    private @Nullable Output<Double> lt;

    /**
     * @return Indicates the upper threshold non-inculsive value for this range.
     * 
     */
    public Optional<Output<Double>> lt() {
        return Optional.ofNullable(this.lt);
    }

    /**
     * Indicates the upper threshold inclusive value for this range.
     * 
     */
    @Import(name="lte")
    private @Nullable Output<Double> lte;

    /**
     * @return Indicates the upper threshold inclusive value for this range.
     * 
     */
    public Optional<Output<Double>> lte() {
        return Optional.ofNullable(this.lte);
    }

    private ListChartColorScaleArgs() {}

    private ListChartColorScaleArgs(ListChartColorScaleArgs $) {
        this.color = $.color;
        this.gt = $.gt;
        this.gte = $.gte;
        this.lt = $.lt;
        this.lte = $.lte;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ListChartColorScaleArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ListChartColorScaleArgs $;

        public Builder() {
            $ = new ListChartColorScaleArgs();
        }

        public Builder(ListChartColorScaleArgs defaults) {
            $ = new ListChartColorScaleArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param color The color to use. Must be one of red, gold, iris, green, jade, gray, blue, azure, navy, brown, orange, yellow, magenta, cerise, pink, violet, purple, lilac, emerald, chartreuse, yellowgreen, aquamarine.
         * 
         * @return builder
         * 
         */
        public Builder color(Output<String> color) {
            $.color = color;
            return this;
        }

        /**
         * @param color The color to use. Must be one of red, gold, iris, green, jade, gray, blue, azure, navy, brown, orange, yellow, magenta, cerise, pink, violet, purple, lilac, emerald, chartreuse, yellowgreen, aquamarine.
         * 
         * @return builder
         * 
         */
        public Builder color(String color) {
            return color(Output.of(color));
        }

        /**
         * @param gt Indicates the lower threshold non-inclusive value for this range.
         * 
         * @return builder
         * 
         */
        public Builder gt(@Nullable Output<Double> gt) {
            $.gt = gt;
            return this;
        }

        /**
         * @param gt Indicates the lower threshold non-inclusive value for this range.
         * 
         * @return builder
         * 
         */
        public Builder gt(Double gt) {
            return gt(Output.of(gt));
        }

        /**
         * @param gte Indicates the lower threshold inclusive value for this range.
         * 
         * @return builder
         * 
         */
        public Builder gte(@Nullable Output<Double> gte) {
            $.gte = gte;
            return this;
        }

        /**
         * @param gte Indicates the lower threshold inclusive value for this range.
         * 
         * @return builder
         * 
         */
        public Builder gte(Double gte) {
            return gte(Output.of(gte));
        }

        /**
         * @param lt Indicates the upper threshold non-inculsive value for this range.
         * 
         * @return builder
         * 
         */
        public Builder lt(@Nullable Output<Double> lt) {
            $.lt = lt;
            return this;
        }

        /**
         * @param lt Indicates the upper threshold non-inculsive value for this range.
         * 
         * @return builder
         * 
         */
        public Builder lt(Double lt) {
            return lt(Output.of(lt));
        }

        /**
         * @param lte Indicates the upper threshold inclusive value for this range.
         * 
         * @return builder
         * 
         */
        public Builder lte(@Nullable Output<Double> lte) {
            $.lte = lte;
            return this;
        }

        /**
         * @param lte Indicates the upper threshold inclusive value for this range.
         * 
         * @return builder
         * 
         */
        public Builder lte(Double lte) {
            return lte(Output.of(lte));
        }

        public ListChartColorScaleArgs build() {
            if ($.color == null) {
                throw new MissingRequiredPropertyException("ListChartColorScaleArgs", "color");
            }
            return $;
        }
    }

}
