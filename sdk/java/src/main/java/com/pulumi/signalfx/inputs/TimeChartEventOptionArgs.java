// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.signalfx.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class TimeChartEventOptionArgs extends com.pulumi.resources.ResourceArgs {

    public static final TimeChartEventOptionArgs Empty = new TimeChartEventOptionArgs();

    /**
     * Color to use : gray, blue, azure, navy, brown, orange, yellow, iris, magenta, pink, purple, violet, lilac, emerald, green, aquamarine.
     * 
     */
    @Import(name="color")
    private @Nullable Output<String> color;

    /**
     * @return Color to use : gray, blue, azure, navy, brown, orange, yellow, iris, magenta, pink, purple, violet, lilac, emerald, green, aquamarine.
     * 
     */
    public Optional<Output<String>> color() {
        return Optional.ofNullable(this.color);
    }

    /**
     * Specifies an alternate value for the Plot Name column of the Data Table associated with the chart.
     * 
     */
    @Import(name="displayName")
    private @Nullable Output<String> displayName;

    /**
     * @return Specifies an alternate value for the Plot Name column of the Data Table associated with the chart.
     * 
     */
    public Optional<Output<String>> displayName() {
        return Optional.ofNullable(this.displayName);
    }

    /**
     * Label used in the publish statement that displays the event query you want to customize.
     * 
     */
    @Import(name="label", required=true)
    private Output<String> label;

    /**
     * @return Label used in the publish statement that displays the event query you want to customize.
     * 
     */
    public Output<String> label() {
        return this.label;
    }

    private TimeChartEventOptionArgs() {}

    private TimeChartEventOptionArgs(TimeChartEventOptionArgs $) {
        this.color = $.color;
        this.displayName = $.displayName;
        this.label = $.label;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(TimeChartEventOptionArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private TimeChartEventOptionArgs $;

        public Builder() {
            $ = new TimeChartEventOptionArgs();
        }

        public Builder(TimeChartEventOptionArgs defaults) {
            $ = new TimeChartEventOptionArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param color Color to use : gray, blue, azure, navy, brown, orange, yellow, iris, magenta, pink, purple, violet, lilac, emerald, green, aquamarine.
         * 
         * @return builder
         * 
         */
        public Builder color(@Nullable Output<String> color) {
            $.color = color;
            return this;
        }

        /**
         * @param color Color to use : gray, blue, azure, navy, brown, orange, yellow, iris, magenta, pink, purple, violet, lilac, emerald, green, aquamarine.
         * 
         * @return builder
         * 
         */
        public Builder color(String color) {
            return color(Output.of(color));
        }

        /**
         * @param displayName Specifies an alternate value for the Plot Name column of the Data Table associated with the chart.
         * 
         * @return builder
         * 
         */
        public Builder displayName(@Nullable Output<String> displayName) {
            $.displayName = displayName;
            return this;
        }

        /**
         * @param displayName Specifies an alternate value for the Plot Name column of the Data Table associated with the chart.
         * 
         * @return builder
         * 
         */
        public Builder displayName(String displayName) {
            return displayName(Output.of(displayName));
        }

        /**
         * @param label Label used in the publish statement that displays the event query you want to customize.
         * 
         * @return builder
         * 
         */
        public Builder label(Output<String> label) {
            $.label = label;
            return this;
        }

        /**
         * @param label Label used in the publish statement that displays the event query you want to customize.
         * 
         * @return builder
         * 
         */
        public Builder label(String label) {
            return label(Output.of(label));
        }

        public TimeChartEventOptionArgs build() {
            if ($.label == null) {
                throw new MissingRequiredPropertyException("TimeChartEventOptionArgs", "label");
            }
            return $;
        }
    }

}
