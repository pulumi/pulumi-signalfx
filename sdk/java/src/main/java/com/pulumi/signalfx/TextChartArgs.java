// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.signalfx;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class TextChartArgs extends com.pulumi.resources.ResourceArgs {

    public static final TextChartArgs Empty = new TextChartArgs();

    /**
     * Description of the text note.
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return Description of the text note.
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * Markdown text to display.
     * 
     */
    @Import(name="markdown", required=true)
    private Output<String> markdown;

    /**
     * @return Markdown text to display.
     * 
     */
    public Output<String> markdown() {
        return this.markdown;
    }

    /**
     * Name of the text note.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return Name of the text note.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    private TextChartArgs() {}

    private TextChartArgs(TextChartArgs $) {
        this.description = $.description;
        this.markdown = $.markdown;
        this.name = $.name;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(TextChartArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private TextChartArgs $;

        public Builder() {
            $ = new TextChartArgs();
        }

        public Builder(TextChartArgs defaults) {
            $ = new TextChartArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param description Description of the text note.
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description Description of the text note.
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param markdown Markdown text to display.
         * 
         * @return builder
         * 
         */
        public Builder markdown(Output<String> markdown) {
            $.markdown = markdown;
            return this;
        }

        /**
         * @param markdown Markdown text to display.
         * 
         * @return builder
         * 
         */
        public Builder markdown(String markdown) {
            return markdown(Output.of(markdown));
        }

        /**
         * @param name Name of the text note.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name Name of the text note.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        public TextChartArgs build() {
            $.markdown = Objects.requireNonNull($.markdown, "expected parameter 'markdown' to be non-null");
            return $;
        }
    }

}
