// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.signalfx;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.signalfx.inputs.DataLinkTargetExternalUrlArgs;
import com.pulumi.signalfx.inputs.DataLinkTargetSignalfxDashboardArgs;
import com.pulumi.signalfx.inputs.DataLinkTargetSplunkArgs;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class DataLinkArgs extends com.pulumi.resources.ResourceArgs {

    public static final DataLinkArgs Empty = new DataLinkArgs();

    /**
     * The dashobard ID to which this data link will be applied
     * 
     */
    @Import(name="contextDashboardId")
    private @Nullable Output<String> contextDashboardId;

    /**
     * @return The dashobard ID to which this data link will be applied
     * 
     */
    public Optional<Output<String>> contextDashboardId() {
        return Optional.ofNullable(this.contextDashboardId);
    }

    /**
     * Name (key) of the metadata that&#39;s the trigger of a data link. If you specify `property_value`, you must specify
     * `property_name`.
     * 
     */
    @Import(name="propertyName")
    private @Nullable Output<String> propertyName;

    /**
     * @return Name (key) of the metadata that&#39;s the trigger of a data link. If you specify `property_value`, you must specify
     * `property_name`.
     * 
     */
    public Optional<Output<String>> propertyName() {
        return Optional.ofNullable(this.propertyName);
    }

    /**
     * Value of the metadata that&#39;s the trigger of a data link. If you specify this property, you must also specify
     * `property_name`.
     * 
     */
    @Import(name="propertyValue")
    private @Nullable Output<String> propertyValue;

    /**
     * @return Value of the metadata that&#39;s the trigger of a data link. If you specify this property, you must also specify
     * `property_name`.
     * 
     */
    public Optional<Output<String>> propertyValue() {
        return Optional.ofNullable(this.propertyValue);
    }

    /**
     * Link to an external URL
     * 
     */
    @Import(name="targetExternalUrls")
    private @Nullable Output<List<DataLinkTargetExternalUrlArgs>> targetExternalUrls;

    /**
     * @return Link to an external URL
     * 
     */
    public Optional<Output<List<DataLinkTargetExternalUrlArgs>>> targetExternalUrls() {
        return Optional.ofNullable(this.targetExternalUrls);
    }

    /**
     * Link to a Splunk Observability Cloud dashboard
     * 
     */
    @Import(name="targetSignalfxDashboards")
    private @Nullable Output<List<DataLinkTargetSignalfxDashboardArgs>> targetSignalfxDashboards;

    /**
     * @return Link to a Splunk Observability Cloud dashboard
     * 
     */
    public Optional<Output<List<DataLinkTargetSignalfxDashboardArgs>>> targetSignalfxDashboards() {
        return Optional.ofNullable(this.targetSignalfxDashboards);
    }

    /**
     * Link to a Splunk instance
     * 
     */
    @Import(name="targetSplunks")
    private @Nullable Output<List<DataLinkTargetSplunkArgs>> targetSplunks;

    /**
     * @return Link to a Splunk instance
     * 
     */
    public Optional<Output<List<DataLinkTargetSplunkArgs>>> targetSplunks() {
        return Optional.ofNullable(this.targetSplunks);
    }

    private DataLinkArgs() {}

    private DataLinkArgs(DataLinkArgs $) {
        this.contextDashboardId = $.contextDashboardId;
        this.propertyName = $.propertyName;
        this.propertyValue = $.propertyValue;
        this.targetExternalUrls = $.targetExternalUrls;
        this.targetSignalfxDashboards = $.targetSignalfxDashboards;
        this.targetSplunks = $.targetSplunks;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(DataLinkArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private DataLinkArgs $;

        public Builder() {
            $ = new DataLinkArgs();
        }

        public Builder(DataLinkArgs defaults) {
            $ = new DataLinkArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param contextDashboardId The dashobard ID to which this data link will be applied
         * 
         * @return builder
         * 
         */
        public Builder contextDashboardId(@Nullable Output<String> contextDashboardId) {
            $.contextDashboardId = contextDashboardId;
            return this;
        }

        /**
         * @param contextDashboardId The dashobard ID to which this data link will be applied
         * 
         * @return builder
         * 
         */
        public Builder contextDashboardId(String contextDashboardId) {
            return contextDashboardId(Output.of(contextDashboardId));
        }

        /**
         * @param propertyName Name (key) of the metadata that&#39;s the trigger of a data link. If you specify `property_value`, you must specify
         * `property_name`.
         * 
         * @return builder
         * 
         */
        public Builder propertyName(@Nullable Output<String> propertyName) {
            $.propertyName = propertyName;
            return this;
        }

        /**
         * @param propertyName Name (key) of the metadata that&#39;s the trigger of a data link. If you specify `property_value`, you must specify
         * `property_name`.
         * 
         * @return builder
         * 
         */
        public Builder propertyName(String propertyName) {
            return propertyName(Output.of(propertyName));
        }

        /**
         * @param propertyValue Value of the metadata that&#39;s the trigger of a data link. If you specify this property, you must also specify
         * `property_name`.
         * 
         * @return builder
         * 
         */
        public Builder propertyValue(@Nullable Output<String> propertyValue) {
            $.propertyValue = propertyValue;
            return this;
        }

        /**
         * @param propertyValue Value of the metadata that&#39;s the trigger of a data link. If you specify this property, you must also specify
         * `property_name`.
         * 
         * @return builder
         * 
         */
        public Builder propertyValue(String propertyValue) {
            return propertyValue(Output.of(propertyValue));
        }

        /**
         * @param targetExternalUrls Link to an external URL
         * 
         * @return builder
         * 
         */
        public Builder targetExternalUrls(@Nullable Output<List<DataLinkTargetExternalUrlArgs>> targetExternalUrls) {
            $.targetExternalUrls = targetExternalUrls;
            return this;
        }

        /**
         * @param targetExternalUrls Link to an external URL
         * 
         * @return builder
         * 
         */
        public Builder targetExternalUrls(List<DataLinkTargetExternalUrlArgs> targetExternalUrls) {
            return targetExternalUrls(Output.of(targetExternalUrls));
        }

        /**
         * @param targetExternalUrls Link to an external URL
         * 
         * @return builder
         * 
         */
        public Builder targetExternalUrls(DataLinkTargetExternalUrlArgs... targetExternalUrls) {
            return targetExternalUrls(List.of(targetExternalUrls));
        }

        /**
         * @param targetSignalfxDashboards Link to a Splunk Observability Cloud dashboard
         * 
         * @return builder
         * 
         */
        public Builder targetSignalfxDashboards(@Nullable Output<List<DataLinkTargetSignalfxDashboardArgs>> targetSignalfxDashboards) {
            $.targetSignalfxDashboards = targetSignalfxDashboards;
            return this;
        }

        /**
         * @param targetSignalfxDashboards Link to a Splunk Observability Cloud dashboard
         * 
         * @return builder
         * 
         */
        public Builder targetSignalfxDashboards(List<DataLinkTargetSignalfxDashboardArgs> targetSignalfxDashboards) {
            return targetSignalfxDashboards(Output.of(targetSignalfxDashboards));
        }

        /**
         * @param targetSignalfxDashboards Link to a Splunk Observability Cloud dashboard
         * 
         * @return builder
         * 
         */
        public Builder targetSignalfxDashboards(DataLinkTargetSignalfxDashboardArgs... targetSignalfxDashboards) {
            return targetSignalfxDashboards(List.of(targetSignalfxDashboards));
        }

        /**
         * @param targetSplunks Link to a Splunk instance
         * 
         * @return builder
         * 
         */
        public Builder targetSplunks(@Nullable Output<List<DataLinkTargetSplunkArgs>> targetSplunks) {
            $.targetSplunks = targetSplunks;
            return this;
        }

        /**
         * @param targetSplunks Link to a Splunk instance
         * 
         * @return builder
         * 
         */
        public Builder targetSplunks(List<DataLinkTargetSplunkArgs> targetSplunks) {
            return targetSplunks(Output.of(targetSplunks));
        }

        /**
         * @param targetSplunks Link to a Splunk instance
         * 
         * @return builder
         * 
         */
        public Builder targetSplunks(DataLinkTargetSplunkArgs... targetSplunks) {
            return targetSplunks(List.of(targetSplunks));
        }

        public DataLinkArgs build() {
            return $;
        }
    }

}
