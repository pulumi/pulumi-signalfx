// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.signalfx.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Integer;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class OrgTokenDpmLimits {
    /**
     * @return The datapoints per minute (dpm) limit for this token. If you exceed this limit, Splunk Observability Cloud sends out an alert.
     * 
     */
    private Integer dpmLimit;
    /**
     * @return DPM level at which Splunk Observability Cloud sends the notification for this token. If you don&#39;t specify a notification, Splunk Observability Cloud sends the generic notification.
     * 
     */
    private @Nullable Integer dpmNotificationThreshold;

    private OrgTokenDpmLimits() {}
    /**
     * @return The datapoints per minute (dpm) limit for this token. If you exceed this limit, Splunk Observability Cloud sends out an alert.
     * 
     */
    public Integer dpmLimit() {
        return this.dpmLimit;
    }
    /**
     * @return DPM level at which Splunk Observability Cloud sends the notification for this token. If you don&#39;t specify a notification, Splunk Observability Cloud sends the generic notification.
     * 
     */
    public Optional<Integer> dpmNotificationThreshold() {
        return Optional.ofNullable(this.dpmNotificationThreshold);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(OrgTokenDpmLimits defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private Integer dpmLimit;
        private @Nullable Integer dpmNotificationThreshold;
        public Builder() {}
        public Builder(OrgTokenDpmLimits defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.dpmLimit = defaults.dpmLimit;
    	      this.dpmNotificationThreshold = defaults.dpmNotificationThreshold;
        }

        @CustomType.Setter
        public Builder dpmLimit(Integer dpmLimit) {
            if (dpmLimit == null) {
              throw new MissingRequiredPropertyException("OrgTokenDpmLimits", "dpmLimit");
            }
            this.dpmLimit = dpmLimit;
            return this;
        }
        @CustomType.Setter
        public Builder dpmNotificationThreshold(@Nullable Integer dpmNotificationThreshold) {

            this.dpmNotificationThreshold = dpmNotificationThreshold;
            return this;
        }
        public OrgTokenDpmLimits build() {
            final var _resultValue = new OrgTokenDpmLimits();
            _resultValue.dpmLimit = dpmLimit;
            _resultValue.dpmNotificationThreshold = dpmNotificationThreshold;
            return _resultValue;
        }
    }
}
