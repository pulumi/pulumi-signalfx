// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.signalfx.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class TimeChartVizOption {
    /**
     * @return Y-axis associated with values for this plot. Must be either `right` or `left`.
     * 
     */
    private final @Nullable String axis;
    /**
     * @return Color to use : gray, blue, azure, navy, brown, orange, yellow, iris, magenta, pink, purple, violet, lilac, emerald, green, aquamarine.
     * 
     */
    private final @Nullable String color;
    /**
     * @return Specifies an alternate value for the Plot Name column of the Data Table associated with the chart.
     * 
     */
    private final @Nullable String displayName;
    /**
     * @return Label used in the publish statement that displays the event query you want to customize.
     * 
     */
    private final String label;
    /**
     * @return The visualization style to use. Must be `&#34;LineChart&#34;`, `&#34;AreaChart&#34;`, `&#34;ColumnChart&#34;`, or `&#34;Histogram&#34;`. Chart level `plot_type` by default.
     * 
     */
    private final @Nullable String plotType;
    private final @Nullable String valuePrefix;
    private final @Nullable String valueSuffix;
    /**
     * @return A unit to attach to this plot. Units support automatic scaling (eg thousands of bytes will be displayed as kilobytes). Values values are `Bit, Kilobit, Megabit, Gigabit, Terabit, Petabit, Exabit, Zettabit, Yottabit, Byte, Kibibyte, Mebibyte, Gigibyte, Tebibyte, Pebibyte, Exbibyte, Zebibyte, Yobibyte, Nanosecond, Microsecond, Millisecond, Second, Minute, Hour, Day, Week`.
     * * `value_prefix`, `value_suffix` - (Optional) Arbitrary prefix/suffix to display with the value of this plot.
     * 
     */
    private final @Nullable String valueUnit;

    @CustomType.Constructor
    private TimeChartVizOption(
        @CustomType.Parameter("axis") @Nullable String axis,
        @CustomType.Parameter("color") @Nullable String color,
        @CustomType.Parameter("displayName") @Nullable String displayName,
        @CustomType.Parameter("label") String label,
        @CustomType.Parameter("plotType") @Nullable String plotType,
        @CustomType.Parameter("valuePrefix") @Nullable String valuePrefix,
        @CustomType.Parameter("valueSuffix") @Nullable String valueSuffix,
        @CustomType.Parameter("valueUnit") @Nullable String valueUnit) {
        this.axis = axis;
        this.color = color;
        this.displayName = displayName;
        this.label = label;
        this.plotType = plotType;
        this.valuePrefix = valuePrefix;
        this.valueSuffix = valueSuffix;
        this.valueUnit = valueUnit;
    }

    /**
     * @return Y-axis associated with values for this plot. Must be either `right` or `left`.
     * 
     */
    public Optional<String> axis() {
        return Optional.ofNullable(this.axis);
    }
    /**
     * @return Color to use : gray, blue, azure, navy, brown, orange, yellow, iris, magenta, pink, purple, violet, lilac, emerald, green, aquamarine.
     * 
     */
    public Optional<String> color() {
        return Optional.ofNullable(this.color);
    }
    /**
     * @return Specifies an alternate value for the Plot Name column of the Data Table associated with the chart.
     * 
     */
    public Optional<String> displayName() {
        return Optional.ofNullable(this.displayName);
    }
    /**
     * @return Label used in the publish statement that displays the event query you want to customize.
     * 
     */
    public String label() {
        return this.label;
    }
    /**
     * @return The visualization style to use. Must be `&#34;LineChart&#34;`, `&#34;AreaChart&#34;`, `&#34;ColumnChart&#34;`, or `&#34;Histogram&#34;`. Chart level `plot_type` by default.
     * 
     */
    public Optional<String> plotType() {
        return Optional.ofNullable(this.plotType);
    }
    public Optional<String> valuePrefix() {
        return Optional.ofNullable(this.valuePrefix);
    }
    public Optional<String> valueSuffix() {
        return Optional.ofNullable(this.valueSuffix);
    }
    /**
     * @return A unit to attach to this plot. Units support automatic scaling (eg thousands of bytes will be displayed as kilobytes). Values values are `Bit, Kilobit, Megabit, Gigabit, Terabit, Petabit, Exabit, Zettabit, Yottabit, Byte, Kibibyte, Mebibyte, Gigibyte, Tebibyte, Pebibyte, Exbibyte, Zebibyte, Yobibyte, Nanosecond, Microsecond, Millisecond, Second, Minute, Hour, Day, Week`.
     * * `value_prefix`, `value_suffix` - (Optional) Arbitrary prefix/suffix to display with the value of this plot.
     * 
     */
    public Optional<String> valueUnit() {
        return Optional.ofNullable(this.valueUnit);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(TimeChartVizOption defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable String axis;
        private @Nullable String color;
        private @Nullable String displayName;
        private String label;
        private @Nullable String plotType;
        private @Nullable String valuePrefix;
        private @Nullable String valueSuffix;
        private @Nullable String valueUnit;

        public Builder() {
    	      // Empty
        }

        public Builder(TimeChartVizOption defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.axis = defaults.axis;
    	      this.color = defaults.color;
    	      this.displayName = defaults.displayName;
    	      this.label = defaults.label;
    	      this.plotType = defaults.plotType;
    	      this.valuePrefix = defaults.valuePrefix;
    	      this.valueSuffix = defaults.valueSuffix;
    	      this.valueUnit = defaults.valueUnit;
        }

        public Builder axis(@Nullable String axis) {
            this.axis = axis;
            return this;
        }
        public Builder color(@Nullable String color) {
            this.color = color;
            return this;
        }
        public Builder displayName(@Nullable String displayName) {
            this.displayName = displayName;
            return this;
        }
        public Builder label(String label) {
            this.label = Objects.requireNonNull(label);
            return this;
        }
        public Builder plotType(@Nullable String plotType) {
            this.plotType = plotType;
            return this;
        }
        public Builder valuePrefix(@Nullable String valuePrefix) {
            this.valuePrefix = valuePrefix;
            return this;
        }
        public Builder valueSuffix(@Nullable String valueSuffix) {
            this.valueSuffix = valueSuffix;
            return this;
        }
        public Builder valueUnit(@Nullable String valueUnit) {
            this.valueUnit = valueUnit;
            return this;
        }        public TimeChartVizOption build() {
            return new TimeChartVizOption(axis, color, displayName, label, plotType, valuePrefix, valueSuffix, valueUnit);
        }
    }
}
