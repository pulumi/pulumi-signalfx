// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.signalfx;

import com.pulumi.core.TypeShape;
import com.pulumi.core.internal.Codegen;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Optional;

public final class Config {

    private static final com.pulumi.Config config = com.pulumi.Config.of("signalfx");
/**
 * API URL for your Splunk Observability Cloud org, may include a realm
 * 
 */
    public Optional<String> apiUrl() {
        return Codegen.stringProp("apiUrl").config(config).get();
    }
/**
 * Splunk Observability Cloud auth token
 * 
 */
    public Optional<String> authToken() {
        return Codegen.stringProp("authToken").config(config).get();
    }
/**
 * Application URL for your Splunk Observability Cloud org, often customized for organizations using SSO
 * 
 */
    public Optional<String> customAppUrl() {
        return Codegen.stringProp("customAppUrl").config(config).get();
    }
/**
 * Used to create a session token instead of an API token, it requires the account to be configured to login with Email and
 * Password
 * 
 */
    public Optional<String> email() {
        return Codegen.stringProp("email").config(config).get();
    }
/**
 * Allows for users to opt-in to new features that are considered experimental or not ready for general availabilty yet.
 * 
 */
    public Optional<Map<String,Boolean>> featurePreview() {
        return Codegen.objectProp("featurePreview", TypeShape.<Map<String,Boolean>>builder(Map.class).addParameter(String.class).addParameter(Boolean.class).build()).config(config).get();
    }
/**
 * Required if the user is configured to be part of multiple organizations
 * 
 */
    public Optional<String> organizationId() {
        return Codegen.stringProp("organizationId").config(config).get();
    }
/**
 * Used to create a session token instead of an API token, it requires the account to be configured to login with Email and
 * Password
 * 
 */
    public Optional<String> password() {
        return Codegen.stringProp("password").config(config).get();
    }
/**
 * Max retries for a single HTTP call. Defaults to 4
 * 
 */
    public Optional<Integer> retryMaxAttempts() {
        return Codegen.integerProp("retryMaxAttempts").config(config).get();
    }
/**
 * Maximum retry wait for a single HTTP call in seconds. Defaults to 30
 * 
 */
    public Optional<Integer> retryWaitMaxSeconds() {
        return Codegen.integerProp("retryWaitMaxSeconds").config(config).get();
    }
/**
 * Minimum retry wait for a single HTTP call in seconds. Defaults to 1
 * 
 */
    public Optional<Integer> retryWaitMinSeconds() {
        return Codegen.integerProp("retryWaitMinSeconds").config(config).get();
    }
/**
 * Allows for Tags to be added by default to resources that allow for tags to be included. If there is already tags
 * configured, the global tags are added in prefix.
 * 
 */
    public Optional<List<String>> tags() {
        return Codegen.objectProp("tags", TypeShape.<List<String>>builder(List.class).addParameter(String.class).build()).config(config).get();
    }
/**
 * Allows for teams to be defined at a provider level, and apply to all applicable resources created.
 * 
 */
    public Optional<List<String>> teams() {
        return Codegen.objectProp("teams", TypeShape.<List<String>>builder(List.class).addParameter(String.class).build()).config(config).get();
    }
/**
 * Timeout duration for a single HTTP call in seconds. Defaults to 120
 * 
 */
    public Optional<Integer> timeoutSeconds() {
        return Codegen.integerProp("timeoutSeconds").config(config).get();
    }
}
