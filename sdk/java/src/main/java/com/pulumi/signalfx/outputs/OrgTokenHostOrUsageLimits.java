// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.signalfx.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.Integer;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class OrgTokenHostOrUsageLimits {
    /**
     * @return Max number of Docker containers that can use this token
     * 
     */
    private @Nullable Integer containerLimit;
    /**
     * @return Notification threshold for Docker containers
     * 
     */
    private @Nullable Integer containerNotificationThreshold;
    /**
     * @return Max number of custom metrics that can be sent with this token
     * 
     */
    private @Nullable Integer customMetricsLimit;
    /**
     * @return Notification threshold for custom metrics
     * 
     */
    private @Nullable Integer customMetricsNotificationThreshold;
    /**
     * @return Max number of hi-res metrics that can be sent with this toke
     * 
     */
    private @Nullable Integer highResMetricsLimit;
    /**
     * @return Notification threshold for hi-res metrics
     * 
     */
    private @Nullable Integer highResMetricsNotificationThreshold;
    /**
     * @return Max number of hosts that can use this token
     * 
     */
    private @Nullable Integer hostLimit;
    /**
     * @return Notification threshold for hosts
     * 
     */
    private @Nullable Integer hostNotificationThreshold;

    private OrgTokenHostOrUsageLimits() {}
    /**
     * @return Max number of Docker containers that can use this token
     * 
     */
    public Optional<Integer> containerLimit() {
        return Optional.ofNullable(this.containerLimit);
    }
    /**
     * @return Notification threshold for Docker containers
     * 
     */
    public Optional<Integer> containerNotificationThreshold() {
        return Optional.ofNullable(this.containerNotificationThreshold);
    }
    /**
     * @return Max number of custom metrics that can be sent with this token
     * 
     */
    public Optional<Integer> customMetricsLimit() {
        return Optional.ofNullable(this.customMetricsLimit);
    }
    /**
     * @return Notification threshold for custom metrics
     * 
     */
    public Optional<Integer> customMetricsNotificationThreshold() {
        return Optional.ofNullable(this.customMetricsNotificationThreshold);
    }
    /**
     * @return Max number of hi-res metrics that can be sent with this toke
     * 
     */
    public Optional<Integer> highResMetricsLimit() {
        return Optional.ofNullable(this.highResMetricsLimit);
    }
    /**
     * @return Notification threshold for hi-res metrics
     * 
     */
    public Optional<Integer> highResMetricsNotificationThreshold() {
        return Optional.ofNullable(this.highResMetricsNotificationThreshold);
    }
    /**
     * @return Max number of hosts that can use this token
     * 
     */
    public Optional<Integer> hostLimit() {
        return Optional.ofNullable(this.hostLimit);
    }
    /**
     * @return Notification threshold for hosts
     * 
     */
    public Optional<Integer> hostNotificationThreshold() {
        return Optional.ofNullable(this.hostNotificationThreshold);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(OrgTokenHostOrUsageLimits defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable Integer containerLimit;
        private @Nullable Integer containerNotificationThreshold;
        private @Nullable Integer customMetricsLimit;
        private @Nullable Integer customMetricsNotificationThreshold;
        private @Nullable Integer highResMetricsLimit;
        private @Nullable Integer highResMetricsNotificationThreshold;
        private @Nullable Integer hostLimit;
        private @Nullable Integer hostNotificationThreshold;
        public Builder() {}
        public Builder(OrgTokenHostOrUsageLimits defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.containerLimit = defaults.containerLimit;
    	      this.containerNotificationThreshold = defaults.containerNotificationThreshold;
    	      this.customMetricsLimit = defaults.customMetricsLimit;
    	      this.customMetricsNotificationThreshold = defaults.customMetricsNotificationThreshold;
    	      this.highResMetricsLimit = defaults.highResMetricsLimit;
    	      this.highResMetricsNotificationThreshold = defaults.highResMetricsNotificationThreshold;
    	      this.hostLimit = defaults.hostLimit;
    	      this.hostNotificationThreshold = defaults.hostNotificationThreshold;
        }

        @CustomType.Setter
        public Builder containerLimit(@Nullable Integer containerLimit) {
            this.containerLimit = containerLimit;
            return this;
        }
        @CustomType.Setter
        public Builder containerNotificationThreshold(@Nullable Integer containerNotificationThreshold) {
            this.containerNotificationThreshold = containerNotificationThreshold;
            return this;
        }
        @CustomType.Setter
        public Builder customMetricsLimit(@Nullable Integer customMetricsLimit) {
            this.customMetricsLimit = customMetricsLimit;
            return this;
        }
        @CustomType.Setter
        public Builder customMetricsNotificationThreshold(@Nullable Integer customMetricsNotificationThreshold) {
            this.customMetricsNotificationThreshold = customMetricsNotificationThreshold;
            return this;
        }
        @CustomType.Setter
        public Builder highResMetricsLimit(@Nullable Integer highResMetricsLimit) {
            this.highResMetricsLimit = highResMetricsLimit;
            return this;
        }
        @CustomType.Setter
        public Builder highResMetricsNotificationThreshold(@Nullable Integer highResMetricsNotificationThreshold) {
            this.highResMetricsNotificationThreshold = highResMetricsNotificationThreshold;
            return this;
        }
        @CustomType.Setter
        public Builder hostLimit(@Nullable Integer hostLimit) {
            this.hostLimit = hostLimit;
            return this;
        }
        @CustomType.Setter
        public Builder hostNotificationThreshold(@Nullable Integer hostNotificationThreshold) {
            this.hostNotificationThreshold = hostNotificationThreshold;
            return this;
        }
        public OrgTokenHostOrUsageLimits build() {
            final var _resultValue = new OrgTokenHostOrUsageLimits();
            _resultValue.containerLimit = containerLimit;
            _resultValue.containerNotificationThreshold = containerNotificationThreshold;
            _resultValue.customMetricsLimit = customMetricsLimit;
            _resultValue.customMetricsNotificationThreshold = customMetricsNotificationThreshold;
            _resultValue.highResMetricsLimit = highResMetricsLimit;
            _resultValue.highResMetricsNotificationThreshold = highResMetricsNotificationThreshold;
            _resultValue.hostLimit = hostLimit;
            _resultValue.hostNotificationThreshold = hostNotificationThreshold;
            return _resultValue;
        }
    }
}
