// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.signalfx.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class DashboardGroupDashboardVariableOverrideArgs extends com.pulumi.resources.ResourceArgs {

    public static final DashboardGroupDashboardVariableOverrideArgs Empty = new DashboardGroupDashboardVariableOverrideArgs();

    /**
     * The name of a dimension to filter against.
     * 
     */
    @Import(name="property", required=true)
    private Output<String> property;

    /**
     * @return The name of a dimension to filter against.
     * 
     */
    public Output<String> property() {
        return this.property;
    }

    /**
     * A list of values to be used with the `property`, they will be combined via `OR`.
     * 
     */
    @Import(name="values")
    private @Nullable Output<List<String>> values;

    /**
     * @return A list of values to be used with the `property`, they will be combined via `OR`.
     * 
     */
    public Optional<Output<List<String>>> values() {
        return Optional.ofNullable(this.values);
    }

    /**
     * A list of strings of suggested values for this variable; these suggestions will receive priority when values are autosuggested for this variable.
     * 
     */
    @Import(name="valuesSuggesteds")
    private @Nullable Output<List<String>> valuesSuggesteds;

    /**
     * @return A list of strings of suggested values for this variable; these suggestions will receive priority when values are autosuggested for this variable.
     * 
     */
    public Optional<Output<List<String>>> valuesSuggesteds() {
        return Optional.ofNullable(this.valuesSuggesteds);
    }

    private DashboardGroupDashboardVariableOverrideArgs() {}

    private DashboardGroupDashboardVariableOverrideArgs(DashboardGroupDashboardVariableOverrideArgs $) {
        this.property = $.property;
        this.values = $.values;
        this.valuesSuggesteds = $.valuesSuggesteds;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(DashboardGroupDashboardVariableOverrideArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private DashboardGroupDashboardVariableOverrideArgs $;

        public Builder() {
            $ = new DashboardGroupDashboardVariableOverrideArgs();
        }

        public Builder(DashboardGroupDashboardVariableOverrideArgs defaults) {
            $ = new DashboardGroupDashboardVariableOverrideArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param property The name of a dimension to filter against.
         * 
         * @return builder
         * 
         */
        public Builder property(Output<String> property) {
            $.property = property;
            return this;
        }

        /**
         * @param property The name of a dimension to filter against.
         * 
         * @return builder
         * 
         */
        public Builder property(String property) {
            return property(Output.of(property));
        }

        /**
         * @param values A list of values to be used with the `property`, they will be combined via `OR`.
         * 
         * @return builder
         * 
         */
        public Builder values(@Nullable Output<List<String>> values) {
            $.values = values;
            return this;
        }

        /**
         * @param values A list of values to be used with the `property`, they will be combined via `OR`.
         * 
         * @return builder
         * 
         */
        public Builder values(List<String> values) {
            return values(Output.of(values));
        }

        /**
         * @param values A list of values to be used with the `property`, they will be combined via `OR`.
         * 
         * @return builder
         * 
         */
        public Builder values(String... values) {
            return values(List.of(values));
        }

        /**
         * @param valuesSuggesteds A list of strings of suggested values for this variable; these suggestions will receive priority when values are autosuggested for this variable.
         * 
         * @return builder
         * 
         */
        public Builder valuesSuggesteds(@Nullable Output<List<String>> valuesSuggesteds) {
            $.valuesSuggesteds = valuesSuggesteds;
            return this;
        }

        /**
         * @param valuesSuggesteds A list of strings of suggested values for this variable; these suggestions will receive priority when values are autosuggested for this variable.
         * 
         * @return builder
         * 
         */
        public Builder valuesSuggesteds(List<String> valuesSuggesteds) {
            return valuesSuggesteds(Output.of(valuesSuggesteds));
        }

        /**
         * @param valuesSuggesteds A list of strings of suggested values for this variable; these suggestions will receive priority when values are autosuggested for this variable.
         * 
         * @return builder
         * 
         */
        public Builder valuesSuggesteds(String... valuesSuggesteds) {
            return valuesSuggesteds(List.of(valuesSuggesteds));
        }

        public DashboardGroupDashboardVariableOverrideArgs build() {
            $.property = Objects.requireNonNull($.property, "expected parameter 'property' to be non-null");
            return $;
        }
    }

}
