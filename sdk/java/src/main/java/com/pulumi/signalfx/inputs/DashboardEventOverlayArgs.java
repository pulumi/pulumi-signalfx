// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.signalfx.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.signalfx.inputs.DashboardEventOverlaySourceArgs;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class DashboardEventOverlayArgs extends com.pulumi.resources.ResourceArgs {

    public static final DashboardEventOverlayArgs Empty = new DashboardEventOverlayArgs();

    @Import(name="color")
    private @Nullable Output<String> color;

    public Optional<Output<String>> color() {
        return Optional.ofNullable(this.color);
    }

    @Import(name="label")
    private @Nullable Output<String> label;

    public Optional<Output<String>> label() {
        return Optional.ofNullable(this.label);
    }

    @Import(name="line")
    private @Nullable Output<Boolean> line;

    public Optional<Output<Boolean>> line() {
        return Optional.ofNullable(this.line);
    }

    @Import(name="signal", required=true)
    private Output<String> signal;

    public Output<String> signal() {
        return this.signal;
    }

    @Import(name="sources")
    private @Nullable Output<List<DashboardEventOverlaySourceArgs>> sources;

    public Optional<Output<List<DashboardEventOverlaySourceArgs>>> sources() {
        return Optional.ofNullable(this.sources);
    }

    @Import(name="type")
    private @Nullable Output<String> type;

    public Optional<Output<String>> type() {
        return Optional.ofNullable(this.type);
    }

    private DashboardEventOverlayArgs() {}

    private DashboardEventOverlayArgs(DashboardEventOverlayArgs $) {
        this.color = $.color;
        this.label = $.label;
        this.line = $.line;
        this.signal = $.signal;
        this.sources = $.sources;
        this.type = $.type;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(DashboardEventOverlayArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private DashboardEventOverlayArgs $;

        public Builder() {
            $ = new DashboardEventOverlayArgs();
        }

        public Builder(DashboardEventOverlayArgs defaults) {
            $ = new DashboardEventOverlayArgs(Objects.requireNonNull(defaults));
        }

        public Builder color(@Nullable Output<String> color) {
            $.color = color;
            return this;
        }

        public Builder color(String color) {
            return color(Output.of(color));
        }

        public Builder label(@Nullable Output<String> label) {
            $.label = label;
            return this;
        }

        public Builder label(String label) {
            return label(Output.of(label));
        }

        public Builder line(@Nullable Output<Boolean> line) {
            $.line = line;
            return this;
        }

        public Builder line(Boolean line) {
            return line(Output.of(line));
        }

        public Builder signal(Output<String> signal) {
            $.signal = signal;
            return this;
        }

        public Builder signal(String signal) {
            return signal(Output.of(signal));
        }

        public Builder sources(@Nullable Output<List<DashboardEventOverlaySourceArgs>> sources) {
            $.sources = sources;
            return this;
        }

        public Builder sources(List<DashboardEventOverlaySourceArgs> sources) {
            return sources(Output.of(sources));
        }

        public Builder sources(DashboardEventOverlaySourceArgs... sources) {
            return sources(List.of(sources));
        }

        public Builder type(@Nullable Output<String> type) {
            $.type = type;
            return this;
        }

        public Builder type(String type) {
            return type(Output.of(type));
        }

        public DashboardEventOverlayArgs build() {
            if ($.signal == null) {
                throw new MissingRequiredPropertyException("DashboardEventOverlayArgs", "signal");
            }
            return $;
        }
    }

}
