// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.signalfx.gcp;

import com.pulumi.core.Output;
import com.pulumi.core.TypeShape;
import com.pulumi.deployment.Deployment;
import com.pulumi.deployment.InvokeOptions;
import com.pulumi.signalfx.Utilities;
import com.pulumi.signalfx.gcp.inputs.GetServicesArgs;
import com.pulumi.signalfx.gcp.inputs.GetServicesPlainArgs;
import com.pulumi.signalfx.gcp.outputs.GetServicesResult;
import java.util.concurrent.CompletableFuture;

public final class GcpFunctions {
    /**
     * Use this data source to get a list of GCP service names.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.signalfx.gcp.GcpFunctions;
     * import com.pulumi.signalfx.gcp.inputs.GetServicesArgs;
     * import com.pulumi.signalfx.gcp.Integration;
     * import com.pulumi.signalfx.gcp.IntegrationArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var gcpServices = GcpFunctions.getServices();
     * 
     *         var gcpMyteam = new Integration(&#34;gcpMyteam&#34;, IntegrationArgs.builder()        
     *             .services(gcpServices.applyValue(getServicesResult -&gt; getServicesResult.services()).stream().map(element -&gt; element.name()).collect(toList()))
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static Output<GetServicesResult> getServices() {
        return getServices(GetServicesArgs.Empty, InvokeOptions.Empty);
    }
    /**
     * Use this data source to get a list of GCP service names.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.signalfx.gcp.GcpFunctions;
     * import com.pulumi.signalfx.gcp.inputs.GetServicesArgs;
     * import com.pulumi.signalfx.gcp.Integration;
     * import com.pulumi.signalfx.gcp.IntegrationArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var gcpServices = GcpFunctions.getServices();
     * 
     *         var gcpMyteam = new Integration(&#34;gcpMyteam&#34;, IntegrationArgs.builder()        
     *             .services(gcpServices.applyValue(getServicesResult -&gt; getServicesResult.services()).stream().map(element -&gt; element.name()).collect(toList()))
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static CompletableFuture<GetServicesResult> getServicesPlain() {
        return getServicesPlain(GetServicesPlainArgs.Empty, InvokeOptions.Empty);
    }
    /**
     * Use this data source to get a list of GCP service names.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.signalfx.gcp.GcpFunctions;
     * import com.pulumi.signalfx.gcp.inputs.GetServicesArgs;
     * import com.pulumi.signalfx.gcp.Integration;
     * import com.pulumi.signalfx.gcp.IntegrationArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var gcpServices = GcpFunctions.getServices();
     * 
     *         var gcpMyteam = new Integration(&#34;gcpMyteam&#34;, IntegrationArgs.builder()        
     *             .services(gcpServices.applyValue(getServicesResult -&gt; getServicesResult.services()).stream().map(element -&gt; element.name()).collect(toList()))
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static Output<GetServicesResult> getServices(GetServicesArgs args) {
        return getServices(args, InvokeOptions.Empty);
    }
    /**
     * Use this data source to get a list of GCP service names.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.signalfx.gcp.GcpFunctions;
     * import com.pulumi.signalfx.gcp.inputs.GetServicesArgs;
     * import com.pulumi.signalfx.gcp.Integration;
     * import com.pulumi.signalfx.gcp.IntegrationArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var gcpServices = GcpFunctions.getServices();
     * 
     *         var gcpMyteam = new Integration(&#34;gcpMyteam&#34;, IntegrationArgs.builder()        
     *             .services(gcpServices.applyValue(getServicesResult -&gt; getServicesResult.services()).stream().map(element -&gt; element.name()).collect(toList()))
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static CompletableFuture<GetServicesResult> getServicesPlain(GetServicesPlainArgs args) {
        return getServicesPlain(args, InvokeOptions.Empty);
    }
    /**
     * Use this data source to get a list of GCP service names.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.signalfx.gcp.GcpFunctions;
     * import com.pulumi.signalfx.gcp.inputs.GetServicesArgs;
     * import com.pulumi.signalfx.gcp.Integration;
     * import com.pulumi.signalfx.gcp.IntegrationArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var gcpServices = GcpFunctions.getServices();
     * 
     *         var gcpMyteam = new Integration(&#34;gcpMyteam&#34;, IntegrationArgs.builder()        
     *             .services(gcpServices.applyValue(getServicesResult -&gt; getServicesResult.services()).stream().map(element -&gt; element.name()).collect(toList()))
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static Output<GetServicesResult> getServices(GetServicesArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("signalfx:gcp/getServices:getServices", TypeShape.of(GetServicesResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Use this data source to get a list of GCP service names.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.signalfx.gcp.GcpFunctions;
     * import com.pulumi.signalfx.gcp.inputs.GetServicesArgs;
     * import com.pulumi.signalfx.gcp.Integration;
     * import com.pulumi.signalfx.gcp.IntegrationArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var gcpServices = GcpFunctions.getServices();
     * 
     *         var gcpMyteam = new Integration(&#34;gcpMyteam&#34;, IntegrationArgs.builder()        
     *             .services(gcpServices.applyValue(getServicesResult -&gt; getServicesResult.services()).stream().map(element -&gt; element.name()).collect(toList()))
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static CompletableFuture<GetServicesResult> getServicesPlain(GetServicesPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("signalfx:gcp/getServices:getServices", TypeShape.of(GetServicesResult.class), args, Utilities.withVersion(options));
    }
}
