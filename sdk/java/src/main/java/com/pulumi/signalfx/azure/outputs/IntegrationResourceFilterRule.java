// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.signalfx.azure.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;

@CustomType
public final class IntegrationResourceFilterRule {
    /**
     * @return Expression that selects the data that Splunk Observability Cloud should sync for the resource associated with this sync rule. The expression uses the syntax defined for the SignalFlow `filter()` function. The source of each filter rule must be in the form filter(&#39;key&#39;, &#39;value&#39;). You can join multiple filter statements using the and and or operators. Referenced keys are limited to tags and must start with the azure_tag_ prefix.
     * 
     */
    private String filterSource;

    private IntegrationResourceFilterRule() {}
    /**
     * @return Expression that selects the data that Splunk Observability Cloud should sync for the resource associated with this sync rule. The expression uses the syntax defined for the SignalFlow `filter()` function. The source of each filter rule must be in the form filter(&#39;key&#39;, &#39;value&#39;). You can join multiple filter statements using the and and or operators. Referenced keys are limited to tags and must start with the azure_tag_ prefix.
     * 
     */
    public String filterSource() {
        return this.filterSource;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(IntegrationResourceFilterRule defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String filterSource;
        public Builder() {}
        public Builder(IntegrationResourceFilterRule defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.filterSource = defaults.filterSource;
        }

        @CustomType.Setter
        public Builder filterSource(String filterSource) {
            if (filterSource == null) {
              throw new MissingRequiredPropertyException("IntegrationResourceFilterRule", "filterSource");
            }
            this.filterSource = filterSource;
            return this;
        }
        public IntegrationResourceFilterRule build() {
            final var _resultValue = new IntegrationResourceFilterRule();
            _resultValue.filterSource = filterSource;
            return _resultValue;
        }
    }
}
