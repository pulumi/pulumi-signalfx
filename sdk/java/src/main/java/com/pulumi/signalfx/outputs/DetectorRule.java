// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.signalfx.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class DetectorRule {
    private @Nullable String description;
    private String detectLabel;
    private @Nullable Boolean disabled;
    private @Nullable List<String> notifications;
    private @Nullable String parameterizedBody;
    private @Nullable String parameterizedSubject;
    private @Nullable String runbookUrl;
    private String severity;
    private @Nullable String tip;

    private DetectorRule() {}
    public Optional<String> description() {
        return Optional.ofNullable(this.description);
    }
    public String detectLabel() {
        return this.detectLabel;
    }
    public Optional<Boolean> disabled() {
        return Optional.ofNullable(this.disabled);
    }
    public List<String> notifications() {
        return this.notifications == null ? List.of() : this.notifications;
    }
    public Optional<String> parameterizedBody() {
        return Optional.ofNullable(this.parameterizedBody);
    }
    public Optional<String> parameterizedSubject() {
        return Optional.ofNullable(this.parameterizedSubject);
    }
    public Optional<String> runbookUrl() {
        return Optional.ofNullable(this.runbookUrl);
    }
    public String severity() {
        return this.severity;
    }
    public Optional<String> tip() {
        return Optional.ofNullable(this.tip);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(DetectorRule defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable String description;
        private String detectLabel;
        private @Nullable Boolean disabled;
        private @Nullable List<String> notifications;
        private @Nullable String parameterizedBody;
        private @Nullable String parameterizedSubject;
        private @Nullable String runbookUrl;
        private String severity;
        private @Nullable String tip;
        public Builder() {}
        public Builder(DetectorRule defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.description = defaults.description;
    	      this.detectLabel = defaults.detectLabel;
    	      this.disabled = defaults.disabled;
    	      this.notifications = defaults.notifications;
    	      this.parameterizedBody = defaults.parameterizedBody;
    	      this.parameterizedSubject = defaults.parameterizedSubject;
    	      this.runbookUrl = defaults.runbookUrl;
    	      this.severity = defaults.severity;
    	      this.tip = defaults.tip;
        }

        @CustomType.Setter
        public Builder description(@Nullable String description) {

            this.description = description;
            return this;
        }
        @CustomType.Setter
        public Builder detectLabel(String detectLabel) {
            if (detectLabel == null) {
              throw new MissingRequiredPropertyException("DetectorRule", "detectLabel");
            }
            this.detectLabel = detectLabel;
            return this;
        }
        @CustomType.Setter
        public Builder disabled(@Nullable Boolean disabled) {

            this.disabled = disabled;
            return this;
        }
        @CustomType.Setter
        public Builder notifications(@Nullable List<String> notifications) {

            this.notifications = notifications;
            return this;
        }
        public Builder notifications(String... notifications) {
            return notifications(List.of(notifications));
        }
        @CustomType.Setter
        public Builder parameterizedBody(@Nullable String parameterizedBody) {

            this.parameterizedBody = parameterizedBody;
            return this;
        }
        @CustomType.Setter
        public Builder parameterizedSubject(@Nullable String parameterizedSubject) {

            this.parameterizedSubject = parameterizedSubject;
            return this;
        }
        @CustomType.Setter
        public Builder runbookUrl(@Nullable String runbookUrl) {

            this.runbookUrl = runbookUrl;
            return this;
        }
        @CustomType.Setter
        public Builder severity(String severity) {
            if (severity == null) {
              throw new MissingRequiredPropertyException("DetectorRule", "severity");
            }
            this.severity = severity;
            return this;
        }
        @CustomType.Setter
        public Builder tip(@Nullable String tip) {

            this.tip = tip;
            return this;
        }
        public DetectorRule build() {
            final var _resultValue = new DetectorRule();
            _resultValue.description = description;
            _resultValue.detectLabel = detectLabel;
            _resultValue.disabled = disabled;
            _resultValue.notifications = notifications;
            _resultValue.parameterizedBody = parameterizedBody;
            _resultValue.parameterizedSubject = parameterizedSubject;
            _resultValue.runbookUrl = runbookUrl;
            _resultValue.severity = severity;
            _resultValue.tip = tip;
            return _resultValue;
        }
    }
}
