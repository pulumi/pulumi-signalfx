// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.signalfx;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.signalfx.inputs.MetricRulesetAggregationRuleArgs;
import com.pulumi.signalfx.inputs.MetricRulesetExceptionRuleArgs;
import com.pulumi.signalfx.inputs.MetricRulesetRoutingRuleArgs;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class MetricRulesetArgs extends com.pulumi.resources.ResourceArgs {

    public static final MetricRulesetArgs Empty = new MetricRulesetArgs();

    /**
     * List of aggregation rules for the metric
     * 
     */
    @Import(name="aggregationRules")
    private @Nullable Output<List<MetricRulesetAggregationRuleArgs>> aggregationRules;

    /**
     * @return List of aggregation rules for the metric
     * 
     */
    public Optional<Output<List<MetricRulesetAggregationRuleArgs>>> aggregationRules() {
        return Optional.ofNullable(this.aggregationRules);
    }

    /**
     * Information about the metric ruleset
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return Information about the metric ruleset
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * List of exception rules for the metric
     * 
     */
    @Import(name="exceptionRules")
    private @Nullable Output<List<MetricRulesetExceptionRuleArgs>> exceptionRules;

    /**
     * @return List of exception rules for the metric
     * 
     */
    public Optional<Output<List<MetricRulesetExceptionRuleArgs>>> exceptionRules() {
        return Optional.ofNullable(this.exceptionRules);
    }

    /**
     * Name of the input metric
     * 
     */
    @Import(name="metricName", required=true)
    private Output<String> metricName;

    /**
     * @return Name of the input metric
     * 
     */
    public Output<String> metricName() {
        return this.metricName;
    }

    /**
     * Routing Rule object
     * 
     */
    @Import(name="routingRules", required=true)
    private Output<List<MetricRulesetRoutingRuleArgs>> routingRules;

    /**
     * @return Routing Rule object
     * 
     */
    public Output<List<MetricRulesetRoutingRuleArgs>> routingRules() {
        return this.routingRules;
    }

    private MetricRulesetArgs() {}

    private MetricRulesetArgs(MetricRulesetArgs $) {
        this.aggregationRules = $.aggregationRules;
        this.description = $.description;
        this.exceptionRules = $.exceptionRules;
        this.metricName = $.metricName;
        this.routingRules = $.routingRules;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(MetricRulesetArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private MetricRulesetArgs $;

        public Builder() {
            $ = new MetricRulesetArgs();
        }

        public Builder(MetricRulesetArgs defaults) {
            $ = new MetricRulesetArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param aggregationRules List of aggregation rules for the metric
         * 
         * @return builder
         * 
         */
        public Builder aggregationRules(@Nullable Output<List<MetricRulesetAggregationRuleArgs>> aggregationRules) {
            $.aggregationRules = aggregationRules;
            return this;
        }

        /**
         * @param aggregationRules List of aggregation rules for the metric
         * 
         * @return builder
         * 
         */
        public Builder aggregationRules(List<MetricRulesetAggregationRuleArgs> aggregationRules) {
            return aggregationRules(Output.of(aggregationRules));
        }

        /**
         * @param aggregationRules List of aggregation rules for the metric
         * 
         * @return builder
         * 
         */
        public Builder aggregationRules(MetricRulesetAggregationRuleArgs... aggregationRules) {
            return aggregationRules(List.of(aggregationRules));
        }

        /**
         * @param description Information about the metric ruleset
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description Information about the metric ruleset
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param exceptionRules List of exception rules for the metric
         * 
         * @return builder
         * 
         */
        public Builder exceptionRules(@Nullable Output<List<MetricRulesetExceptionRuleArgs>> exceptionRules) {
            $.exceptionRules = exceptionRules;
            return this;
        }

        /**
         * @param exceptionRules List of exception rules for the metric
         * 
         * @return builder
         * 
         */
        public Builder exceptionRules(List<MetricRulesetExceptionRuleArgs> exceptionRules) {
            return exceptionRules(Output.of(exceptionRules));
        }

        /**
         * @param exceptionRules List of exception rules for the metric
         * 
         * @return builder
         * 
         */
        public Builder exceptionRules(MetricRulesetExceptionRuleArgs... exceptionRules) {
            return exceptionRules(List.of(exceptionRules));
        }

        /**
         * @param metricName Name of the input metric
         * 
         * @return builder
         * 
         */
        public Builder metricName(Output<String> metricName) {
            $.metricName = metricName;
            return this;
        }

        /**
         * @param metricName Name of the input metric
         * 
         * @return builder
         * 
         */
        public Builder metricName(String metricName) {
            return metricName(Output.of(metricName));
        }

        /**
         * @param routingRules Routing Rule object
         * 
         * @return builder
         * 
         */
        public Builder routingRules(Output<List<MetricRulesetRoutingRuleArgs>> routingRules) {
            $.routingRules = routingRules;
            return this;
        }

        /**
         * @param routingRules Routing Rule object
         * 
         * @return builder
         * 
         */
        public Builder routingRules(List<MetricRulesetRoutingRuleArgs> routingRules) {
            return routingRules(Output.of(routingRules));
        }

        /**
         * @param routingRules Routing Rule object
         * 
         * @return builder
         * 
         */
        public Builder routingRules(MetricRulesetRoutingRuleArgs... routingRules) {
            return routingRules(List.of(routingRules));
        }

        public MetricRulesetArgs build() {
            if ($.metricName == null) {
                throw new MissingRequiredPropertyException("MetricRulesetArgs", "metricName");
            }
            if ($.routingRules == null) {
                throw new MissingRequiredPropertyException("MetricRulesetArgs", "routingRules");
            }
            return $;
        }
    }

}
