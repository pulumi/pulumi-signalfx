// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.signalfx;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.signalfx.inputs.MetricRulesetAggregationRuleArgs;
import com.pulumi.signalfx.inputs.MetricRulesetRoutingRuleArgs;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class MetricRulesetArgs extends com.pulumi.resources.ResourceArgs {

    public static final MetricRulesetArgs Empty = new MetricRulesetArgs();

    /**
     * List of aggregation rules for the metric
     * 
     */
    @Import(name="aggregationRules")
    private @Nullable Output<List<MetricRulesetAggregationRuleArgs>> aggregationRules;

    /**
     * @return List of aggregation rules for the metric
     * 
     */
    public Optional<Output<List<MetricRulesetAggregationRuleArgs>>> aggregationRules() {
        return Optional.ofNullable(this.aggregationRules);
    }

    /**
     * Name of the input metric
     * 
     */
    @Import(name="metricName", required=true)
    private Output<String> metricName;

    /**
     * @return Name of the input metric
     * 
     */
    public Output<String> metricName() {
        return this.metricName;
    }

    /**
     * Routing Rule object
     * 
     */
    @Import(name="routingRule", required=true)
    private Output<MetricRulesetRoutingRuleArgs> routingRule;

    /**
     * @return Routing Rule object
     * 
     */
    public Output<MetricRulesetRoutingRuleArgs> routingRule() {
        return this.routingRule;
    }

    private MetricRulesetArgs() {}

    private MetricRulesetArgs(MetricRulesetArgs $) {
        this.aggregationRules = $.aggregationRules;
        this.metricName = $.metricName;
        this.routingRule = $.routingRule;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(MetricRulesetArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private MetricRulesetArgs $;

        public Builder() {
            $ = new MetricRulesetArgs();
        }

        public Builder(MetricRulesetArgs defaults) {
            $ = new MetricRulesetArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param aggregationRules List of aggregation rules for the metric
         * 
         * @return builder
         * 
         */
        public Builder aggregationRules(@Nullable Output<List<MetricRulesetAggregationRuleArgs>> aggregationRules) {
            $.aggregationRules = aggregationRules;
            return this;
        }

        /**
         * @param aggregationRules List of aggregation rules for the metric
         * 
         * @return builder
         * 
         */
        public Builder aggregationRules(List<MetricRulesetAggregationRuleArgs> aggregationRules) {
            return aggregationRules(Output.of(aggregationRules));
        }

        /**
         * @param aggregationRules List of aggregation rules for the metric
         * 
         * @return builder
         * 
         */
        public Builder aggregationRules(MetricRulesetAggregationRuleArgs... aggregationRules) {
            return aggregationRules(List.of(aggregationRules));
        }

        /**
         * @param metricName Name of the input metric
         * 
         * @return builder
         * 
         */
        public Builder metricName(Output<String> metricName) {
            $.metricName = metricName;
            return this;
        }

        /**
         * @param metricName Name of the input metric
         * 
         * @return builder
         * 
         */
        public Builder metricName(String metricName) {
            return metricName(Output.of(metricName));
        }

        /**
         * @param routingRule Routing Rule object
         * 
         * @return builder
         * 
         */
        public Builder routingRule(Output<MetricRulesetRoutingRuleArgs> routingRule) {
            $.routingRule = routingRule;
            return this;
        }

        /**
         * @param routingRule Routing Rule object
         * 
         * @return builder
         * 
         */
        public Builder routingRule(MetricRulesetRoutingRuleArgs routingRule) {
            return routingRule(Output.of(routingRule));
        }

        public MetricRulesetArgs build() {
            $.metricName = Objects.requireNonNull($.metricName, "expected parameter 'metricName' to be non-null");
            $.routingRule = Objects.requireNonNull($.routingRule, "expected parameter 'routingRule' to be non-null");
            return $;
        }
    }

}
