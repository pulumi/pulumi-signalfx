// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.signalfx.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.signalfx.outputs.DashboardEventOverlaySource;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class DashboardEventOverlay {
    /**
     * @return Color to use : gray, blue, azure, navy, brown, orange, yellow, iris, magenta, pink, purple, violet, lilac, emerald, green, aquamarine.
     * 
     */
    private final @Nullable String color;
    /**
     * @return Text shown in the dropdown when selecting this overlay from the menu.
     * 
     */
    private final @Nullable String label;
    /**
     * @return Show a vertical line for the event. `false` by default.
     * 
     */
    private final @Nullable Boolean line;
    /**
     * @return Search term used to choose the events shown in the overlay.
     * 
     */
    private final String signal;
    /**
     * @return Each element specifies a filter to use against the signal specified in the `signal`.
     * 
     */
    private final @Nullable List<DashboardEventOverlaySource> sources;
    /**
     * @return Can be set to `eventTimeSeries` (the default) to refer to externally reported events, or `detectorEvents` to refer to events from detector triggers.
     * 
     */
    private final @Nullable String type;

    @CustomType.Constructor
    private DashboardEventOverlay(
        @CustomType.Parameter("color") @Nullable String color,
        @CustomType.Parameter("label") @Nullable String label,
        @CustomType.Parameter("line") @Nullable Boolean line,
        @CustomType.Parameter("signal") String signal,
        @CustomType.Parameter("sources") @Nullable List<DashboardEventOverlaySource> sources,
        @CustomType.Parameter("type") @Nullable String type) {
        this.color = color;
        this.label = label;
        this.line = line;
        this.signal = signal;
        this.sources = sources;
        this.type = type;
    }

    /**
     * @return Color to use : gray, blue, azure, navy, brown, orange, yellow, iris, magenta, pink, purple, violet, lilac, emerald, green, aquamarine.
     * 
     */
    public Optional<String> color() {
        return Optional.ofNullable(this.color);
    }
    /**
     * @return Text shown in the dropdown when selecting this overlay from the menu.
     * 
     */
    public Optional<String> label() {
        return Optional.ofNullable(this.label);
    }
    /**
     * @return Show a vertical line for the event. `false` by default.
     * 
     */
    public Optional<Boolean> line() {
        return Optional.ofNullable(this.line);
    }
    /**
     * @return Search term used to choose the events shown in the overlay.
     * 
     */
    public String signal() {
        return this.signal;
    }
    /**
     * @return Each element specifies a filter to use against the signal specified in the `signal`.
     * 
     */
    public List<DashboardEventOverlaySource> sources() {
        return this.sources == null ? List.of() : this.sources;
    }
    /**
     * @return Can be set to `eventTimeSeries` (the default) to refer to externally reported events, or `detectorEvents` to refer to events from detector triggers.
     * 
     */
    public Optional<String> type() {
        return Optional.ofNullable(this.type);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(DashboardEventOverlay defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable String color;
        private @Nullable String label;
        private @Nullable Boolean line;
        private String signal;
        private @Nullable List<DashboardEventOverlaySource> sources;
        private @Nullable String type;

        public Builder() {
    	      // Empty
        }

        public Builder(DashboardEventOverlay defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.color = defaults.color;
    	      this.label = defaults.label;
    	      this.line = defaults.line;
    	      this.signal = defaults.signal;
    	      this.sources = defaults.sources;
    	      this.type = defaults.type;
        }

        public Builder color(@Nullable String color) {
            this.color = color;
            return this;
        }
        public Builder label(@Nullable String label) {
            this.label = label;
            return this;
        }
        public Builder line(@Nullable Boolean line) {
            this.line = line;
            return this;
        }
        public Builder signal(String signal) {
            this.signal = Objects.requireNonNull(signal);
            return this;
        }
        public Builder sources(@Nullable List<DashboardEventOverlaySource> sources) {
            this.sources = sources;
            return this;
        }
        public Builder sources(DashboardEventOverlaySource... sources) {
            return sources(List.of(sources));
        }
        public Builder type(@Nullable String type) {
            this.type = type;
            return this;
        }        public DashboardEventOverlay build() {
            return new DashboardEventOverlay(color, label, line, signal, sources, type);
        }
    }
}
