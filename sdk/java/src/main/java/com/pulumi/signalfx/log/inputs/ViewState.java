// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.signalfx.log.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.signalfx.log.inputs.ViewColumnArgs;
import com.pulumi.signalfx.log.inputs.ViewSortOptionArgs;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ViewState extends com.pulumi.resources.ResourceArgs {

    public static final ViewState Empty = new ViewState();

    /**
     * Column configuration
     * 
     */
    @Import(name="columns")
    private @Nullable Output<List<ViewColumnArgs>> columns;

    /**
     * @return Column configuration
     * 
     */
    public Optional<Output<List<ViewColumnArgs>>> columns() {
        return Optional.ofNullable(this.columns);
    }

    /**
     * default connection that the dashboard uses
     * 
     */
    @Import(name="defaultConnection")
    private @Nullable Output<String> defaultConnection;

    /**
     * @return default connection that the dashboard uses
     * 
     */
    public Optional<Output<String>> defaultConnection() {
        return Optional.ofNullable(this.defaultConnection);
    }

    /**
     * Description of the chart (Optional)
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return Description of the chart (Optional)
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * Seconds since epoch to end the visualization
     * 
     */
    @Import(name="endTime")
    private @Nullable Output<Integer> endTime;

    /**
     * @return Seconds since epoch to end the visualization
     * 
     */
    public Optional<Output<Integer>> endTime() {
        return Optional.ofNullable(this.endTime);
    }

    /**
     * Name of the chart
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return Name of the chart
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * Signalflow program text for the chart. More info at &#34;https://developers.signalfx.com/docs/signalflow-overview&#34;
     * 
     */
    @Import(name="programText")
    private @Nullable Output<String> programText;

    /**
     * @return Signalflow program text for the chart. More info at &#34;https://developers.signalfx.com/docs/signalflow-overview&#34;
     * 
     */
    public Optional<Output<String>> programText() {
        return Optional.ofNullable(this.programText);
    }

    /**
     * Sorting options configuration
     * 
     */
    @Import(name="sortOptions")
    private @Nullable Output<List<ViewSortOptionArgs>> sortOptions;

    /**
     * @return Sorting options configuration
     * 
     */
    public Optional<Output<List<ViewSortOptionArgs>>> sortOptions() {
        return Optional.ofNullable(this.sortOptions);
    }

    /**
     * Seconds since epoch to start the visualization
     * 
     */
    @Import(name="startTime")
    private @Nullable Output<Integer> startTime;

    /**
     * @return Seconds since epoch to start the visualization
     * 
     */
    public Optional<Output<Integer>> startTime() {
        return Optional.ofNullable(this.startTime);
    }

    /**
     * Seconds to display in the visualization. This is a rolling range from the current time. Example: 3600 = `-1h`
     * 
     */
    @Import(name="timeRange")
    private @Nullable Output<Integer> timeRange;

    /**
     * @return Seconds to display in the visualization. This is a rolling range from the current time. Example: 3600 = `-1h`
     * 
     */
    public Optional<Output<Integer>> timeRange() {
        return Optional.ofNullable(this.timeRange);
    }

    /**
     * URL of the chart
     * 
     */
    @Import(name="url")
    private @Nullable Output<String> url;

    /**
     * @return URL of the chart
     * 
     */
    public Optional<Output<String>> url() {
        return Optional.ofNullable(this.url);
    }

    private ViewState() {}

    private ViewState(ViewState $) {
        this.columns = $.columns;
        this.defaultConnection = $.defaultConnection;
        this.description = $.description;
        this.endTime = $.endTime;
        this.name = $.name;
        this.programText = $.programText;
        this.sortOptions = $.sortOptions;
        this.startTime = $.startTime;
        this.timeRange = $.timeRange;
        this.url = $.url;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ViewState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ViewState $;

        public Builder() {
            $ = new ViewState();
        }

        public Builder(ViewState defaults) {
            $ = new ViewState(Objects.requireNonNull(defaults));
        }

        /**
         * @param columns Column configuration
         * 
         * @return builder
         * 
         */
        public Builder columns(@Nullable Output<List<ViewColumnArgs>> columns) {
            $.columns = columns;
            return this;
        }

        /**
         * @param columns Column configuration
         * 
         * @return builder
         * 
         */
        public Builder columns(List<ViewColumnArgs> columns) {
            return columns(Output.of(columns));
        }

        /**
         * @param columns Column configuration
         * 
         * @return builder
         * 
         */
        public Builder columns(ViewColumnArgs... columns) {
            return columns(List.of(columns));
        }

        /**
         * @param defaultConnection default connection that the dashboard uses
         * 
         * @return builder
         * 
         */
        public Builder defaultConnection(@Nullable Output<String> defaultConnection) {
            $.defaultConnection = defaultConnection;
            return this;
        }

        /**
         * @param defaultConnection default connection that the dashboard uses
         * 
         * @return builder
         * 
         */
        public Builder defaultConnection(String defaultConnection) {
            return defaultConnection(Output.of(defaultConnection));
        }

        /**
         * @param description Description of the chart (Optional)
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description Description of the chart (Optional)
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param endTime Seconds since epoch to end the visualization
         * 
         * @return builder
         * 
         */
        public Builder endTime(@Nullable Output<Integer> endTime) {
            $.endTime = endTime;
            return this;
        }

        /**
         * @param endTime Seconds since epoch to end the visualization
         * 
         * @return builder
         * 
         */
        public Builder endTime(Integer endTime) {
            return endTime(Output.of(endTime));
        }

        /**
         * @param name Name of the chart
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name Name of the chart
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param programText Signalflow program text for the chart. More info at &#34;https://developers.signalfx.com/docs/signalflow-overview&#34;
         * 
         * @return builder
         * 
         */
        public Builder programText(@Nullable Output<String> programText) {
            $.programText = programText;
            return this;
        }

        /**
         * @param programText Signalflow program text for the chart. More info at &#34;https://developers.signalfx.com/docs/signalflow-overview&#34;
         * 
         * @return builder
         * 
         */
        public Builder programText(String programText) {
            return programText(Output.of(programText));
        }

        /**
         * @param sortOptions Sorting options configuration
         * 
         * @return builder
         * 
         */
        public Builder sortOptions(@Nullable Output<List<ViewSortOptionArgs>> sortOptions) {
            $.sortOptions = sortOptions;
            return this;
        }

        /**
         * @param sortOptions Sorting options configuration
         * 
         * @return builder
         * 
         */
        public Builder sortOptions(List<ViewSortOptionArgs> sortOptions) {
            return sortOptions(Output.of(sortOptions));
        }

        /**
         * @param sortOptions Sorting options configuration
         * 
         * @return builder
         * 
         */
        public Builder sortOptions(ViewSortOptionArgs... sortOptions) {
            return sortOptions(List.of(sortOptions));
        }

        /**
         * @param startTime Seconds since epoch to start the visualization
         * 
         * @return builder
         * 
         */
        public Builder startTime(@Nullable Output<Integer> startTime) {
            $.startTime = startTime;
            return this;
        }

        /**
         * @param startTime Seconds since epoch to start the visualization
         * 
         * @return builder
         * 
         */
        public Builder startTime(Integer startTime) {
            return startTime(Output.of(startTime));
        }

        /**
         * @param timeRange Seconds to display in the visualization. This is a rolling range from the current time. Example: 3600 = `-1h`
         * 
         * @return builder
         * 
         */
        public Builder timeRange(@Nullable Output<Integer> timeRange) {
            $.timeRange = timeRange;
            return this;
        }

        /**
         * @param timeRange Seconds to display in the visualization. This is a rolling range from the current time. Example: 3600 = `-1h`
         * 
         * @return builder
         * 
         */
        public Builder timeRange(Integer timeRange) {
            return timeRange(Output.of(timeRange));
        }

        /**
         * @param url URL of the chart
         * 
         * @return builder
         * 
         */
        public Builder url(@Nullable Output<String> url) {
            $.url = url;
            return this;
        }

        /**
         * @param url URL of the chart
         * 
         * @return builder
         * 
         */
        public Builder url(String url) {
            return url(Output.of(url));
        }

        public ViewState build() {
            return $;
        }
    }

}
