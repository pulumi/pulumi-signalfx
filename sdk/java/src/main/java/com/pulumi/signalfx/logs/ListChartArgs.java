// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.signalfx.logs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.signalfx.logs.inputs.ListChartColumnArgs;
import com.pulumi.signalfx.logs.inputs.ListChartSortOptionArgs;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ListChartArgs extends com.pulumi.resources.ResourceArgs {

    public static final ListChartArgs Empty = new ListChartArgs();

    /**
     * Column configuration
     * 
     */
    @Import(name="columns")
    private @Nullable Output<List<ListChartColumnArgs>> columns;

    /**
     * @return Column configuration
     * 
     */
    public Optional<Output<List<ListChartColumnArgs>>> columns() {
        return Optional.ofNullable(this.columns);
    }

    /**
     * default connection that the dashboard uses
     * 
     */
    @Import(name="defaultConnection")
    private @Nullable Output<String> defaultConnection;

    /**
     * @return default connection that the dashboard uses
     * 
     */
    public Optional<Output<String>> defaultConnection() {
        return Optional.ofNullable(this.defaultConnection);
    }

    /**
     * Description of the chart.
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return Description of the chart.
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * Seconds since epoch. Used for visualization. Conflicts with `time_range`.
     * 
     */
    @Import(name="endTime")
    private @Nullable Output<Integer> endTime;

    /**
     * @return Seconds since epoch. Used for visualization. Conflicts with `time_range`.
     * 
     */
    public Optional<Output<Integer>> endTime() {
        return Optional.ofNullable(this.endTime);
    }

    /**
     * Name of the chart.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return Name of the chart.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * Signalflow program text for the chart. More info[in the SignalFx docs](https://developers.signalfx.com/signalflow_analytics/signalflow_overview.html#_signalflow_programming_language).
     * 
     */
    @Import(name="programText", required=true)
    private Output<String> programText;

    /**
     * @return Signalflow program text for the chart. More info[in the SignalFx docs](https://developers.signalfx.com/signalflow_analytics/signalflow_overview.html#_signalflow_programming_language).
     * 
     */
    public Output<String> programText() {
        return this.programText;
    }

    /**
     * Sorting options configuration
     * 
     */
    @Import(name="sortOptions")
    private @Nullable Output<List<ListChartSortOptionArgs>> sortOptions;

    /**
     * @return Sorting options configuration
     * 
     */
    public Optional<Output<List<ListChartSortOptionArgs>>> sortOptions() {
        return Optional.ofNullable(this.sortOptions);
    }

    /**
     * Seconds since epoch. Used for visualization. Conflicts with `time_range`.
     * 
     */
    @Import(name="startTime")
    private @Nullable Output<Integer> startTime;

    /**
     * @return Seconds since epoch. Used for visualization. Conflicts with `time_range`.
     * 
     */
    public Optional<Output<Integer>> startTime() {
        return Optional.ofNullable(this.startTime);
    }

    /**
     * How many seconds ago from which to display data. For example, the last hour would be `3600`, etc. Conflicts with `start_time` and `end_time`.
     * 
     */
    @Import(name="timeRange")
    private @Nullable Output<Integer> timeRange;

    /**
     * @return How many seconds ago from which to display data. For example, the last hour would be `3600`, etc. Conflicts with `start_time` and `end_time`.
     * 
     */
    public Optional<Output<Integer>> timeRange() {
        return Optional.ofNullable(this.timeRange);
    }

    private ListChartArgs() {}

    private ListChartArgs(ListChartArgs $) {
        this.columns = $.columns;
        this.defaultConnection = $.defaultConnection;
        this.description = $.description;
        this.endTime = $.endTime;
        this.name = $.name;
        this.programText = $.programText;
        this.sortOptions = $.sortOptions;
        this.startTime = $.startTime;
        this.timeRange = $.timeRange;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ListChartArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ListChartArgs $;

        public Builder() {
            $ = new ListChartArgs();
        }

        public Builder(ListChartArgs defaults) {
            $ = new ListChartArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param columns Column configuration
         * 
         * @return builder
         * 
         */
        public Builder columns(@Nullable Output<List<ListChartColumnArgs>> columns) {
            $.columns = columns;
            return this;
        }

        /**
         * @param columns Column configuration
         * 
         * @return builder
         * 
         */
        public Builder columns(List<ListChartColumnArgs> columns) {
            return columns(Output.of(columns));
        }

        /**
         * @param columns Column configuration
         * 
         * @return builder
         * 
         */
        public Builder columns(ListChartColumnArgs... columns) {
            return columns(List.of(columns));
        }

        /**
         * @param defaultConnection default connection that the dashboard uses
         * 
         * @return builder
         * 
         */
        public Builder defaultConnection(@Nullable Output<String> defaultConnection) {
            $.defaultConnection = defaultConnection;
            return this;
        }

        /**
         * @param defaultConnection default connection that the dashboard uses
         * 
         * @return builder
         * 
         */
        public Builder defaultConnection(String defaultConnection) {
            return defaultConnection(Output.of(defaultConnection));
        }

        /**
         * @param description Description of the chart.
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description Description of the chart.
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param endTime Seconds since epoch. Used for visualization. Conflicts with `time_range`.
         * 
         * @return builder
         * 
         */
        public Builder endTime(@Nullable Output<Integer> endTime) {
            $.endTime = endTime;
            return this;
        }

        /**
         * @param endTime Seconds since epoch. Used for visualization. Conflicts with `time_range`.
         * 
         * @return builder
         * 
         */
        public Builder endTime(Integer endTime) {
            return endTime(Output.of(endTime));
        }

        /**
         * @param name Name of the chart.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name Name of the chart.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param programText Signalflow program text for the chart. More info[in the SignalFx docs](https://developers.signalfx.com/signalflow_analytics/signalflow_overview.html#_signalflow_programming_language).
         * 
         * @return builder
         * 
         */
        public Builder programText(Output<String> programText) {
            $.programText = programText;
            return this;
        }

        /**
         * @param programText Signalflow program text for the chart. More info[in the SignalFx docs](https://developers.signalfx.com/signalflow_analytics/signalflow_overview.html#_signalflow_programming_language).
         * 
         * @return builder
         * 
         */
        public Builder programText(String programText) {
            return programText(Output.of(programText));
        }

        /**
         * @param sortOptions Sorting options configuration
         * 
         * @return builder
         * 
         */
        public Builder sortOptions(@Nullable Output<List<ListChartSortOptionArgs>> sortOptions) {
            $.sortOptions = sortOptions;
            return this;
        }

        /**
         * @param sortOptions Sorting options configuration
         * 
         * @return builder
         * 
         */
        public Builder sortOptions(List<ListChartSortOptionArgs> sortOptions) {
            return sortOptions(Output.of(sortOptions));
        }

        /**
         * @param sortOptions Sorting options configuration
         * 
         * @return builder
         * 
         */
        public Builder sortOptions(ListChartSortOptionArgs... sortOptions) {
            return sortOptions(List.of(sortOptions));
        }

        /**
         * @param startTime Seconds since epoch. Used for visualization. Conflicts with `time_range`.
         * 
         * @return builder
         * 
         */
        public Builder startTime(@Nullable Output<Integer> startTime) {
            $.startTime = startTime;
            return this;
        }

        /**
         * @param startTime Seconds since epoch. Used for visualization. Conflicts with `time_range`.
         * 
         * @return builder
         * 
         */
        public Builder startTime(Integer startTime) {
            return startTime(Output.of(startTime));
        }

        /**
         * @param timeRange How many seconds ago from which to display data. For example, the last hour would be `3600`, etc. Conflicts with `start_time` and `end_time`.
         * 
         * @return builder
         * 
         */
        public Builder timeRange(@Nullable Output<Integer> timeRange) {
            $.timeRange = timeRange;
            return this;
        }

        /**
         * @param timeRange How many seconds ago from which to display data. For example, the last hour would be `3600`, etc. Conflicts with `start_time` and `end_time`.
         * 
         * @return builder
         * 
         */
        public Builder timeRange(Integer timeRange) {
            return timeRange(Output.of(timeRange));
        }

        public ListChartArgs build() {
            $.programText = Objects.requireNonNull($.programText, "expected parameter 'programText' to be non-null");
            return $;
        }
    }

}
