// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.signalfx.azure.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;


public final class IntegrationResourceFilterRuleArgs extends com.pulumi.resources.ResourceArgs {

    public static final IntegrationResourceFilterRuleArgs Empty = new IntegrationResourceFilterRuleArgs();

    /**
     * Expression that selects the data that Splunk Observability Cloud should sync for the resource associated with this sync rule. The expression uses the syntax defined for the SignalFlow `filter()` function. The source of each filter rule must be in the form filter(&#39;key&#39;, &#39;value&#39;). You can join multiple filter statements using the and and or operators. Referenced keys are limited to tags and must start with the azure_tag_ prefix.
     * 
     */
    @Import(name="filterSource", required=true)
    private Output<String> filterSource;

    /**
     * @return Expression that selects the data that Splunk Observability Cloud should sync for the resource associated with this sync rule. The expression uses the syntax defined for the SignalFlow `filter()` function. The source of each filter rule must be in the form filter(&#39;key&#39;, &#39;value&#39;). You can join multiple filter statements using the and and or operators. Referenced keys are limited to tags and must start with the azure_tag_ prefix.
     * 
     */
    public Output<String> filterSource() {
        return this.filterSource;
    }

    private IntegrationResourceFilterRuleArgs() {}

    private IntegrationResourceFilterRuleArgs(IntegrationResourceFilterRuleArgs $) {
        this.filterSource = $.filterSource;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(IntegrationResourceFilterRuleArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private IntegrationResourceFilterRuleArgs $;

        public Builder() {
            $ = new IntegrationResourceFilterRuleArgs();
        }

        public Builder(IntegrationResourceFilterRuleArgs defaults) {
            $ = new IntegrationResourceFilterRuleArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param filterSource Expression that selects the data that Splunk Observability Cloud should sync for the resource associated with this sync rule. The expression uses the syntax defined for the SignalFlow `filter()` function. The source of each filter rule must be in the form filter(&#39;key&#39;, &#39;value&#39;). You can join multiple filter statements using the and and or operators. Referenced keys are limited to tags and must start with the azure_tag_ prefix.
         * 
         * @return builder
         * 
         */
        public Builder filterSource(Output<String> filterSource) {
            $.filterSource = filterSource;
            return this;
        }

        /**
         * @param filterSource Expression that selects the data that Splunk Observability Cloud should sync for the resource associated with this sync rule. The expression uses the syntax defined for the SignalFlow `filter()` function. The source of each filter rule must be in the form filter(&#39;key&#39;, &#39;value&#39;). You can join multiple filter statements using the and and or operators. Referenced keys are limited to tags and must start with the azure_tag_ prefix.
         * 
         * @return builder
         * 
         */
        public Builder filterSource(String filterSource) {
            return filterSource(Output.of(filterSource));
        }

        public IntegrationResourceFilterRuleArgs build() {
            if ($.filterSource == null) {
                throw new MissingRequiredPropertyException("IntegrationResourceFilterRuleArgs", "filterSource");
            }
            return $;
        }
    }

}
