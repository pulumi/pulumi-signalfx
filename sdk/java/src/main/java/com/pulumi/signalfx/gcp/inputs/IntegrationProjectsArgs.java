// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.signalfx.gcp.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class IntegrationProjectsArgs extends com.pulumi.resources.ResourceArgs {

    public static final IntegrationProjectsArgs Empty = new IntegrationProjectsArgs();

    /**
     * List of project IDs to synchronize metrics and metadata from. Use only if you don&#39;t want to automatically synchronize all projects.
     * 
     */
    @Import(name="selectedProjectIds")
    private @Nullable Output<List<String>> selectedProjectIds;

    /**
     * @return List of project IDs to synchronize metrics and metadata from. Use only if you don&#39;t want to automatically synchronize all projects.
     * 
     */
    public Optional<Output<List<String>>> selectedProjectIds() {
        return Optional.ofNullable(this.selectedProjectIds);
    }

    /**
     * What mode of synchronizing projects should be used. Sync all tries to synchronize metrics and metadata from all discoverable projects.
     * 
     */
    @Import(name="syncMode")
    private @Nullable Output<String> syncMode;

    /**
     * @return What mode of synchronizing projects should be used. Sync all tries to synchronize metrics and metadata from all discoverable projects.
     * 
     */
    public Optional<Output<String>> syncMode() {
        return Optional.ofNullable(this.syncMode);
    }

    private IntegrationProjectsArgs() {}

    private IntegrationProjectsArgs(IntegrationProjectsArgs $) {
        this.selectedProjectIds = $.selectedProjectIds;
        this.syncMode = $.syncMode;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(IntegrationProjectsArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private IntegrationProjectsArgs $;

        public Builder() {
            $ = new IntegrationProjectsArgs();
        }

        public Builder(IntegrationProjectsArgs defaults) {
            $ = new IntegrationProjectsArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param selectedProjectIds List of project IDs to synchronize metrics and metadata from. Use only if you don&#39;t want to automatically synchronize all projects.
         * 
         * @return builder
         * 
         */
        public Builder selectedProjectIds(@Nullable Output<List<String>> selectedProjectIds) {
            $.selectedProjectIds = selectedProjectIds;
            return this;
        }

        /**
         * @param selectedProjectIds List of project IDs to synchronize metrics and metadata from. Use only if you don&#39;t want to automatically synchronize all projects.
         * 
         * @return builder
         * 
         */
        public Builder selectedProjectIds(List<String> selectedProjectIds) {
            return selectedProjectIds(Output.of(selectedProjectIds));
        }

        /**
         * @param selectedProjectIds List of project IDs to synchronize metrics and metadata from. Use only if you don&#39;t want to automatically synchronize all projects.
         * 
         * @return builder
         * 
         */
        public Builder selectedProjectIds(String... selectedProjectIds) {
            return selectedProjectIds(List.of(selectedProjectIds));
        }

        /**
         * @param syncMode What mode of synchronizing projects should be used. Sync all tries to synchronize metrics and metadata from all discoverable projects.
         * 
         * @return builder
         * 
         */
        public Builder syncMode(@Nullable Output<String> syncMode) {
            $.syncMode = syncMode;
            return this;
        }

        /**
         * @param syncMode What mode of synchronizing projects should be used. Sync all tries to synchronize metrics and metadata from all discoverable projects.
         * 
         * @return builder
         * 
         */
        public Builder syncMode(String syncMode) {
            return syncMode(Output.of(syncMode));
        }

        public IntegrationProjectsArgs build() {
            return $;
        }
    }

}
