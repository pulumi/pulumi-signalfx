// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.signalfx.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class OrganizationMembersResult {
    private List<String> emails;
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    private String id;
    private List<String> users;

    private OrganizationMembersResult() {}
    public List<String> emails() {
        return this.emails;
    }
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    public String id() {
        return this.id;
    }
    public List<String> users() {
        return this.users;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(OrganizationMembersResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private List<String> emails;
        private String id;
        private List<String> users;
        public Builder() {}
        public Builder(OrganizationMembersResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.emails = defaults.emails;
    	      this.id = defaults.id;
    	      this.users = defaults.users;
        }

        @CustomType.Setter
        public Builder emails(List<String> emails) {
            if (emails == null) {
              throw new MissingRequiredPropertyException("OrganizationMembersResult", "emails");
            }
            this.emails = emails;
            return this;
        }
        public Builder emails(String... emails) {
            return emails(List.of(emails));
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("OrganizationMembersResult", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder users(List<String> users) {
            if (users == null) {
              throw new MissingRequiredPropertyException("OrganizationMembersResult", "users");
            }
            this.users = users;
            return this;
        }
        public Builder users(String... users) {
            return users(List.of(users));
        }
        public OrganizationMembersResult build() {
            final var _resultValue = new OrganizationMembersResult();
            _resultValue.emails = emails;
            _resultValue.id = id;
            _resultValue.users = users;
            return _resultValue;
        }
    }
}
