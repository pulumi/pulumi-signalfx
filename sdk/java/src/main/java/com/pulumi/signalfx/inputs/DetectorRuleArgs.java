// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.signalfx.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class DetectorRuleArgs extends com.pulumi.resources.ResourceArgs {

    public static final DetectorRuleArgs Empty = new DetectorRuleArgs();

    @Import(name="description")
    private @Nullable Output<String> description;

    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    @Import(name="detectLabel", required=true)
    private Output<String> detectLabel;

    public Output<String> detectLabel() {
        return this.detectLabel;
    }

    @Import(name="disabled")
    private @Nullable Output<Boolean> disabled;

    public Optional<Output<Boolean>> disabled() {
        return Optional.ofNullable(this.disabled);
    }

    @Import(name="notifications")
    private @Nullable Output<List<String>> notifications;

    public Optional<Output<List<String>>> notifications() {
        return Optional.ofNullable(this.notifications);
    }

    @Import(name="parameterizedBody")
    private @Nullable Output<String> parameterizedBody;

    public Optional<Output<String>> parameterizedBody() {
        return Optional.ofNullable(this.parameterizedBody);
    }

    @Import(name="parameterizedSubject")
    private @Nullable Output<String> parameterizedSubject;

    public Optional<Output<String>> parameterizedSubject() {
        return Optional.ofNullable(this.parameterizedSubject);
    }

    @Import(name="runbookUrl")
    private @Nullable Output<String> runbookUrl;

    public Optional<Output<String>> runbookUrl() {
        return Optional.ofNullable(this.runbookUrl);
    }

    @Import(name="severity", required=true)
    private Output<String> severity;

    public Output<String> severity() {
        return this.severity;
    }

    @Import(name="tip")
    private @Nullable Output<String> tip;

    public Optional<Output<String>> tip() {
        return Optional.ofNullable(this.tip);
    }

    private DetectorRuleArgs() {}

    private DetectorRuleArgs(DetectorRuleArgs $) {
        this.description = $.description;
        this.detectLabel = $.detectLabel;
        this.disabled = $.disabled;
        this.notifications = $.notifications;
        this.parameterizedBody = $.parameterizedBody;
        this.parameterizedSubject = $.parameterizedSubject;
        this.runbookUrl = $.runbookUrl;
        this.severity = $.severity;
        this.tip = $.tip;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(DetectorRuleArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private DetectorRuleArgs $;

        public Builder() {
            $ = new DetectorRuleArgs();
        }

        public Builder(DetectorRuleArgs defaults) {
            $ = new DetectorRuleArgs(Objects.requireNonNull(defaults));
        }

        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        public Builder description(String description) {
            return description(Output.of(description));
        }

        public Builder detectLabel(Output<String> detectLabel) {
            $.detectLabel = detectLabel;
            return this;
        }

        public Builder detectLabel(String detectLabel) {
            return detectLabel(Output.of(detectLabel));
        }

        public Builder disabled(@Nullable Output<Boolean> disabled) {
            $.disabled = disabled;
            return this;
        }

        public Builder disabled(Boolean disabled) {
            return disabled(Output.of(disabled));
        }

        public Builder notifications(@Nullable Output<List<String>> notifications) {
            $.notifications = notifications;
            return this;
        }

        public Builder notifications(List<String> notifications) {
            return notifications(Output.of(notifications));
        }

        public Builder notifications(String... notifications) {
            return notifications(List.of(notifications));
        }

        public Builder parameterizedBody(@Nullable Output<String> parameterizedBody) {
            $.parameterizedBody = parameterizedBody;
            return this;
        }

        public Builder parameterizedBody(String parameterizedBody) {
            return parameterizedBody(Output.of(parameterizedBody));
        }

        public Builder parameterizedSubject(@Nullable Output<String> parameterizedSubject) {
            $.parameterizedSubject = parameterizedSubject;
            return this;
        }

        public Builder parameterizedSubject(String parameterizedSubject) {
            return parameterizedSubject(Output.of(parameterizedSubject));
        }

        public Builder runbookUrl(@Nullable Output<String> runbookUrl) {
            $.runbookUrl = runbookUrl;
            return this;
        }

        public Builder runbookUrl(String runbookUrl) {
            return runbookUrl(Output.of(runbookUrl));
        }

        public Builder severity(Output<String> severity) {
            $.severity = severity;
            return this;
        }

        public Builder severity(String severity) {
            return severity(Output.of(severity));
        }

        public Builder tip(@Nullable Output<String> tip) {
            $.tip = tip;
            return this;
        }

        public Builder tip(String tip) {
            return tip(Output.of(tip));
        }

        public DetectorRuleArgs build() {
            if ($.detectLabel == null) {
                throw new MissingRequiredPropertyException("DetectorRuleArgs", "detectLabel");
            }
            if ($.severity == null) {
                throw new MissingRequiredPropertyException("DetectorRuleArgs", "severity");
            }
            return $;
        }
    }

}
