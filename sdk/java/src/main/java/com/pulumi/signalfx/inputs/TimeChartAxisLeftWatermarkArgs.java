// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.signalfx.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Double;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class TimeChartAxisLeftWatermarkArgs extends com.pulumi.resources.ResourceArgs {

    public static final TimeChartAxisLeftWatermarkArgs Empty = new TimeChartAxisLeftWatermarkArgs();

    /**
     * Label to display associated with the watermark line
     * 
     */
    @Import(name="label")
    private @Nullable Output<String> label;

    /**
     * @return Label to display associated with the watermark line
     * 
     */
    public Optional<Output<String>> label() {
        return Optional.ofNullable(this.label);
    }

    /**
     * Axis value where the watermark line will be displayed
     * 
     */
    @Import(name="value", required=true)
    private Output<Double> value;

    /**
     * @return Axis value where the watermark line will be displayed
     * 
     */
    public Output<Double> value() {
        return this.value;
    }

    private TimeChartAxisLeftWatermarkArgs() {}

    private TimeChartAxisLeftWatermarkArgs(TimeChartAxisLeftWatermarkArgs $) {
        this.label = $.label;
        this.value = $.value;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(TimeChartAxisLeftWatermarkArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private TimeChartAxisLeftWatermarkArgs $;

        public Builder() {
            $ = new TimeChartAxisLeftWatermarkArgs();
        }

        public Builder(TimeChartAxisLeftWatermarkArgs defaults) {
            $ = new TimeChartAxisLeftWatermarkArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param label Label to display associated with the watermark line
         * 
         * @return builder
         * 
         */
        public Builder label(@Nullable Output<String> label) {
            $.label = label;
            return this;
        }

        /**
         * @param label Label to display associated with the watermark line
         * 
         * @return builder
         * 
         */
        public Builder label(String label) {
            return label(Output.of(label));
        }

        /**
         * @param value Axis value where the watermark line will be displayed
         * 
         * @return builder
         * 
         */
        public Builder value(Output<Double> value) {
            $.value = value;
            return this;
        }

        /**
         * @param value Axis value where the watermark line will be displayed
         * 
         * @return builder
         * 
         */
        public Builder value(Double value) {
            return value(Output.of(value));
        }

        public TimeChartAxisLeftWatermarkArgs build() {
            if ($.value == null) {
                throw new MissingRequiredPropertyException("TimeChartAxisLeftWatermarkArgs", "value");
            }
            return $;
        }
    }

}
