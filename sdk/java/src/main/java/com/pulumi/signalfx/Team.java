// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.signalfx;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import com.pulumi.signalfx.TeamArgs;
import com.pulumi.signalfx.Utilities;
import com.pulumi.signalfx.inputs.TeamState;
import java.lang.String;
import java.util.List;
import java.util.Optional;
import javax.annotation.Nullable;

/**
 * Handles management of SignalFx teams.
 * 
 * You can configure [team notification policies](https://docs.signalfx.com/en/latest/managing/teams/team-notifications.html) using this resource and the various `notifications_*` properties.
 * 
 * &gt; **NOTE** When managing teams, use a session token of an administrator to authenticate the SignalFx provider. See [Operations that require a session token for an administrator](https://dev.splunk.com/observability/docs/administration/authtokens#Operations-that-require-a-session-token-for-an-administrator).
 * 
 * ## Example Usage
 * ```java
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.signalfx.Team;
 * import com.pulumi.signalfx.TeamArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var myteam0 = new Team(&#34;myteam0&#34;, TeamArgs.builder()        
 *             .description(&#34;Super great team no jerks definitely&#34;)
 *             .members(            
 *                 &#34;userid1&#34;,
 *                 &#34;userid2&#34;)
 *             .notificationsCriticals(&#34;PagerDuty,credentialId&#34;)
 *             .notificationsInfos(&#34;Email,notify@example.com&#34;)
 *             .build());
 * 
 *     }
 * }
 * ```
 * 
 */
@ResourceType(type="signalfx:index/team:Team")
public class Team extends com.pulumi.resources.CustomResource {
    /**
     * Description of the team.
     * 
     */
    @Export(name="description", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> description;

    /**
     * @return Description of the team.
     * 
     */
    public Output<Optional<String>> description() {
        return Codegen.optional(this.description);
    }
    /**
     * List of user IDs to include in the team.
     * 
     */
    @Export(name="members", refs={List.class,String.class}, tree="[0,1]")
    private Output</* @Nullable */ List<String>> members;

    /**
     * @return List of user IDs to include in the team.
     * 
     */
    public Output<Optional<List<String>>> members() {
        return Codegen.optional(this.members);
    }
    /**
     * Name of the team.
     * 
     */
    @Export(name="name", refs={String.class}, tree="[0]")
    private Output<String> name;

    /**
     * @return Name of the team.
     * 
     */
    public Output<String> name() {
        return this.name;
    }
    /**
     * Where to send notifications for critical alerts
     * 
     */
    @Export(name="notificationsCriticals", refs={List.class,String.class}, tree="[0,1]")
    private Output</* @Nullable */ List<String>> notificationsCriticals;

    /**
     * @return Where to send notifications for critical alerts
     * 
     */
    public Output<Optional<List<String>>> notificationsCriticals() {
        return Codegen.optional(this.notificationsCriticals);
    }
    /**
     * Where to send notifications for default alerts
     * 
     */
    @Export(name="notificationsDefaults", refs={List.class,String.class}, tree="[0,1]")
    private Output</* @Nullable */ List<String>> notificationsDefaults;

    /**
     * @return Where to send notifications for default alerts
     * 
     */
    public Output<Optional<List<String>>> notificationsDefaults() {
        return Codegen.optional(this.notificationsDefaults);
    }
    /**
     * Where to send notifications for info alerts
     * 
     */
    @Export(name="notificationsInfos", refs={List.class,String.class}, tree="[0,1]")
    private Output</* @Nullable */ List<String>> notificationsInfos;

    /**
     * @return Where to send notifications for info alerts
     * 
     */
    public Output<Optional<List<String>>> notificationsInfos() {
        return Codegen.optional(this.notificationsInfos);
    }
    /**
     * Where to send notifications for major alerts
     * 
     */
    @Export(name="notificationsMajors", refs={List.class,String.class}, tree="[0,1]")
    private Output</* @Nullable */ List<String>> notificationsMajors;

    /**
     * @return Where to send notifications for major alerts
     * 
     */
    public Output<Optional<List<String>>> notificationsMajors() {
        return Codegen.optional(this.notificationsMajors);
    }
    /**
     * Where to send notifications for minor alerts
     * 
     */
    @Export(name="notificationsMinors", refs={List.class,String.class}, tree="[0,1]")
    private Output</* @Nullable */ List<String>> notificationsMinors;

    /**
     * @return Where to send notifications for minor alerts
     * 
     */
    public Output<Optional<List<String>>> notificationsMinors() {
        return Codegen.optional(this.notificationsMinors);
    }
    /**
     * Where to send notifications for warning alerts
     * 
     */
    @Export(name="notificationsWarnings", refs={List.class,String.class}, tree="[0,1]")
    private Output</* @Nullable */ List<String>> notificationsWarnings;

    /**
     * @return Where to send notifications for warning alerts
     * 
     */
    public Output<Optional<List<String>>> notificationsWarnings() {
        return Codegen.optional(this.notificationsWarnings);
    }
    /**
     * The URL of the team.
     * 
     */
    @Export(name="url", refs={String.class}, tree="[0]")
    private Output<String> url;

    /**
     * @return The URL of the team.
     * 
     */
    public Output<String> url() {
        return this.url;
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public Team(String name) {
        this(name, TeamArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public Team(String name, @Nullable TeamArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public Team(String name, @Nullable TeamArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("signalfx:index/team:Team", name, args == null ? TeamArgs.Empty : args, makeResourceOptions(options, Codegen.empty()));
    }

    private Team(String name, Output<String> id, @Nullable TeamState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("signalfx:index/team:Team", name, state, makeResourceOptions(options, id));
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static Team get(String name, Output<String> id, @Nullable TeamState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new Team(name, id, state, options);
    }
}
