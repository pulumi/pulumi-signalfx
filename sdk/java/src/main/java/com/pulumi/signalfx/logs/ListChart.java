// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.signalfx.logs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import com.pulumi.signalfx.Utilities;
import com.pulumi.signalfx.logs.ListChartArgs;
import com.pulumi.signalfx.logs.inputs.ListChartState;
import com.pulumi.signalfx.logs.outputs.ListChartColumn;
import com.pulumi.signalfx.logs.outputs.ListChartSortOption;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Optional;
import javax.annotation.Nullable;

/**
 * This chart type displays current data values in a list format.
 * 
 * The name of each value in the chart reflects the name of the plot and any associated dimensions. We recommend you click the Pencil icon and give the plot a meaningful name, as in plot B below. Otherwise, just the raw metric name will be displayed on the chart, as in plot A below.
 * 
 * ## Example Usage
 * ```java
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.signalfx.ListChart;
 * import com.pulumi.signalfx.ListChartArgs;
 * import com.pulumi.signalfx.inputs.ListChartLegendOptionsFieldArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var mylistchart0 = new ListChart(&#34;mylistchart0&#34;, ListChartArgs.builder()        
 *             .colorBy(&#34;Metric&#34;)
 *             .description(&#34;Very cool List Chart&#34;)
 *             .disableSampling(true)
 *             .hideMissingValues(true)
 *             .legendOptionsFields(            
 *                 ListChartLegendOptionsFieldArgs.builder()
 *                     .enabled(false)
 *                     .property(&#34;collector&#34;)
 *                     .build(),
 *                 ListChartLegendOptionsFieldArgs.builder()
 *                     .enabled(true)
 *                     .property(&#34;cluster_name&#34;)
 *                     .build(),
 *                 ListChartLegendOptionsFieldArgs.builder()
 *                     .enabled(true)
 *                     .property(&#34;role&#34;)
 *                     .build(),
 *                 ListChartLegendOptionsFieldArgs.builder()
 *                     .enabled(false)
 *                     .property(&#34;collector&#34;)
 *                     .build(),
 *                 ListChartLegendOptionsFieldArgs.builder()
 *                     .enabled(false)
 *                     .property(&#34;host&#34;)
 *                     .build())
 *             .maxDelay(2)
 *             .maxPrecision(2)
 *             .programText(&#34;&#34;&#34;
 * myfilters = filter(&#34;cluster_name&#34;, &#34;prod&#34;) and filter(&#34;role&#34;, &#34;search&#34;)
 * data(&#34;cpu.total.idle&#34;, filter=myfilters).publish()
 * 
 *             &#34;&#34;&#34;)
 *             .refreshInterval(1)
 *             .sortBy(&#34;-value&#34;)
 *             .timezone(&#34;Europe/Paris&#34;)
 *             .build());
 * 
 *     }
 * }
 * ```
 * 
 */
@ResourceType(type="signalfx:logs/listChart:ListChart")
public class ListChart extends com.pulumi.resources.CustomResource {
    /**
     * Column configuration
     * 
     */
    @Export(name="columns", type=List.class, parameters={ListChartColumn.class})
    private Output</* @Nullable */ List<ListChartColumn>> columns;

    /**
     * @return Column configuration
     * 
     */
    public Output<Optional<List<ListChartColumn>>> columns() {
        return Codegen.optional(this.columns);
    }
    /**
     * default connection that the dashboard uses
     * 
     */
    @Export(name="defaultConnection", type=String.class, parameters={})
    private Output</* @Nullable */ String> defaultConnection;

    /**
     * @return default connection that the dashboard uses
     * 
     */
    public Output<Optional<String>> defaultConnection() {
        return Codegen.optional(this.defaultConnection);
    }
    /**
     * Description of the chart.
     * 
     */
    @Export(name="description", type=String.class, parameters={})
    private Output</* @Nullable */ String> description;

    /**
     * @return Description of the chart.
     * 
     */
    public Output<Optional<String>> description() {
        return Codegen.optional(this.description);
    }
    /**
     * Seconds since epoch. Used for visualization. Conflicts with `time_range`.
     * 
     */
    @Export(name="endTime", type=Integer.class, parameters={})
    private Output</* @Nullable */ Integer> endTime;

    /**
     * @return Seconds since epoch. Used for visualization. Conflicts with `time_range`.
     * 
     */
    public Output<Optional<Integer>> endTime() {
        return Codegen.optional(this.endTime);
    }
    /**
     * Name of the chart.
     * 
     */
    @Export(name="name", type=String.class, parameters={})
    private Output<String> name;

    /**
     * @return Name of the chart.
     * 
     */
    public Output<String> name() {
        return this.name;
    }
    /**
     * Signalflow program text for the chart. More info[in the SignalFx docs](https://developers.signalfx.com/signalflow_analytics/signalflow_overview.html#_signalflow_programming_language).
     * 
     */
    @Export(name="programText", type=String.class, parameters={})
    private Output<String> programText;

    /**
     * @return Signalflow program text for the chart. More info[in the SignalFx docs](https://developers.signalfx.com/signalflow_analytics/signalflow_overview.html#_signalflow_programming_language).
     * 
     */
    public Output<String> programText() {
        return this.programText;
    }
    /**
     * Sorting options configuration
     * 
     */
    @Export(name="sortOptions", type=List.class, parameters={ListChartSortOption.class})
    private Output</* @Nullable */ List<ListChartSortOption>> sortOptions;

    /**
     * @return Sorting options configuration
     * 
     */
    public Output<Optional<List<ListChartSortOption>>> sortOptions() {
        return Codegen.optional(this.sortOptions);
    }
    /**
     * Seconds since epoch. Used for visualization. Conflicts with `time_range`.
     * 
     */
    @Export(name="startTime", type=Integer.class, parameters={})
    private Output</* @Nullable */ Integer> startTime;

    /**
     * @return Seconds since epoch. Used for visualization. Conflicts with `time_range`.
     * 
     */
    public Output<Optional<Integer>> startTime() {
        return Codegen.optional(this.startTime);
    }
    /**
     * How many seconds ago from which to display data. For example, the last hour would be `3600`, etc. Conflicts with `start_time` and `end_time`.
     * 
     */
    @Export(name="timeRange", type=Integer.class, parameters={})
    private Output</* @Nullable */ Integer> timeRange;

    /**
     * @return How many seconds ago from which to display data. For example, the last hour would be `3600`, etc. Conflicts with `start_time` and `end_time`.
     * 
     */
    public Output<Optional<Integer>> timeRange() {
        return Codegen.optional(this.timeRange);
    }
    /**
     * The URL of the chart.
     * 
     */
    @Export(name="url", type=String.class, parameters={})
    private Output<String> url;

    /**
     * @return The URL of the chart.
     * 
     */
    public Output<String> url() {
        return this.url;
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public ListChart(String name) {
        this(name, ListChartArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public ListChart(String name, ListChartArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public ListChart(String name, ListChartArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("signalfx:logs/listChart:ListChart", name, args == null ? ListChartArgs.Empty : args, makeResourceOptions(options, Codegen.empty()));
    }

    private ListChart(String name, Output<String> id, @Nullable ListChartState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("signalfx:logs/listChart:ListChart", name, state, makeResourceOptions(options, id));
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static ListChart get(String name, Output<String> id, @Nullable ListChartState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new ListChart(name, id, state, options);
    }
}
