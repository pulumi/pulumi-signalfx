// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.signalfx.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class SloInputArgs extends com.pulumi.resources.ResourceArgs {

    public static final SloInputArgs Empty = new SloInputArgs();

    /**
     * Label used in `&#34;program_text&#34;` that refers to the data block which contains the stream of successful events
     * 
     */
    @Import(name="goodEventsLabel")
    private @Nullable Output<String> goodEventsLabel;

    /**
     * @return Label used in `&#34;program_text&#34;` that refers to the data block which contains the stream of successful events
     * 
     */
    public Optional<Output<String>> goodEventsLabel() {
        return Optional.ofNullable(this.goodEventsLabel);
    }

    /**
     * SignalFlow program and arguments text strings that define the streams used as successful event count and total event count
     * 
     */
    @Import(name="programText", required=true)
    private Output<String> programText;

    /**
     * @return SignalFlow program and arguments text strings that define the streams used as successful event count and total event count
     * 
     */
    public Output<String> programText() {
        return this.programText;
    }

    /**
     * Label used in `&#34;program_text&#34;` that refers to the data block which contains the stream of total events
     * 
     */
    @Import(name="totalEventsLabel")
    private @Nullable Output<String> totalEventsLabel;

    /**
     * @return Label used in `&#34;program_text&#34;` that refers to the data block which contains the stream of total events
     * 
     */
    public Optional<Output<String>> totalEventsLabel() {
        return Optional.ofNullable(this.totalEventsLabel);
    }

    private SloInputArgs() {}

    private SloInputArgs(SloInputArgs $) {
        this.goodEventsLabel = $.goodEventsLabel;
        this.programText = $.programText;
        this.totalEventsLabel = $.totalEventsLabel;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(SloInputArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private SloInputArgs $;

        public Builder() {
            $ = new SloInputArgs();
        }

        public Builder(SloInputArgs defaults) {
            $ = new SloInputArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param goodEventsLabel Label used in `&#34;program_text&#34;` that refers to the data block which contains the stream of successful events
         * 
         * @return builder
         * 
         */
        public Builder goodEventsLabel(@Nullable Output<String> goodEventsLabel) {
            $.goodEventsLabel = goodEventsLabel;
            return this;
        }

        /**
         * @param goodEventsLabel Label used in `&#34;program_text&#34;` that refers to the data block which contains the stream of successful events
         * 
         * @return builder
         * 
         */
        public Builder goodEventsLabel(String goodEventsLabel) {
            return goodEventsLabel(Output.of(goodEventsLabel));
        }

        /**
         * @param programText SignalFlow program and arguments text strings that define the streams used as successful event count and total event count
         * 
         * @return builder
         * 
         */
        public Builder programText(Output<String> programText) {
            $.programText = programText;
            return this;
        }

        /**
         * @param programText SignalFlow program and arguments text strings that define the streams used as successful event count and total event count
         * 
         * @return builder
         * 
         */
        public Builder programText(String programText) {
            return programText(Output.of(programText));
        }

        /**
         * @param totalEventsLabel Label used in `&#34;program_text&#34;` that refers to the data block which contains the stream of total events
         * 
         * @return builder
         * 
         */
        public Builder totalEventsLabel(@Nullable Output<String> totalEventsLabel) {
            $.totalEventsLabel = totalEventsLabel;
            return this;
        }

        /**
         * @param totalEventsLabel Label used in `&#34;program_text&#34;` that refers to the data block which contains the stream of total events
         * 
         * @return builder
         * 
         */
        public Builder totalEventsLabel(String totalEventsLabel) {
            return totalEventsLabel(Output.of(totalEventsLabel));
        }

        public SloInputArgs build() {
            if ($.programText == null) {
                throw new MissingRequiredPropertyException("SloInputArgs", "programText");
            }
            return $;
        }
    }

}
