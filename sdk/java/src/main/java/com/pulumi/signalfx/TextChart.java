// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.signalfx;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import com.pulumi.signalfx.TextChartArgs;
import com.pulumi.signalfx.Utilities;
import com.pulumi.signalfx.inputs.TextChartState;
import java.lang.String;
import java.util.List;
import java.util.Optional;
import javax.annotation.Nullable;

/**
 * This special type of chart doesn’t display any metric data. Rather, it lets you place a text note on the dashboard.
 * 
 * ## Example
 * 
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.signalfx.TextChart;
 * import com.pulumi.signalfx.TextChartArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var mynote0 = new TextChart("mynote0", TextChartArgs.builder()
 *             .name("Important Dashboard Note")
 *             .description("Lorem ipsum dolor sit amet, laudem tibique iracundia at mea. Nam posse dolores ex, nec cu adhuc putent honestatis")
 *             .markdown("""
 * 1. First ordered list item
 * 2. Another item
 *   * Unordered sub-list.
 * 1. Actual numbers don't matter, just that it's a number
 *   1. Ordered sub-list
 * 4. And another item.
 * 
 *    You can have properly indented paragraphs within list items. Notice the blank line above, and the leading spaces (at least one, but we'll use three here to also align the raw Markdown).
 * 
 *    To have a line break without a paragraph, you will need to use two trailing spaces.⋅⋅
 *    Note that this line is separate, but within the same paragraph.⋅⋅
 *    (This is contrary to the typical GFM line break behaviour, where trailing spaces are not required.)
 * 
 * * Unordered list can use asterisks
 * - Or minuses
 * + Or pluses
 *             """)
 *             .build());
 * 
 *     }
 * }
 * }
 * </pre>
 * 
 */
@ResourceType(type="signalfx:index/textChart:TextChart")
public class TextChart extends com.pulumi.resources.CustomResource {
    /**
     * Description of the text note.
     * 
     */
    @Export(name="description", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> description;

    /**
     * @return Description of the text note.
     * 
     */
    public Output<Optional<String>> description() {
        return Codegen.optional(this.description);
    }
    /**
     * Markdown text to display.
     * 
     */
    @Export(name="markdown", refs={String.class}, tree="[0]")
    private Output<String> markdown;

    /**
     * @return Markdown text to display.
     * 
     */
    public Output<String> markdown() {
        return this.markdown;
    }
    /**
     * Name of the text note.
     * 
     */
    @Export(name="name", refs={String.class}, tree="[0]")
    private Output<String> name;

    /**
     * @return Name of the text note.
     * 
     */
    public Output<String> name() {
        return this.name;
    }
    /**
     * Tags associated with the resource
     * 
     */
    @Export(name="tags", refs={List.class,String.class}, tree="[0,1]")
    private Output</* @Nullable */ List<String>> tags;

    /**
     * @return Tags associated with the resource
     * 
     */
    public Output<Optional<List<String>>> tags() {
        return Codegen.optional(this.tags);
    }
    /**
     * The URL of the chart.
     * 
     */
    @Export(name="url", refs={String.class}, tree="[0]")
    private Output<String> url;

    /**
     * @return The URL of the chart.
     * 
     */
    public Output<String> url() {
        return this.url;
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public TextChart(java.lang.String name) {
        this(name, TextChartArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public TextChart(java.lang.String name, TextChartArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public TextChart(java.lang.String name, TextChartArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("signalfx:index/textChart:TextChart", name, makeArgs(args, options), makeResourceOptions(options, Codegen.empty()), false);
    }

    private TextChart(java.lang.String name, Output<java.lang.String> id, @Nullable TextChartState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("signalfx:index/textChart:TextChart", name, state, makeResourceOptions(options, id), false);
    }

    private static TextChartArgs makeArgs(TextChartArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        if (options != null && options.getUrn().isPresent()) {
            return null;
        }
        return args == null ? TextChartArgs.Empty : args;
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<java.lang.String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static TextChart get(java.lang.String name, Output<java.lang.String> id, @Nullable TextChartState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new TextChart(name, id, state, options);
    }
}
