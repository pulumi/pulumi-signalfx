// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.signalfx;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import com.pulumi.signalfx.TextChartArgs;
import com.pulumi.signalfx.Utilities;
import com.pulumi.signalfx.inputs.TextChartState;
import java.lang.String;
import java.util.Optional;
import javax.annotation.Nullable;

/**
 * This special type of chart doesnâ€™t display any metric data. Rather, it lets you place a text note on the dashboard.
 * 
 * ## Example
 * 
 * ## Arguments
 * 
 * The following arguments are supported in the resource block:
 * 
 * * `name` - (Required) Name of the text note.
 * * `markdown` - (Required) Markdown text to display.
 * * `description` - (Optional) Description of the text note.
 * 
 * ## Attributes
 * 
 * In a addition to all arguments above, the following attributes are exported:
 * 
 * * `id` - The ID of the chart.
 * * `url` - The URL of the chart.
 * 
 */
@ResourceType(type="signalfx:index/textChart:TextChart")
public class TextChart extends com.pulumi.resources.CustomResource {
    /**
     * Description of the chart (Optional)
     * 
     */
    @Export(name="description", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> description;

    /**
     * @return Description of the chart (Optional)
     * 
     */
    public Output<Optional<String>> description() {
        return Codegen.optional(this.description);
    }
    /**
     * Markdown text to display. More info at: https://github.com/adam-p/markdown-here/wiki/Markdown-Cheatsheet
     * 
     */
    @Export(name="markdown", refs={String.class}, tree="[0]")
    private Output<String> markdown;

    /**
     * @return Markdown text to display. More info at: https://github.com/adam-p/markdown-here/wiki/Markdown-Cheatsheet
     * 
     */
    public Output<String> markdown() {
        return this.markdown;
    }
    /**
     * Name of the chart
     * 
     */
    @Export(name="name", refs={String.class}, tree="[0]")
    private Output<String> name;

    /**
     * @return Name of the chart
     * 
     */
    public Output<String> name() {
        return this.name;
    }
    /**
     * URL of the chart
     * 
     */
    @Export(name="url", refs={String.class}, tree="[0]")
    private Output<String> url;

    /**
     * @return URL of the chart
     * 
     */
    public Output<String> url() {
        return this.url;
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public TextChart(String name) {
        this(name, TextChartArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public TextChart(String name, TextChartArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public TextChart(String name, TextChartArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("signalfx:index/textChart:TextChart", name, args == null ? TextChartArgs.Empty : args, makeResourceOptions(options, Codegen.empty()));
    }

    private TextChart(String name, Output<String> id, @Nullable TextChartState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("signalfx:index/textChart:TextChart", name, state, makeResourceOptions(options, id));
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static TextChart get(String name, Output<String> id, @Nullable TextChartState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new TextChart(name, id, state, options);
    }
}
