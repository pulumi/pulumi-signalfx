// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.signalfx;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.signalfx.inputs.SingleValueChartColorScaleArgs;
import com.pulumi.signalfx.inputs.SingleValueChartVizOptionArgs;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class SingleValueChartArgs extends com.pulumi.resources.ResourceArgs {

    public static final SingleValueChartArgs Empty = new SingleValueChartArgs();

    /**
     * Must be `&#34;Dimension&#34;`, `&#34;Scale&#34;` or `&#34;Metric&#34;`. `&#34;Dimension&#34;` by default.
     * 
     */
    @Import(name="colorBy")
    private @Nullable Output<String> colorBy;

    /**
     * @return Must be `&#34;Dimension&#34;`, `&#34;Scale&#34;` or `&#34;Metric&#34;`. `&#34;Dimension&#34;` by default.
     * 
     */
    public Optional<Output<String>> colorBy() {
        return Optional.ofNullable(this.colorBy);
    }

    /**
     * Single color range including both the color to display for that range and the borders of the range. Example: `[{ gt = 60, color = &#34;blue&#34; }, { lte = 60, color = &#34;yellow&#34; }]`. Look at this [link](https://docs.signalfx.com/en/latest/charts/chart-options-tab.html).
     * 
     */
    @Import(name="colorScales")
    private @Nullable Output<List<SingleValueChartColorScaleArgs>> colorScales;

    /**
     * @return Single color range including both the color to display for that range and the borders of the range. Example: `[{ gt = 60, color = &#34;blue&#34; }, { lte = 60, color = &#34;yellow&#34; }]`. Look at this [link](https://docs.signalfx.com/en/latest/charts/chart-options-tab.html).
     * 
     */
    public Optional<Output<List<SingleValueChartColorScaleArgs>>> colorScales() {
        return Optional.ofNullable(this.colorScales);
    }

    /**
     * Description of the chart.
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return Description of the chart.
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * Whether to hide the timestamp in the chart. `false` by default.
     * 
     */
    @Import(name="isTimestampHidden")
    private @Nullable Output<Boolean> isTimestampHidden;

    /**
     * @return Whether to hide the timestamp in the chart. `false` by default.
     * 
     */
    public Optional<Output<Boolean>> isTimestampHidden() {
        return Optional.ofNullable(this.isTimestampHidden);
    }

    /**
     * How long (in seconds) to wait for late datapoints
     * 
     */
    @Import(name="maxDelay")
    private @Nullable Output<Integer> maxDelay;

    /**
     * @return How long (in seconds) to wait for late datapoints
     * 
     */
    public Optional<Output<Integer>> maxDelay() {
        return Optional.ofNullable(this.maxDelay);
    }

    /**
     * The maximum precision to for value displayed.
     * 
     */
    @Import(name="maxPrecision")
    private @Nullable Output<Integer> maxPrecision;

    /**
     * @return The maximum precision to for value displayed.
     * 
     */
    public Optional<Output<Integer>> maxPrecision() {
        return Optional.ofNullable(this.maxPrecision);
    }

    /**
     * Name of the chart.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return Name of the chart.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * Signalflow program text for the chart. More info [in the Splunk Observability Cloud docs](https://dev.splunk.com/observability/docs/signalflow/).
     * 
     */
    @Import(name="programText", required=true)
    private Output<String> programText;

    /**
     * @return Signalflow program text for the chart. More info [in the Splunk Observability Cloud docs](https://dev.splunk.com/observability/docs/signalflow/).
     * 
     */
    public Output<String> programText() {
        return this.programText;
    }

    /**
     * How often (in seconds) to refresh the value.
     * 
     */
    @Import(name="refreshInterval")
    private @Nullable Output<Integer> refreshInterval;

    /**
     * @return How often (in seconds) to refresh the value.
     * 
     */
    public Optional<Output<Integer>> refreshInterval() {
        return Optional.ofNullable(this.refreshInterval);
    }

    /**
     * The type of secondary visualization. Can be `None`, `Radial`, `Linear`, or `Sparkline`. If unset, the Splunk Observability Cloud default is used (`None`).
     * 
     */
    @Import(name="secondaryVisualization")
    private @Nullable Output<String> secondaryVisualization;

    /**
     * @return The type of secondary visualization. Can be `None`, `Radial`, `Linear`, or `Sparkline`. If unset, the Splunk Observability Cloud default is used (`None`).
     * 
     */
    public Optional<Output<String>> secondaryVisualization() {
        return Optional.ofNullable(this.secondaryVisualization);
    }

    /**
     * Whether to show a trend line below the current value. `false` by default.
     * 
     */
    @Import(name="showSparkLine")
    private @Nullable Output<Boolean> showSparkLine;

    /**
     * @return Whether to show a trend line below the current value. `false` by default.
     * 
     */
    public Optional<Output<Boolean>> showSparkLine() {
        return Optional.ofNullable(this.showSparkLine);
    }

    /**
     * Tags associated with the resource
     * 
     */
    @Import(name="tags")
    private @Nullable Output<List<String>> tags;

    /**
     * @return Tags associated with the resource
     * 
     */
    public Optional<Output<List<String>>> tags() {
        return Optional.ofNullable(this.tags);
    }

    /**
     * The property value is a string that denotes the geographic region associated with the time zone, (e.g. Australia/Sydney)
     * 
     */
    @Import(name="timezone")
    private @Nullable Output<String> timezone;

    /**
     * @return The property value is a string that denotes the geographic region associated with the time zone, (e.g. Australia/Sydney)
     * 
     */
    public Optional<Output<String>> timezone() {
        return Optional.ofNullable(this.timezone);
    }

    /**
     * Must be `&#34;Metric&#34;` or `&#34;Binary&#34;`. `&#34;Metric&#34;` by default.
     * 
     */
    @Import(name="unitPrefix")
    private @Nullable Output<String> unitPrefix;

    /**
     * @return Must be `&#34;Metric&#34;` or `&#34;Binary&#34;`. `&#34;Metric&#34;` by default.
     * 
     */
    public Optional<Output<String>> unitPrefix() {
        return Optional.ofNullable(this.unitPrefix);
    }

    /**
     * Plot-level customization options, associated with a publish statement.
     * 
     */
    @Import(name="vizOptions")
    private @Nullable Output<List<SingleValueChartVizOptionArgs>> vizOptions;

    /**
     * @return Plot-level customization options, associated with a publish statement.
     * 
     */
    public Optional<Output<List<SingleValueChartVizOptionArgs>>> vizOptions() {
        return Optional.ofNullable(this.vizOptions);
    }

    private SingleValueChartArgs() {}

    private SingleValueChartArgs(SingleValueChartArgs $) {
        this.colorBy = $.colorBy;
        this.colorScales = $.colorScales;
        this.description = $.description;
        this.isTimestampHidden = $.isTimestampHidden;
        this.maxDelay = $.maxDelay;
        this.maxPrecision = $.maxPrecision;
        this.name = $.name;
        this.programText = $.programText;
        this.refreshInterval = $.refreshInterval;
        this.secondaryVisualization = $.secondaryVisualization;
        this.showSparkLine = $.showSparkLine;
        this.tags = $.tags;
        this.timezone = $.timezone;
        this.unitPrefix = $.unitPrefix;
        this.vizOptions = $.vizOptions;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(SingleValueChartArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private SingleValueChartArgs $;

        public Builder() {
            $ = new SingleValueChartArgs();
        }

        public Builder(SingleValueChartArgs defaults) {
            $ = new SingleValueChartArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param colorBy Must be `&#34;Dimension&#34;`, `&#34;Scale&#34;` or `&#34;Metric&#34;`. `&#34;Dimension&#34;` by default.
         * 
         * @return builder
         * 
         */
        public Builder colorBy(@Nullable Output<String> colorBy) {
            $.colorBy = colorBy;
            return this;
        }

        /**
         * @param colorBy Must be `&#34;Dimension&#34;`, `&#34;Scale&#34;` or `&#34;Metric&#34;`. `&#34;Dimension&#34;` by default.
         * 
         * @return builder
         * 
         */
        public Builder colorBy(String colorBy) {
            return colorBy(Output.of(colorBy));
        }

        /**
         * @param colorScales Single color range including both the color to display for that range and the borders of the range. Example: `[{ gt = 60, color = &#34;blue&#34; }, { lte = 60, color = &#34;yellow&#34; }]`. Look at this [link](https://docs.signalfx.com/en/latest/charts/chart-options-tab.html).
         * 
         * @return builder
         * 
         */
        public Builder colorScales(@Nullable Output<List<SingleValueChartColorScaleArgs>> colorScales) {
            $.colorScales = colorScales;
            return this;
        }

        /**
         * @param colorScales Single color range including both the color to display for that range and the borders of the range. Example: `[{ gt = 60, color = &#34;blue&#34; }, { lte = 60, color = &#34;yellow&#34; }]`. Look at this [link](https://docs.signalfx.com/en/latest/charts/chart-options-tab.html).
         * 
         * @return builder
         * 
         */
        public Builder colorScales(List<SingleValueChartColorScaleArgs> colorScales) {
            return colorScales(Output.of(colorScales));
        }

        /**
         * @param colorScales Single color range including both the color to display for that range and the borders of the range. Example: `[{ gt = 60, color = &#34;blue&#34; }, { lte = 60, color = &#34;yellow&#34; }]`. Look at this [link](https://docs.signalfx.com/en/latest/charts/chart-options-tab.html).
         * 
         * @return builder
         * 
         */
        public Builder colorScales(SingleValueChartColorScaleArgs... colorScales) {
            return colorScales(List.of(colorScales));
        }

        /**
         * @param description Description of the chart.
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description Description of the chart.
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param isTimestampHidden Whether to hide the timestamp in the chart. `false` by default.
         * 
         * @return builder
         * 
         */
        public Builder isTimestampHidden(@Nullable Output<Boolean> isTimestampHidden) {
            $.isTimestampHidden = isTimestampHidden;
            return this;
        }

        /**
         * @param isTimestampHidden Whether to hide the timestamp in the chart. `false` by default.
         * 
         * @return builder
         * 
         */
        public Builder isTimestampHidden(Boolean isTimestampHidden) {
            return isTimestampHidden(Output.of(isTimestampHidden));
        }

        /**
         * @param maxDelay How long (in seconds) to wait for late datapoints
         * 
         * @return builder
         * 
         */
        public Builder maxDelay(@Nullable Output<Integer> maxDelay) {
            $.maxDelay = maxDelay;
            return this;
        }

        /**
         * @param maxDelay How long (in seconds) to wait for late datapoints
         * 
         * @return builder
         * 
         */
        public Builder maxDelay(Integer maxDelay) {
            return maxDelay(Output.of(maxDelay));
        }

        /**
         * @param maxPrecision The maximum precision to for value displayed.
         * 
         * @return builder
         * 
         */
        public Builder maxPrecision(@Nullable Output<Integer> maxPrecision) {
            $.maxPrecision = maxPrecision;
            return this;
        }

        /**
         * @param maxPrecision The maximum precision to for value displayed.
         * 
         * @return builder
         * 
         */
        public Builder maxPrecision(Integer maxPrecision) {
            return maxPrecision(Output.of(maxPrecision));
        }

        /**
         * @param name Name of the chart.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name Name of the chart.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param programText Signalflow program text for the chart. More info [in the Splunk Observability Cloud docs](https://dev.splunk.com/observability/docs/signalflow/).
         * 
         * @return builder
         * 
         */
        public Builder programText(Output<String> programText) {
            $.programText = programText;
            return this;
        }

        /**
         * @param programText Signalflow program text for the chart. More info [in the Splunk Observability Cloud docs](https://dev.splunk.com/observability/docs/signalflow/).
         * 
         * @return builder
         * 
         */
        public Builder programText(String programText) {
            return programText(Output.of(programText));
        }

        /**
         * @param refreshInterval How often (in seconds) to refresh the value.
         * 
         * @return builder
         * 
         */
        public Builder refreshInterval(@Nullable Output<Integer> refreshInterval) {
            $.refreshInterval = refreshInterval;
            return this;
        }

        /**
         * @param refreshInterval How often (in seconds) to refresh the value.
         * 
         * @return builder
         * 
         */
        public Builder refreshInterval(Integer refreshInterval) {
            return refreshInterval(Output.of(refreshInterval));
        }

        /**
         * @param secondaryVisualization The type of secondary visualization. Can be `None`, `Radial`, `Linear`, or `Sparkline`. If unset, the Splunk Observability Cloud default is used (`None`).
         * 
         * @return builder
         * 
         */
        public Builder secondaryVisualization(@Nullable Output<String> secondaryVisualization) {
            $.secondaryVisualization = secondaryVisualization;
            return this;
        }

        /**
         * @param secondaryVisualization The type of secondary visualization. Can be `None`, `Radial`, `Linear`, or `Sparkline`. If unset, the Splunk Observability Cloud default is used (`None`).
         * 
         * @return builder
         * 
         */
        public Builder secondaryVisualization(String secondaryVisualization) {
            return secondaryVisualization(Output.of(secondaryVisualization));
        }

        /**
         * @param showSparkLine Whether to show a trend line below the current value. `false` by default.
         * 
         * @return builder
         * 
         */
        public Builder showSparkLine(@Nullable Output<Boolean> showSparkLine) {
            $.showSparkLine = showSparkLine;
            return this;
        }

        /**
         * @param showSparkLine Whether to show a trend line below the current value. `false` by default.
         * 
         * @return builder
         * 
         */
        public Builder showSparkLine(Boolean showSparkLine) {
            return showSparkLine(Output.of(showSparkLine));
        }

        /**
         * @param tags Tags associated with the resource
         * 
         * @return builder
         * 
         */
        public Builder tags(@Nullable Output<List<String>> tags) {
            $.tags = tags;
            return this;
        }

        /**
         * @param tags Tags associated with the resource
         * 
         * @return builder
         * 
         */
        public Builder tags(List<String> tags) {
            return tags(Output.of(tags));
        }

        /**
         * @param tags Tags associated with the resource
         * 
         * @return builder
         * 
         */
        public Builder tags(String... tags) {
            return tags(List.of(tags));
        }

        /**
         * @param timezone The property value is a string that denotes the geographic region associated with the time zone, (e.g. Australia/Sydney)
         * 
         * @return builder
         * 
         */
        public Builder timezone(@Nullable Output<String> timezone) {
            $.timezone = timezone;
            return this;
        }

        /**
         * @param timezone The property value is a string that denotes the geographic region associated with the time zone, (e.g. Australia/Sydney)
         * 
         * @return builder
         * 
         */
        public Builder timezone(String timezone) {
            return timezone(Output.of(timezone));
        }

        /**
         * @param unitPrefix Must be `&#34;Metric&#34;` or `&#34;Binary&#34;`. `&#34;Metric&#34;` by default.
         * 
         * @return builder
         * 
         */
        public Builder unitPrefix(@Nullable Output<String> unitPrefix) {
            $.unitPrefix = unitPrefix;
            return this;
        }

        /**
         * @param unitPrefix Must be `&#34;Metric&#34;` or `&#34;Binary&#34;`. `&#34;Metric&#34;` by default.
         * 
         * @return builder
         * 
         */
        public Builder unitPrefix(String unitPrefix) {
            return unitPrefix(Output.of(unitPrefix));
        }

        /**
         * @param vizOptions Plot-level customization options, associated with a publish statement.
         * 
         * @return builder
         * 
         */
        public Builder vizOptions(@Nullable Output<List<SingleValueChartVizOptionArgs>> vizOptions) {
            $.vizOptions = vizOptions;
            return this;
        }

        /**
         * @param vizOptions Plot-level customization options, associated with a publish statement.
         * 
         * @return builder
         * 
         */
        public Builder vizOptions(List<SingleValueChartVizOptionArgs> vizOptions) {
            return vizOptions(Output.of(vizOptions));
        }

        /**
         * @param vizOptions Plot-level customization options, associated with a publish statement.
         * 
         * @return builder
         * 
         */
        public Builder vizOptions(SingleValueChartVizOptionArgs... vizOptions) {
            return vizOptions(List.of(vizOptions));
        }

        public SingleValueChartArgs build() {
            if ($.programText == null) {
                throw new MissingRequiredPropertyException("SingleValueChartArgs", "programText");
            }
            return $;
        }
    }

}
