// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.signalfx.automatedarchival.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class SettingsState extends com.pulumi.resources.ResourceArgs {

    public static final SettingsState Empty = new SettingsState();

    /**
     * Timestamp of when the automated archival setting was created
     * 
     */
    @Import(name="created")
    private @Nullable Output<Integer> created;

    /**
     * @return Timestamp of when the automated archival setting was created
     * 
     */
    public Optional<Output<Integer>> created() {
        return Optional.ofNullable(this.created);
    }

    /**
     * ID of the creator of the automated archival setting
     * 
     */
    @Import(name="creator")
    private @Nullable Output<String> creator;

    /**
     * @return ID of the creator of the automated archival setting
     * 
     */
    public Optional<Output<String>> creator() {
        return Optional.ofNullable(this.creator);
    }

    /**
     * Whether the automated archival is enabled for this organization or not
     * 
     */
    @Import(name="enabled")
    private @Nullable Output<Boolean> enabled;

    /**
     * @return Whether the automated archival is enabled for this organization or not
     * 
     */
    public Optional<Output<Boolean>> enabled() {
        return Optional.ofNullable(this.enabled);
    }

    /**
     * Grace period is an org level setting that applies to the newly created metrics. This allows customers to protect newly added metrics that users haven’t had the time to use in charts and detectors from being automatically archived The value here uses ISO 8061 duration format. Examples - &#39;P0D&#39;, &#39;P15D&#39;, &#39;P30D&#39;, &#39;P45D&#39;, &#39;P60D&#39;
     * 
     */
    @Import(name="gracePeriod")
    private @Nullable Output<String> gracePeriod;

    /**
     * @return Grace period is an org level setting that applies to the newly created metrics. This allows customers to protect newly added metrics that users haven’t had the time to use in charts and detectors from being automatically archived The value here uses ISO 8061 duration format. Examples - &#39;P0D&#39;, &#39;P15D&#39;, &#39;P30D&#39;, &#39;P45D&#39;, &#39;P60D&#39;
     * 
     */
    public Optional<Output<String>> gracePeriod() {
        return Optional.ofNullable(this.gracePeriod);
    }

    /**
     * Timestamp of when the automated archival setting was last updated
     * 
     */
    @Import(name="lastUpdated")
    private @Nullable Output<Integer> lastUpdated;

    /**
     * @return Timestamp of when the automated archival setting was last updated
     * 
     */
    public Optional<Output<Integer>> lastUpdated() {
        return Optional.ofNullable(this.lastUpdated);
    }

    /**
     * ID of user who last updated the automated archival setting
     * 
     */
    @Import(name="lastUpdatedBy")
    private @Nullable Output<String> lastUpdatedBy;

    /**
     * @return ID of user who last updated the automated archival setting
     * 
     */
    public Optional<Output<String>> lastUpdatedBy() {
        return Optional.ofNullable(this.lastUpdatedBy);
    }

    /**
     * This tracks if a metric was unused in the past N number of days (N one of 30, 45, or 60). We’ll archive a metric if it wasn’t used in the lookback period. The value here uses ISO 8061 duration format. Examples - &#39;P30D&#39;, &#39;P45D&#39;, &#39;P60D&#39;
     * 
     */
    @Import(name="lookbackPeriod")
    private @Nullable Output<String> lookbackPeriod;

    /**
     * @return This tracks if a metric was unused in the past N number of days (N one of 30, 45, or 60). We’ll archive a metric if it wasn’t used in the lookback period. The value here uses ISO 8061 duration format. Examples - &#39;P30D&#39;, &#39;P45D&#39;, &#39;P60D&#39;
     * 
     */
    public Optional<Output<String>> lookbackPeriod() {
        return Optional.ofNullable(this.lookbackPeriod);
    }

    /**
     * Org limit for the number of rulesets that can be created
     * 
     */
    @Import(name="rulesetLimit")
    private @Nullable Output<Integer> rulesetLimit;

    /**
     * @return Org limit for the number of rulesets that can be created
     * 
     */
    public Optional<Output<Integer>> rulesetLimit() {
        return Optional.ofNullable(this.rulesetLimit);
    }

    /**
     * Version of the automated archival setting
     * 
     */
    @Import(name="version")
    private @Nullable Output<String> version;

    /**
     * @return Version of the automated archival setting
     * 
     */
    public Optional<Output<String>> version() {
        return Optional.ofNullable(this.version);
    }

    private SettingsState() {}

    private SettingsState(SettingsState $) {
        this.created = $.created;
        this.creator = $.creator;
        this.enabled = $.enabled;
        this.gracePeriod = $.gracePeriod;
        this.lastUpdated = $.lastUpdated;
        this.lastUpdatedBy = $.lastUpdatedBy;
        this.lookbackPeriod = $.lookbackPeriod;
        this.rulesetLimit = $.rulesetLimit;
        this.version = $.version;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(SettingsState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private SettingsState $;

        public Builder() {
            $ = new SettingsState();
        }

        public Builder(SettingsState defaults) {
            $ = new SettingsState(Objects.requireNonNull(defaults));
        }

        /**
         * @param created Timestamp of when the automated archival setting was created
         * 
         * @return builder
         * 
         */
        public Builder created(@Nullable Output<Integer> created) {
            $.created = created;
            return this;
        }

        /**
         * @param created Timestamp of when the automated archival setting was created
         * 
         * @return builder
         * 
         */
        public Builder created(Integer created) {
            return created(Output.of(created));
        }

        /**
         * @param creator ID of the creator of the automated archival setting
         * 
         * @return builder
         * 
         */
        public Builder creator(@Nullable Output<String> creator) {
            $.creator = creator;
            return this;
        }

        /**
         * @param creator ID of the creator of the automated archival setting
         * 
         * @return builder
         * 
         */
        public Builder creator(String creator) {
            return creator(Output.of(creator));
        }

        /**
         * @param enabled Whether the automated archival is enabled for this organization or not
         * 
         * @return builder
         * 
         */
        public Builder enabled(@Nullable Output<Boolean> enabled) {
            $.enabled = enabled;
            return this;
        }

        /**
         * @param enabled Whether the automated archival is enabled for this organization or not
         * 
         * @return builder
         * 
         */
        public Builder enabled(Boolean enabled) {
            return enabled(Output.of(enabled));
        }

        /**
         * @param gracePeriod Grace period is an org level setting that applies to the newly created metrics. This allows customers to protect newly added metrics that users haven’t had the time to use in charts and detectors from being automatically archived The value here uses ISO 8061 duration format. Examples - &#39;P0D&#39;, &#39;P15D&#39;, &#39;P30D&#39;, &#39;P45D&#39;, &#39;P60D&#39;
         * 
         * @return builder
         * 
         */
        public Builder gracePeriod(@Nullable Output<String> gracePeriod) {
            $.gracePeriod = gracePeriod;
            return this;
        }

        /**
         * @param gracePeriod Grace period is an org level setting that applies to the newly created metrics. This allows customers to protect newly added metrics that users haven’t had the time to use in charts and detectors from being automatically archived The value here uses ISO 8061 duration format. Examples - &#39;P0D&#39;, &#39;P15D&#39;, &#39;P30D&#39;, &#39;P45D&#39;, &#39;P60D&#39;
         * 
         * @return builder
         * 
         */
        public Builder gracePeriod(String gracePeriod) {
            return gracePeriod(Output.of(gracePeriod));
        }

        /**
         * @param lastUpdated Timestamp of when the automated archival setting was last updated
         * 
         * @return builder
         * 
         */
        public Builder lastUpdated(@Nullable Output<Integer> lastUpdated) {
            $.lastUpdated = lastUpdated;
            return this;
        }

        /**
         * @param lastUpdated Timestamp of when the automated archival setting was last updated
         * 
         * @return builder
         * 
         */
        public Builder lastUpdated(Integer lastUpdated) {
            return lastUpdated(Output.of(lastUpdated));
        }

        /**
         * @param lastUpdatedBy ID of user who last updated the automated archival setting
         * 
         * @return builder
         * 
         */
        public Builder lastUpdatedBy(@Nullable Output<String> lastUpdatedBy) {
            $.lastUpdatedBy = lastUpdatedBy;
            return this;
        }

        /**
         * @param lastUpdatedBy ID of user who last updated the automated archival setting
         * 
         * @return builder
         * 
         */
        public Builder lastUpdatedBy(String lastUpdatedBy) {
            return lastUpdatedBy(Output.of(lastUpdatedBy));
        }

        /**
         * @param lookbackPeriod This tracks if a metric was unused in the past N number of days (N one of 30, 45, or 60). We’ll archive a metric if it wasn’t used in the lookback period. The value here uses ISO 8061 duration format. Examples - &#39;P30D&#39;, &#39;P45D&#39;, &#39;P60D&#39;
         * 
         * @return builder
         * 
         */
        public Builder lookbackPeriod(@Nullable Output<String> lookbackPeriod) {
            $.lookbackPeriod = lookbackPeriod;
            return this;
        }

        /**
         * @param lookbackPeriod This tracks if a metric was unused in the past N number of days (N one of 30, 45, or 60). We’ll archive a metric if it wasn’t used in the lookback period. The value here uses ISO 8061 duration format. Examples - &#39;P30D&#39;, &#39;P45D&#39;, &#39;P60D&#39;
         * 
         * @return builder
         * 
         */
        public Builder lookbackPeriod(String lookbackPeriod) {
            return lookbackPeriod(Output.of(lookbackPeriod));
        }

        /**
         * @param rulesetLimit Org limit for the number of rulesets that can be created
         * 
         * @return builder
         * 
         */
        public Builder rulesetLimit(@Nullable Output<Integer> rulesetLimit) {
            $.rulesetLimit = rulesetLimit;
            return this;
        }

        /**
         * @param rulesetLimit Org limit for the number of rulesets that can be created
         * 
         * @return builder
         * 
         */
        public Builder rulesetLimit(Integer rulesetLimit) {
            return rulesetLimit(Output.of(rulesetLimit));
        }

        /**
         * @param version Version of the automated archival setting
         * 
         * @return builder
         * 
         */
        public Builder version(@Nullable Output<String> version) {
            $.version = version;
            return this;
        }

        /**
         * @param version Version of the automated archival setting
         * 
         * @return builder
         * 
         */
        public Builder version(String version) {
            return version(Output.of(version));
        }

        public SettingsState build() {
            return $;
        }
    }

}
