// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.signalfx.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.signalfx.inputs.TimeChartAxisRightWatermarkArgs;
import java.lang.Double;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class TimeChartAxisRightArgs extends com.pulumi.resources.ResourceArgs {

    public static final TimeChartAxisRightArgs Empty = new TimeChartAxisRightArgs();

    /**
     * A line to draw as a high watermark.
     * 
     */
    @Import(name="highWatermark")
    private @Nullable Output<Double> highWatermark;

    /**
     * @return A line to draw as a high watermark.
     * 
     */
    public Optional<Output<Double>> highWatermark() {
        return Optional.ofNullable(this.highWatermark);
    }

    /**
     * A label to attach to the high watermark line.
     * 
     */
    @Import(name="highWatermarkLabel")
    private @Nullable Output<String> highWatermarkLabel;

    /**
     * @return A label to attach to the high watermark line.
     * 
     */
    public Optional<Output<String>> highWatermarkLabel() {
        return Optional.ofNullable(this.highWatermarkLabel);
    }

    /**
     * Label used in the publish statement that displays the event query you want to customize.
     * 
     */
    @Import(name="label")
    private @Nullable Output<String> label;

    /**
     * @return Label used in the publish statement that displays the event query you want to customize.
     * 
     */
    public Optional<Output<String>> label() {
        return Optional.ofNullable(this.label);
    }

    /**
     * A line to draw as a low watermark.
     * 
     */
    @Import(name="lowWatermark")
    private @Nullable Output<Double> lowWatermark;

    /**
     * @return A line to draw as a low watermark.
     * 
     */
    public Optional<Output<Double>> lowWatermark() {
        return Optional.ofNullable(this.lowWatermark);
    }

    /**
     * A label to attach to the low watermark line.
     * 
     */
    @Import(name="lowWatermarkLabel")
    private @Nullable Output<String> lowWatermarkLabel;

    /**
     * @return A label to attach to the low watermark line.
     * 
     */
    public Optional<Output<String>> lowWatermarkLabel() {
        return Optional.ofNullable(this.lowWatermarkLabel);
    }

    /**
     * The maximum value for the right axis.
     * 
     */
    @Import(name="maxValue")
    private @Nullable Output<Double> maxValue;

    /**
     * @return The maximum value for the right axis.
     * 
     */
    public Optional<Output<Double>> maxValue() {
        return Optional.ofNullable(this.maxValue);
    }

    /**
     * The minimum value for the right axis.
     * 
     */
    @Import(name="minValue")
    private @Nullable Output<Double> minValue;

    /**
     * @return The minimum value for the right axis.
     * 
     */
    public Optional<Output<Double>> minValue() {
        return Optional.ofNullable(this.minValue);
    }

    @Import(name="watermarks")
    private @Nullable Output<List<TimeChartAxisRightWatermarkArgs>> watermarks;

    public Optional<Output<List<TimeChartAxisRightWatermarkArgs>>> watermarks() {
        return Optional.ofNullable(this.watermarks);
    }

    private TimeChartAxisRightArgs() {}

    private TimeChartAxisRightArgs(TimeChartAxisRightArgs $) {
        this.highWatermark = $.highWatermark;
        this.highWatermarkLabel = $.highWatermarkLabel;
        this.label = $.label;
        this.lowWatermark = $.lowWatermark;
        this.lowWatermarkLabel = $.lowWatermarkLabel;
        this.maxValue = $.maxValue;
        this.minValue = $.minValue;
        this.watermarks = $.watermarks;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(TimeChartAxisRightArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private TimeChartAxisRightArgs $;

        public Builder() {
            $ = new TimeChartAxisRightArgs();
        }

        public Builder(TimeChartAxisRightArgs defaults) {
            $ = new TimeChartAxisRightArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param highWatermark A line to draw as a high watermark.
         * 
         * @return builder
         * 
         */
        public Builder highWatermark(@Nullable Output<Double> highWatermark) {
            $.highWatermark = highWatermark;
            return this;
        }

        /**
         * @param highWatermark A line to draw as a high watermark.
         * 
         * @return builder
         * 
         */
        public Builder highWatermark(Double highWatermark) {
            return highWatermark(Output.of(highWatermark));
        }

        /**
         * @param highWatermarkLabel A label to attach to the high watermark line.
         * 
         * @return builder
         * 
         */
        public Builder highWatermarkLabel(@Nullable Output<String> highWatermarkLabel) {
            $.highWatermarkLabel = highWatermarkLabel;
            return this;
        }

        /**
         * @param highWatermarkLabel A label to attach to the high watermark line.
         * 
         * @return builder
         * 
         */
        public Builder highWatermarkLabel(String highWatermarkLabel) {
            return highWatermarkLabel(Output.of(highWatermarkLabel));
        }

        /**
         * @param label Label used in the publish statement that displays the event query you want to customize.
         * 
         * @return builder
         * 
         */
        public Builder label(@Nullable Output<String> label) {
            $.label = label;
            return this;
        }

        /**
         * @param label Label used in the publish statement that displays the event query you want to customize.
         * 
         * @return builder
         * 
         */
        public Builder label(String label) {
            return label(Output.of(label));
        }

        /**
         * @param lowWatermark A line to draw as a low watermark.
         * 
         * @return builder
         * 
         */
        public Builder lowWatermark(@Nullable Output<Double> lowWatermark) {
            $.lowWatermark = lowWatermark;
            return this;
        }

        /**
         * @param lowWatermark A line to draw as a low watermark.
         * 
         * @return builder
         * 
         */
        public Builder lowWatermark(Double lowWatermark) {
            return lowWatermark(Output.of(lowWatermark));
        }

        /**
         * @param lowWatermarkLabel A label to attach to the low watermark line.
         * 
         * @return builder
         * 
         */
        public Builder lowWatermarkLabel(@Nullable Output<String> lowWatermarkLabel) {
            $.lowWatermarkLabel = lowWatermarkLabel;
            return this;
        }

        /**
         * @param lowWatermarkLabel A label to attach to the low watermark line.
         * 
         * @return builder
         * 
         */
        public Builder lowWatermarkLabel(String lowWatermarkLabel) {
            return lowWatermarkLabel(Output.of(lowWatermarkLabel));
        }

        /**
         * @param maxValue The maximum value for the right axis.
         * 
         * @return builder
         * 
         */
        public Builder maxValue(@Nullable Output<Double> maxValue) {
            $.maxValue = maxValue;
            return this;
        }

        /**
         * @param maxValue The maximum value for the right axis.
         * 
         * @return builder
         * 
         */
        public Builder maxValue(Double maxValue) {
            return maxValue(Output.of(maxValue));
        }

        /**
         * @param minValue The minimum value for the right axis.
         * 
         * @return builder
         * 
         */
        public Builder minValue(@Nullable Output<Double> minValue) {
            $.minValue = minValue;
            return this;
        }

        /**
         * @param minValue The minimum value for the right axis.
         * 
         * @return builder
         * 
         */
        public Builder minValue(Double minValue) {
            return minValue(Output.of(minValue));
        }

        public Builder watermarks(@Nullable Output<List<TimeChartAxisRightWatermarkArgs>> watermarks) {
            $.watermarks = watermarks;
            return this;
        }

        public Builder watermarks(List<TimeChartAxisRightWatermarkArgs> watermarks) {
            return watermarks(Output.of(watermarks));
        }

        public Builder watermarks(TimeChartAxisRightWatermarkArgs... watermarks) {
            return watermarks(List.of(watermarks));
        }

        public TimeChartAxisRightArgs build() {
            return $;
        }
    }

}
