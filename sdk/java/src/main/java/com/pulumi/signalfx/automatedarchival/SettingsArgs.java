// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.signalfx.automatedarchival;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class SettingsArgs extends com.pulumi.resources.ResourceArgs {

    public static final SettingsArgs Empty = new SettingsArgs();

    /**
     * Whether the automated archival is enabled for this organization or not
     * 
     */
    @Import(name="enabled", required=true)
    private Output<Boolean> enabled;

    /**
     * @return Whether the automated archival is enabled for this organization or not
     * 
     */
    public Output<Boolean> enabled() {
        return this.enabled;
    }

    /**
     * Grace period is an org level setting that applies to the newly created metrics. This allows customers to protect newly added metrics that users haven’t had the time to use in charts and detectors from being automatically archived The value here uses ISO 8061 duration format. Examples - &#39;P0D&#39;, &#39;P15D&#39;, &#39;P30D&#39;, &#39;P45D&#39;, &#39;P60D&#39;
     * 
     */
    @Import(name="gracePeriod", required=true)
    private Output<String> gracePeriod;

    /**
     * @return Grace period is an org level setting that applies to the newly created metrics. This allows customers to protect newly added metrics that users haven’t had the time to use in charts and detectors from being automatically archived The value here uses ISO 8061 duration format. Examples - &#39;P0D&#39;, &#39;P15D&#39;, &#39;P30D&#39;, &#39;P45D&#39;, &#39;P60D&#39;
     * 
     */
    public Output<String> gracePeriod() {
        return this.gracePeriod;
    }

    /**
     * This tracks if a metric was unused in the past N number of days (N one of 30, 45, or 60). We’ll archive a metric if it wasn’t used in the lookback period. The value here uses ISO 8061 duration format. Examples - &#39;P30D&#39;, &#39;P45D&#39;, &#39;P60D&#39;
     * 
     */
    @Import(name="lookbackPeriod", required=true)
    private Output<String> lookbackPeriod;

    /**
     * @return This tracks if a metric was unused in the past N number of days (N one of 30, 45, or 60). We’ll archive a metric if it wasn’t used in the lookback period. The value here uses ISO 8061 duration format. Examples - &#39;P30D&#39;, &#39;P45D&#39;, &#39;P60D&#39;
     * 
     */
    public Output<String> lookbackPeriod() {
        return this.lookbackPeriod;
    }

    /**
     * Org limit for the number of rulesets that can be created
     * 
     */
    @Import(name="rulesetLimit")
    private @Nullable Output<Integer> rulesetLimit;

    /**
     * @return Org limit for the number of rulesets that can be created
     * 
     */
    public Optional<Output<Integer>> rulesetLimit() {
        return Optional.ofNullable(this.rulesetLimit);
    }

    private SettingsArgs() {}

    private SettingsArgs(SettingsArgs $) {
        this.enabled = $.enabled;
        this.gracePeriod = $.gracePeriod;
        this.lookbackPeriod = $.lookbackPeriod;
        this.rulesetLimit = $.rulesetLimit;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(SettingsArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private SettingsArgs $;

        public Builder() {
            $ = new SettingsArgs();
        }

        public Builder(SettingsArgs defaults) {
            $ = new SettingsArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param enabled Whether the automated archival is enabled for this organization or not
         * 
         * @return builder
         * 
         */
        public Builder enabled(Output<Boolean> enabled) {
            $.enabled = enabled;
            return this;
        }

        /**
         * @param enabled Whether the automated archival is enabled for this organization or not
         * 
         * @return builder
         * 
         */
        public Builder enabled(Boolean enabled) {
            return enabled(Output.of(enabled));
        }

        /**
         * @param gracePeriod Grace period is an org level setting that applies to the newly created metrics. This allows customers to protect newly added metrics that users haven’t had the time to use in charts and detectors from being automatically archived The value here uses ISO 8061 duration format. Examples - &#39;P0D&#39;, &#39;P15D&#39;, &#39;P30D&#39;, &#39;P45D&#39;, &#39;P60D&#39;
         * 
         * @return builder
         * 
         */
        public Builder gracePeriod(Output<String> gracePeriod) {
            $.gracePeriod = gracePeriod;
            return this;
        }

        /**
         * @param gracePeriod Grace period is an org level setting that applies to the newly created metrics. This allows customers to protect newly added metrics that users haven’t had the time to use in charts and detectors from being automatically archived The value here uses ISO 8061 duration format. Examples - &#39;P0D&#39;, &#39;P15D&#39;, &#39;P30D&#39;, &#39;P45D&#39;, &#39;P60D&#39;
         * 
         * @return builder
         * 
         */
        public Builder gracePeriod(String gracePeriod) {
            return gracePeriod(Output.of(gracePeriod));
        }

        /**
         * @param lookbackPeriod This tracks if a metric was unused in the past N number of days (N one of 30, 45, or 60). We’ll archive a metric if it wasn’t used in the lookback period. The value here uses ISO 8061 duration format. Examples - &#39;P30D&#39;, &#39;P45D&#39;, &#39;P60D&#39;
         * 
         * @return builder
         * 
         */
        public Builder lookbackPeriod(Output<String> lookbackPeriod) {
            $.lookbackPeriod = lookbackPeriod;
            return this;
        }

        /**
         * @param lookbackPeriod This tracks if a metric was unused in the past N number of days (N one of 30, 45, or 60). We’ll archive a metric if it wasn’t used in the lookback period. The value here uses ISO 8061 duration format. Examples - &#39;P30D&#39;, &#39;P45D&#39;, &#39;P60D&#39;
         * 
         * @return builder
         * 
         */
        public Builder lookbackPeriod(String lookbackPeriod) {
            return lookbackPeriod(Output.of(lookbackPeriod));
        }

        /**
         * @param rulesetLimit Org limit for the number of rulesets that can be created
         * 
         * @return builder
         * 
         */
        public Builder rulesetLimit(@Nullable Output<Integer> rulesetLimit) {
            $.rulesetLimit = rulesetLimit;
            return this;
        }

        /**
         * @param rulesetLimit Org limit for the number of rulesets that can be created
         * 
         * @return builder
         * 
         */
        public Builder rulesetLimit(Integer rulesetLimit) {
            return rulesetLimit(Output.of(rulesetLimit));
        }

        public SettingsArgs build() {
            if ($.enabled == null) {
                throw new MissingRequiredPropertyException("SettingsArgs", "enabled");
            }
            if ($.gracePeriod == null) {
                throw new MissingRequiredPropertyException("SettingsArgs", "gracePeriod");
            }
            if ($.lookbackPeriod == null) {
                throw new MissingRequiredPropertyException("SettingsArgs", "lookbackPeriod");
            }
            return $;
        }
    }

}
