// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.signalfx.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.Double;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class SloTargetAlertRuleRuleParameters {
    /**
     * @return Burn rate threshold 1 used in burn rate alert calculation. This value must be between 0 and 100/(100-SLO target). Note: `&#34;BURN_RATE&#34;` alert rules use the `&#34;burnRateThreshold1&#34;` parameter. See [SLO alerts](https://docs.splunk.com/observability/en/alerts-detectors-notifications/slo/burn-rate-alerts.html) for more info.
     * 
     */
    private @Nullable Double burnRateThreshold1;
    /**
     * @return Burn rate threshold 2 used in burn rate alert calculation. This value must be between 0 and 100/(100-SLO target). Note: `&#34;BURN_RATE&#34;` alert rules use the `&#34;burnRateThreshold2&#34;` parameter. See [SLO alerts](https://docs.splunk.com/observability/en/alerts-detectors-notifications/slo/burn-rate-alerts.html) for more info.
     * 
     */
    private @Nullable Double burnRateThreshold2;
    /**
     * @return Duration that indicates how long the alert condition is met before the alert is triggered. The value must be positive and smaller than the compliance period of the SLO target. Note: `&#34;BREACH&#34;` and `&#34;ERROR_BUDGET_LEFT&#34;` alert rules use the fireLasting parameter. Default: `&#34;5m&#34;`
     * 
     */
    private @Nullable String fireLasting;
    /**
     * @return Long window 1 used in burn rate alert calculation. This value must be longer than `&#34;shortWindow1&#34;` and shorter than 90 days. Note: `&#34;BURN_RATE&#34;` alert rules use the `&#34;longWindow1&#34;` parameter. See [SLO alerts](https://docs.splunk.com/observability/en/alerts-detectors-notifications/slo/burn-rate-alerts.html) for more info.
     * 
     */
    private @Nullable String longWindow1;
    /**
     * @return Long window 2 used in burn rate alert calculation. This value must be longer than `&#34;shortWindow2&#34;` and shorter than 90 days. Note: `&#34;BURN_RATE&#34;` alert rules use the `&#34;longWindow2&#34;` parameter. See [SLO alerts](https://docs.splunk.com/observability/en/alerts-detectors-notifications/slo/burn-rate-alerts.html) for more info.
     * 
     */
    private @Nullable String longWindow2;
    /**
     * @return Error budget must be equal to or smaller than this percentage for the alert to be triggered. Note: `&#34;ERROR_BUDGET_LEFT&#34;` alert rules use the `&#34;percentErrorBudgetLeft&#34;` parameter. Default: `100`
     * 
     */
    private @Nullable Double percentErrorBudgetLeft;
    /**
     * @return Percentage of the `&#34;fireLasting&#34;` duration that the alert condition is met before the alert is triggered. Note: `&#34;BREACH&#34;` and `&#34;ERROR_BUDGET_LEFT&#34;` alert rules use the `&#34;percentOfLasting&#34;` parameter. Default: `100`
     * 
     */
    private @Nullable Double percentOfLasting;
    /**
     * @return Short window 1 used in burn rate alert calculation. This value must be longer than 1/30 of `&#34;longWindow1&#34;`. Note: `&#34;BURN_RATE&#34;` alert rules use the `&#34;shortWindow1&#34;` parameter. See [SLO alerts](https://docs.splunk.com/observability/en/alerts-detectors-notifications/slo/burn-rate-alerts.html) for more info.
     * 
     */
    private @Nullable String shortWindow1;
    /**
     * @return Short window 2 used in burn rate alert calculation. This value must be longer than 1/30 of `&#34;longWindow2&#34;`. Note: `&#34;BURN_RATE&#34;` alert rules use the `&#34;shortWindow2&#34;` parameter. See [SLO alerts](https://docs.splunk.com/observability/en/alerts-detectors-notifications/slo/burn-rate-alerts.html) for more info.
     * 
     */
    private @Nullable String shortWindow2;

    private SloTargetAlertRuleRuleParameters() {}
    /**
     * @return Burn rate threshold 1 used in burn rate alert calculation. This value must be between 0 and 100/(100-SLO target). Note: `&#34;BURN_RATE&#34;` alert rules use the `&#34;burnRateThreshold1&#34;` parameter. See [SLO alerts](https://docs.splunk.com/observability/en/alerts-detectors-notifications/slo/burn-rate-alerts.html) for more info.
     * 
     */
    public Optional<Double> burnRateThreshold1() {
        return Optional.ofNullable(this.burnRateThreshold1);
    }
    /**
     * @return Burn rate threshold 2 used in burn rate alert calculation. This value must be between 0 and 100/(100-SLO target). Note: `&#34;BURN_RATE&#34;` alert rules use the `&#34;burnRateThreshold2&#34;` parameter. See [SLO alerts](https://docs.splunk.com/observability/en/alerts-detectors-notifications/slo/burn-rate-alerts.html) for more info.
     * 
     */
    public Optional<Double> burnRateThreshold2() {
        return Optional.ofNullable(this.burnRateThreshold2);
    }
    /**
     * @return Duration that indicates how long the alert condition is met before the alert is triggered. The value must be positive and smaller than the compliance period of the SLO target. Note: `&#34;BREACH&#34;` and `&#34;ERROR_BUDGET_LEFT&#34;` alert rules use the fireLasting parameter. Default: `&#34;5m&#34;`
     * 
     */
    public Optional<String> fireLasting() {
        return Optional.ofNullable(this.fireLasting);
    }
    /**
     * @return Long window 1 used in burn rate alert calculation. This value must be longer than `&#34;shortWindow1&#34;` and shorter than 90 days. Note: `&#34;BURN_RATE&#34;` alert rules use the `&#34;longWindow1&#34;` parameter. See [SLO alerts](https://docs.splunk.com/observability/en/alerts-detectors-notifications/slo/burn-rate-alerts.html) for more info.
     * 
     */
    public Optional<String> longWindow1() {
        return Optional.ofNullable(this.longWindow1);
    }
    /**
     * @return Long window 2 used in burn rate alert calculation. This value must be longer than `&#34;shortWindow2&#34;` and shorter than 90 days. Note: `&#34;BURN_RATE&#34;` alert rules use the `&#34;longWindow2&#34;` parameter. See [SLO alerts](https://docs.splunk.com/observability/en/alerts-detectors-notifications/slo/burn-rate-alerts.html) for more info.
     * 
     */
    public Optional<String> longWindow2() {
        return Optional.ofNullable(this.longWindow2);
    }
    /**
     * @return Error budget must be equal to or smaller than this percentage for the alert to be triggered. Note: `&#34;ERROR_BUDGET_LEFT&#34;` alert rules use the `&#34;percentErrorBudgetLeft&#34;` parameter. Default: `100`
     * 
     */
    public Optional<Double> percentErrorBudgetLeft() {
        return Optional.ofNullable(this.percentErrorBudgetLeft);
    }
    /**
     * @return Percentage of the `&#34;fireLasting&#34;` duration that the alert condition is met before the alert is triggered. Note: `&#34;BREACH&#34;` and `&#34;ERROR_BUDGET_LEFT&#34;` alert rules use the `&#34;percentOfLasting&#34;` parameter. Default: `100`
     * 
     */
    public Optional<Double> percentOfLasting() {
        return Optional.ofNullable(this.percentOfLasting);
    }
    /**
     * @return Short window 1 used in burn rate alert calculation. This value must be longer than 1/30 of `&#34;longWindow1&#34;`. Note: `&#34;BURN_RATE&#34;` alert rules use the `&#34;shortWindow1&#34;` parameter. See [SLO alerts](https://docs.splunk.com/observability/en/alerts-detectors-notifications/slo/burn-rate-alerts.html) for more info.
     * 
     */
    public Optional<String> shortWindow1() {
        return Optional.ofNullable(this.shortWindow1);
    }
    /**
     * @return Short window 2 used in burn rate alert calculation. This value must be longer than 1/30 of `&#34;longWindow2&#34;`. Note: `&#34;BURN_RATE&#34;` alert rules use the `&#34;shortWindow2&#34;` parameter. See [SLO alerts](https://docs.splunk.com/observability/en/alerts-detectors-notifications/slo/burn-rate-alerts.html) for more info.
     * 
     */
    public Optional<String> shortWindow2() {
        return Optional.ofNullable(this.shortWindow2);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(SloTargetAlertRuleRuleParameters defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable Double burnRateThreshold1;
        private @Nullable Double burnRateThreshold2;
        private @Nullable String fireLasting;
        private @Nullable String longWindow1;
        private @Nullable String longWindow2;
        private @Nullable Double percentErrorBudgetLeft;
        private @Nullable Double percentOfLasting;
        private @Nullable String shortWindow1;
        private @Nullable String shortWindow2;
        public Builder() {}
        public Builder(SloTargetAlertRuleRuleParameters defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.burnRateThreshold1 = defaults.burnRateThreshold1;
    	      this.burnRateThreshold2 = defaults.burnRateThreshold2;
    	      this.fireLasting = defaults.fireLasting;
    	      this.longWindow1 = defaults.longWindow1;
    	      this.longWindow2 = defaults.longWindow2;
    	      this.percentErrorBudgetLeft = defaults.percentErrorBudgetLeft;
    	      this.percentOfLasting = defaults.percentOfLasting;
    	      this.shortWindow1 = defaults.shortWindow1;
    	      this.shortWindow2 = defaults.shortWindow2;
        }

        @CustomType.Setter
        public Builder burnRateThreshold1(@Nullable Double burnRateThreshold1) {

            this.burnRateThreshold1 = burnRateThreshold1;
            return this;
        }
        @CustomType.Setter
        public Builder burnRateThreshold2(@Nullable Double burnRateThreshold2) {

            this.burnRateThreshold2 = burnRateThreshold2;
            return this;
        }
        @CustomType.Setter
        public Builder fireLasting(@Nullable String fireLasting) {

            this.fireLasting = fireLasting;
            return this;
        }
        @CustomType.Setter
        public Builder longWindow1(@Nullable String longWindow1) {

            this.longWindow1 = longWindow1;
            return this;
        }
        @CustomType.Setter
        public Builder longWindow2(@Nullable String longWindow2) {

            this.longWindow2 = longWindow2;
            return this;
        }
        @CustomType.Setter
        public Builder percentErrorBudgetLeft(@Nullable Double percentErrorBudgetLeft) {

            this.percentErrorBudgetLeft = percentErrorBudgetLeft;
            return this;
        }
        @CustomType.Setter
        public Builder percentOfLasting(@Nullable Double percentOfLasting) {

            this.percentOfLasting = percentOfLasting;
            return this;
        }
        @CustomType.Setter
        public Builder shortWindow1(@Nullable String shortWindow1) {

            this.shortWindow1 = shortWindow1;
            return this;
        }
        @CustomType.Setter
        public Builder shortWindow2(@Nullable String shortWindow2) {

            this.shortWindow2 = shortWindow2;
            return this;
        }
        public SloTargetAlertRuleRuleParameters build() {
            final var _resultValue = new SloTargetAlertRuleRuleParameters();
            _resultValue.burnRateThreshold1 = burnRateThreshold1;
            _resultValue.burnRateThreshold2 = burnRateThreshold2;
            _resultValue.fireLasting = fireLasting;
            _resultValue.longWindow1 = longWindow1;
            _resultValue.longWindow2 = longWindow2;
            _resultValue.percentErrorBudgetLeft = percentErrorBudgetLeft;
            _resultValue.percentOfLasting = percentOfLasting;
            _resultValue.shortWindow1 = shortWindow1;
            _resultValue.shortWindow2 = shortWindow2;
            return _resultValue;
        }
    }
}
