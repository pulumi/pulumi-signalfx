// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.signalfx;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import com.pulumi.signalfx.SingleValueChartArgs;
import com.pulumi.signalfx.Utilities;
import com.pulumi.signalfx.inputs.SingleValueChartState;
import com.pulumi.signalfx.outputs.SingleValueChartColorScale;
import com.pulumi.signalfx.outputs.SingleValueChartVizOption;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Optional;
import javax.annotation.Nullable;

/**
 * This chart type displays a single number in a large font, representing the current value of a single metric on a plot line.
 * 
 * If the time period is in the past, the number represents the value of the metric near the end of the time period.
 * 
 * ## Example
 * 
 * ## Arguments
 * 
 * The following arguments are supported in the resource block:
 * 
 * * `name` - (Required) Name of the chart.
 * * `program_text` - (Required) Signalflow program text for the chart. More info [in the Splunk Observability Cloud docs](https://dev.splunk.com/observability/docs/signalflow/).
 * * `description` - (Optional) Description of the chart.
 * * `color_by` - (Optional) Must be `&#34;Dimension&#34;`, `&#34;Scale&#34;` or `&#34;Metric&#34;`. `&#34;Dimension&#34;` by default.
 * * `color_scale` - (Optional. `color_by` must be `&#34;Scale&#34;`) Single color range including both the color to display for that range and the borders of the range. Example: `[{ gt = 60, color = &#34;blue&#34; }, { lte = 60, color = &#34;yellow&#34; }]`. Look at this [link](https://docs.signalfx.com/en/latest/charts/chart-options-tab.html).
 *     * `gt` - (Optional) Indicates the lower threshold non-inclusive value for this range.
 *     * `gte` - (Optional) Indicates the lower threshold inclusive value for this range.
 *     * `lt` - (Optional) Indicates the upper threshold non-inculsive value for this range.
 *     * `lte` - (Optional) Indicates the upper threshold inclusive value for this range.
 *     * `color` - (Required) The color to use. Must be one of gray, blue, light_blue, navy, dark_orange, orange, dark_yellow, magenta, cerise, pink, violet, purple, gray_blue, dark_green, green, aquamarine, red, yellow, vivid_yellow, light_green, or lime_green.
 * * `viz_options` - (Optional) Plot-level customization options, associated with a publish statement.
 *     * `label` - (Required) Label used in the publish statement that displays the plot (metric time series data) you want to customize.
 *     * `display_name` - (Optional) Specifies an alternate value for the Plot Name column of the Data Table associated with the chart.
 *     * `color` - (Optional) The color to use. Must be one of gray, blue, light_blue, navy, dark_orange, orange, dark_yellow, magenta, cerise, pink, violet, purple, gray_blue, dark_green, green, aquamarine, red, yellow, vivid_yellow, light_green, or lime_green.
 *     * `value_unit` - (Optional) A unit to attach to this plot. Units support automatic scaling (eg thousands of bytes will be displayed as kilobytes). Values values are `Bit, Kilobit, Megabit, Gigabit, Terabit, Petabit, Exabit, Zettabit, Yottabit, Byte, Kibibyte, Mebibyte, Gibibyte (note: this was previously typoed as Gigibyte), Tebibyte, Pebibyte, Exbibyte, Zebibyte, Yobibyte, Nanosecond, Microsecond, Millisecond, Second, Minute, Hour, Day, Week`.
 *     * `value_prefix`, `value_suffix` - (Optional) Arbitrary prefix/suffix to display with the value of this plot.
 * * `unit_prefix` - (Optional) Must be `&#34;Metric&#34;` or `&#34;Binary&#34;`. `&#34;Metric&#34;` by default.
 * * `max_delay` - (Optional) How long (in seconds) to wait for late datapoints
 * * `refresh_interval` - (Optional) How often (in seconds) to refresh the value.
 * * `max_precision` - (Optional) The maximum precision to for value displayed.
 * * `is_timestamp_hidden` - (Optional) Whether to hide the timestamp in the chart. `false` by default.
 * * `secondary_visualization` - (Optional) The type of secondary visualization. Can be `None`, `Radial`, `Linear`, or `Sparkline`. If unset, the Splunk Observability Cloud default is used (`None`).
 * * `show_spark_line` - (Optional) Whether to show a trend line below the current value. `false` by default.
 * 
 * ## Attributes
 * 
 * In a addition to all arguments above, the following attributes are exported:
 * 
 * * `id` - The ID of the chart.
 * * `url` - The URL of the chart.
 * 
 */
@ResourceType(type="signalfx:index/singleValueChart:SingleValueChart")
public class SingleValueChart extends com.pulumi.resources.CustomResource {
    /**
     * (Metric by default) Must be &#34;Metric&#34;, &#34;Dimension&#34;, or &#34;Scale&#34;. &#34;Scale&#34; maps to Color by Value in the UI
     * 
     */
    @Export(name="colorBy", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> colorBy;

    /**
     * @return (Metric by default) Must be &#34;Metric&#34;, &#34;Dimension&#34;, or &#34;Scale&#34;. &#34;Scale&#34; maps to Color by Value in the UI
     * 
     */
    public Output<Optional<String>> colorBy() {
        return Codegen.optional(this.colorBy);
    }
    /**
     * Single color range including both the color to display for that range and the borders of the range
     * 
     */
    @Export(name="colorScales", refs={List.class,SingleValueChartColorScale.class}, tree="[0,1]")
    private Output</* @Nullable */ List<SingleValueChartColorScale>> colorScales;

    /**
     * @return Single color range including both the color to display for that range and the borders of the range
     * 
     */
    public Output<Optional<List<SingleValueChartColorScale>>> colorScales() {
        return Codegen.optional(this.colorScales);
    }
    /**
     * Description of the chart (Optional)
     * 
     */
    @Export(name="description", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> description;

    /**
     * @return Description of the chart (Optional)
     * 
     */
    public Output<Optional<String>> description() {
        return Codegen.optional(this.description);
    }
    /**
     * (false by default) Whether to hide the timestamp in the chart
     * 
     */
    @Export(name="isTimestampHidden", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> isTimestampHidden;

    /**
     * @return (false by default) Whether to hide the timestamp in the chart
     * 
     */
    public Output<Optional<Boolean>> isTimestampHidden() {
        return Codegen.optional(this.isTimestampHidden);
    }
    /**
     * How long (in seconds) to wait for late datapoints
     * 
     */
    @Export(name="maxDelay", refs={Integer.class}, tree="[0]")
    private Output</* @Nullable */ Integer> maxDelay;

    /**
     * @return How long (in seconds) to wait for late datapoints
     * 
     */
    public Output<Optional<Integer>> maxDelay() {
        return Codegen.optional(this.maxDelay);
    }
    /**
     * The maximum precision to for values displayed in the list
     * 
     */
    @Export(name="maxPrecision", refs={Integer.class}, tree="[0]")
    private Output</* @Nullable */ Integer> maxPrecision;

    /**
     * @return The maximum precision to for values displayed in the list
     * 
     */
    public Output<Optional<Integer>> maxPrecision() {
        return Codegen.optional(this.maxPrecision);
    }
    /**
     * Name of the chart
     * 
     */
    @Export(name="name", refs={String.class}, tree="[0]")
    private Output<String> name;

    /**
     * @return Name of the chart
     * 
     */
    public Output<String> name() {
        return this.name;
    }
    /**
     * Signalflow program text for the chart. More info at &#34;https://developers.signalfx.com/docs/signalflow-overview&#34;
     * 
     */
    @Export(name="programText", refs={String.class}, tree="[0]")
    private Output<String> programText;

    /**
     * @return Signalflow program text for the chart. More info at &#34;https://developers.signalfx.com/docs/signalflow-overview&#34;
     * 
     */
    public Output<String> programText() {
        return this.programText;
    }
    /**
     * How often (in seconds) to refresh the values of the list
     * 
     */
    @Export(name="refreshInterval", refs={Integer.class}, tree="[0]")
    private Output</* @Nullable */ Integer> refreshInterval;

    /**
     * @return How often (in seconds) to refresh the values of the list
     * 
     */
    public Output<Optional<Integer>> refreshInterval() {
        return Codegen.optional(this.refreshInterval);
    }
    /**
     * (false by default) What kind of secondary visualization to show (None, Radial, Linear, Sparkline)
     * 
     */
    @Export(name="secondaryVisualization", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> secondaryVisualization;

    /**
     * @return (false by default) What kind of secondary visualization to show (None, Radial, Linear, Sparkline)
     * 
     */
    public Output<Optional<String>> secondaryVisualization() {
        return Codegen.optional(this.secondaryVisualization);
    }
    /**
     * (false by default) Whether to show a trend line below the current value
     * 
     */
    @Export(name="showSparkLine", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> showSparkLine;

    /**
     * @return (false by default) Whether to show a trend line below the current value
     * 
     */
    public Output<Optional<Boolean>> showSparkLine() {
        return Codegen.optional(this.showSparkLine);
    }
    /**
     * The property value is a string that denotes the geographic region associated with the time zone, (e.g. Australia/Sydney)
     * 
     */
    @Export(name="timezone", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> timezone;

    /**
     * @return The property value is a string that denotes the geographic region associated with the time zone, (e.g. Australia/Sydney)
     * 
     */
    public Output<Optional<String>> timezone() {
        return Codegen.optional(this.timezone);
    }
    /**
     * (Metric by default) Must be &#34;Metric&#34; or &#34;Binary&#34;
     * 
     */
    @Export(name="unitPrefix", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> unitPrefix;

    /**
     * @return (Metric by default) Must be &#34;Metric&#34; or &#34;Binary&#34;
     * 
     */
    public Output<Optional<String>> unitPrefix() {
        return Codegen.optional(this.unitPrefix);
    }
    /**
     * URL of the chart
     * 
     */
    @Export(name="url", refs={String.class}, tree="[0]")
    private Output<String> url;

    /**
     * @return URL of the chart
     * 
     */
    public Output<String> url() {
        return this.url;
    }
    /**
     * Plot-level customization options, associated with a publish statement
     * 
     */
    @Export(name="vizOptions", refs={List.class,SingleValueChartVizOption.class}, tree="[0,1]")
    private Output</* @Nullable */ List<SingleValueChartVizOption>> vizOptions;

    /**
     * @return Plot-level customization options, associated with a publish statement
     * 
     */
    public Output<Optional<List<SingleValueChartVizOption>>> vizOptions() {
        return Codegen.optional(this.vizOptions);
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public SingleValueChart(String name) {
        this(name, SingleValueChartArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public SingleValueChart(String name, SingleValueChartArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public SingleValueChart(String name, SingleValueChartArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("signalfx:index/singleValueChart:SingleValueChart", name, args == null ? SingleValueChartArgs.Empty : args, makeResourceOptions(options, Codegen.empty()));
    }

    private SingleValueChart(String name, Output<String> id, @Nullable SingleValueChartState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("signalfx:index/singleValueChart:SingleValueChart", name, state, makeResourceOptions(options, id));
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static SingleValueChart get(String name, Output<String> id, @Nullable SingleValueChartState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new SingleValueChart(name, id, state, options);
    }
}
