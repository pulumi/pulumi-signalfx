// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.signalfx.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Double;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class ListChartColorScale {
    /**
     * @return The color to use. Must be one of red, gold, iris, green, jade, gray, blue, azure, navy, brown, orange, yellow, magenta, cerise, pink, violet, purple, lilac, emerald, chartreuse, yellowgreen, aquamarine.
     * 
     */
    private String color;
    /**
     * @return Indicates the lower threshold non-inclusive value for this range.
     * 
     */
    private @Nullable Double gt;
    /**
     * @return Indicates the lower threshold inclusive value for this range.
     * 
     */
    private @Nullable Double gte;
    /**
     * @return Indicates the upper threshold non-inculsive value for this range.
     * 
     */
    private @Nullable Double lt;
    /**
     * @return Indicates the upper threshold inclusive value for this range.
     * 
     */
    private @Nullable Double lte;

    private ListChartColorScale() {}
    /**
     * @return The color to use. Must be one of red, gold, iris, green, jade, gray, blue, azure, navy, brown, orange, yellow, magenta, cerise, pink, violet, purple, lilac, emerald, chartreuse, yellowgreen, aquamarine.
     * 
     */
    public String color() {
        return this.color;
    }
    /**
     * @return Indicates the lower threshold non-inclusive value for this range.
     * 
     */
    public Optional<Double> gt() {
        return Optional.ofNullable(this.gt);
    }
    /**
     * @return Indicates the lower threshold inclusive value for this range.
     * 
     */
    public Optional<Double> gte() {
        return Optional.ofNullable(this.gte);
    }
    /**
     * @return Indicates the upper threshold non-inculsive value for this range.
     * 
     */
    public Optional<Double> lt() {
        return Optional.ofNullable(this.lt);
    }
    /**
     * @return Indicates the upper threshold inclusive value for this range.
     * 
     */
    public Optional<Double> lte() {
        return Optional.ofNullable(this.lte);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(ListChartColorScale defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String color;
        private @Nullable Double gt;
        private @Nullable Double gte;
        private @Nullable Double lt;
        private @Nullable Double lte;
        public Builder() {}
        public Builder(ListChartColorScale defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.color = defaults.color;
    	      this.gt = defaults.gt;
    	      this.gte = defaults.gte;
    	      this.lt = defaults.lt;
    	      this.lte = defaults.lte;
        }

        @CustomType.Setter
        public Builder color(String color) {
            if (color == null) {
              throw new MissingRequiredPropertyException("ListChartColorScale", "color");
            }
            this.color = color;
            return this;
        }
        @CustomType.Setter
        public Builder gt(@Nullable Double gt) {

            this.gt = gt;
            return this;
        }
        @CustomType.Setter
        public Builder gte(@Nullable Double gte) {

            this.gte = gte;
            return this;
        }
        @CustomType.Setter
        public Builder lt(@Nullable Double lt) {

            this.lt = lt;
            return this;
        }
        @CustomType.Setter
        public Builder lte(@Nullable Double lte) {

            this.lte = lte;
            return this;
        }
        public ListChartColorScale build() {
            final var _resultValue = new ListChartColorScale();
            _resultValue.color = color;
            _resultValue.gt = gt;
            _resultValue.gte = gte;
            _resultValue.lt = lt;
            _resultValue.lte = lte;
            return _resultValue;
        }
    }
}
