// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.signalfx;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ProviderArgs extends com.pulumi.resources.ResourceArgs {

    public static final ProviderArgs Empty = new ProviderArgs();

    /**
     * API URL for your SignalFx org, may include a realm
     * 
     */
    @Import(name="apiUrl")
    private @Nullable Output<String> apiUrl;

    /**
     * @return API URL for your SignalFx org, may include a realm
     * 
     */
    public Optional<Output<String>> apiUrl() {
        return Optional.ofNullable(this.apiUrl);
    }

    /**
     * SignalFx auth token
     * 
     */
    @Import(name="authToken")
    private @Nullable Output<String> authToken;

    /**
     * @return SignalFx auth token
     * 
     */
    public Optional<Output<String>> authToken() {
        return Optional.ofNullable(this.authToken);
    }

    /**
     * Application URL for your SignalFx org, often customized for organizations using SSO
     * 
     */
    @Import(name="customAppUrl")
    private @Nullable Output<String> customAppUrl;

    /**
     * @return Application URL for your SignalFx org, often customized for organizations using SSO
     * 
     */
    public Optional<Output<String>> customAppUrl() {
        return Optional.ofNullable(this.customAppUrl);
    }

    /**
     * Max retries for a single HTTP call. Defaults to 4
     * 
     */
    @Import(name="retryMaxAttempts", json=true)
    private @Nullable Output<Integer> retryMaxAttempts;

    /**
     * @return Max retries for a single HTTP call. Defaults to 4
     * 
     */
    public Optional<Output<Integer>> retryMaxAttempts() {
        return Optional.ofNullable(this.retryMaxAttempts);
    }

    /**
     * Maximum retry wait for a single HTTP call in seconds. Defaults to 30
     * 
     */
    @Import(name="retryWaitMaxSeconds", json=true)
    private @Nullable Output<Integer> retryWaitMaxSeconds;

    /**
     * @return Maximum retry wait for a single HTTP call in seconds. Defaults to 30
     * 
     */
    public Optional<Output<Integer>> retryWaitMaxSeconds() {
        return Optional.ofNullable(this.retryWaitMaxSeconds);
    }

    /**
     * Minimum retry wait for a single HTTP call in seconds. Defaults to 1
     * 
     */
    @Import(name="retryWaitMinSeconds", json=true)
    private @Nullable Output<Integer> retryWaitMinSeconds;

    /**
     * @return Minimum retry wait for a single HTTP call in seconds. Defaults to 1
     * 
     */
    public Optional<Output<Integer>> retryWaitMinSeconds() {
        return Optional.ofNullable(this.retryWaitMinSeconds);
    }

    /**
     * Timeout duration for a single HTTP call in seconds. Defaults to 120
     * 
     */
    @Import(name="timeoutSeconds", json=true)
    private @Nullable Output<Integer> timeoutSeconds;

    /**
     * @return Timeout duration for a single HTTP call in seconds. Defaults to 120
     * 
     */
    public Optional<Output<Integer>> timeoutSeconds() {
        return Optional.ofNullable(this.timeoutSeconds);
    }

    private ProviderArgs() {}

    private ProviderArgs(ProviderArgs $) {
        this.apiUrl = $.apiUrl;
        this.authToken = $.authToken;
        this.customAppUrl = $.customAppUrl;
        this.retryMaxAttempts = $.retryMaxAttempts;
        this.retryWaitMaxSeconds = $.retryWaitMaxSeconds;
        this.retryWaitMinSeconds = $.retryWaitMinSeconds;
        this.timeoutSeconds = $.timeoutSeconds;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ProviderArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ProviderArgs $;

        public Builder() {
            $ = new ProviderArgs();
        }

        public Builder(ProviderArgs defaults) {
            $ = new ProviderArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param apiUrl API URL for your SignalFx org, may include a realm
         * 
         * @return builder
         * 
         */
        public Builder apiUrl(@Nullable Output<String> apiUrl) {
            $.apiUrl = apiUrl;
            return this;
        }

        /**
         * @param apiUrl API URL for your SignalFx org, may include a realm
         * 
         * @return builder
         * 
         */
        public Builder apiUrl(String apiUrl) {
            return apiUrl(Output.of(apiUrl));
        }

        /**
         * @param authToken SignalFx auth token
         * 
         * @return builder
         * 
         */
        public Builder authToken(@Nullable Output<String> authToken) {
            $.authToken = authToken;
            return this;
        }

        /**
         * @param authToken SignalFx auth token
         * 
         * @return builder
         * 
         */
        public Builder authToken(String authToken) {
            return authToken(Output.of(authToken));
        }

        /**
         * @param customAppUrl Application URL for your SignalFx org, often customized for organizations using SSO
         * 
         * @return builder
         * 
         */
        public Builder customAppUrl(@Nullable Output<String> customAppUrl) {
            $.customAppUrl = customAppUrl;
            return this;
        }

        /**
         * @param customAppUrl Application URL for your SignalFx org, often customized for organizations using SSO
         * 
         * @return builder
         * 
         */
        public Builder customAppUrl(String customAppUrl) {
            return customAppUrl(Output.of(customAppUrl));
        }

        /**
         * @param retryMaxAttempts Max retries for a single HTTP call. Defaults to 4
         * 
         * @return builder
         * 
         */
        public Builder retryMaxAttempts(@Nullable Output<Integer> retryMaxAttempts) {
            $.retryMaxAttempts = retryMaxAttempts;
            return this;
        }

        /**
         * @param retryMaxAttempts Max retries for a single HTTP call. Defaults to 4
         * 
         * @return builder
         * 
         */
        public Builder retryMaxAttempts(Integer retryMaxAttempts) {
            return retryMaxAttempts(Output.of(retryMaxAttempts));
        }

        /**
         * @param retryWaitMaxSeconds Maximum retry wait for a single HTTP call in seconds. Defaults to 30
         * 
         * @return builder
         * 
         */
        public Builder retryWaitMaxSeconds(@Nullable Output<Integer> retryWaitMaxSeconds) {
            $.retryWaitMaxSeconds = retryWaitMaxSeconds;
            return this;
        }

        /**
         * @param retryWaitMaxSeconds Maximum retry wait for a single HTTP call in seconds. Defaults to 30
         * 
         * @return builder
         * 
         */
        public Builder retryWaitMaxSeconds(Integer retryWaitMaxSeconds) {
            return retryWaitMaxSeconds(Output.of(retryWaitMaxSeconds));
        }

        /**
         * @param retryWaitMinSeconds Minimum retry wait for a single HTTP call in seconds. Defaults to 1
         * 
         * @return builder
         * 
         */
        public Builder retryWaitMinSeconds(@Nullable Output<Integer> retryWaitMinSeconds) {
            $.retryWaitMinSeconds = retryWaitMinSeconds;
            return this;
        }

        /**
         * @param retryWaitMinSeconds Minimum retry wait for a single HTTP call in seconds. Defaults to 1
         * 
         * @return builder
         * 
         */
        public Builder retryWaitMinSeconds(Integer retryWaitMinSeconds) {
            return retryWaitMinSeconds(Output.of(retryWaitMinSeconds));
        }

        /**
         * @param timeoutSeconds Timeout duration for a single HTTP call in seconds. Defaults to 120
         * 
         * @return builder
         * 
         */
        public Builder timeoutSeconds(@Nullable Output<Integer> timeoutSeconds) {
            $.timeoutSeconds = timeoutSeconds;
            return this;
        }

        /**
         * @param timeoutSeconds Timeout duration for a single HTTP call in seconds. Defaults to 120
         * 
         * @return builder
         * 
         */
        public Builder timeoutSeconds(Integer timeoutSeconds) {
            return timeoutSeconds(Output.of(timeoutSeconds));
        }

        public ProviderArgs build() {
            return $;
        }
    }

}
