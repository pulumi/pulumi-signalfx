// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Signalfx
{
    /// <summary>
    /// Manage SignalFx org tokens.
    /// 
    /// &gt; This content is derived from https://github.com/terraform-providers/terraform-provider-signalfx/blob/master/website/docs/r/org_token.html.markdown.
    /// </summary>
    public partial class OrgToken : Pulumi.CustomResource
    {
        /// <summary>
        /// Description of the token.
        /// </summary>
        [Output("description")]
        public Output<string?> Description { get; private set; } = null!;

        /// <summary>
        /// Flag that controls enabling the token. If set to `true`, the token is disabled, and you can't use it for authentication. Defaults to `false`.
        /// </summary>
        [Output("disabled")]
        public Output<bool?> Disabled { get; private set; } = null!;

        /// <summary>
        /// Specify DPM-based limits for this token.
        /// </summary>
        [Output("dpmLimits")]
        public Output<Outputs.OrgTokenDpmLimits?> DpmLimits { get; private set; } = null!;

        /// <summary>
        /// Specify Usage-based limits for this token.
        /// </summary>
        [Output("hostOrUsageLimits")]
        public Output<Outputs.OrgTokenHostOrUsageLimits?> HostOrUsageLimits { get; private set; } = null!;

        /// <summary>
        /// Name of the token.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// List of strings specifying where notifications will be sent when an incident occurs. See
        /// https://developers.signalfx.com/v2/docs/detector-model#notifications-models for more info
        /// </summary>
        [Output("notifications")]
        public Output<ImmutableArray<string>> Notifications { get; private set; } = null!;


        /// <summary>
        /// Create a OrgToken resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public OrgToken(string name, OrgTokenArgs? args = null, CustomResourceOptions? options = null)
            : base("signalfx:index/orgToken:OrgToken", name, args, MakeResourceOptions(options, ""))
        {
        }

        private OrgToken(string name, Input<string> id, OrgTokenState? state = null, CustomResourceOptions? options = null)
            : base("signalfx:index/orgToken:OrgToken", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing OrgToken resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static OrgToken Get(string name, Input<string> id, OrgTokenState? state = null, CustomResourceOptions? options = null)
        {
            return new OrgToken(name, id, state, options);
        }
    }

    public sealed class OrgTokenArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// Description of the token.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// Flag that controls enabling the token. If set to `true`, the token is disabled, and you can't use it for authentication. Defaults to `false`.
        /// </summary>
        [Input("disabled")]
        public Input<bool>? Disabled { get; set; }

        /// <summary>
        /// Specify DPM-based limits for this token.
        /// </summary>
        [Input("dpmLimits")]
        public Input<Inputs.OrgTokenDpmLimitsArgs>? DpmLimits { get; set; }

        /// <summary>
        /// Specify Usage-based limits for this token.
        /// </summary>
        [Input("hostOrUsageLimits")]
        public Input<Inputs.OrgTokenHostOrUsageLimitsArgs>? HostOrUsageLimits { get; set; }

        /// <summary>
        /// Name of the token.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("notifications")]
        private InputList<string>? _notifications;

        /// <summary>
        /// List of strings specifying where notifications will be sent when an incident occurs. See
        /// https://developers.signalfx.com/v2/docs/detector-model#notifications-models for more info
        /// </summary>
        public InputList<string> Notifications
        {
            get => _notifications ?? (_notifications = new InputList<string>());
            set => _notifications = value;
        }

        public OrgTokenArgs()
        {
        }
    }

    public sealed class OrgTokenState : Pulumi.ResourceArgs
    {
        /// <summary>
        /// Description of the token.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// Flag that controls enabling the token. If set to `true`, the token is disabled, and you can't use it for authentication. Defaults to `false`.
        /// </summary>
        [Input("disabled")]
        public Input<bool>? Disabled { get; set; }

        /// <summary>
        /// Specify DPM-based limits for this token.
        /// </summary>
        [Input("dpmLimits")]
        public Input<Inputs.OrgTokenDpmLimitsGetArgs>? DpmLimits { get; set; }

        /// <summary>
        /// Specify Usage-based limits for this token.
        /// </summary>
        [Input("hostOrUsageLimits")]
        public Input<Inputs.OrgTokenHostOrUsageLimitsGetArgs>? HostOrUsageLimits { get; set; }

        /// <summary>
        /// Name of the token.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("notifications")]
        private InputList<string>? _notifications;

        /// <summary>
        /// List of strings specifying where notifications will be sent when an incident occurs. See
        /// https://developers.signalfx.com/v2/docs/detector-model#notifications-models for more info
        /// </summary>
        public InputList<string> Notifications
        {
            get => _notifications ?? (_notifications = new InputList<string>());
            set => _notifications = value;
        }

        public OrgTokenState()
        {
        }
    }

    namespace Inputs
    {

    public sealed class OrgTokenDpmLimitsArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// The datapoints per minute (dpm) limit for this token. If you exceed this limit, SignalFx sends out an alert.
        /// </summary>
        [Input("dpmLimit", required: true)]
        public Input<int> DpmLimit { get; set; } = null!;

        /// <summary>
        /// DPM level at which SignalFx sends the notification for this token. If you don't specify a notification, SignalFx sends the generic notification.
        /// </summary>
        [Input("dpmNotificationThreshold")]
        public Input<int>? DpmNotificationThreshold { get; set; }

        public OrgTokenDpmLimitsArgs()
        {
        }
    }

    public sealed class OrgTokenDpmLimitsGetArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// The datapoints per minute (dpm) limit for this token. If you exceed this limit, SignalFx sends out an alert.
        /// </summary>
        [Input("dpmLimit", required: true)]
        public Input<int> DpmLimit { get; set; } = null!;

        /// <summary>
        /// DPM level at which SignalFx sends the notification for this token. If you don't specify a notification, SignalFx sends the generic notification.
        /// </summary>
        [Input("dpmNotificationThreshold")]
        public Input<int>? DpmNotificationThreshold { get; set; }

        public OrgTokenDpmLimitsGetArgs()
        {
        }
    }

    public sealed class OrgTokenHostOrUsageLimitsArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// Max number of Docker containers that can use this token
        /// </summary>
        [Input("containerLimit")]
        public Input<int>? ContainerLimit { get; set; }

        /// <summary>
        /// Notification threshold for Docker containers
        /// </summary>
        [Input("containerNotificationThreshold")]
        public Input<int>? ContainerNotificationThreshold { get; set; }

        /// <summary>
        /// Max number of custom metrics that can be sent with this token
        /// </summary>
        [Input("customMetricsLimit")]
        public Input<int>? CustomMetricsLimit { get; set; }

        /// <summary>
        /// Notification threshold for custom metrics
        /// </summary>
        [Input("customMetricsNotificationThreshold")]
        public Input<int>? CustomMetricsNotificationThreshold { get; set; }

        /// <summary>
        /// Max number of hi-res metrics that can be sent with this toke
        /// </summary>
        [Input("highResMetricsLimit")]
        public Input<int>? HighResMetricsLimit { get; set; }

        /// <summary>
        /// Notification threshold for hi-res metrics
        /// </summary>
        [Input("highResMetricsNotificationThreshold")]
        public Input<int>? HighResMetricsNotificationThreshold { get; set; }

        /// <summary>
        /// Max number of hosts that can use this token
        /// </summary>
        [Input("hostLimit")]
        public Input<int>? HostLimit { get; set; }

        /// <summary>
        /// Notification threshold for hosts
        /// </summary>
        [Input("hostNotificationThreshold")]
        public Input<int>? HostNotificationThreshold { get; set; }

        public OrgTokenHostOrUsageLimitsArgs()
        {
        }
    }

    public sealed class OrgTokenHostOrUsageLimitsGetArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// Max number of Docker containers that can use this token
        /// </summary>
        [Input("containerLimit")]
        public Input<int>? ContainerLimit { get; set; }

        /// <summary>
        /// Notification threshold for Docker containers
        /// </summary>
        [Input("containerNotificationThreshold")]
        public Input<int>? ContainerNotificationThreshold { get; set; }

        /// <summary>
        /// Max number of custom metrics that can be sent with this token
        /// </summary>
        [Input("customMetricsLimit")]
        public Input<int>? CustomMetricsLimit { get; set; }

        /// <summary>
        /// Notification threshold for custom metrics
        /// </summary>
        [Input("customMetricsNotificationThreshold")]
        public Input<int>? CustomMetricsNotificationThreshold { get; set; }

        /// <summary>
        /// Max number of hi-res metrics that can be sent with this toke
        /// </summary>
        [Input("highResMetricsLimit")]
        public Input<int>? HighResMetricsLimit { get; set; }

        /// <summary>
        /// Notification threshold for hi-res metrics
        /// </summary>
        [Input("highResMetricsNotificationThreshold")]
        public Input<int>? HighResMetricsNotificationThreshold { get; set; }

        /// <summary>
        /// Max number of hosts that can use this token
        /// </summary>
        [Input("hostLimit")]
        public Input<int>? HostLimit { get; set; }

        /// <summary>
        /// Notification threshold for hosts
        /// </summary>
        [Input("hostNotificationThreshold")]
        public Input<int>? HostNotificationThreshold { get; set; }

        public OrgTokenHostOrUsageLimitsGetArgs()
        {
        }
    }
    }

    namespace Outputs
    {

    [OutputType]
    public sealed class OrgTokenDpmLimits
    {
        /// <summary>
        /// The datapoints per minute (dpm) limit for this token. If you exceed this limit, SignalFx sends out an alert.
        /// </summary>
        public readonly int DpmLimit;
        /// <summary>
        /// DPM level at which SignalFx sends the notification for this token. If you don't specify a notification, SignalFx sends the generic notification.
        /// </summary>
        public readonly int? DpmNotificationThreshold;

        [OutputConstructor]
        private OrgTokenDpmLimits(
            int dpmLimit,
            int? dpmNotificationThreshold)
        {
            DpmLimit = dpmLimit;
            DpmNotificationThreshold = dpmNotificationThreshold;
        }
    }

    [OutputType]
    public sealed class OrgTokenHostOrUsageLimits
    {
        /// <summary>
        /// Max number of Docker containers that can use this token
        /// </summary>
        public readonly int? ContainerLimit;
        /// <summary>
        /// Notification threshold for Docker containers
        /// </summary>
        public readonly int? ContainerNotificationThreshold;
        /// <summary>
        /// Max number of custom metrics that can be sent with this token
        /// </summary>
        public readonly int? CustomMetricsLimit;
        /// <summary>
        /// Notification threshold for custom metrics
        /// </summary>
        public readonly int? CustomMetricsNotificationThreshold;
        /// <summary>
        /// Max number of hi-res metrics that can be sent with this toke
        /// </summary>
        public readonly int? HighResMetricsLimit;
        /// <summary>
        /// Notification threshold for hi-res metrics
        /// </summary>
        public readonly int? HighResMetricsNotificationThreshold;
        /// <summary>
        /// Max number of hosts that can use this token
        /// </summary>
        public readonly int? HostLimit;
        /// <summary>
        /// Notification threshold for hosts
        /// </summary>
        public readonly int? HostNotificationThreshold;

        [OutputConstructor]
        private OrgTokenHostOrUsageLimits(
            int? containerLimit,
            int? containerNotificationThreshold,
            int? customMetricsLimit,
            int? customMetricsNotificationThreshold,
            int? highResMetricsLimit,
            int? highResMetricsNotificationThreshold,
            int? hostLimit,
            int? hostNotificationThreshold)
        {
            ContainerLimit = containerLimit;
            ContainerNotificationThreshold = containerNotificationThreshold;
            CustomMetricsLimit = customMetricsLimit;
            CustomMetricsNotificationThreshold = customMetricsNotificationThreshold;
            HighResMetricsLimit = highResMetricsLimit;
            HighResMetricsNotificationThreshold = highResMetricsNotificationThreshold;
            HostLimit = hostLimit;
            HostNotificationThreshold = hostNotificationThreshold;
        }
    }
    }
}
