// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Signalfx
{
    /// <summary>
    /// Provides a SignalFx detector resource. This can be used to create and manage detectors.
    /// 
    /// &gt; This content is derived from https://github.com/terraform-providers/terraform-provider-signalfx/blob/master/website/docs/r/detector.html.markdown.
    /// </summary>
    public partial class Detector : Pulumi.CustomResource
    {
        /// <summary>
        /// Description of the detector.
        /// </summary>
        [Output("description")]
        public Output<string?> Description { get; private set; } = null!;

        /// <summary>
        /// When `false`, the visualization may sample the output timeseries rather than displaying them all. `false` by default.
        /// </summary>
        [Output("disableSampling")]
        public Output<bool?> DisableSampling { get; private set; } = null!;

        /// <summary>
        /// Seconds since epoch. Used for visualization. Conflicts with `time_range`.
        /// </summary>
        [Output("endTime")]
        public Output<int?> EndTime { get; private set; } = null!;

        /// <summary>
        /// How long (in seconds) to wait for late datapoints. See &lt;https://signalfx-product-docs.readthedocs-hosted.com/en/latest/charts/chart-builder.html#delayed-datapoints&gt; for more info. Max value is `900` seconds (15 minutes).
        /// </summary>
        [Output("maxDelay")]
        public Output<int?> MaxDelay { get; private set; } = null!;

        /// <summary>
        /// Name of the detector.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// Signalflow program text for the detector. More info at &lt;https://developers.signalfx.com/docs/signalflow-overview&gt;.
        /// </summary>
        [Output("programText")]
        public Output<string> ProgramText { get; private set; } = null!;

        /// <summary>
        /// Set of rules used for alerting.
        /// </summary>
        [Output("rules")]
        public Output<ImmutableArray<Outputs.DetectorRules>> Rules { get; private set; } = null!;

        /// <summary>
        /// When `true`, markers will be drawn for each datapoint within the visualization. `false` by default.
        /// </summary>
        [Output("showDataMarkers")]
        public Output<bool?> ShowDataMarkers { get; private set; } = null!;

        /// <summary>
        /// When `true`, the visualization will display a vertical line for each event trigger. `false` by default.
        /// </summary>
        [Output("showEventLines")]
        public Output<bool?> ShowEventLines { get; private set; } = null!;

        /// <summary>
        /// Seconds since epoch. Used for visualization. Conflicts with `time_range`.
        /// </summary>
        [Output("startTime")]
        public Output<int?> StartTime { get; private set; } = null!;

        /// <summary>
        /// Team IDs to associate the detector to.
        /// </summary>
        [Output("teams")]
        public Output<ImmutableArray<string>> Teams { get; private set; } = null!;

        /// <summary>
        /// Seconds to display in the visualization. This is a rolling range from the current time. Example: 3600 = `-1h`. Defaults to 3600.
        /// </summary>
        [Output("timeRange")]
        public Output<int?> TimeRange { get; private set; } = null!;

        /// <summary>
        /// URL of the detector
        /// </summary>
        [Output("url")]
        public Output<string> Url { get; private set; } = null!;


        /// <summary>
        /// Create a Detector resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Detector(string name, DetectorArgs args, CustomResourceOptions? options = null)
            : base("signalfx:index/detector:Detector", name, args, MakeResourceOptions(options, ""))
        {
        }

        private Detector(string name, Input<string> id, DetectorState? state = null, CustomResourceOptions? options = null)
            : base("signalfx:index/detector:Detector", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Detector resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Detector Get(string name, Input<string> id, DetectorState? state = null, CustomResourceOptions? options = null)
        {
            return new Detector(name, id, state, options);
        }
    }

    public sealed class DetectorArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// Description of the detector.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// When `false`, the visualization may sample the output timeseries rather than displaying them all. `false` by default.
        /// </summary>
        [Input("disableSampling")]
        public Input<bool>? DisableSampling { get; set; }

        /// <summary>
        /// Seconds since epoch. Used for visualization. Conflicts with `time_range`.
        /// </summary>
        [Input("endTime")]
        public Input<int>? EndTime { get; set; }

        /// <summary>
        /// How long (in seconds) to wait for late datapoints. See &lt;https://signalfx-product-docs.readthedocs-hosted.com/en/latest/charts/chart-builder.html#delayed-datapoints&gt; for more info. Max value is `900` seconds (15 minutes).
        /// </summary>
        [Input("maxDelay")]
        public Input<int>? MaxDelay { get; set; }

        /// <summary>
        /// Name of the detector.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Signalflow program text for the detector. More info at &lt;https://developers.signalfx.com/docs/signalflow-overview&gt;.
        /// </summary>
        [Input("programText", required: true)]
        public Input<string> ProgramText { get; set; } = null!;

        [Input("rules", required: true)]
        private InputList<Inputs.DetectorRulesArgs>? _rules;

        /// <summary>
        /// Set of rules used for alerting.
        /// </summary>
        public InputList<Inputs.DetectorRulesArgs> Rules
        {
            get => _rules ?? (_rules = new InputList<Inputs.DetectorRulesArgs>());
            set => _rules = value;
        }

        /// <summary>
        /// When `true`, markers will be drawn for each datapoint within the visualization. `false` by default.
        /// </summary>
        [Input("showDataMarkers")]
        public Input<bool>? ShowDataMarkers { get; set; }

        /// <summary>
        /// When `true`, the visualization will display a vertical line for each event trigger. `false` by default.
        /// </summary>
        [Input("showEventLines")]
        public Input<bool>? ShowEventLines { get; set; }

        /// <summary>
        /// Seconds since epoch. Used for visualization. Conflicts with `time_range`.
        /// </summary>
        [Input("startTime")]
        public Input<int>? StartTime { get; set; }

        [Input("teams")]
        private InputList<string>? _teams;

        /// <summary>
        /// Team IDs to associate the detector to.
        /// </summary>
        public InputList<string> Teams
        {
            get => _teams ?? (_teams = new InputList<string>());
            set => _teams = value;
        }

        /// <summary>
        /// Seconds to display in the visualization. This is a rolling range from the current time. Example: 3600 = `-1h`. Defaults to 3600.
        /// </summary>
        [Input("timeRange")]
        public Input<int>? TimeRange { get; set; }

        public DetectorArgs()
        {
        }
    }

    public sealed class DetectorState : Pulumi.ResourceArgs
    {
        /// <summary>
        /// Description of the detector.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// When `false`, the visualization may sample the output timeseries rather than displaying them all. `false` by default.
        /// </summary>
        [Input("disableSampling")]
        public Input<bool>? DisableSampling { get; set; }

        /// <summary>
        /// Seconds since epoch. Used for visualization. Conflicts with `time_range`.
        /// </summary>
        [Input("endTime")]
        public Input<int>? EndTime { get; set; }

        /// <summary>
        /// How long (in seconds) to wait for late datapoints. See &lt;https://signalfx-product-docs.readthedocs-hosted.com/en/latest/charts/chart-builder.html#delayed-datapoints&gt; for more info. Max value is `900` seconds (15 minutes).
        /// </summary>
        [Input("maxDelay")]
        public Input<int>? MaxDelay { get; set; }

        /// <summary>
        /// Name of the detector.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Signalflow program text for the detector. More info at &lt;https://developers.signalfx.com/docs/signalflow-overview&gt;.
        /// </summary>
        [Input("programText")]
        public Input<string>? ProgramText { get; set; }

        [Input("rules")]
        private InputList<Inputs.DetectorRulesGetArgs>? _rules;

        /// <summary>
        /// Set of rules used for alerting.
        /// </summary>
        public InputList<Inputs.DetectorRulesGetArgs> Rules
        {
            get => _rules ?? (_rules = new InputList<Inputs.DetectorRulesGetArgs>());
            set => _rules = value;
        }

        /// <summary>
        /// When `true`, markers will be drawn for each datapoint within the visualization. `false` by default.
        /// </summary>
        [Input("showDataMarkers")]
        public Input<bool>? ShowDataMarkers { get; set; }

        /// <summary>
        /// When `true`, the visualization will display a vertical line for each event trigger. `false` by default.
        /// </summary>
        [Input("showEventLines")]
        public Input<bool>? ShowEventLines { get; set; }

        /// <summary>
        /// Seconds since epoch. Used for visualization. Conflicts with `time_range`.
        /// </summary>
        [Input("startTime")]
        public Input<int>? StartTime { get; set; }

        [Input("teams")]
        private InputList<string>? _teams;

        /// <summary>
        /// Team IDs to associate the detector to.
        /// </summary>
        public InputList<string> Teams
        {
            get => _teams ?? (_teams = new InputList<string>());
            set => _teams = value;
        }

        /// <summary>
        /// Seconds to display in the visualization. This is a rolling range from the current time. Example: 3600 = `-1h`. Defaults to 3600.
        /// </summary>
        [Input("timeRange")]
        public Input<int>? TimeRange { get; set; }

        /// <summary>
        /// URL of the detector
        /// </summary>
        [Input("url")]
        public Input<string>? Url { get; set; }

        public DetectorState()
        {
        }
    }

    namespace Inputs
    {

    public sealed class DetectorRulesArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// Description of the detector.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// A detect label which matches a detect label within `program_text`.
        /// </summary>
        [Input("detectLabel", required: true)]
        public Input<string> DetectLabel { get; set; } = null!;

        /// <summary>
        /// When true, notifications and events will not be generated for the detect label. `false` by default.
        /// </summary>
        [Input("disabled")]
        public Input<bool>? Disabled { get; set; }

        [Input("notifications")]
        private InputList<string>? _notifications;

        /// <summary>
        /// List of strings specifying where notifications will be sent when an incident occurs. See &lt;https://developers.signalfx.com/detectors_reference.html#operation/Create%20Single%20Detector&gt; for more info.
        /// </summary>
        public InputList<string> Notifications
        {
            get => _notifications ?? (_notifications = new InputList<string>());
            set => _notifications = value;
        }

        /// <summary>
        /// Custom notification message body when an alert is triggered. See &lt;https://docs.signalfx.com/en/latest/detect-alert/set-up-detectors.html#about-detectors#alert-settings&gt; for more info.
        /// </summary>
        [Input("parameterizedBody")]
        public Input<string>? ParameterizedBody { get; set; }

        /// <summary>
        /// Custom notification message subject when an alert is triggered. See &lt;https://docs.signalfx.com/en/latest/detect-alert/set-up-detectors.html#about-detectors#alert-settings&gt; for more info.
        /// </summary>
        [Input("parameterizedSubject")]
        public Input<string>? ParameterizedSubject { get; set; }

        /// <summary>
        /// URL of page to consult when an alert is triggered. This can be used with custom notification messages.
        /// </summary>
        [Input("runbookUrl")]
        public Input<string>? RunbookUrl { get; set; }

        /// <summary>
        /// The severity of the rule, must be one of: `"Critical"`, `"Major"`, `"Minor"`, `"Warning"`, `"Info"`.
        /// </summary>
        [Input("severity", required: true)]
        public Input<string> Severity { get; set; } = null!;

        /// <summary>
        /// Plain text suggested first course of action, such as a command line to execute. This can be used with custom notification messages.
        /// </summary>
        [Input("tip")]
        public Input<string>? Tip { get; set; }

        public DetectorRulesArgs()
        {
        }
    }

    public sealed class DetectorRulesGetArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// Description of the detector.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// A detect label which matches a detect label within `program_text`.
        /// </summary>
        [Input("detectLabel", required: true)]
        public Input<string> DetectLabel { get; set; } = null!;

        /// <summary>
        /// When true, notifications and events will not be generated for the detect label. `false` by default.
        /// </summary>
        [Input("disabled")]
        public Input<bool>? Disabled { get; set; }

        [Input("notifications")]
        private InputList<string>? _notifications;

        /// <summary>
        /// List of strings specifying where notifications will be sent when an incident occurs. See &lt;https://developers.signalfx.com/detectors_reference.html#operation/Create%20Single%20Detector&gt; for more info.
        /// </summary>
        public InputList<string> Notifications
        {
            get => _notifications ?? (_notifications = new InputList<string>());
            set => _notifications = value;
        }

        /// <summary>
        /// Custom notification message body when an alert is triggered. See &lt;https://docs.signalfx.com/en/latest/detect-alert/set-up-detectors.html#about-detectors#alert-settings&gt; for more info.
        /// </summary>
        [Input("parameterizedBody")]
        public Input<string>? ParameterizedBody { get; set; }

        /// <summary>
        /// Custom notification message subject when an alert is triggered. See &lt;https://docs.signalfx.com/en/latest/detect-alert/set-up-detectors.html#about-detectors#alert-settings&gt; for more info.
        /// </summary>
        [Input("parameterizedSubject")]
        public Input<string>? ParameterizedSubject { get; set; }

        /// <summary>
        /// URL of page to consult when an alert is triggered. This can be used with custom notification messages.
        /// </summary>
        [Input("runbookUrl")]
        public Input<string>? RunbookUrl { get; set; }

        /// <summary>
        /// The severity of the rule, must be one of: `"Critical"`, `"Major"`, `"Minor"`, `"Warning"`, `"Info"`.
        /// </summary>
        [Input("severity", required: true)]
        public Input<string> Severity { get; set; } = null!;

        /// <summary>
        /// Plain text suggested first course of action, such as a command line to execute. This can be used with custom notification messages.
        /// </summary>
        [Input("tip")]
        public Input<string>? Tip { get; set; }

        public DetectorRulesGetArgs()
        {
        }
    }
    }

    namespace Outputs
    {

    [OutputType]
    public sealed class DetectorRules
    {
        /// <summary>
        /// Description of the detector.
        /// </summary>
        public readonly string? Description;
        /// <summary>
        /// A detect label which matches a detect label within `program_text`.
        /// </summary>
        public readonly string DetectLabel;
        /// <summary>
        /// When true, notifications and events will not be generated for the detect label. `false` by default.
        /// </summary>
        public readonly bool? Disabled;
        /// <summary>
        /// List of strings specifying where notifications will be sent when an incident occurs. See &lt;https://developers.signalfx.com/detectors_reference.html#operation/Create%20Single%20Detector&gt; for more info.
        /// </summary>
        public readonly ImmutableArray<string> Notifications;
        /// <summary>
        /// Custom notification message body when an alert is triggered. See &lt;https://docs.signalfx.com/en/latest/detect-alert/set-up-detectors.html#about-detectors#alert-settings&gt; for more info.
        /// </summary>
        public readonly string? ParameterizedBody;
        /// <summary>
        /// Custom notification message subject when an alert is triggered. See &lt;https://docs.signalfx.com/en/latest/detect-alert/set-up-detectors.html#about-detectors#alert-settings&gt; for more info.
        /// </summary>
        public readonly string? ParameterizedSubject;
        /// <summary>
        /// URL of page to consult when an alert is triggered. This can be used with custom notification messages.
        /// </summary>
        public readonly string? RunbookUrl;
        /// <summary>
        /// The severity of the rule, must be one of: `"Critical"`, `"Major"`, `"Minor"`, `"Warning"`, `"Info"`.
        /// </summary>
        public readonly string Severity;
        /// <summary>
        /// Plain text suggested first course of action, such as a command line to execute. This can be used with custom notification messages.
        /// </summary>
        public readonly string? Tip;

        [OutputConstructor]
        private DetectorRules(
            string? description,
            string detectLabel,
            bool? disabled,
            ImmutableArray<string> notifications,
            string? parameterizedBody,
            string? parameterizedSubject,
            string? runbookUrl,
            string severity,
            string? tip)
        {
            Description = description;
            DetectLabel = detectLabel;
            Disabled = disabled;
            Notifications = notifications;
            ParameterizedBody = parameterizedBody;
            ParameterizedSubject = parameterizedSubject;
            RunbookUrl = runbookUrl;
            Severity = severity;
            Tip = tip;
        }
    }
    }
}
