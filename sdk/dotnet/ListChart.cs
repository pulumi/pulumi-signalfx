// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Signalfx
{
    /// <summary>
    /// This chart type displays current data values in a list format.
    /// 
    /// The name of each value in the chart reflects the name of the plot and any associated dimensions. We recommend you click the Pencil icon and give the plot a meaningful name, as in plot B below. Otherwise, just the raw metric name will be displayed on the chart, as in plot A below.
    /// 
    /// &gt; This content is derived from https://github.com/terraform-providers/terraform-provider-signalfx/blob/master/website/docs/r/list_chart.html.markdown.
    /// </summary>
    public partial class ListChart : Pulumi.CustomResource
    {
        /// <summary>
        /// Must be one of `"Scale"`, `"Dimension"` or `"Metric"`. `"Dimension"` by default.
        /// </summary>
        [Output("colorBy")]
        public Output<string?> ColorBy { get; private set; } = null!;

        /// <summary>
        /// Single color range including both the color to display for that range and the borders of the range. Example: `[{ gt = 60, color = "blue" }, { lte = 60, color = "yellow" }]`. Look at this [link](https://docs.signalfx.com/en/latest/charts/chart-options-tab.html).
        /// </summary>
        [Output("colorScales")]
        public Output<ImmutableArray<Outputs.ListChartColorScales>> ColorScales { get; private set; } = null!;

        /// <summary>
        /// Description of the chart.
        /// </summary>
        [Output("description")]
        public Output<string?> Description { get; private set; } = null!;

        /// <summary>
        /// If `false`, samples a subset of the output MTS, which improves UI performance. `false` by default.
        /// </summary>
        [Output("disableSampling")]
        public Output<bool?> DisableSampling { get; private set; } = null!;

        /// <summary>
        /// Latest timestamp the resource was updated
        /// </summary>
        [Output("lastUpdated")]
        public Output<double> LastUpdated { get; private set; } = null!;

        /// <summary>
        /// List of properties that should not be displayed in the chart legend (i.e. dimension names). All the properties are visible by default. Deprecated, please use `legend_options_fields`.
        /// </summary>
        [Output("legendFieldsToHides")]
        public Output<ImmutableArray<string>> LegendFieldsToHides { get; private set; } = null!;

        /// <summary>
        /// List of property names and enabled flags that should be displayed in the data table for the chart, in the order provided. This option cannot be used with `legend_fields_to_hide`.
        /// * `property` The name of the property to display. Note the special values of `plot_label` (corresponding with the API's `sf_metric`) which shows the label of the time series `publish()` and `metric` (corresponding with the API's `sf_originatingMetric`) that shows the name of the metric for the time series being displayed.
        /// * `enabled` True or False depending on if you want the property to be shown or hidden.
        /// </summary>
        [Output("legendOptionsFields")]
        public Output<ImmutableArray<Outputs.ListChartLegendOptionsFields>> LegendOptionsFields { get; private set; } = null!;

        /// <summary>
        /// How long (in seconds) to wait for late datapoints.
        /// </summary>
        [Output("maxDelay")]
        public Output<int?> MaxDelay { get; private set; } = null!;

        /// <summary>
        /// Maximum number of digits to display when rounding values up or down.
        /// </summary>
        [Output("maxPrecision")]
        public Output<int?> MaxPrecision { get; private set; } = null!;

        /// <summary>
        /// Name of the chart.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// Signalflow program text for the chart. More info at &lt;https://developers.signalfx.com/docs/signalflow-overview&gt;.
        /// </summary>
        [Output("programText")]
        public Output<string> ProgramText { get; private set; } = null!;

        /// <summary>
        /// How often (in seconds) to refresh the values of the list.
        /// </summary>
        [Output("refreshInterval")]
        public Output<int?> RefreshInterval { get; private set; } = null!;

        /// <summary>
        /// The type of secondary visualization. Can be `None`, `Radial`, `Linear`, or `Sparkline`. If unset, the SignalFx default is used (`Sparkline`).
        /// </summary>
        [Output("secondaryVisualization")]
        public Output<string?> SecondaryVisualization { get; private set; } = null!;

        /// <summary>
        /// The property to use when sorting the elements. Use `value` if you want to sort by value. Must be prepended with `+` for ascending or `-` for descending (e.g. `-foo`). Note there are some special values for some of the options provided in the UX: `"value"` for Value, `"sf_originatingMetric"` for Metric, and `"sf_metric"` for plot.
        /// </summary>
        [Output("sortBy")]
        public Output<string?> SortBy { get; private set; } = null!;

        /// <summary>
        /// Must be `"Metric"` or `"Binary`". `"Metric"` by default.
        /// </summary>
        [Output("unitPrefix")]
        public Output<string?> UnitPrefix { get; private set; } = null!;

        /// <summary>
        /// URL of the chart
        /// </summary>
        [Output("url")]
        public Output<string> Url { get; private set; } = null!;

        /// <summary>
        /// Plot-level customization options, associated with a publish statement.
        /// </summary>
        [Output("vizOptions")]
        public Output<ImmutableArray<Outputs.ListChartVizOptions>> VizOptions { get; private set; } = null!;


        /// <summary>
        /// Create a ListChart resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public ListChart(string name, ListChartArgs args, CustomResourceOptions? options = null)
            : base("signalfx:index/listChart:ListChart", name, args ?? ResourceArgs.Empty, MakeResourceOptions(options, ""))
        {
        }

        private ListChart(string name, Input<string> id, ListChartState? state = null, CustomResourceOptions? options = null)
            : base("signalfx:index/listChart:ListChart", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing ListChart resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static ListChart Get(string name, Input<string> id, ListChartState? state = null, CustomResourceOptions? options = null)
        {
            return new ListChart(name, id, state, options);
        }
    }

    public sealed class ListChartArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// Must be one of `"Scale"`, `"Dimension"` or `"Metric"`. `"Dimension"` by default.
        /// </summary>
        [Input("colorBy")]
        public Input<string>? ColorBy { get; set; }

        [Input("colorScales")]
        private InputList<Inputs.ListChartColorScalesArgs>? _colorScales;

        /// <summary>
        /// Single color range including both the color to display for that range and the borders of the range. Example: `[{ gt = 60, color = "blue" }, { lte = 60, color = "yellow" }]`. Look at this [link](https://docs.signalfx.com/en/latest/charts/chart-options-tab.html).
        /// </summary>
        public InputList<Inputs.ListChartColorScalesArgs> ColorScales
        {
            get => _colorScales ?? (_colorScales = new InputList<Inputs.ListChartColorScalesArgs>());
            set => _colorScales = value;
        }

        /// <summary>
        /// Description of the chart.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// If `false`, samples a subset of the output MTS, which improves UI performance. `false` by default.
        /// </summary>
        [Input("disableSampling")]
        public Input<bool>? DisableSampling { get; set; }

        [Input("legendFieldsToHides")]
        private InputList<string>? _legendFieldsToHides;

        /// <summary>
        /// List of properties that should not be displayed in the chart legend (i.e. dimension names). All the properties are visible by default. Deprecated, please use `legend_options_fields`.
        /// </summary>
        public InputList<string> LegendFieldsToHides
        {
            get => _legendFieldsToHides ?? (_legendFieldsToHides = new InputList<string>());
            set => _legendFieldsToHides = value;
        }

        [Input("legendOptionsFields")]
        private InputList<Inputs.ListChartLegendOptionsFieldsArgs>? _legendOptionsFields;

        /// <summary>
        /// List of property names and enabled flags that should be displayed in the data table for the chart, in the order provided. This option cannot be used with `legend_fields_to_hide`.
        /// * `property` The name of the property to display. Note the special values of `plot_label` (corresponding with the API's `sf_metric`) which shows the label of the time series `publish()` and `metric` (corresponding with the API's `sf_originatingMetric`) that shows the name of the metric for the time series being displayed.
        /// * `enabled` True or False depending on if you want the property to be shown or hidden.
        /// </summary>
        public InputList<Inputs.ListChartLegendOptionsFieldsArgs> LegendOptionsFields
        {
            get => _legendOptionsFields ?? (_legendOptionsFields = new InputList<Inputs.ListChartLegendOptionsFieldsArgs>());
            set => _legendOptionsFields = value;
        }

        /// <summary>
        /// How long (in seconds) to wait for late datapoints.
        /// </summary>
        [Input("maxDelay")]
        public Input<int>? MaxDelay { get; set; }

        /// <summary>
        /// Maximum number of digits to display when rounding values up or down.
        /// </summary>
        [Input("maxPrecision")]
        public Input<int>? MaxPrecision { get; set; }

        /// <summary>
        /// Name of the chart.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Signalflow program text for the chart. More info at &lt;https://developers.signalfx.com/docs/signalflow-overview&gt;.
        /// </summary>
        [Input("programText", required: true)]
        public Input<string> ProgramText { get; set; } = null!;

        /// <summary>
        /// How often (in seconds) to refresh the values of the list.
        /// </summary>
        [Input("refreshInterval")]
        public Input<int>? RefreshInterval { get; set; }

        /// <summary>
        /// The type of secondary visualization. Can be `None`, `Radial`, `Linear`, or `Sparkline`. If unset, the SignalFx default is used (`Sparkline`).
        /// </summary>
        [Input("secondaryVisualization")]
        public Input<string>? SecondaryVisualization { get; set; }

        /// <summary>
        /// The property to use when sorting the elements. Use `value` if you want to sort by value. Must be prepended with `+` for ascending or `-` for descending (e.g. `-foo`). Note there are some special values for some of the options provided in the UX: `"value"` for Value, `"sf_originatingMetric"` for Metric, and `"sf_metric"` for plot.
        /// </summary>
        [Input("sortBy")]
        public Input<string>? SortBy { get; set; }

        /// <summary>
        /// Must be `"Metric"` or `"Binary`". `"Metric"` by default.
        /// </summary>
        [Input("unitPrefix")]
        public Input<string>? UnitPrefix { get; set; }

        [Input("vizOptions")]
        private InputList<Inputs.ListChartVizOptionsArgs>? _vizOptions;

        /// <summary>
        /// Plot-level customization options, associated with a publish statement.
        /// </summary>
        public InputList<Inputs.ListChartVizOptionsArgs> VizOptions
        {
            get => _vizOptions ?? (_vizOptions = new InputList<Inputs.ListChartVizOptionsArgs>());
            set => _vizOptions = value;
        }

        public ListChartArgs()
        {
        }
    }

    public sealed class ListChartState : Pulumi.ResourceArgs
    {
        /// <summary>
        /// Must be one of `"Scale"`, `"Dimension"` or `"Metric"`. `"Dimension"` by default.
        /// </summary>
        [Input("colorBy")]
        public Input<string>? ColorBy { get; set; }

        [Input("colorScales")]
        private InputList<Inputs.ListChartColorScalesGetArgs>? _colorScales;

        /// <summary>
        /// Single color range including both the color to display for that range and the borders of the range. Example: `[{ gt = 60, color = "blue" }, { lte = 60, color = "yellow" }]`. Look at this [link](https://docs.signalfx.com/en/latest/charts/chart-options-tab.html).
        /// </summary>
        public InputList<Inputs.ListChartColorScalesGetArgs> ColorScales
        {
            get => _colorScales ?? (_colorScales = new InputList<Inputs.ListChartColorScalesGetArgs>());
            set => _colorScales = value;
        }

        /// <summary>
        /// Description of the chart.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// If `false`, samples a subset of the output MTS, which improves UI performance. `false` by default.
        /// </summary>
        [Input("disableSampling")]
        public Input<bool>? DisableSampling { get; set; }

        /// <summary>
        /// Latest timestamp the resource was updated
        /// </summary>
        [Input("lastUpdated")]
        public Input<double>? LastUpdated { get; set; }

        [Input("legendFieldsToHides")]
        private InputList<string>? _legendFieldsToHides;

        /// <summary>
        /// List of properties that should not be displayed in the chart legend (i.e. dimension names). All the properties are visible by default. Deprecated, please use `legend_options_fields`.
        /// </summary>
        public InputList<string> LegendFieldsToHides
        {
            get => _legendFieldsToHides ?? (_legendFieldsToHides = new InputList<string>());
            set => _legendFieldsToHides = value;
        }

        [Input("legendOptionsFields")]
        private InputList<Inputs.ListChartLegendOptionsFieldsGetArgs>? _legendOptionsFields;

        /// <summary>
        /// List of property names and enabled flags that should be displayed in the data table for the chart, in the order provided. This option cannot be used with `legend_fields_to_hide`.
        /// * `property` The name of the property to display. Note the special values of `plot_label` (corresponding with the API's `sf_metric`) which shows the label of the time series `publish()` and `metric` (corresponding with the API's `sf_originatingMetric`) that shows the name of the metric for the time series being displayed.
        /// * `enabled` True or False depending on if you want the property to be shown or hidden.
        /// </summary>
        public InputList<Inputs.ListChartLegendOptionsFieldsGetArgs> LegendOptionsFields
        {
            get => _legendOptionsFields ?? (_legendOptionsFields = new InputList<Inputs.ListChartLegendOptionsFieldsGetArgs>());
            set => _legendOptionsFields = value;
        }

        /// <summary>
        /// How long (in seconds) to wait for late datapoints.
        /// </summary>
        [Input("maxDelay")]
        public Input<int>? MaxDelay { get; set; }

        /// <summary>
        /// Maximum number of digits to display when rounding values up or down.
        /// </summary>
        [Input("maxPrecision")]
        public Input<int>? MaxPrecision { get; set; }

        /// <summary>
        /// Name of the chart.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Signalflow program text for the chart. More info at &lt;https://developers.signalfx.com/docs/signalflow-overview&gt;.
        /// </summary>
        [Input("programText")]
        public Input<string>? ProgramText { get; set; }

        /// <summary>
        /// How often (in seconds) to refresh the values of the list.
        /// </summary>
        [Input("refreshInterval")]
        public Input<int>? RefreshInterval { get; set; }

        /// <summary>
        /// The type of secondary visualization. Can be `None`, `Radial`, `Linear`, or `Sparkline`. If unset, the SignalFx default is used (`Sparkline`).
        /// </summary>
        [Input("secondaryVisualization")]
        public Input<string>? SecondaryVisualization { get; set; }

        /// <summary>
        /// The property to use when sorting the elements. Use `value` if you want to sort by value. Must be prepended with `+` for ascending or `-` for descending (e.g. `-foo`). Note there are some special values for some of the options provided in the UX: `"value"` for Value, `"sf_originatingMetric"` for Metric, and `"sf_metric"` for plot.
        /// </summary>
        [Input("sortBy")]
        public Input<string>? SortBy { get; set; }

        /// <summary>
        /// Must be `"Metric"` or `"Binary`". `"Metric"` by default.
        /// </summary>
        [Input("unitPrefix")]
        public Input<string>? UnitPrefix { get; set; }

        /// <summary>
        /// URL of the chart
        /// </summary>
        [Input("url")]
        public Input<string>? Url { get; set; }

        [Input("vizOptions")]
        private InputList<Inputs.ListChartVizOptionsGetArgs>? _vizOptions;

        /// <summary>
        /// Plot-level customization options, associated with a publish statement.
        /// </summary>
        public InputList<Inputs.ListChartVizOptionsGetArgs> VizOptions
        {
            get => _vizOptions ?? (_vizOptions = new InputList<Inputs.ListChartVizOptionsGetArgs>());
            set => _vizOptions = value;
        }

        public ListChartState()
        {
        }
    }

    namespace Inputs
    {

    public sealed class ListChartColorScalesArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// The color range to use. Must be either gray, blue, navy, orange, yellow, magenta, purple, violet, lilac, green, aquamarine.
        /// </summary>
        [Input("color", required: true)]
        public Input<string> Color { get; set; } = null!;

        /// <summary>
        /// Indicates the lower threshold non-inclusive value for this range.
        /// </summary>
        [Input("gt")]
        public Input<double>? Gt { get; set; }

        /// <summary>
        /// Indicates the lower threshold inclusive value for this range.
        /// </summary>
        [Input("gte")]
        public Input<double>? Gte { get; set; }

        /// <summary>
        /// Indicates the upper threshold non-inculsive value for this range.
        /// </summary>
        [Input("lt")]
        public Input<double>? Lt { get; set; }

        /// <summary>
        /// Indicates the upper threshold inclusive value for this range.
        /// </summary>
        [Input("lte")]
        public Input<double>? Lte { get; set; }

        public ListChartColorScalesArgs()
        {
        }
    }

    public sealed class ListChartColorScalesGetArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// The color range to use. Must be either gray, blue, navy, orange, yellow, magenta, purple, violet, lilac, green, aquamarine.
        /// </summary>
        [Input("color", required: true)]
        public Input<string> Color { get; set; } = null!;

        /// <summary>
        /// Indicates the lower threshold non-inclusive value for this range.
        /// </summary>
        [Input("gt")]
        public Input<double>? Gt { get; set; }

        /// <summary>
        /// Indicates the lower threshold inclusive value for this range.
        /// </summary>
        [Input("gte")]
        public Input<double>? Gte { get; set; }

        /// <summary>
        /// Indicates the upper threshold non-inculsive value for this range.
        /// </summary>
        [Input("lt")]
        public Input<double>? Lt { get; set; }

        /// <summary>
        /// Indicates the upper threshold inclusive value for this range.
        /// </summary>
        [Input("lte")]
        public Input<double>? Lte { get; set; }

        public ListChartColorScalesGetArgs()
        {
        }
    }

    public sealed class ListChartLegendOptionsFieldsArgs : Pulumi.ResourceArgs
    {
        [Input("enabled")]
        public Input<bool>? Enabled { get; set; }

        [Input("property", required: true)]
        public Input<string> Property { get; set; } = null!;

        public ListChartLegendOptionsFieldsArgs()
        {
        }
    }

    public sealed class ListChartLegendOptionsFieldsGetArgs : Pulumi.ResourceArgs
    {
        [Input("enabled")]
        public Input<bool>? Enabled { get; set; }

        [Input("property", required: true)]
        public Input<string> Property { get; set; } = null!;

        public ListChartLegendOptionsFieldsGetArgs()
        {
        }
    }

    public sealed class ListChartVizOptionsArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// The color range to use. Must be either gray, blue, navy, orange, yellow, magenta, purple, violet, lilac, green, aquamarine.
        /// </summary>
        [Input("color")]
        public Input<string>? Color { get; set; }

        /// <summary>
        /// Specifies an alternate value for the Plot Name column of the Data Table associated with the chart.
        /// </summary>
        [Input("displayName")]
        public Input<string>? DisplayName { get; set; }

        /// <summary>
        /// Label used in the publish statement that displays the plot (metric time series data) you want to customize.
        /// </summary>
        [Input("label", required: true)]
        public Input<string> Label { get; set; } = null!;

        [Input("valuePrefix")]
        public Input<string>? ValuePrefix { get; set; }

        [Input("valueSuffix")]
        public Input<string>? ValueSuffix { get; set; }

        /// <summary>
        /// A unit to attach to this plot. Units support automatic scaling (eg thousands of bytes will be displayed as kilobytes). Values values are `Bit, Kilobit, Megabit, Gigabit, Terabit, Petabit, Exabit, Zettabit, Yottabit, Byte, Kibibyte, Mebibyte, Gigibyte, Tebibyte, Pebibyte, Exbibyte, Zebibyte, Yobibyte, Nanosecond, Microsecond, Millisecond, Second, Minute, Hour, Day, Week`.
        /// * `value_prefix`, `value_suffix` - (Optional) Arbitrary prefix/suffix to display with the value of this plot.
        /// </summary>
        [Input("valueUnit")]
        public Input<string>? ValueUnit { get; set; }

        public ListChartVizOptionsArgs()
        {
        }
    }

    public sealed class ListChartVizOptionsGetArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// The color range to use. Must be either gray, blue, navy, orange, yellow, magenta, purple, violet, lilac, green, aquamarine.
        /// </summary>
        [Input("color")]
        public Input<string>? Color { get; set; }

        /// <summary>
        /// Specifies an alternate value for the Plot Name column of the Data Table associated with the chart.
        /// </summary>
        [Input("displayName")]
        public Input<string>? DisplayName { get; set; }

        /// <summary>
        /// Label used in the publish statement that displays the plot (metric time series data) you want to customize.
        /// </summary>
        [Input("label", required: true)]
        public Input<string> Label { get; set; } = null!;

        [Input("valuePrefix")]
        public Input<string>? ValuePrefix { get; set; }

        [Input("valueSuffix")]
        public Input<string>? ValueSuffix { get; set; }

        /// <summary>
        /// A unit to attach to this plot. Units support automatic scaling (eg thousands of bytes will be displayed as kilobytes). Values values are `Bit, Kilobit, Megabit, Gigabit, Terabit, Petabit, Exabit, Zettabit, Yottabit, Byte, Kibibyte, Mebibyte, Gigibyte, Tebibyte, Pebibyte, Exbibyte, Zebibyte, Yobibyte, Nanosecond, Microsecond, Millisecond, Second, Minute, Hour, Day, Week`.
        /// * `value_prefix`, `value_suffix` - (Optional) Arbitrary prefix/suffix to display with the value of this plot.
        /// </summary>
        [Input("valueUnit")]
        public Input<string>? ValueUnit { get; set; }

        public ListChartVizOptionsGetArgs()
        {
        }
    }
    }

    namespace Outputs
    {

    [OutputType]
    public sealed class ListChartColorScales
    {
        /// <summary>
        /// The color range to use. Must be either gray, blue, navy, orange, yellow, magenta, purple, violet, lilac, green, aquamarine.
        /// </summary>
        public readonly string Color;
        /// <summary>
        /// Indicates the lower threshold non-inclusive value for this range.
        /// </summary>
        public readonly double? Gt;
        /// <summary>
        /// Indicates the lower threshold inclusive value for this range.
        /// </summary>
        public readonly double? Gte;
        /// <summary>
        /// Indicates the upper threshold non-inculsive value for this range.
        /// </summary>
        public readonly double? Lt;
        /// <summary>
        /// Indicates the upper threshold inclusive value for this range.
        /// </summary>
        public readonly double? Lte;

        [OutputConstructor]
        private ListChartColorScales(
            string color,
            double? gt,
            double? gte,
            double? lt,
            double? lte)
        {
            Color = color;
            Gt = gt;
            Gte = gte;
            Lt = lt;
            Lte = lte;
        }
    }

    [OutputType]
    public sealed class ListChartLegendOptionsFields
    {
        public readonly bool? Enabled;
        public readonly string Property;

        [OutputConstructor]
        private ListChartLegendOptionsFields(
            bool? enabled,
            string property)
        {
            Enabled = enabled;
            Property = property;
        }
    }

    [OutputType]
    public sealed class ListChartVizOptions
    {
        /// <summary>
        /// The color range to use. Must be either gray, blue, navy, orange, yellow, magenta, purple, violet, lilac, green, aquamarine.
        /// </summary>
        public readonly string? Color;
        /// <summary>
        /// Specifies an alternate value for the Plot Name column of the Data Table associated with the chart.
        /// </summary>
        public readonly string? DisplayName;
        /// <summary>
        /// Label used in the publish statement that displays the plot (metric time series data) you want to customize.
        /// </summary>
        public readonly string Label;
        public readonly string? ValuePrefix;
        public readonly string? ValueSuffix;
        /// <summary>
        /// A unit to attach to this plot. Units support automatic scaling (eg thousands of bytes will be displayed as kilobytes). Values values are `Bit, Kilobit, Megabit, Gigabit, Terabit, Petabit, Exabit, Zettabit, Yottabit, Byte, Kibibyte, Mebibyte, Gigibyte, Tebibyte, Pebibyte, Exbibyte, Zebibyte, Yobibyte, Nanosecond, Microsecond, Millisecond, Second, Minute, Hour, Day, Week`.
        /// * `value_prefix`, `value_suffix` - (Optional) Arbitrary prefix/suffix to display with the value of this plot.
        /// </summary>
        public readonly string? ValueUnit;

        [OutputConstructor]
        private ListChartVizOptions(
            string? color,
            string? displayName,
            string label,
            string? valuePrefix,
            string? valueSuffix,
            string? valueUnit)
        {
            Color = color;
            DisplayName = displayName;
            Label = label;
            ValuePrefix = valuePrefix;
            ValueSuffix = valueSuffix;
            ValueUnit = valueUnit;
        }
    }
    }
}
