// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.SignalFx
{
    /// <summary>
    /// In the Splunk Observability Cloud web UI, a [dashboard group](https://developers.signalfx.com/dashboard_groups_reference.html) is a collection of dashboards.
    /// 
    /// Dashboard groups cannot be accessed directly. You can access them through a dashboard within a group.
    /// 
    /// &gt; **NOTE** When you want to change or remove write permissions for a user other than yourself regarding dashboard groups, use a session token of an administrator to authenticate the Splunk Observability Cloud provider. See [Operations that require a session token for an administrator](https://dev.splunk.com/observability/docs/administration/authtokens#Operations-that-require-a-session-token-for-an-administrator).
    /// 
    /// ## Example
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using SignalFx = Pulumi.SignalFx;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var mydashboardgroup0 = new SignalFx.DashboardGroup("mydashboardgroup0", new()
    ///     {
    ///         Description = "Cool dashboard group",
    ///         AuthorizedWriterTeams = new[]
    ///         {
    ///             signalfx_team.Mycoolteam.Id,
    ///         },
    ///         AuthorizedWriterUsers = new[]
    ///         {
    ///             "abc123",
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Example with permissions
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using SignalFx = Pulumi.SignalFx;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var mydashboardgroupWithpermissions = new SignalFx.DashboardGroup("mydashboardgroupWithpermissions", new()
    ///     {
    ///         Description = "Cool dashboard group",
    ///         Permissions = new[]
    ///         {
    ///             new SignalFx.Inputs.DashboardGroupPermissionArgs
    ///             {
    ///                 Actions = new[]
    ///                 {
    ///                     "READ",
    ///                 },
    ///                 PrincipalId = "abc123",
    ///                 PrincipalType = "ORG",
    ///             },
    ///             new SignalFx.Inputs.DashboardGroupPermissionArgs
    ///             {
    ///                 Actions = new[]
    ///                 {
    ///                     "READ",
    ///                     "WRITE",
    ///                 },
    ///                 PrincipalId = "abc456",
    ///                 PrincipalType = "USER",
    ///             },
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Example With mirrored dashboards
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using SignalFx = Pulumi.SignalFx;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var mydashboardgroupWithmirrors = new SignalFx.DashboardGroup("mydashboardgroupWithmirrors", new()
    ///     {
    ///         Description = "Cool dashboard group",
    ///         Dashboards = new[]
    ///         {
    ///             new SignalFx.Inputs.DashboardGroupDashboardArgs
    ///             {
    ///                 DashboardId = signalfx_dashboard.Gc_dashboard.Id,
    ///                 NameOverride = "GC For My Service",
    ///                 DescriptionOverride = "Garbage Collection dashboard maintained by JVM team",
    ///                 FilterOverrides = new[]
    ///                 {
    ///                     new SignalFx.Inputs.DashboardGroupDashboardFilterOverrideArgs
    ///                     {
    ///                         Property = "service",
    ///                         Values = new[]
    ///                         {
    ///                             "myservice",
    ///                         },
    ///                         Negated = false,
    ///                     },
    ///                 },
    ///                 VariableOverrides = new[]
    ///                 {
    ///                     new SignalFx.Inputs.DashboardGroupDashboardVariableOverrideArgs
    ///                     {
    ///                         Property = "region",
    ///                         Values = new[]
    ///                         {
    ///                             "us-west1",
    ///                         },
    ///                         ValuesSuggesteds = new[]
    ///                         {
    ///                             "us-west-1",
    ///                             "us-east-1",
    ///                         },
    ///                     },
    ///                 },
    ///             },
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Arguments
    /// 
    /// The following arguments are supported in the resource block:
    /// 
    /// * `name` - (Required) Name of the dashboard group.
    /// * `description` - (Required) Description of the dashboard group.
    /// * `teams` - (Optional) Team IDs to associate the dashboard group to.
    /// * `authorized_writer_teams` - (Optional) Team IDs that have write access to this dashboard group. Remember to use an admin's token if using this feature and to include that admin's team (or user id in `authorized_writer_teams`). **Note:** Deprecated use `permissions` instead.
    /// * `authorized_writer_users` - (Optional) User IDs that have write access to this dashboard group. Remember to use an admin's token if using this feature and to include that admin's user id (or team id in `authorized_writer_teams`). **Note:** Deprecated use `permissions` instead.
    /// * `permissions` - (Optional) [Permissions](https://docs.splunk.com/Observability/infrastructure/terms-concepts/permissions.html) List of read and write permission configuration to specify which user, team, and organization can view and/or edit your dashboard group. **Note:** This feature is not present in all accounts. Please contact support if you are unsure.
    ///   * `principal_id` - (Required) ID of the user, team, or organization for which you're granting permissions.
    ///   * `principal_type` - (Required) Clarify whether this permission configuration is for a user, a team, or an organization. Value can be one of "USER", "TEAM", or "ORG".
    ///   * `actions` - (Required) Action the user, team, or organization can take with the dashboard group. List of values (value can be "READ" or "WRITE").
    /// * `dashboard` - (Optional) [Mirrored dashboards](https://docs.splunk.com/observability/en/data-visualization/dashboards/dashboard-share-clone-mirror.html#mirror-dashboard) in this dashboard group. **Note:** This feature is not present in all accounts. Please contact support if you are unsure.
    ///   * `dashboard_id` - (Required) The dashboard id to mirror
    ///   * `name_override` - (Optional) The name that will override the original dashboards's name.
    ///   * `description_override` - (Optional) The description that will override the original dashboards's description.
    ///   * `filter_override` - (Optional) The description that will override the original dashboards's description.
    ///     * `property` - (Required) The name of a dimension to filter against.
    ///     * `values` - (Required) A list of values to be used with the `property`, they will be combined via `OR`.
    ///     * `negated` - (Optional) If true,  only data that does not match the specified value of the specified property appear in the event overlay. Defaults to `false`.
    ///   * `filter_override` - (Optional) The description that will override the original dashboards's description.
    ///     * `property` - (Required) A metric time series dimension or property name.
    ///     * `values` - (Optional) (Optional) List of of strings (which will be treated as an OR filter on the property).
    ///     * `values_suggested` - (Optional) A list of strings of suggested values for this variable; these suggestions will receive priority when values are autosuggested for this variable.
    /// 
    /// ## Attributes
    /// 
    /// In a addition to all arguments above, the following attributes are exported:
    /// 
    /// * `id` - The ID of the integration.
    /// * `dashboard.config_id` - The ID of the association between the dashboard group and the dashboard
    /// </summary>
    [SignalFxResourceType("signalfx:index/dashboardGroup:DashboardGroup")]
    public partial class DashboardGroup : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Team IDs that have write access to this dashboard
        /// </summary>
        [Output("authorizedWriterTeams")]
        public Output<ImmutableArray<string>> AuthorizedWriterTeams { get; private set; } = null!;

        /// <summary>
        /// User IDs that have write access to this dashboard
        /// </summary>
        [Output("authorizedWriterUsers")]
        public Output<ImmutableArray<string>> AuthorizedWriterUsers { get; private set; } = null!;

        /// <summary>
        /// Dashboard IDs that are members of this dashboard group. Also handles 'mirrored' dashboards.
        /// </summary>
        [Output("dashboards")]
        public Output<ImmutableArray<Outputs.DashboardGroupDashboard>> Dashboards { get; private set; } = null!;

        /// <summary>
        /// Description of the dashboard group
        /// </summary>
        [Output("description")]
        public Output<string?> Description { get; private set; } = null!;

        [Output("importQualifiers")]
        public Output<ImmutableArray<Outputs.DashboardGroupImportQualifier>> ImportQualifiers { get; private set; } = null!;

        /// <summary>
        /// Name of the dashboard group
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// The custom access control list for this dashboard
        /// </summary>
        [Output("permissions")]
        public Output<ImmutableArray<Outputs.DashboardGroupPermission>> Permissions { get; private set; } = null!;

        /// <summary>
        /// Team IDs to associate the dashboard group to
        /// </summary>
        [Output("teams")]
        public Output<ImmutableArray<string>> Teams { get; private set; } = null!;


        /// <summary>
        /// Create a DashboardGroup resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public DashboardGroup(string name, DashboardGroupArgs? args = null, CustomResourceOptions? options = null)
            : base("signalfx:index/dashboardGroup:DashboardGroup", name, args ?? new DashboardGroupArgs(), MakeResourceOptions(options, ""))
        {
        }

        private DashboardGroup(string name, Input<string> id, DashboardGroupState? state = null, CustomResourceOptions? options = null)
            : base("signalfx:index/dashboardGroup:DashboardGroup", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing DashboardGroup resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static DashboardGroup Get(string name, Input<string> id, DashboardGroupState? state = null, CustomResourceOptions? options = null)
        {
            return new DashboardGroup(name, id, state, options);
        }
    }

    public sealed class DashboardGroupArgs : global::Pulumi.ResourceArgs
    {
        [Input("authorizedWriterTeams")]
        private InputList<string>? _authorizedWriterTeams;

        /// <summary>
        /// Team IDs that have write access to this dashboard
        /// </summary>
        [Obsolete(@"Please use permissions field now")]
        public InputList<string> AuthorizedWriterTeams
        {
            get => _authorizedWriterTeams ?? (_authorizedWriterTeams = new InputList<string>());
            set => _authorizedWriterTeams = value;
        }

        [Input("authorizedWriterUsers")]
        private InputList<string>? _authorizedWriterUsers;

        /// <summary>
        /// User IDs that have write access to this dashboard
        /// </summary>
        [Obsolete(@"Please use permissions field now")]
        public InputList<string> AuthorizedWriterUsers
        {
            get => _authorizedWriterUsers ?? (_authorizedWriterUsers = new InputList<string>());
            set => _authorizedWriterUsers = value;
        }

        [Input("dashboards")]
        private InputList<Inputs.DashboardGroupDashboardArgs>? _dashboards;

        /// <summary>
        /// Dashboard IDs that are members of this dashboard group. Also handles 'mirrored' dashboards.
        /// </summary>
        public InputList<Inputs.DashboardGroupDashboardArgs> Dashboards
        {
            get => _dashboards ?? (_dashboards = new InputList<Inputs.DashboardGroupDashboardArgs>());
            set => _dashboards = value;
        }

        /// <summary>
        /// Description of the dashboard group
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        [Input("importQualifiers")]
        private InputList<Inputs.DashboardGroupImportQualifierArgs>? _importQualifiers;
        public InputList<Inputs.DashboardGroupImportQualifierArgs> ImportQualifiers
        {
            get => _importQualifiers ?? (_importQualifiers = new InputList<Inputs.DashboardGroupImportQualifierArgs>());
            set => _importQualifiers = value;
        }

        /// <summary>
        /// Name of the dashboard group
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("permissions")]
        private InputList<Inputs.DashboardGroupPermissionArgs>? _permissions;

        /// <summary>
        /// The custom access control list for this dashboard
        /// </summary>
        public InputList<Inputs.DashboardGroupPermissionArgs> Permissions
        {
            get => _permissions ?? (_permissions = new InputList<Inputs.DashboardGroupPermissionArgs>());
            set => _permissions = value;
        }

        [Input("teams")]
        private InputList<string>? _teams;

        /// <summary>
        /// Team IDs to associate the dashboard group to
        /// </summary>
        public InputList<string> Teams
        {
            get => _teams ?? (_teams = new InputList<string>());
            set => _teams = value;
        }

        public DashboardGroupArgs()
        {
        }
        public static new DashboardGroupArgs Empty => new DashboardGroupArgs();
    }

    public sealed class DashboardGroupState : global::Pulumi.ResourceArgs
    {
        [Input("authorizedWriterTeams")]
        private InputList<string>? _authorizedWriterTeams;

        /// <summary>
        /// Team IDs that have write access to this dashboard
        /// </summary>
        [Obsolete(@"Please use permissions field now")]
        public InputList<string> AuthorizedWriterTeams
        {
            get => _authorizedWriterTeams ?? (_authorizedWriterTeams = new InputList<string>());
            set => _authorizedWriterTeams = value;
        }

        [Input("authorizedWriterUsers")]
        private InputList<string>? _authorizedWriterUsers;

        /// <summary>
        /// User IDs that have write access to this dashboard
        /// </summary>
        [Obsolete(@"Please use permissions field now")]
        public InputList<string> AuthorizedWriterUsers
        {
            get => _authorizedWriterUsers ?? (_authorizedWriterUsers = new InputList<string>());
            set => _authorizedWriterUsers = value;
        }

        [Input("dashboards")]
        private InputList<Inputs.DashboardGroupDashboardGetArgs>? _dashboards;

        /// <summary>
        /// Dashboard IDs that are members of this dashboard group. Also handles 'mirrored' dashboards.
        /// </summary>
        public InputList<Inputs.DashboardGroupDashboardGetArgs> Dashboards
        {
            get => _dashboards ?? (_dashboards = new InputList<Inputs.DashboardGroupDashboardGetArgs>());
            set => _dashboards = value;
        }

        /// <summary>
        /// Description of the dashboard group
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        [Input("importQualifiers")]
        private InputList<Inputs.DashboardGroupImportQualifierGetArgs>? _importQualifiers;
        public InputList<Inputs.DashboardGroupImportQualifierGetArgs> ImportQualifiers
        {
            get => _importQualifiers ?? (_importQualifiers = new InputList<Inputs.DashboardGroupImportQualifierGetArgs>());
            set => _importQualifiers = value;
        }

        /// <summary>
        /// Name of the dashboard group
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("permissions")]
        private InputList<Inputs.DashboardGroupPermissionGetArgs>? _permissions;

        /// <summary>
        /// The custom access control list for this dashboard
        /// </summary>
        public InputList<Inputs.DashboardGroupPermissionGetArgs> Permissions
        {
            get => _permissions ?? (_permissions = new InputList<Inputs.DashboardGroupPermissionGetArgs>());
            set => _permissions = value;
        }

        [Input("teams")]
        private InputList<string>? _teams;

        /// <summary>
        /// Team IDs to associate the dashboard group to
        /// </summary>
        public InputList<string> Teams
        {
            get => _teams ?? (_teams = new InputList<string>());
            set => _teams = value;
        }

        public DashboardGroupState()
        {
        }
        public static new DashboardGroupState Empty => new DashboardGroupState();
    }
}
