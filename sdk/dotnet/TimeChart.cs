// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.SignalFx
{
    /// <summary>
    /// Provides a SignalFx time chart resource. This can be used to create and manage the different types of time charts.
    /// 
    /// Time charts display data points over a period of time.
    /// 
    /// &gt; This content is derived from https://github.com/terraform-providers/terraform-provider-signalfx/blob/master/website/docs/r/time_chart.html.markdown.
    /// </summary>
    public partial class TimeChart : Pulumi.CustomResource
    {
        /// <summary>
        /// Force the chart to display zero on the y-axes, even if none of the data is near zero.
        /// </summary>
        [Output("axesIncludeZero")]
        public Output<bool?> AxesIncludeZero { get; private set; } = null!;

        /// <summary>
        /// Specifies the digits SignalFx displays for values plotted on the chart. Defaults to `3`.
        /// </summary>
        [Output("axesPrecision")]
        public Output<int?> AxesPrecision { get; private set; } = null!;

        /// <summary>
        /// Set of axis options.
        /// </summary>
        [Output("axisLeft")]
        public Output<Outputs.TimeChartAxisLeft?> AxisLeft { get; private set; } = null!;

        /// <summary>
        /// Set of axis options.
        /// </summary>
        [Output("axisRight")]
        public Output<Outputs.TimeChartAxisRight?> AxisRight { get; private set; } = null!;

        /// <summary>
        /// Must be `"Dimension"` or `"Metric"`. `"Dimension"` by default.
        /// </summary>
        [Output("colorBy")]
        public Output<string?> ColorBy { get; private set; } = null!;

        /// <summary>
        /// Description of the chart.
        /// </summary>
        [Output("description")]
        public Output<string?> Description { get; private set; } = null!;

        /// <summary>
        /// If `false`, samples a subset of the output MTS, which improves UI performance. `false` by default
        /// </summary>
        [Output("disableSampling")]
        public Output<bool?> DisableSampling { get; private set; } = null!;

        /// <summary>
        /// Seconds since epoch. Used for visualization. Conflicts with `time_range`.
        /// </summary>
        [Output("endTime")]
        public Output<int?> EndTime { get; private set; } = null!;

        /// <summary>
        /// Event customization options, associated with a publish statement. You will need to use this to change settings for any `events(â€¦)` statements you use.
        /// </summary>
        [Output("eventOptions")]
        public Output<ImmutableArray<Outputs.TimeChartEventOptions>> EventOptions { get; private set; } = null!;

        /// <summary>
        /// Only used when `plot_type` is `"Histogram"`. Histogram specific options.
        /// </summary>
        [Output("histogramOptions")]
        public Output<ImmutableArray<Outputs.TimeChartHistogramOptions>> HistogramOptions { get; private set; } = null!;

        /// <summary>
        /// List of properties that should not be displayed in the chart legend (i.e. dimension names). All the properties are visible by default. Deprecated, please use `legend_options_fields`.
        /// </summary>
        [Output("legendFieldsToHides")]
        public Output<ImmutableArray<string>> LegendFieldsToHides { get; private set; } = null!;

        /// <summary>
        /// List of property names and enabled flags that should be displayed in the data table for the chart, in the order provided. This option cannot be used with `legend_fields_to_hide`.
        /// * `property` The name of the property to display. Note the special values of `plot_label` (corresponding with the API's `sf_metric`) which shows the label of the time series `publish()` and `metric` (corresponding with the API's `sf_originatingMetric`) that shows the name of the metric for the time series being displayed.
        /// * `enabled` True or False depending on if you want the property to be shown or hidden.
        /// </summary>
        [Output("legendOptionsFields")]
        public Output<ImmutableArray<Outputs.TimeChartLegendOptionsFields>> LegendOptionsFields { get; private set; } = null!;

        /// <summary>
        /// How long (in seconds) to wait for late datapoints.
        /// </summary>
        [Output("maxDelay")]
        public Output<int?> MaxDelay { get; private set; } = null!;

        /// <summary>
        /// The minimum resolution (in seconds) to use for computing the underlying program.
        /// </summary>
        [Output("minimumResolution")]
        public Output<int?> MinimumResolution { get; private set; } = null!;

        /// <summary>
        /// Name of the chart.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// Dimensions to show in the on-chart legend. On-chart legend is off unless a dimension is specified. Allowed: `"metric"`, `"plot_label"` and any dimension.
        /// </summary>
        [Output("onChartLegendDimension")]
        public Output<string?> OnChartLegendDimension { get; private set; } = null!;

        /// <summary>
        /// The visualization style to use. Must be `"LineChart"`, `"AreaChart"`, `"ColumnChart"`, or `"Histogram"`. Chart level `plot_type` by default.
        /// </summary>
        [Output("plotType")]
        public Output<string?> PlotType { get; private set; } = null!;

        /// <summary>
        /// Signalflow program text for the chart. More info at &lt;https://developers.signalfx.com/docs/signalflow-overview&gt;.
        /// </summary>
        [Output("programText")]
        public Output<string> ProgramText { get; private set; } = null!;

        /// <summary>
        /// Show markers (circles) for each datapoint used to draw line or area charts. `false` by default.
        /// </summary>
        [Output("showDataMarkers")]
        public Output<bool?> ShowDataMarkers { get; private set; } = null!;

        /// <summary>
        /// Whether vertical highlight lines should be drawn in the visualizations at times when events occurred. `false` by default.
        /// </summary>
        [Output("showEventLines")]
        public Output<bool?> ShowEventLines { get; private set; } = null!;

        /// <summary>
        /// Whether area and bar charts in the visualization should be stacked. `false` by default.
        /// </summary>
        [Output("stacked")]
        public Output<bool?> Stacked { get; private set; } = null!;

        /// <summary>
        /// Seconds since epoch. Used for visualization. Conflicts with `time_range`.
        /// </summary>
        [Output("startTime")]
        public Output<int?> StartTime { get; private set; } = null!;

        /// <summary>
        /// Tags associated with the chart
        /// </summary>
        [Output("tags")]
        public Output<ImmutableArray<string>> Tags { get; private set; } = null!;

        /// <summary>
        /// How many seconds ago from which to display data. For example, the last hour would be `3600`, etc. Conflicts with `start_time` and `end_time`.
        /// </summary>
        [Output("timeRange")]
        public Output<int?> TimeRange { get; private set; } = null!;

        /// <summary>
        /// Time zone that SignalFlow uses as the basis of calendar window transformation methods. For example, if you set "timezone": "Europe/Paris" and then use the transformation sum(cycle="week", cycle_start="Monday") in your chart's SignalFlow program, the calendar window starts on Monday, Paris time. See the [full list of timezones for more](https://developers.signalfx.com/signalflow_analytics/signalflow_overview.html#_supported_signalflow_time_zones). `"UTC"` by default.
        /// </summary>
        [Output("timezone")]
        public Output<string?> Timezone { get; private set; } = null!;

        /// <summary>
        /// Must be `"Metric"` or `"Binary`". `"Metric"` by default.
        /// </summary>
        [Output("unitPrefix")]
        public Output<string?> UnitPrefix { get; private set; } = null!;

        /// <summary>
        /// URL of the chart
        /// </summary>
        [Output("url")]
        public Output<string> Url { get; private set; } = null!;

        /// <summary>
        /// Plot-level customization options, associated with a publish statement.
        /// </summary>
        [Output("vizOptions")]
        public Output<ImmutableArray<Outputs.TimeChartVizOptions>> VizOptions { get; private set; } = null!;


        /// <summary>
        /// Create a TimeChart resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public TimeChart(string name, TimeChartArgs args, CustomResourceOptions? options = null)
            : base("signalfx:index/timeChart:TimeChart", name, args ?? ResourceArgs.Empty, MakeResourceOptions(options, ""))
        {
        }

        private TimeChart(string name, Input<string> id, TimeChartState? state = null, CustomResourceOptions? options = null)
            : base("signalfx:index/timeChart:TimeChart", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing TimeChart resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static TimeChart Get(string name, Input<string> id, TimeChartState? state = null, CustomResourceOptions? options = null)
        {
            return new TimeChart(name, id, state, options);
        }
    }

    public sealed class TimeChartArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// Force the chart to display zero on the y-axes, even if none of the data is near zero.
        /// </summary>
        [Input("axesIncludeZero")]
        public Input<bool>? AxesIncludeZero { get; set; }

        /// <summary>
        /// Specifies the digits SignalFx displays for values plotted on the chart. Defaults to `3`.
        /// </summary>
        [Input("axesPrecision")]
        public Input<int>? AxesPrecision { get; set; }

        /// <summary>
        /// Set of axis options.
        /// </summary>
        [Input("axisLeft")]
        public Input<Inputs.TimeChartAxisLeftArgs>? AxisLeft { get; set; }

        /// <summary>
        /// Set of axis options.
        /// </summary>
        [Input("axisRight")]
        public Input<Inputs.TimeChartAxisRightArgs>? AxisRight { get; set; }

        /// <summary>
        /// Must be `"Dimension"` or `"Metric"`. `"Dimension"` by default.
        /// </summary>
        [Input("colorBy")]
        public Input<string>? ColorBy { get; set; }

        /// <summary>
        /// Description of the chart.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// If `false`, samples a subset of the output MTS, which improves UI performance. `false` by default
        /// </summary>
        [Input("disableSampling")]
        public Input<bool>? DisableSampling { get; set; }

        /// <summary>
        /// Seconds since epoch. Used for visualization. Conflicts with `time_range`.
        /// </summary>
        [Input("endTime")]
        public Input<int>? EndTime { get; set; }

        [Input("eventOptions")]
        private InputList<Inputs.TimeChartEventOptionsArgs>? _eventOptions;

        /// <summary>
        /// Event customization options, associated with a publish statement. You will need to use this to change settings for any `events(â€¦)` statements you use.
        /// </summary>
        public InputList<Inputs.TimeChartEventOptionsArgs> EventOptions
        {
            get => _eventOptions ?? (_eventOptions = new InputList<Inputs.TimeChartEventOptionsArgs>());
            set => _eventOptions = value;
        }

        [Input("histogramOptions")]
        private InputList<Inputs.TimeChartHistogramOptionsArgs>? _histogramOptions;

        /// <summary>
        /// Only used when `plot_type` is `"Histogram"`. Histogram specific options.
        /// </summary>
        public InputList<Inputs.TimeChartHistogramOptionsArgs> HistogramOptions
        {
            get => _histogramOptions ?? (_histogramOptions = new InputList<Inputs.TimeChartHistogramOptionsArgs>());
            set => _histogramOptions = value;
        }

        [Input("legendFieldsToHides")]
        private InputList<string>? _legendFieldsToHides;

        /// <summary>
        /// List of properties that should not be displayed in the chart legend (i.e. dimension names). All the properties are visible by default. Deprecated, please use `legend_options_fields`.
        /// </summary>
        public InputList<string> LegendFieldsToHides
        {
            get => _legendFieldsToHides ?? (_legendFieldsToHides = new InputList<string>());
            set => _legendFieldsToHides = value;
        }

        [Input("legendOptionsFields")]
        private InputList<Inputs.TimeChartLegendOptionsFieldsArgs>? _legendOptionsFields;

        /// <summary>
        /// List of property names and enabled flags that should be displayed in the data table for the chart, in the order provided. This option cannot be used with `legend_fields_to_hide`.
        /// * `property` The name of the property to display. Note the special values of `plot_label` (corresponding with the API's `sf_metric`) which shows the label of the time series `publish()` and `metric` (corresponding with the API's `sf_originatingMetric`) that shows the name of the metric for the time series being displayed.
        /// * `enabled` True or False depending on if you want the property to be shown or hidden.
        /// </summary>
        public InputList<Inputs.TimeChartLegendOptionsFieldsArgs> LegendOptionsFields
        {
            get => _legendOptionsFields ?? (_legendOptionsFields = new InputList<Inputs.TimeChartLegendOptionsFieldsArgs>());
            set => _legendOptionsFields = value;
        }

        /// <summary>
        /// How long (in seconds) to wait for late datapoints.
        /// </summary>
        [Input("maxDelay")]
        public Input<int>? MaxDelay { get; set; }

        /// <summary>
        /// The minimum resolution (in seconds) to use for computing the underlying program.
        /// </summary>
        [Input("minimumResolution")]
        public Input<int>? MinimumResolution { get; set; }

        /// <summary>
        /// Name of the chart.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Dimensions to show in the on-chart legend. On-chart legend is off unless a dimension is specified. Allowed: `"metric"`, `"plot_label"` and any dimension.
        /// </summary>
        [Input("onChartLegendDimension")]
        public Input<string>? OnChartLegendDimension { get; set; }

        /// <summary>
        /// The visualization style to use. Must be `"LineChart"`, `"AreaChart"`, `"ColumnChart"`, or `"Histogram"`. Chart level `plot_type` by default.
        /// </summary>
        [Input("plotType")]
        public Input<string>? PlotType { get; set; }

        /// <summary>
        /// Signalflow program text for the chart. More info at &lt;https://developers.signalfx.com/docs/signalflow-overview&gt;.
        /// </summary>
        [Input("programText", required: true)]
        public Input<string> ProgramText { get; set; } = null!;

        /// <summary>
        /// Show markers (circles) for each datapoint used to draw line or area charts. `false` by default.
        /// </summary>
        [Input("showDataMarkers")]
        public Input<bool>? ShowDataMarkers { get; set; }

        /// <summary>
        /// Whether vertical highlight lines should be drawn in the visualizations at times when events occurred. `false` by default.
        /// </summary>
        [Input("showEventLines")]
        public Input<bool>? ShowEventLines { get; set; }

        /// <summary>
        /// Whether area and bar charts in the visualization should be stacked. `false` by default.
        /// </summary>
        [Input("stacked")]
        public Input<bool>? Stacked { get; set; }

        /// <summary>
        /// Seconds since epoch. Used for visualization. Conflicts with `time_range`.
        /// </summary>
        [Input("startTime")]
        public Input<int>? StartTime { get; set; }

        [Input("tags")]
        private InputList<string>? _tags;

        /// <summary>
        /// Tags associated with the chart
        /// </summary>
        public InputList<string> Tags
        {
            get => _tags ?? (_tags = new InputList<string>());
            set => _tags = value;
        }

        /// <summary>
        /// How many seconds ago from which to display data. For example, the last hour would be `3600`, etc. Conflicts with `start_time` and `end_time`.
        /// </summary>
        [Input("timeRange")]
        public Input<int>? TimeRange { get; set; }

        /// <summary>
        /// Time zone that SignalFlow uses as the basis of calendar window transformation methods. For example, if you set "timezone": "Europe/Paris" and then use the transformation sum(cycle="week", cycle_start="Monday") in your chart's SignalFlow program, the calendar window starts on Monday, Paris time. See the [full list of timezones for more](https://developers.signalfx.com/signalflow_analytics/signalflow_overview.html#_supported_signalflow_time_zones). `"UTC"` by default.
        /// </summary>
        [Input("timezone")]
        public Input<string>? Timezone { get; set; }

        /// <summary>
        /// Must be `"Metric"` or `"Binary`". `"Metric"` by default.
        /// </summary>
        [Input("unitPrefix")]
        public Input<string>? UnitPrefix { get; set; }

        [Input("vizOptions")]
        private InputList<Inputs.TimeChartVizOptionsArgs>? _vizOptions;

        /// <summary>
        /// Plot-level customization options, associated with a publish statement.
        /// </summary>
        public InputList<Inputs.TimeChartVizOptionsArgs> VizOptions
        {
            get => _vizOptions ?? (_vizOptions = new InputList<Inputs.TimeChartVizOptionsArgs>());
            set => _vizOptions = value;
        }

        public TimeChartArgs()
        {
        }
    }

    public sealed class TimeChartState : Pulumi.ResourceArgs
    {
        /// <summary>
        /// Force the chart to display zero on the y-axes, even if none of the data is near zero.
        /// </summary>
        [Input("axesIncludeZero")]
        public Input<bool>? AxesIncludeZero { get; set; }

        /// <summary>
        /// Specifies the digits SignalFx displays for values plotted on the chart. Defaults to `3`.
        /// </summary>
        [Input("axesPrecision")]
        public Input<int>? AxesPrecision { get; set; }

        /// <summary>
        /// Set of axis options.
        /// </summary>
        [Input("axisLeft")]
        public Input<Inputs.TimeChartAxisLeftGetArgs>? AxisLeft { get; set; }

        /// <summary>
        /// Set of axis options.
        /// </summary>
        [Input("axisRight")]
        public Input<Inputs.TimeChartAxisRightGetArgs>? AxisRight { get; set; }

        /// <summary>
        /// Must be `"Dimension"` or `"Metric"`. `"Dimension"` by default.
        /// </summary>
        [Input("colorBy")]
        public Input<string>? ColorBy { get; set; }

        /// <summary>
        /// Description of the chart.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// If `false`, samples a subset of the output MTS, which improves UI performance. `false` by default
        /// </summary>
        [Input("disableSampling")]
        public Input<bool>? DisableSampling { get; set; }

        /// <summary>
        /// Seconds since epoch. Used for visualization. Conflicts with `time_range`.
        /// </summary>
        [Input("endTime")]
        public Input<int>? EndTime { get; set; }

        [Input("eventOptions")]
        private InputList<Inputs.TimeChartEventOptionsGetArgs>? _eventOptions;

        /// <summary>
        /// Event customization options, associated with a publish statement. You will need to use this to change settings for any `events(â€¦)` statements you use.
        /// </summary>
        public InputList<Inputs.TimeChartEventOptionsGetArgs> EventOptions
        {
            get => _eventOptions ?? (_eventOptions = new InputList<Inputs.TimeChartEventOptionsGetArgs>());
            set => _eventOptions = value;
        }

        [Input("histogramOptions")]
        private InputList<Inputs.TimeChartHistogramOptionsGetArgs>? _histogramOptions;

        /// <summary>
        /// Only used when `plot_type` is `"Histogram"`. Histogram specific options.
        /// </summary>
        public InputList<Inputs.TimeChartHistogramOptionsGetArgs> HistogramOptions
        {
            get => _histogramOptions ?? (_histogramOptions = new InputList<Inputs.TimeChartHistogramOptionsGetArgs>());
            set => _histogramOptions = value;
        }

        [Input("legendFieldsToHides")]
        private InputList<string>? _legendFieldsToHides;

        /// <summary>
        /// List of properties that should not be displayed in the chart legend (i.e. dimension names). All the properties are visible by default. Deprecated, please use `legend_options_fields`.
        /// </summary>
        public InputList<string> LegendFieldsToHides
        {
            get => _legendFieldsToHides ?? (_legendFieldsToHides = new InputList<string>());
            set => _legendFieldsToHides = value;
        }

        [Input("legendOptionsFields")]
        private InputList<Inputs.TimeChartLegendOptionsFieldsGetArgs>? _legendOptionsFields;

        /// <summary>
        /// List of property names and enabled flags that should be displayed in the data table for the chart, in the order provided. This option cannot be used with `legend_fields_to_hide`.
        /// * `property` The name of the property to display. Note the special values of `plot_label` (corresponding with the API's `sf_metric`) which shows the label of the time series `publish()` and `metric` (corresponding with the API's `sf_originatingMetric`) that shows the name of the metric for the time series being displayed.
        /// * `enabled` True or False depending on if you want the property to be shown or hidden.
        /// </summary>
        public InputList<Inputs.TimeChartLegendOptionsFieldsGetArgs> LegendOptionsFields
        {
            get => _legendOptionsFields ?? (_legendOptionsFields = new InputList<Inputs.TimeChartLegendOptionsFieldsGetArgs>());
            set => _legendOptionsFields = value;
        }

        /// <summary>
        /// How long (in seconds) to wait for late datapoints.
        /// </summary>
        [Input("maxDelay")]
        public Input<int>? MaxDelay { get; set; }

        /// <summary>
        /// The minimum resolution (in seconds) to use for computing the underlying program.
        /// </summary>
        [Input("minimumResolution")]
        public Input<int>? MinimumResolution { get; set; }

        /// <summary>
        /// Name of the chart.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Dimensions to show in the on-chart legend. On-chart legend is off unless a dimension is specified. Allowed: `"metric"`, `"plot_label"` and any dimension.
        /// </summary>
        [Input("onChartLegendDimension")]
        public Input<string>? OnChartLegendDimension { get; set; }

        /// <summary>
        /// The visualization style to use. Must be `"LineChart"`, `"AreaChart"`, `"ColumnChart"`, or `"Histogram"`. Chart level `plot_type` by default.
        /// </summary>
        [Input("plotType")]
        public Input<string>? PlotType { get; set; }

        /// <summary>
        /// Signalflow program text for the chart. More info at &lt;https://developers.signalfx.com/docs/signalflow-overview&gt;.
        /// </summary>
        [Input("programText")]
        public Input<string>? ProgramText { get; set; }

        /// <summary>
        /// Show markers (circles) for each datapoint used to draw line or area charts. `false` by default.
        /// </summary>
        [Input("showDataMarkers")]
        public Input<bool>? ShowDataMarkers { get; set; }

        /// <summary>
        /// Whether vertical highlight lines should be drawn in the visualizations at times when events occurred. `false` by default.
        /// </summary>
        [Input("showEventLines")]
        public Input<bool>? ShowEventLines { get; set; }

        /// <summary>
        /// Whether area and bar charts in the visualization should be stacked. `false` by default.
        /// </summary>
        [Input("stacked")]
        public Input<bool>? Stacked { get; set; }

        /// <summary>
        /// Seconds since epoch. Used for visualization. Conflicts with `time_range`.
        /// </summary>
        [Input("startTime")]
        public Input<int>? StartTime { get; set; }

        [Input("tags")]
        private InputList<string>? _tags;

        /// <summary>
        /// Tags associated with the chart
        /// </summary>
        public InputList<string> Tags
        {
            get => _tags ?? (_tags = new InputList<string>());
            set => _tags = value;
        }

        /// <summary>
        /// How many seconds ago from which to display data. For example, the last hour would be `3600`, etc. Conflicts with `start_time` and `end_time`.
        /// </summary>
        [Input("timeRange")]
        public Input<int>? TimeRange { get; set; }

        /// <summary>
        /// Time zone that SignalFlow uses as the basis of calendar window transformation methods. For example, if you set "timezone": "Europe/Paris" and then use the transformation sum(cycle="week", cycle_start="Monday") in your chart's SignalFlow program, the calendar window starts on Monday, Paris time. See the [full list of timezones for more](https://developers.signalfx.com/signalflow_analytics/signalflow_overview.html#_supported_signalflow_time_zones). `"UTC"` by default.
        /// </summary>
        [Input("timezone")]
        public Input<string>? Timezone { get; set; }

        /// <summary>
        /// Must be `"Metric"` or `"Binary`". `"Metric"` by default.
        /// </summary>
        [Input("unitPrefix")]
        public Input<string>? UnitPrefix { get; set; }

        /// <summary>
        /// URL of the chart
        /// </summary>
        [Input("url")]
        public Input<string>? Url { get; set; }

        [Input("vizOptions")]
        private InputList<Inputs.TimeChartVizOptionsGetArgs>? _vizOptions;

        /// <summary>
        /// Plot-level customization options, associated with a publish statement.
        /// </summary>
        public InputList<Inputs.TimeChartVizOptionsGetArgs> VizOptions
        {
            get => _vizOptions ?? (_vizOptions = new InputList<Inputs.TimeChartVizOptionsGetArgs>());
            set => _vizOptions = value;
        }

        public TimeChartState()
        {
        }
    }

    namespace Inputs
    {

    public sealed class TimeChartAxisLeftArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// A line to draw as a high watermark.
        /// </summary>
        [Input("highWatermark")]
        public Input<double>? HighWatermark { get; set; }

        /// <summary>
        /// A label to attach to the high watermark line.
        /// </summary>
        [Input("highWatermarkLabel")]
        public Input<string>? HighWatermarkLabel { get; set; }

        /// <summary>
        /// Label used in the publish statement that displays the event query you want to customize.
        /// </summary>
        [Input("label")]
        public Input<string>? Label { get; set; }

        /// <summary>
        /// A line to draw as a low watermark.
        /// </summary>
        [Input("lowWatermark")]
        public Input<double>? LowWatermark { get; set; }

        /// <summary>
        /// A label to attach to the low watermark line.
        /// </summary>
        [Input("lowWatermarkLabel")]
        public Input<string>? LowWatermarkLabel { get; set; }

        /// <summary>
        /// The maximum value for the right axis.
        /// </summary>
        [Input("maxValue")]
        public Input<double>? MaxValue { get; set; }

        /// <summary>
        /// The minimum value for the right axis.
        /// </summary>
        [Input("minValue")]
        public Input<double>? MinValue { get; set; }

        [Input("watermarks")]
        private InputList<TimeChartAxisLeftWatermarksArgs>? _watermarks;
        public InputList<TimeChartAxisLeftWatermarksArgs> Watermarks
        {
            get => _watermarks ?? (_watermarks = new InputList<TimeChartAxisLeftWatermarksArgs>());
            set => _watermarks = value;
        }

        public TimeChartAxisLeftArgs()
        {
        }
    }

    public sealed class TimeChartAxisLeftGetArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// A line to draw as a high watermark.
        /// </summary>
        [Input("highWatermark")]
        public Input<double>? HighWatermark { get; set; }

        /// <summary>
        /// A label to attach to the high watermark line.
        /// </summary>
        [Input("highWatermarkLabel")]
        public Input<string>? HighWatermarkLabel { get; set; }

        /// <summary>
        /// Label used in the publish statement that displays the event query you want to customize.
        /// </summary>
        [Input("label")]
        public Input<string>? Label { get; set; }

        /// <summary>
        /// A line to draw as a low watermark.
        /// </summary>
        [Input("lowWatermark")]
        public Input<double>? LowWatermark { get; set; }

        /// <summary>
        /// A label to attach to the low watermark line.
        /// </summary>
        [Input("lowWatermarkLabel")]
        public Input<string>? LowWatermarkLabel { get; set; }

        /// <summary>
        /// The maximum value for the right axis.
        /// </summary>
        [Input("maxValue")]
        public Input<double>? MaxValue { get; set; }

        /// <summary>
        /// The minimum value for the right axis.
        /// </summary>
        [Input("minValue")]
        public Input<double>? MinValue { get; set; }

        [Input("watermarks")]
        private InputList<TimeChartAxisLeftWatermarksGetArgs>? _watermarks;
        public InputList<TimeChartAxisLeftWatermarksGetArgs> Watermarks
        {
            get => _watermarks ?? (_watermarks = new InputList<TimeChartAxisLeftWatermarksGetArgs>());
            set => _watermarks = value;
        }

        public TimeChartAxisLeftGetArgs()
        {
        }
    }

    public sealed class TimeChartAxisLeftWatermarksArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// Label used in the publish statement that displays the event query you want to customize.
        /// </summary>
        [Input("label")]
        public Input<string>? Label { get; set; }

        [Input("value", required: true)]
        public Input<double> Value { get; set; } = null!;

        public TimeChartAxisLeftWatermarksArgs()
        {
        }
    }

    public sealed class TimeChartAxisLeftWatermarksGetArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// Label used in the publish statement that displays the event query you want to customize.
        /// </summary>
        [Input("label")]
        public Input<string>? Label { get; set; }

        [Input("value", required: true)]
        public Input<double> Value { get; set; } = null!;

        public TimeChartAxisLeftWatermarksGetArgs()
        {
        }
    }

    public sealed class TimeChartAxisRightArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// A line to draw as a high watermark.
        /// </summary>
        [Input("highWatermark")]
        public Input<double>? HighWatermark { get; set; }

        /// <summary>
        /// A label to attach to the high watermark line.
        /// </summary>
        [Input("highWatermarkLabel")]
        public Input<string>? HighWatermarkLabel { get; set; }

        /// <summary>
        /// Label used in the publish statement that displays the event query you want to customize.
        /// </summary>
        [Input("label")]
        public Input<string>? Label { get; set; }

        /// <summary>
        /// A line to draw as a low watermark.
        /// </summary>
        [Input("lowWatermark")]
        public Input<double>? LowWatermark { get; set; }

        /// <summary>
        /// A label to attach to the low watermark line.
        /// </summary>
        [Input("lowWatermarkLabel")]
        public Input<string>? LowWatermarkLabel { get; set; }

        /// <summary>
        /// The maximum value for the right axis.
        /// </summary>
        [Input("maxValue")]
        public Input<double>? MaxValue { get; set; }

        /// <summary>
        /// The minimum value for the right axis.
        /// </summary>
        [Input("minValue")]
        public Input<double>? MinValue { get; set; }

        [Input("watermarks")]
        private InputList<TimeChartAxisRightWatermarksArgs>? _watermarks;
        public InputList<TimeChartAxisRightWatermarksArgs> Watermarks
        {
            get => _watermarks ?? (_watermarks = new InputList<TimeChartAxisRightWatermarksArgs>());
            set => _watermarks = value;
        }

        public TimeChartAxisRightArgs()
        {
        }
    }

    public sealed class TimeChartAxisRightGetArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// A line to draw as a high watermark.
        /// </summary>
        [Input("highWatermark")]
        public Input<double>? HighWatermark { get; set; }

        /// <summary>
        /// A label to attach to the high watermark line.
        /// </summary>
        [Input("highWatermarkLabel")]
        public Input<string>? HighWatermarkLabel { get; set; }

        /// <summary>
        /// Label used in the publish statement that displays the event query you want to customize.
        /// </summary>
        [Input("label")]
        public Input<string>? Label { get; set; }

        /// <summary>
        /// A line to draw as a low watermark.
        /// </summary>
        [Input("lowWatermark")]
        public Input<double>? LowWatermark { get; set; }

        /// <summary>
        /// A label to attach to the low watermark line.
        /// </summary>
        [Input("lowWatermarkLabel")]
        public Input<string>? LowWatermarkLabel { get; set; }

        /// <summary>
        /// The maximum value for the right axis.
        /// </summary>
        [Input("maxValue")]
        public Input<double>? MaxValue { get; set; }

        /// <summary>
        /// The minimum value for the right axis.
        /// </summary>
        [Input("minValue")]
        public Input<double>? MinValue { get; set; }

        [Input("watermarks")]
        private InputList<TimeChartAxisRightWatermarksGetArgs>? _watermarks;
        public InputList<TimeChartAxisRightWatermarksGetArgs> Watermarks
        {
            get => _watermarks ?? (_watermarks = new InputList<TimeChartAxisRightWatermarksGetArgs>());
            set => _watermarks = value;
        }

        public TimeChartAxisRightGetArgs()
        {
        }
    }

    public sealed class TimeChartAxisRightWatermarksArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// Label used in the publish statement that displays the event query you want to customize.
        /// </summary>
        [Input("label")]
        public Input<string>? Label { get; set; }

        [Input("value", required: true)]
        public Input<double> Value { get; set; } = null!;

        public TimeChartAxisRightWatermarksArgs()
        {
        }
    }

    public sealed class TimeChartAxisRightWatermarksGetArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// Label used in the publish statement that displays the event query you want to customize.
        /// </summary>
        [Input("label")]
        public Input<string>? Label { get; set; }

        [Input("value", required: true)]
        public Input<double> Value { get; set; } = null!;

        public TimeChartAxisRightWatermarksGetArgs()
        {
        }
    }

    public sealed class TimeChartEventOptionsArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// Color to use : gray, blue, azure, navy, brown, orange, yellow, iris, magenta, pink, purple, violet, lilac, emerald, green, aquamarine.
        /// </summary>
        [Input("color")]
        public Input<string>? Color { get; set; }

        /// <summary>
        /// Specifies an alternate value for the Plot Name column of the Data Table associated with the chart.
        /// </summary>
        [Input("displayName")]
        public Input<string>? DisplayName { get; set; }

        /// <summary>
        /// Label used in the publish statement that displays the event query you want to customize.
        /// </summary>
        [Input("label", required: true)]
        public Input<string> Label { get; set; } = null!;

        public TimeChartEventOptionsArgs()
        {
        }
    }

    public sealed class TimeChartEventOptionsGetArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// Color to use : gray, blue, azure, navy, brown, orange, yellow, iris, magenta, pink, purple, violet, lilac, emerald, green, aquamarine.
        /// </summary>
        [Input("color")]
        public Input<string>? Color { get; set; }

        /// <summary>
        /// Specifies an alternate value for the Plot Name column of the Data Table associated with the chart.
        /// </summary>
        [Input("displayName")]
        public Input<string>? DisplayName { get; set; }

        /// <summary>
        /// Label used in the publish statement that displays the event query you want to customize.
        /// </summary>
        [Input("label", required: true)]
        public Input<string> Label { get; set; } = null!;

        public TimeChartEventOptionsGetArgs()
        {
        }
    }

    public sealed class TimeChartHistogramOptionsArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// Color to use : gray, blue, azure, navy, brown, orange, yellow, iris, magenta, pink, purple, violet, lilac, emerald, green, aquamarine, red, gold, greenyellow, chartreuse, jade
        /// </summary>
        [Input("colorTheme")]
        public Input<string>? ColorTheme { get; set; }

        public TimeChartHistogramOptionsArgs()
        {
        }
    }

    public sealed class TimeChartHistogramOptionsGetArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// Color to use : gray, blue, azure, navy, brown, orange, yellow, iris, magenta, pink, purple, violet, lilac, emerald, green, aquamarine, red, gold, greenyellow, chartreuse, jade
        /// </summary>
        [Input("colorTheme")]
        public Input<string>? ColorTheme { get; set; }

        public TimeChartHistogramOptionsGetArgs()
        {
        }
    }

    public sealed class TimeChartLegendOptionsFieldsArgs : Pulumi.ResourceArgs
    {
        [Input("enabled")]
        public Input<bool>? Enabled { get; set; }

        [Input("property", required: true)]
        public Input<string> Property { get; set; } = null!;

        public TimeChartLegendOptionsFieldsArgs()
        {
        }
    }

    public sealed class TimeChartLegendOptionsFieldsGetArgs : Pulumi.ResourceArgs
    {
        [Input("enabled")]
        public Input<bool>? Enabled { get; set; }

        [Input("property", required: true)]
        public Input<string> Property { get; set; } = null!;

        public TimeChartLegendOptionsFieldsGetArgs()
        {
        }
    }

    public sealed class TimeChartVizOptionsArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// Y-axis associated with values for this plot. Must be either `right` or `left`.
        /// </summary>
        [Input("axis")]
        public Input<string>? Axis { get; set; }

        /// <summary>
        /// Color to use : gray, blue, azure, navy, brown, orange, yellow, iris, magenta, pink, purple, violet, lilac, emerald, green, aquamarine.
        /// </summary>
        [Input("color")]
        public Input<string>? Color { get; set; }

        /// <summary>
        /// Specifies an alternate value for the Plot Name column of the Data Table associated with the chart.
        /// </summary>
        [Input("displayName")]
        public Input<string>? DisplayName { get; set; }

        /// <summary>
        /// Label used in the publish statement that displays the event query you want to customize.
        /// </summary>
        [Input("label", required: true)]
        public Input<string> Label { get; set; } = null!;

        /// <summary>
        /// The visualization style to use. Must be `"LineChart"`, `"AreaChart"`, `"ColumnChart"`, or `"Histogram"`. Chart level `plot_type` by default.
        /// </summary>
        [Input("plotType")]
        public Input<string>? PlotType { get; set; }

        [Input("valuePrefix")]
        public Input<string>? ValuePrefix { get; set; }

        [Input("valueSuffix")]
        public Input<string>? ValueSuffix { get; set; }

        /// <summary>
        /// A unit to attach to this plot. Units support automatic scaling (eg thousands of bytes will be displayed as kilobytes). Values values are `Bit, Kilobit, Megabit, Gigabit, Terabit, Petabit, Exabit, Zettabit, Yottabit, Byte, Kibibyte, Mebibyte, Gigibyte, Tebibyte, Pebibyte, Exbibyte, Zebibyte, Yobibyte, Nanosecond, Microsecond, Millisecond, Second, Minute, Hour, Day, Week`.
        /// * `value_prefix`, `value_suffix` - (Optional) Arbitrary prefix/suffix to display with the value of this plot.
        /// </summary>
        [Input("valueUnit")]
        public Input<string>? ValueUnit { get; set; }

        public TimeChartVizOptionsArgs()
        {
        }
    }

    public sealed class TimeChartVizOptionsGetArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// Y-axis associated with values for this plot. Must be either `right` or `left`.
        /// </summary>
        [Input("axis")]
        public Input<string>? Axis { get; set; }

        /// <summary>
        /// Color to use : gray, blue, azure, navy, brown, orange, yellow, iris, magenta, pink, purple, violet, lilac, emerald, green, aquamarine.
        /// </summary>
        [Input("color")]
        public Input<string>? Color { get; set; }

        /// <summary>
        /// Specifies an alternate value for the Plot Name column of the Data Table associated with the chart.
        /// </summary>
        [Input("displayName")]
        public Input<string>? DisplayName { get; set; }

        /// <summary>
        /// Label used in the publish statement that displays the event query you want to customize.
        /// </summary>
        [Input("label", required: true)]
        public Input<string> Label { get; set; } = null!;

        /// <summary>
        /// The visualization style to use. Must be `"LineChart"`, `"AreaChart"`, `"ColumnChart"`, or `"Histogram"`. Chart level `plot_type` by default.
        /// </summary>
        [Input("plotType")]
        public Input<string>? PlotType { get; set; }

        [Input("valuePrefix")]
        public Input<string>? ValuePrefix { get; set; }

        [Input("valueSuffix")]
        public Input<string>? ValueSuffix { get; set; }

        /// <summary>
        /// A unit to attach to this plot. Units support automatic scaling (eg thousands of bytes will be displayed as kilobytes). Values values are `Bit, Kilobit, Megabit, Gigabit, Terabit, Petabit, Exabit, Zettabit, Yottabit, Byte, Kibibyte, Mebibyte, Gigibyte, Tebibyte, Pebibyte, Exbibyte, Zebibyte, Yobibyte, Nanosecond, Microsecond, Millisecond, Second, Minute, Hour, Day, Week`.
        /// * `value_prefix`, `value_suffix` - (Optional) Arbitrary prefix/suffix to display with the value of this plot.
        /// </summary>
        [Input("valueUnit")]
        public Input<string>? ValueUnit { get; set; }

        public TimeChartVizOptionsGetArgs()
        {
        }
    }
    }

    namespace Outputs
    {

    [OutputType]
    public sealed class TimeChartAxisLeft
    {
        /// <summary>
        /// A line to draw as a high watermark.
        /// </summary>
        public readonly double? HighWatermark;
        /// <summary>
        /// A label to attach to the high watermark line.
        /// </summary>
        public readonly string? HighWatermarkLabel;
        /// <summary>
        /// Label used in the publish statement that displays the event query you want to customize.
        /// </summary>
        public readonly string? Label;
        /// <summary>
        /// A line to draw as a low watermark.
        /// </summary>
        public readonly double? LowWatermark;
        /// <summary>
        /// A label to attach to the low watermark line.
        /// </summary>
        public readonly string? LowWatermarkLabel;
        /// <summary>
        /// The maximum value for the right axis.
        /// </summary>
        public readonly double? MaxValue;
        /// <summary>
        /// The minimum value for the right axis.
        /// </summary>
        public readonly double? MinValue;
        public readonly ImmutableArray<TimeChartAxisLeftWatermarks> Watermarks;

        [OutputConstructor]
        private TimeChartAxisLeft(
            double? highWatermark,
            string? highWatermarkLabel,
            string? label,
            double? lowWatermark,
            string? lowWatermarkLabel,
            double? maxValue,
            double? minValue,
            ImmutableArray<TimeChartAxisLeftWatermarks> watermarks)
        {
            HighWatermark = highWatermark;
            HighWatermarkLabel = highWatermarkLabel;
            Label = label;
            LowWatermark = lowWatermark;
            LowWatermarkLabel = lowWatermarkLabel;
            MaxValue = maxValue;
            MinValue = minValue;
            Watermarks = watermarks;
        }
    }

    [OutputType]
    public sealed class TimeChartAxisLeftWatermarks
    {
        /// <summary>
        /// Label used in the publish statement that displays the event query you want to customize.
        /// </summary>
        public readonly string? Label;
        public readonly double Value;

        [OutputConstructor]
        private TimeChartAxisLeftWatermarks(
            string? label,
            double value)
        {
            Label = label;
            Value = value;
        }
    }

    [OutputType]
    public sealed class TimeChartAxisRight
    {
        /// <summary>
        /// A line to draw as a high watermark.
        /// </summary>
        public readonly double? HighWatermark;
        /// <summary>
        /// A label to attach to the high watermark line.
        /// </summary>
        public readonly string? HighWatermarkLabel;
        /// <summary>
        /// Label used in the publish statement that displays the event query you want to customize.
        /// </summary>
        public readonly string? Label;
        /// <summary>
        /// A line to draw as a low watermark.
        /// </summary>
        public readonly double? LowWatermark;
        /// <summary>
        /// A label to attach to the low watermark line.
        /// </summary>
        public readonly string? LowWatermarkLabel;
        /// <summary>
        /// The maximum value for the right axis.
        /// </summary>
        public readonly double? MaxValue;
        /// <summary>
        /// The minimum value for the right axis.
        /// </summary>
        public readonly double? MinValue;
        public readonly ImmutableArray<TimeChartAxisRightWatermarks> Watermarks;

        [OutputConstructor]
        private TimeChartAxisRight(
            double? highWatermark,
            string? highWatermarkLabel,
            string? label,
            double? lowWatermark,
            string? lowWatermarkLabel,
            double? maxValue,
            double? minValue,
            ImmutableArray<TimeChartAxisRightWatermarks> watermarks)
        {
            HighWatermark = highWatermark;
            HighWatermarkLabel = highWatermarkLabel;
            Label = label;
            LowWatermark = lowWatermark;
            LowWatermarkLabel = lowWatermarkLabel;
            MaxValue = maxValue;
            MinValue = minValue;
            Watermarks = watermarks;
        }
    }

    [OutputType]
    public sealed class TimeChartAxisRightWatermarks
    {
        /// <summary>
        /// Label used in the publish statement that displays the event query you want to customize.
        /// </summary>
        public readonly string? Label;
        public readonly double Value;

        [OutputConstructor]
        private TimeChartAxisRightWatermarks(
            string? label,
            double value)
        {
            Label = label;
            Value = value;
        }
    }

    [OutputType]
    public sealed class TimeChartEventOptions
    {
        /// <summary>
        /// Color to use : gray, blue, azure, navy, brown, orange, yellow, iris, magenta, pink, purple, violet, lilac, emerald, green, aquamarine.
        /// </summary>
        public readonly string? Color;
        /// <summary>
        /// Specifies an alternate value for the Plot Name column of the Data Table associated with the chart.
        /// </summary>
        public readonly string? DisplayName;
        /// <summary>
        /// Label used in the publish statement that displays the event query you want to customize.
        /// </summary>
        public readonly string Label;

        [OutputConstructor]
        private TimeChartEventOptions(
            string? color,
            string? displayName,
            string label)
        {
            Color = color;
            DisplayName = displayName;
            Label = label;
        }
    }

    [OutputType]
    public sealed class TimeChartHistogramOptions
    {
        /// <summary>
        /// Color to use : gray, blue, azure, navy, brown, orange, yellow, iris, magenta, pink, purple, violet, lilac, emerald, green, aquamarine, red, gold, greenyellow, chartreuse, jade
        /// </summary>
        public readonly string? ColorTheme;

        [OutputConstructor]
        private TimeChartHistogramOptions(string? colorTheme)
        {
            ColorTheme = colorTheme;
        }
    }

    [OutputType]
    public sealed class TimeChartLegendOptionsFields
    {
        public readonly bool? Enabled;
        public readonly string Property;

        [OutputConstructor]
        private TimeChartLegendOptionsFields(
            bool? enabled,
            string property)
        {
            Enabled = enabled;
            Property = property;
        }
    }

    [OutputType]
    public sealed class TimeChartVizOptions
    {
        /// <summary>
        /// Y-axis associated with values for this plot. Must be either `right` or `left`.
        /// </summary>
        public readonly string? Axis;
        /// <summary>
        /// Color to use : gray, blue, azure, navy, brown, orange, yellow, iris, magenta, pink, purple, violet, lilac, emerald, green, aquamarine.
        /// </summary>
        public readonly string? Color;
        /// <summary>
        /// Specifies an alternate value for the Plot Name column of the Data Table associated with the chart.
        /// </summary>
        public readonly string? DisplayName;
        /// <summary>
        /// Label used in the publish statement that displays the event query you want to customize.
        /// </summary>
        public readonly string Label;
        /// <summary>
        /// The visualization style to use. Must be `"LineChart"`, `"AreaChart"`, `"ColumnChart"`, or `"Histogram"`. Chart level `plot_type` by default.
        /// </summary>
        public readonly string? PlotType;
        public readonly string? ValuePrefix;
        public readonly string? ValueSuffix;
        /// <summary>
        /// A unit to attach to this plot. Units support automatic scaling (eg thousands of bytes will be displayed as kilobytes). Values values are `Bit, Kilobit, Megabit, Gigabit, Terabit, Petabit, Exabit, Zettabit, Yottabit, Byte, Kibibyte, Mebibyte, Gigibyte, Tebibyte, Pebibyte, Exbibyte, Zebibyte, Yobibyte, Nanosecond, Microsecond, Millisecond, Second, Minute, Hour, Day, Week`.
        /// * `value_prefix`, `value_suffix` - (Optional) Arbitrary prefix/suffix to display with the value of this plot.
        /// </summary>
        public readonly string? ValueUnit;

        [OutputConstructor]
        private TimeChartVizOptions(
            string? axis,
            string? color,
            string? displayName,
            string label,
            string? plotType,
            string? valuePrefix,
            string? valueSuffix,
            string? valueUnit)
        {
            Axis = axis;
            Color = color;
            DisplayName = displayName;
            Label = label;
            PlotType = plotType;
            ValuePrefix = valuePrefix;
            ValueSuffix = valueSuffix;
            ValueUnit = valueUnit;
        }
    }
    }
}
