// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.SignalFx
{
    /// <summary>
    /// Manage SignalFx [Data Links](https://docs.signalfx.com/en/latest/managing/data-links.html).
    /// </summary>
    public partial class DataLink : Pulumi.CustomResource
    {
        /// <summary>
        /// If provided, scopes this data link to the supplied dashboard id. If omitted then the link will be global.
        /// </summary>
        [Output("contextDashboardId")]
        public Output<string?> ContextDashboardId { get; private set; } = null!;

        /// <summary>
        /// Name (key) of the metadata that's the trigger of a data link. If you specify `property_value`, you must specify `property_name`.
        /// </summary>
        [Output("propertyName")]
        public Output<string?> PropertyName { get; private set; } = null!;

        /// <summary>
        /// Value of the metadata that's the trigger of a data link. If you specify this property, you must also specify `property_name`.
        /// </summary>
        [Output("propertyValue")]
        public Output<string?> PropertyValue { get; private set; } = null!;

        /// <summary>
        /// Link to an external URL
        /// </summary>
        [Output("targetExternalUrls")]
        public Output<ImmutableArray<Outputs.DataLinkTargetExternalUrl>> TargetExternalUrls { get; private set; } = null!;

        /// <summary>
        /// Link to a SignalFx dashboard
        /// </summary>
        [Output("targetSignalfxDashboards")]
        public Output<ImmutableArray<Outputs.DataLinkTargetSignalfxDashboard>> TargetSignalfxDashboards { get; private set; } = null!;

        /// <summary>
        /// Link to an external URL
        /// </summary>
        [Output("targetSplunks")]
        public Output<ImmutableArray<Outputs.DataLinkTargetSplunk>> TargetSplunks { get; private set; } = null!;


        /// <summary>
        /// Create a DataLink resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public DataLink(string name, DataLinkArgs? args = null, CustomResourceOptions? options = null)
            : base("signalfx:index/dataLink:DataLink", name, args ?? new DataLinkArgs(), MakeResourceOptions(options, ""))
        {
        }

        private DataLink(string name, Input<string> id, DataLinkState? state = null, CustomResourceOptions? options = null)
            : base("signalfx:index/dataLink:DataLink", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing DataLink resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static DataLink Get(string name, Input<string> id, DataLinkState? state = null, CustomResourceOptions? options = null)
        {
            return new DataLink(name, id, state, options);
        }
    }

    public sealed class DataLinkArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// If provided, scopes this data link to the supplied dashboard id. If omitted then the link will be global.
        /// </summary>
        [Input("contextDashboardId")]
        public Input<string>? ContextDashboardId { get; set; }

        /// <summary>
        /// Name (key) of the metadata that's the trigger of a data link. If you specify `property_value`, you must specify `property_name`.
        /// </summary>
        [Input("propertyName")]
        public Input<string>? PropertyName { get; set; }

        /// <summary>
        /// Value of the metadata that's the trigger of a data link. If you specify this property, you must also specify `property_name`.
        /// </summary>
        [Input("propertyValue")]
        public Input<string>? PropertyValue { get; set; }

        [Input("targetExternalUrls")]
        private InputList<Inputs.DataLinkTargetExternalUrlArgs>? _targetExternalUrls;

        /// <summary>
        /// Link to an external URL
        /// </summary>
        public InputList<Inputs.DataLinkTargetExternalUrlArgs> TargetExternalUrls
        {
            get => _targetExternalUrls ?? (_targetExternalUrls = new InputList<Inputs.DataLinkTargetExternalUrlArgs>());
            set => _targetExternalUrls = value;
        }

        [Input("targetSignalfxDashboards")]
        private InputList<Inputs.DataLinkTargetSignalfxDashboardArgs>? _targetSignalfxDashboards;

        /// <summary>
        /// Link to a SignalFx dashboard
        /// </summary>
        public InputList<Inputs.DataLinkTargetSignalfxDashboardArgs> TargetSignalfxDashboards
        {
            get => _targetSignalfxDashboards ?? (_targetSignalfxDashboards = new InputList<Inputs.DataLinkTargetSignalfxDashboardArgs>());
            set => _targetSignalfxDashboards = value;
        }

        [Input("targetSplunks")]
        private InputList<Inputs.DataLinkTargetSplunkArgs>? _targetSplunks;

        /// <summary>
        /// Link to an external URL
        /// </summary>
        public InputList<Inputs.DataLinkTargetSplunkArgs> TargetSplunks
        {
            get => _targetSplunks ?? (_targetSplunks = new InputList<Inputs.DataLinkTargetSplunkArgs>());
            set => _targetSplunks = value;
        }

        public DataLinkArgs()
        {
        }
    }

    public sealed class DataLinkState : Pulumi.ResourceArgs
    {
        /// <summary>
        /// If provided, scopes this data link to the supplied dashboard id. If omitted then the link will be global.
        /// </summary>
        [Input("contextDashboardId")]
        public Input<string>? ContextDashboardId { get; set; }

        /// <summary>
        /// Name (key) of the metadata that's the trigger of a data link. If you specify `property_value`, you must specify `property_name`.
        /// </summary>
        [Input("propertyName")]
        public Input<string>? PropertyName { get; set; }

        /// <summary>
        /// Value of the metadata that's the trigger of a data link. If you specify this property, you must also specify `property_name`.
        /// </summary>
        [Input("propertyValue")]
        public Input<string>? PropertyValue { get; set; }

        [Input("targetExternalUrls")]
        private InputList<Inputs.DataLinkTargetExternalUrlGetArgs>? _targetExternalUrls;

        /// <summary>
        /// Link to an external URL
        /// </summary>
        public InputList<Inputs.DataLinkTargetExternalUrlGetArgs> TargetExternalUrls
        {
            get => _targetExternalUrls ?? (_targetExternalUrls = new InputList<Inputs.DataLinkTargetExternalUrlGetArgs>());
            set => _targetExternalUrls = value;
        }

        [Input("targetSignalfxDashboards")]
        private InputList<Inputs.DataLinkTargetSignalfxDashboardGetArgs>? _targetSignalfxDashboards;

        /// <summary>
        /// Link to a SignalFx dashboard
        /// </summary>
        public InputList<Inputs.DataLinkTargetSignalfxDashboardGetArgs> TargetSignalfxDashboards
        {
            get => _targetSignalfxDashboards ?? (_targetSignalfxDashboards = new InputList<Inputs.DataLinkTargetSignalfxDashboardGetArgs>());
            set => _targetSignalfxDashboards = value;
        }

        [Input("targetSplunks")]
        private InputList<Inputs.DataLinkTargetSplunkGetArgs>? _targetSplunks;

        /// <summary>
        /// Link to an external URL
        /// </summary>
        public InputList<Inputs.DataLinkTargetSplunkGetArgs> TargetSplunks
        {
            get => _targetSplunks ?? (_targetSplunks = new InputList<Inputs.DataLinkTargetSplunkGetArgs>());
            set => _targetSplunks = value;
        }

        public DataLinkState()
        {
        }
    }
}
