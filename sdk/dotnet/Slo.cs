// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.SignalFx
{
    /// <summary>
    /// Provides a Splunk Observability Cloud slo resource. This can be used to create and manage SLOs.
    /// 
    /// To learn more about this feature take a look on [documentation for SLO](https://docs.splunk.com/observability/en/alerts-detectors-notifications/slo/slo-intro.html).
    /// 
    /// ## Example
    /// 
    /// ## Notification format
    /// 
    /// As Splunk Observability Cloud supports different notification mechanisms, use a comma-delimited string to provide inputs. If you want to specify multiple notifications, each must be a member in the list, like so:
    /// 
    /// See [Splunk Observability Cloud Docs](https://dev.splunk.com/observability/reference/api/detectors/latest) for more information.
    /// 
    /// Here are some example of how to configure each notification type:
    /// 
    /// ### Email
    /// 
    /// ### Jira
    /// 
    /// Note that the `credentialId` is the Splunk-provided ID shown after setting up your Jira integration. See also `signalfx.jira.Integration`.
    /// 
    /// ### OpsGenie
    /// 
    /// Note that the `credentialId` is the Splunk-provided ID shown after setting up your Opsgenie integration. `Team` here is hardcoded as the `responderType` as that is the only acceptable type as per the API docs.
    /// 
    /// ### PagerDuty
    /// 
    /// ### Slack
    /// 
    /// Exclude the `#` on the channel name:
    /// 
    /// ### Team
    /// 
    /// Sends [notifications to a team](https://docs.signalfx.com/en/latest/managing/teams/team-notifications.html).
    /// 
    /// ### TeamEmail
    /// 
    /// Sends an email to every member of a team.
    /// 
    /// ### Splunk On-Call (formerly VictorOps)
    /// 
    /// ### Webhooks
    /// 
    /// You need to include all the commas even if you only use a credential id.
    /// 
    /// You can either configure a Webhook to use an existing integration's credential id:
    /// 
    /// Or configure one inline:
    /// </summary>
    [SignalFxResourceType("signalfx:index/slo:Slo")]
    public partial class Slo : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Description of the SLO.
        /// </summary>
        [Output("description")]
        public Output<string?> Description { get; private set; } = null!;

        /// <summary>
        /// Properties to configure an SLO object inputs
        /// </summary>
        [Output("input")]
        public Output<Outputs.SloInput> Input { get; private set; } = null!;

        /// <summary>
        /// Name of the SLO. Each SLO name must be unique within an organization.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// Define target value of the service level indicator in the appropriate time period.
        /// </summary>
        [Output("target")]
        public Output<Outputs.SloTarget> Target { get; private set; } = null!;

        /// <summary>
        /// Type of the SLO. Currently just: `"RequestBased"` is supported.
        /// </summary>
        [Output("type")]
        public Output<string> Type { get; private set; } = null!;


        /// <summary>
        /// Create a Slo resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Slo(string name, SloArgs args, CustomResourceOptions? options = null)
            : base("signalfx:index/slo:Slo", name, args ?? new SloArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Slo(string name, Input<string> id, SloState? state = null, CustomResourceOptions? options = null)
            : base("signalfx:index/slo:Slo", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Slo resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Slo Get(string name, Input<string> id, SloState? state = null, CustomResourceOptions? options = null)
        {
            return new Slo(name, id, state, options);
        }
    }

    public sealed class SloArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Description of the SLO.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// Properties to configure an SLO object inputs
        /// </summary>
        [Input("input", required: true)]
        public Input<Inputs.SloInputArgs> Input { get; set; } = null!;

        /// <summary>
        /// Name of the SLO. Each SLO name must be unique within an organization.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Define target value of the service level indicator in the appropriate time period.
        /// </summary>
        [Input("target", required: true)]
        public Input<Inputs.SloTargetArgs> Target { get; set; } = null!;

        /// <summary>
        /// Type of the SLO. Currently just: `"RequestBased"` is supported.
        /// </summary>
        [Input("type", required: true)]
        public Input<string> Type { get; set; } = null!;

        public SloArgs()
        {
        }
        public static new SloArgs Empty => new SloArgs();
    }

    public sealed class SloState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Description of the SLO.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// Properties to configure an SLO object inputs
        /// </summary>
        [Input("input")]
        public Input<Inputs.SloInputGetArgs>? Input { get; set; }

        /// <summary>
        /// Name of the SLO. Each SLO name must be unique within an organization.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Define target value of the service level indicator in the appropriate time period.
        /// </summary>
        [Input("target")]
        public Input<Inputs.SloTargetGetArgs>? Target { get; set; }

        /// <summary>
        /// Type of the SLO. Currently just: `"RequestBased"` is supported.
        /// </summary>
        [Input("type")]
        public Input<string>? Type { get; set; }

        public SloState()
        {
        }
        public static new SloState Empty => new SloState();
    }
}
