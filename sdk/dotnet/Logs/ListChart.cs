// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.SignalFx.Logs
{
    /// <summary>
    /// This chart type displays current data values in a list format.
    /// 
    /// The name of each value in the chart reflects the name of the plot and any associated dimensions. We recommend you click the Pencil icon and give the plot a meaningful name, as in plot B below. Otherwise, just the raw metric name will be displayed on the chart, as in plot A below.
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using Pulumi;
    /// using SignalFx = Pulumi.SignalFx;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var mylistchart0 = new SignalFx.ListChart("mylistchart0", new()
    ///     {
    ///         ColorBy = "Metric",
    ///         Description = "Very cool List Chart",
    ///         DisableSampling = true,
    ///         HideMissingValues = true,
    ///         LegendOptionsFields = new[]
    ///         {
    ///             new SignalFx.Inputs.ListChartLegendOptionsFieldArgs
    ///             {
    ///                 Enabled = false,
    ///                 Property = "collector",
    ///             },
    ///             new SignalFx.Inputs.ListChartLegendOptionsFieldArgs
    ///             {
    ///                 Enabled = true,
    ///                 Property = "cluster_name",
    ///             },
    ///             new SignalFx.Inputs.ListChartLegendOptionsFieldArgs
    ///             {
    ///                 Enabled = true,
    ///                 Property = "role",
    ///             },
    ///             new SignalFx.Inputs.ListChartLegendOptionsFieldArgs
    ///             {
    ///                 Enabled = false,
    ///                 Property = "collector",
    ///             },
    ///             new SignalFx.Inputs.ListChartLegendOptionsFieldArgs
    ///             {
    ///                 Enabled = false,
    ///                 Property = "host",
    ///             },
    ///         },
    ///         MaxDelay = 2,
    ///         MaxPrecision = 2,
    ///         ProgramText = @"myfilters = filter(""cluster_name"", ""prod"") and filter(""role"", ""search"")
    /// data(""cpu.total.idle"", filter=myfilters).publish()
    /// 
    /// ",
    ///         RefreshInterval = 1,
    ///         SortBy = "-value",
    ///         Timezone = "Europe/Paris",
    ///     });
    /// 
    /// });
    /// ```
    /// </summary>
    [SignalFxResourceType("signalfx:logs/listChart:ListChart")]
    public partial class ListChart : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Column configuration
        /// </summary>
        [Output("columns")]
        public Output<ImmutableArray<Outputs.ListChartColumn>> Columns { get; private set; } = null!;

        /// <summary>
        /// default connection that the dashboard uses
        /// </summary>
        [Output("defaultConnection")]
        public Output<string?> DefaultConnection { get; private set; } = null!;

        /// <summary>
        /// Description of the chart.
        /// </summary>
        [Output("description")]
        public Output<string?> Description { get; private set; } = null!;

        /// <summary>
        /// Seconds since epoch. Used for visualization. Conflicts with `time_range`.
        /// </summary>
        [Output("endTime")]
        public Output<int?> EndTime { get; private set; } = null!;

        /// <summary>
        /// Name of the chart.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// Signalflow program text for the chart. More info[in the SignalFx docs](https://developers.signalfx.com/signalflow_analytics/signalflow_overview.html#_signalflow_programming_language).
        /// </summary>
        [Output("programText")]
        public Output<string> ProgramText { get; private set; } = null!;

        /// <summary>
        /// Sorting options configuration
        /// </summary>
        [Output("sortOptions")]
        public Output<ImmutableArray<Outputs.ListChartSortOption>> SortOptions { get; private set; } = null!;

        /// <summary>
        /// Seconds since epoch. Used for visualization. Conflicts with `time_range`.
        /// </summary>
        [Output("startTime")]
        public Output<int?> StartTime { get; private set; } = null!;

        /// <summary>
        /// How many seconds ago from which to display data. For example, the last hour would be `3600`, etc. Conflicts with `start_time` and `end_time`.
        /// </summary>
        [Output("timeRange")]
        public Output<int?> TimeRange { get; private set; } = null!;

        /// <summary>
        /// The URL of the chart.
        /// </summary>
        [Output("url")]
        public Output<string> Url { get; private set; } = null!;


        /// <summary>
        /// Create a ListChart resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public ListChart(string name, ListChartArgs args, CustomResourceOptions? options = null)
            : base("signalfx:logs/listChart:ListChart", name, args ?? new ListChartArgs(), MakeResourceOptions(options, ""))
        {
        }

        private ListChart(string name, Input<string> id, ListChartState? state = null, CustomResourceOptions? options = null)
            : base("signalfx:logs/listChart:ListChart", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing ListChart resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static ListChart Get(string name, Input<string> id, ListChartState? state = null, CustomResourceOptions? options = null)
        {
            return new ListChart(name, id, state, options);
        }
    }

    public sealed class ListChartArgs : global::Pulumi.ResourceArgs
    {
        [Input("columns")]
        private InputList<Inputs.ListChartColumnArgs>? _columns;

        /// <summary>
        /// Column configuration
        /// </summary>
        public InputList<Inputs.ListChartColumnArgs> Columns
        {
            get => _columns ?? (_columns = new InputList<Inputs.ListChartColumnArgs>());
            set => _columns = value;
        }

        /// <summary>
        /// default connection that the dashboard uses
        /// </summary>
        [Input("defaultConnection")]
        public Input<string>? DefaultConnection { get; set; }

        /// <summary>
        /// Description of the chart.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// Seconds since epoch. Used for visualization. Conflicts with `time_range`.
        /// </summary>
        [Input("endTime")]
        public Input<int>? EndTime { get; set; }

        /// <summary>
        /// Name of the chart.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Signalflow program text for the chart. More info[in the SignalFx docs](https://developers.signalfx.com/signalflow_analytics/signalflow_overview.html#_signalflow_programming_language).
        /// </summary>
        [Input("programText", required: true)]
        public Input<string> ProgramText { get; set; } = null!;

        [Input("sortOptions")]
        private InputList<Inputs.ListChartSortOptionArgs>? _sortOptions;

        /// <summary>
        /// Sorting options configuration
        /// </summary>
        public InputList<Inputs.ListChartSortOptionArgs> SortOptions
        {
            get => _sortOptions ?? (_sortOptions = new InputList<Inputs.ListChartSortOptionArgs>());
            set => _sortOptions = value;
        }

        /// <summary>
        /// Seconds since epoch. Used for visualization. Conflicts with `time_range`.
        /// </summary>
        [Input("startTime")]
        public Input<int>? StartTime { get; set; }

        /// <summary>
        /// How many seconds ago from which to display data. For example, the last hour would be `3600`, etc. Conflicts with `start_time` and `end_time`.
        /// </summary>
        [Input("timeRange")]
        public Input<int>? TimeRange { get; set; }

        public ListChartArgs()
        {
        }
        public static new ListChartArgs Empty => new ListChartArgs();
    }

    public sealed class ListChartState : global::Pulumi.ResourceArgs
    {
        [Input("columns")]
        private InputList<Inputs.ListChartColumnGetArgs>? _columns;

        /// <summary>
        /// Column configuration
        /// </summary>
        public InputList<Inputs.ListChartColumnGetArgs> Columns
        {
            get => _columns ?? (_columns = new InputList<Inputs.ListChartColumnGetArgs>());
            set => _columns = value;
        }

        /// <summary>
        /// default connection that the dashboard uses
        /// </summary>
        [Input("defaultConnection")]
        public Input<string>? DefaultConnection { get; set; }

        /// <summary>
        /// Description of the chart.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// Seconds since epoch. Used for visualization. Conflicts with `time_range`.
        /// </summary>
        [Input("endTime")]
        public Input<int>? EndTime { get; set; }

        /// <summary>
        /// Name of the chart.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Signalflow program text for the chart. More info[in the SignalFx docs](https://developers.signalfx.com/signalflow_analytics/signalflow_overview.html#_signalflow_programming_language).
        /// </summary>
        [Input("programText")]
        public Input<string>? ProgramText { get; set; }

        [Input("sortOptions")]
        private InputList<Inputs.ListChartSortOptionGetArgs>? _sortOptions;

        /// <summary>
        /// Sorting options configuration
        /// </summary>
        public InputList<Inputs.ListChartSortOptionGetArgs> SortOptions
        {
            get => _sortOptions ?? (_sortOptions = new InputList<Inputs.ListChartSortOptionGetArgs>());
            set => _sortOptions = value;
        }

        /// <summary>
        /// Seconds since epoch. Used for visualization. Conflicts with `time_range`.
        /// </summary>
        [Input("startTime")]
        public Input<int>? StartTime { get; set; }

        /// <summary>
        /// How many seconds ago from which to display data. For example, the last hour would be `3600`, etc. Conflicts with `start_time` and `end_time`.
        /// </summary>
        [Input("timeRange")]
        public Input<int>? TimeRange { get; set; }

        /// <summary>
        /// The URL of the chart.
        /// </summary>
        [Input("url")]
        public Input<string>? Url { get; set; }

        public ListChartState()
        {
        }
        public static new ListChartState Empty => new ListChartState();
    }
}
