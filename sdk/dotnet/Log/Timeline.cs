// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.SignalFx.Log
{
    /// <summary>
    /// You can add logs data to your Observability Cloud dashboards without turning your logs into metrics first.
    /// 
    /// A log timeline chart displays timeline visualization in a dashboard and shows you in detail what is happening and why.
    /// 
    /// ## Example
    /// 
    /// ## Arguments
    /// 
    /// The following arguments are supported in the resource block:
    /// 
    /// * `name` - (Required) Name of the log timeline.
    /// * `program_text` - (Required) Signalflow program text for the log timeline. More info at https://dev.splunk.com/observability/docs/.
    /// * `description` - (Optional) Description of the log timeline.
    /// * `time_range` - (Optional) From when to display data. Splunk Observability Cloud time syntax (e.g. `"-5m"`, `"-1h"`). Conflicts with `start_time` and `end_time`.
    /// * `start_time` - (Optional) Seconds since epoch. Used for visualization. Conflicts with `time_range`.
    /// * `end_time` - (Optional) Seconds since epoch. Used for visualization. Conflicts with `time_range`.
    /// * `default_connection` - (Optional) The connection that the log timeline uses to fetch data. This could be Splunk Enterprise, Splunk Enterprise Cloud or Observability Cloud.
    /// 
    /// ## Attributes
    /// 
    /// In a addition to all arguments above, the following attributes are exported:
    /// 
    /// * `id` - The ID of the log timeline.
    /// * `url` - The URL of the log timeline.
    /// </summary>
    [SignalFxResourceType("signalfx:log/timeline:Timeline")]
    public partial class Timeline : global::Pulumi.CustomResource
    {
        /// <summary>
        /// default connection that the dashboard uses
        /// </summary>
        [Output("defaultConnection")]
        public Output<string?> DefaultConnection { get; private set; } = null!;

        /// <summary>
        /// Description of the chart (Optional)
        /// </summary>
        [Output("description")]
        public Output<string?> Description { get; private set; } = null!;

        /// <summary>
        /// Seconds since epoch to end the visualization
        /// </summary>
        [Output("endTime")]
        public Output<int?> EndTime { get; private set; } = null!;

        /// <summary>
        /// Name of the chart
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// Signalflow program text for the chart. More info at "https://developers.signalfx.com/docs/signalflow-overview"
        /// </summary>
        [Output("programText")]
        public Output<string> ProgramText { get; private set; } = null!;

        /// <summary>
        /// Seconds since epoch to start the visualization
        /// </summary>
        [Output("startTime")]
        public Output<int?> StartTime { get; private set; } = null!;

        /// <summary>
        /// Seconds to display in the visualization. This is a rolling range from the current time. Example: 3600 = `-1h`
        /// </summary>
        [Output("timeRange")]
        public Output<int?> TimeRange { get; private set; } = null!;

        /// <summary>
        /// URL of the chart
        /// </summary>
        [Output("url")]
        public Output<string> Url { get; private set; } = null!;


        /// <summary>
        /// Create a Timeline resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Timeline(string name, TimelineArgs args, CustomResourceOptions? options = null)
            : base("signalfx:log/timeline:Timeline", name, args ?? new TimelineArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Timeline(string name, Input<string> id, TimelineState? state = null, CustomResourceOptions? options = null)
            : base("signalfx:log/timeline:Timeline", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Timeline resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Timeline Get(string name, Input<string> id, TimelineState? state = null, CustomResourceOptions? options = null)
        {
            return new Timeline(name, id, state, options);
        }
    }

    public sealed class TimelineArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// default connection that the dashboard uses
        /// </summary>
        [Input("defaultConnection")]
        public Input<string>? DefaultConnection { get; set; }

        /// <summary>
        /// Description of the chart (Optional)
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// Seconds since epoch to end the visualization
        /// </summary>
        [Input("endTime")]
        public Input<int>? EndTime { get; set; }

        /// <summary>
        /// Name of the chart
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Signalflow program text for the chart. More info at "https://developers.signalfx.com/docs/signalflow-overview"
        /// </summary>
        [Input("programText", required: true)]
        public Input<string> ProgramText { get; set; } = null!;

        /// <summary>
        /// Seconds since epoch to start the visualization
        /// </summary>
        [Input("startTime")]
        public Input<int>? StartTime { get; set; }

        /// <summary>
        /// Seconds to display in the visualization. This is a rolling range from the current time. Example: 3600 = `-1h`
        /// </summary>
        [Input("timeRange")]
        public Input<int>? TimeRange { get; set; }

        public TimelineArgs()
        {
        }
        public static new TimelineArgs Empty => new TimelineArgs();
    }

    public sealed class TimelineState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// default connection that the dashboard uses
        /// </summary>
        [Input("defaultConnection")]
        public Input<string>? DefaultConnection { get; set; }

        /// <summary>
        /// Description of the chart (Optional)
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// Seconds since epoch to end the visualization
        /// </summary>
        [Input("endTime")]
        public Input<int>? EndTime { get; set; }

        /// <summary>
        /// Name of the chart
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Signalflow program text for the chart. More info at "https://developers.signalfx.com/docs/signalflow-overview"
        /// </summary>
        [Input("programText")]
        public Input<string>? ProgramText { get; set; }

        /// <summary>
        /// Seconds since epoch to start the visualization
        /// </summary>
        [Input("startTime")]
        public Input<int>? StartTime { get; set; }

        /// <summary>
        /// Seconds to display in the visualization. This is a rolling range from the current time. Example: 3600 = `-1h`
        /// </summary>
        [Input("timeRange")]
        public Input<int>? TimeRange { get; set; }

        /// <summary>
        /// URL of the chart
        /// </summary>
        [Input("url")]
        public Input<string>? Url { get; set; }

        public TimelineState()
        {
        }
        public static new TimelineState Empty => new TimelineState();
    }
}
