// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.SignalFx.Aws
{
    /// <summary>
    /// Splunk Observability AWS CloudWatch integrations using security tokens. For help with this integration see [Connect to AWS CloudWatch](https://docs.signalfx.com/en/latest/integrations/amazon-web-services.html#connect-to-aws).
    /// 
    /// &gt; **NOTE** When managing integrations, use a session token of an administrator to authenticate the Splunk Observabilit Cloud provider. See [Operations that require a session token for an administrator](https://dev.splunk.com/observability/docs/administration/authtokens#Operations-that-require-a-session-token-for-an-administrator).
    /// 
    /// &gt; **WARNING** This resource implements a part of a workflow. You must use it with `signalfx.aws.Integration`.
    /// 
    /// ## Example
    /// 
    /// ## Arguments
    /// 
    /// * `name` - (Required) The name of this integration
    /// 
    /// ## Attributes
    /// 
    /// In addition to all arguments above, the following attributes are exported:
    /// 
    /// * `id` - The ID of the integration to use with `signalfx.aws.Integration`
    /// * `signalfx_aws_account` - The AWS Account ARN to use with your policies/roles, provided by Splunk Observability Cloud.
    /// </summary>
    [SignalFxResourceType("signalfx:aws/tokenIntegration:TokenIntegration")]
    public partial class TokenIntegration : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Name of the integration
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// The Splunk Observability AWS account ID to use with an AWS role.
        /// </summary>
        [Output("signalfxAwsAccount")]
        public Output<string> SignalfxAwsAccount { get; private set; } = null!;

        /// <summary>
        /// The SignalFx-generated AWS token to use with an AWS integration.
        /// </summary>
        [Output("tokenId")]
        public Output<string> TokenId { get; private set; } = null!;


        /// <summary>
        /// Create a TokenIntegration resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public TokenIntegration(string name, TokenIntegrationArgs? args = null, CustomResourceOptions? options = null)
            : base("signalfx:aws/tokenIntegration:TokenIntegration", name, args ?? new TokenIntegrationArgs(), MakeResourceOptions(options, ""))
        {
        }

        private TokenIntegration(string name, Input<string> id, TokenIntegrationState? state = null, CustomResourceOptions? options = null)
            : base("signalfx:aws/tokenIntegration:TokenIntegration", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                AdditionalSecretOutputs =
                {
                    "signalfxAwsAccount",
                    "tokenId",
                },
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing TokenIntegration resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static TokenIntegration Get(string name, Input<string> id, TokenIntegrationState? state = null, CustomResourceOptions? options = null)
        {
            return new TokenIntegration(name, id, state, options);
        }
    }

    public sealed class TokenIntegrationArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Name of the integration
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        public TokenIntegrationArgs()
        {
        }
        public static new TokenIntegrationArgs Empty => new TokenIntegrationArgs();
    }

    public sealed class TokenIntegrationState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Name of the integration
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("signalfxAwsAccount")]
        private Input<string>? _signalfxAwsAccount;

        /// <summary>
        /// The Splunk Observability AWS account ID to use with an AWS role.
        /// </summary>
        public Input<string>? SignalfxAwsAccount
        {
            get => _signalfxAwsAccount;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _signalfxAwsAccount = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        [Input("tokenId")]
        private Input<string>? _tokenId;

        /// <summary>
        /// The SignalFx-generated AWS token to use with an AWS integration.
        /// </summary>
        public Input<string>? TokenId
        {
            get => _tokenId;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _tokenId = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        public TokenIntegrationState()
        {
        }
        public static new TokenIntegrationState Empty => new TokenIntegrationState();
    }
}
