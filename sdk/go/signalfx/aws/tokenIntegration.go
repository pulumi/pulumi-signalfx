// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package aws

import (
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// SignalFx AWS CloudWatch integrations using security tokens. For help with this integration see [Connect to AWS CloudWatch](https://docs.signalfx.com/en/latest/integrations/amazon-web-services.html#connect-to-aws).
// 
// **Note:** When managing integrations you'll need to use an admin token to authenticate the SignalFx provider.
// 
// > **WARNING** This resource implements a part of a workflow. You must use it with one of either `aws.Integration`.
//
// > This content is derived from https://github.com/terraform-providers/terraform-provider-signalfx/blob/master/website/docs/r/aws_token_integration.html.markdown.
type TokenIntegration struct {
	s *pulumi.ResourceState
}

// NewTokenIntegration registers a new resource with the given unique name, arguments, and options.
func NewTokenIntegration(ctx *pulumi.Context,
	name string, args *TokenIntegrationArgs, opts ...pulumi.ResourceOpt) (*TokenIntegration, error) {
	inputs := make(map[string]interface{})
	if args == nil {
		inputs["name"] = nil
	} else {
		inputs["name"] = args.Name
	}
	inputs["tokenId"] = nil
	s, err := ctx.RegisterResource("signalfx:aws/tokenIntegration:TokenIntegration", name, true, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &TokenIntegration{s: s}, nil
}

// GetTokenIntegration gets an existing TokenIntegration resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetTokenIntegration(ctx *pulumi.Context,
	name string, id pulumi.ID, state *TokenIntegrationState, opts ...pulumi.ResourceOpt) (*TokenIntegration, error) {
	inputs := make(map[string]interface{})
	if state != nil {
		inputs["name"] = state.Name
		inputs["tokenId"] = state.TokenId
	}
	s, err := ctx.ReadResource("signalfx:aws/tokenIntegration:TokenIntegration", name, id, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &TokenIntegration{s: s}, nil
}

// URN is this resource's unique name assigned by Pulumi.
func (r *TokenIntegration) URN() pulumi.URNOutput {
	return r.s.URN()
}

// ID is this resource's unique identifier assigned by its provider.
func (r *TokenIntegration) ID() pulumi.IDOutput {
	return r.s.ID()
}

// The name of this integration
func (r *TokenIntegration) Name() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["name"])
}

// The SignalFx-generated AWS account ID to use with an AWS integration.
func (r *TokenIntegration) TokenId() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["tokenId"])
}

// Input properties used for looking up and filtering TokenIntegration resources.
type TokenIntegrationState struct {
	// The name of this integration
	Name interface{}
	// The SignalFx-generated AWS account ID to use with an AWS integration.
	TokenId interface{}
}

// The set of arguments for constructing a TokenIntegration resource.
type TokenIntegrationArgs struct {
	// The name of this integration
	Name interface{}
}
