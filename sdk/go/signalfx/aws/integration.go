// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package aws

import (
	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// SignalFx AWS CloudWatch integrations. For help with this integration see [Monitoring Amazon Web Services](https://docs.signalfx.com/en/latest/integrations/amazon-web-services.html#monitor-amazon-web-services).
// 
// **Note:** When managing integrations you'll need to use an admin token to authenticate the SignalFx provider.
// 
// > **WARNING** This resource implements a part of a workflow. You must use it with one of either `aws.ExternalIntegration` or `aws.TokenIntegration`.
// 
// ## Service Names
// 
// Fields that expect an AWS service/namespace will work with one of: "AWS/ApiGateway" "AWS/AppStream" "AWS/AutoScaling" "AWS/Billing" "AWS/CloudFront" "AWS/CloudSearch" "AWS/Events" "AWS/Logs" "AWS/Connect" "AWS/DMS" "AWS/DX" "AWS/DynamoDB" "AWS/EC2" "AWS/EC2Spot" "AWS/ECS" "AWS/ElasticBeanstalk" "AWS/EBS" "AWS/EFS" "AWS/ELB" "AWS/ApplicationELB" "AWS/NetworkELB" "AWS/ElasticTranscoder" "AWS/ElastiCache" "AWS/ES" "AWS/ElasticMapReduce" "AWS/GameLift" "AWS/Inspector" "AWS/IoT" "AWS/KMS" "AWS/KinesisAnalytics" "AWS/Firehose" "AWS/Kinesis" "AWS/KinesisVideo" "AWS/Lambda" "AWS/Lex" "AWS/ML" "AWS/OpsWorks" "AWS/Polly" "AWS/Redshift" "AWS/RDS" "AWS/Route53" "AWS/SageMaker" "AWS/DDoSProtection" "AWS/SES" "AWS/SNS" "AWS/SQS" "AWS/S3" "AWS/SWF" "AWS/States" "AWS/StorageGateway" "AWS/Translate" "AWS/NATGateway" "AWS/VPN (VPN)" "WAF" "AWS/WorkSpaces".
//
// > This content is derived from https://github.com/terraform-providers/terraform-provider-signalfx/blob/master/website/docs/r/aws_integration.html.markdown.
type Integration struct {
	s *pulumi.ResourceState
}

// NewIntegration registers a new resource with the given unique name, arguments, and options.
func NewIntegration(ctx *pulumi.Context,
	name string, args *IntegrationArgs, opts ...pulumi.ResourceOpt) (*Integration, error) {
	if args == nil || args.Enabled == nil {
		return nil, errors.New("missing required argument 'Enabled'")
	}
	if args == nil || args.IntegrationId == nil {
		return nil, errors.New("missing required argument 'IntegrationId'")
	}
	inputs := make(map[string]interface{})
	if args == nil {
		inputs["customCloudwatchNamespaces"] = nil
		inputs["customNamespaceSyncRules"] = nil
		inputs["enableAwsUsage"] = nil
		inputs["enabled"] = nil
		inputs["externalId"] = nil
		inputs["importCloudWatch"] = nil
		inputs["integrationId"] = nil
		inputs["key"] = nil
		inputs["namespaceSyncRules"] = nil
		inputs["pollRate"] = nil
		inputs["regions"] = nil
		inputs["roleArn"] = nil
		inputs["services"] = nil
		inputs["token"] = nil
	} else {
		inputs["customCloudwatchNamespaces"] = args.CustomCloudwatchNamespaces
		inputs["customNamespaceSyncRules"] = args.CustomNamespaceSyncRules
		inputs["enableAwsUsage"] = args.EnableAwsUsage
		inputs["enabled"] = args.Enabled
		inputs["externalId"] = args.ExternalId
		inputs["importCloudWatch"] = args.ImportCloudWatch
		inputs["integrationId"] = args.IntegrationId
		inputs["key"] = args.Key
		inputs["namespaceSyncRules"] = args.NamespaceSyncRules
		inputs["pollRate"] = args.PollRate
		inputs["regions"] = args.Regions
		inputs["roleArn"] = args.RoleArn
		inputs["services"] = args.Services
		inputs["token"] = args.Token
	}
	s, err := ctx.RegisterResource("signalfx:aws/integration:Integration", name, true, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &Integration{s: s}, nil
}

// GetIntegration gets an existing Integration resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetIntegration(ctx *pulumi.Context,
	name string, id pulumi.ID, state *IntegrationState, opts ...pulumi.ResourceOpt) (*Integration, error) {
	inputs := make(map[string]interface{})
	if state != nil {
		inputs["customCloudwatchNamespaces"] = state.CustomCloudwatchNamespaces
		inputs["customNamespaceSyncRules"] = state.CustomNamespaceSyncRules
		inputs["enableAwsUsage"] = state.EnableAwsUsage
		inputs["enabled"] = state.Enabled
		inputs["externalId"] = state.ExternalId
		inputs["importCloudWatch"] = state.ImportCloudWatch
		inputs["integrationId"] = state.IntegrationId
		inputs["key"] = state.Key
		inputs["namespaceSyncRules"] = state.NamespaceSyncRules
		inputs["pollRate"] = state.PollRate
		inputs["regions"] = state.Regions
		inputs["roleArn"] = state.RoleArn
		inputs["services"] = state.Services
		inputs["token"] = state.Token
	}
	s, err := ctx.ReadResource("signalfx:aws/integration:Integration", name, id, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &Integration{s: s}, nil
}

// URN is this resource's unique name assigned by Pulumi.
func (r *Integration) URN() pulumi.URNOutput {
	return r.s.URN()
}

// ID is this resource's unique identifier assigned by its provider.
func (r *Integration) ID() pulumi.IDOutput {
	return r.s.ID()
}

// List of custom AWS CloudWatch namespaces to monitor. Custom namespaces contain custom metrics that you define in AWS; SignalFx imports the metrics so you can monitor them.
func (r *Integration) CustomCloudwatchNamespaces() pulumi.ArrayOutput {
	return (pulumi.ArrayOutput)(r.s.State["customCloudwatchNamespaces"])
}

// Each element controls the data collected by SignalFx for the specified namespace. Conflicts with the `customCloudwatchNamespaces` property.
func (r *Integration) CustomNamespaceSyncRules() pulumi.ArrayOutput {
	return (pulumi.ArrayOutput)(r.s.State["customNamespaceSyncRules"])
}

// Flag that controls how SignalFx imports usage metrics from AWS to use with AWS Cost Optimizer. If `true`, SignalFx imports the metrics.
func (r *Integration) EnableAwsUsage() pulumi.BoolOutput {
	return (pulumi.BoolOutput)(r.s.State["enableAwsUsage"])
}

// Whether the integration is enabled.
func (r *Integration) Enabled() pulumi.BoolOutput {
	return (pulumi.BoolOutput)(r.s.State["enabled"])
}

// The `externalId` property from one of a `aws.ExternalIntegration` or `aws.TokenIntegration`
func (r *Integration) ExternalId() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["externalId"])
}

// Flag that controls how SignalFx imports Cloud Watch metrics. If true, SignalFx imports Cloud Watch metrics from AWS.
func (r *Integration) ImportCloudWatch() pulumi.BoolOutput {
	return (pulumi.BoolOutput)(r.s.State["importCloudWatch"])
}

// The id of one of a `aws.ExternalIntegration` or `aws.TokenIntegration`.
func (r *Integration) IntegrationId() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["integrationId"])
}

// If you specify `authMethod = \"SecurityToken\"` in your request to create an AWS integration object, use this property to specify the key.
func (r *Integration) Key() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["key"])
}

// Each element in the array is an object that contains an AWS namespace name and a filter that controls the data that SignalFx collects for the namespace. Conflicts with the `services` property. If you don't specify either property, SignalFx syncs all data in all AWS namespaces.
func (r *Integration) NamespaceSyncRules() pulumi.ArrayOutput {
	return (pulumi.ArrayOutput)(r.s.State["namespaceSyncRules"])
}

// AWS poll rate (in seconds). One of `60` or `300`.
func (r *Integration) PollRate() pulumi.IntOutput {
	return (pulumi.IntOutput)(r.s.State["pollRate"])
}

// List of AWS regions that SignalFx should monitor.
func (r *Integration) Regions() pulumi.ArrayOutput {
	return (pulumi.ArrayOutput)(r.s.State["regions"])
}

// Role ARN that you add to an existing AWS integration object. **Note**: Ensure you use the `arn` property of your role, not the id!
func (r *Integration) RoleArn() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["roleArn"])
}

// List of AWS services that you want SignalFx to monitor. Each element is a string designating an AWS service. Conflicts with `namespaceSyncRule`.
func (r *Integration) Services() pulumi.ArrayOutput {
	return (pulumi.ArrayOutput)(r.s.State["services"])
}

// Used with `signalfx_aws_token_integration`. Use this property to specify the token.
func (r *Integration) Token() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["token"])
}

// Input properties used for looking up and filtering Integration resources.
type IntegrationState struct {
	// List of custom AWS CloudWatch namespaces to monitor. Custom namespaces contain custom metrics that you define in AWS; SignalFx imports the metrics so you can monitor them.
	CustomCloudwatchNamespaces interface{}
	// Each element controls the data collected by SignalFx for the specified namespace. Conflicts with the `customCloudwatchNamespaces` property.
	CustomNamespaceSyncRules interface{}
	// Flag that controls how SignalFx imports usage metrics from AWS to use with AWS Cost Optimizer. If `true`, SignalFx imports the metrics.
	EnableAwsUsage interface{}
	// Whether the integration is enabled.
	Enabled interface{}
	// The `externalId` property from one of a `aws.ExternalIntegration` or `aws.TokenIntegration`
	ExternalId interface{}
	// Flag that controls how SignalFx imports Cloud Watch metrics. If true, SignalFx imports Cloud Watch metrics from AWS.
	ImportCloudWatch interface{}
	// The id of one of a `aws.ExternalIntegration` or `aws.TokenIntegration`.
	IntegrationId interface{}
	// If you specify `authMethod = \"SecurityToken\"` in your request to create an AWS integration object, use this property to specify the key.
	Key interface{}
	// Each element in the array is an object that contains an AWS namespace name and a filter that controls the data that SignalFx collects for the namespace. Conflicts with the `services` property. If you don't specify either property, SignalFx syncs all data in all AWS namespaces.
	NamespaceSyncRules interface{}
	// AWS poll rate (in seconds). One of `60` or `300`.
	PollRate interface{}
	// List of AWS regions that SignalFx should monitor.
	Regions interface{}
	// Role ARN that you add to an existing AWS integration object. **Note**: Ensure you use the `arn` property of your role, not the id!
	RoleArn interface{}
	// List of AWS services that you want SignalFx to monitor. Each element is a string designating an AWS service. Conflicts with `namespaceSyncRule`.
	Services interface{}
	// Used with `signalfx_aws_token_integration`. Use this property to specify the token.
	Token interface{}
}

// The set of arguments for constructing a Integration resource.
type IntegrationArgs struct {
	// List of custom AWS CloudWatch namespaces to monitor. Custom namespaces contain custom metrics that you define in AWS; SignalFx imports the metrics so you can monitor them.
	CustomCloudwatchNamespaces interface{}
	// Each element controls the data collected by SignalFx for the specified namespace. Conflicts with the `customCloudwatchNamespaces` property.
	CustomNamespaceSyncRules interface{}
	// Flag that controls how SignalFx imports usage metrics from AWS to use with AWS Cost Optimizer. If `true`, SignalFx imports the metrics.
	EnableAwsUsage interface{}
	// Whether the integration is enabled.
	Enabled interface{}
	// The `externalId` property from one of a `aws.ExternalIntegration` or `aws.TokenIntegration`
	ExternalId interface{}
	// Flag that controls how SignalFx imports Cloud Watch metrics. If true, SignalFx imports Cloud Watch metrics from AWS.
	ImportCloudWatch interface{}
	// The id of one of a `aws.ExternalIntegration` or `aws.TokenIntegration`.
	IntegrationId interface{}
	// If you specify `authMethod = \"SecurityToken\"` in your request to create an AWS integration object, use this property to specify the key.
	Key interface{}
	// Each element in the array is an object that contains an AWS namespace name and a filter that controls the data that SignalFx collects for the namespace. Conflicts with the `services` property. If you don't specify either property, SignalFx syncs all data in all AWS namespaces.
	NamespaceSyncRules interface{}
	// AWS poll rate (in seconds). One of `60` or `300`.
	PollRate interface{}
	// List of AWS regions that SignalFx should monitor.
	Regions interface{}
	// Role ARN that you add to an existing AWS integration object. **Note**: Ensure you use the `arn` property of your role, not the id!
	RoleArn interface{}
	// List of AWS services that you want SignalFx to monitor. Each element is a string designating an AWS service. Conflicts with `namespaceSyncRule`.
	Services interface{}
	// Used with `signalfx_aws_token_integration`. Use this property to specify the token.
	Token interface{}
}
