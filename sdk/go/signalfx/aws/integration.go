// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package aws

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-signalfx/sdk/v7/go/signalfx/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// AWS CloudWatch integrations for Splunk Observability Cloud. For help with this integration see [Monitoring Amazon Web Services](https://docs.splunk.com/observability/en/gdi/get-data-in/connect/aws/get-awstoc.html).
//
// This resource implements a part of a workflow. Use it with one of either `aws.ExternalIntegration` or `aws.TokenIntegration`.
//
// > **NOTE** When managing integrations, use a session token of an administrator to authenticate the Splunk Observability provider. See [Operations that require a session token for an administrator](https://dev.splunk.com/observability/docs/administration/authtokens#Operations-that-require-a-session-token-for-an-administrator).
//
// ## Example
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-aws/sdk/v4/go/aws/iam"
//	"github.com/pulumi/pulumi-signalfx/sdk/v7/go/signalfx/aws"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			// This resource returns an account id in `external_id`â€¦
//			awsMyteamExternal, err := aws.NewExternalIntegration(ctx, "awsMyteamExternal", nil)
//			if err != nil {
//				return err
//			}
//			// Make yourself an AWS IAM role here, use `signalfx_aws_external_integration.aws_myteam_external.external_id`
//			awsSfxRole, err := iam.NewRole(ctx, "awsSfxRole", nil)
//			if err != nil {
//				return err
//			}
//			_, err = aws.NewIntegration(ctx, "awsMyteam", &aws.IntegrationArgs{
//				Enabled:       pulumi.Bool(true),
//				IntegrationId: awsMyteamExternal.ID(),
//				ExternalId:    awsMyteamExternal.ExternalId,
//				RoleArn:       awsSfxRole.Arn,
//				Regions: pulumi.StringArray{
//					pulumi.String("us-east-1"),
//				},
//				PollRate:         pulumi.Int(300),
//				ImportCloudWatch: pulumi.Bool(true),
//				EnableAwsUsage:   pulumi.Bool(true),
//				CustomNamespaceSyncRules: aws.IntegrationCustomNamespaceSyncRuleArray{
//					&aws.IntegrationCustomNamespaceSyncRuleArgs{
//						DefaultAction: pulumi.String("Exclude"),
//						FilterAction:  pulumi.String("Include"),
//						FilterSource:  pulumi.String("filter('code', '200')"),
//						Namespace:     pulumi.String("my-custom-namespace"),
//					},
//				},
//				NamespaceSyncRules: aws.IntegrationNamespaceSyncRuleArray{
//					&aws.IntegrationNamespaceSyncRuleArgs{
//						DefaultAction: pulumi.String("Exclude"),
//						FilterAction:  pulumi.String("Include"),
//						FilterSource:  pulumi.String("filter('code', '200')"),
//						Namespace:     pulumi.String("AWS/EC2"),
//					},
//				},
//				MetricStatsToSyncs: aws.IntegrationMetricStatsToSyncArray{
//					&aws.IntegrationMetricStatsToSyncArgs{
//						Namespace: pulumi.String("AWS/EC2"),
//						Metric:    pulumi.String("NetworkPacketsIn"),
//						Stats: pulumi.StringArray{
//							pulumi.String("upper"),
//						},
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Arguments
//
// * `enableAwsUsage` - (Optional) Flag that controls how Splunk Observability Cloud imports usage metrics from AWS to use with AWS Cost Optimizer. If `true`, Splunk Observability Cloud imports the metrics.
// * `enableCheckLargeVolume` - (Optional) Controls how Splunk Observability Cloud checks for large amounts of data for this AWS integration. If `true`, Splunk Observability Cloud monitors the amount of data coming in from the integration.
// * `enableLogsSync` - (Optional) Enable the AWS logs synchronization. Note that this requires the inclusion of `"logs:DescribeLogGroups"`,  `"logs:DeleteSubscriptionFilter"`, `"logs:DescribeSubscriptionFilters"`, `"logs:PutSubscriptionFilter"`, and `"s3:GetBucketLogging"`,  `"s3:GetBucketNotification"`, `"s3:PutBucketNotification"` permissions. Additional permissions may be required to capture logs from specific AWS services.
// * `enabled` - (Required) Whether the integration is enabled.
// * `externalId` - (Required) The `externalId` property from one of a `aws.ExternalIntegration` or `aws.TokenIntegration`
// * `customCloudwatchNamespaces` - (Optional) List of custom AWS CloudWatch namespaces to monitor. Custom namespaces contain custom metrics that you define in AWS; Splunk Observability Cloud imports the metrics so you can monitor them.
// * `customNamespaceSyncRule` - (Optional) Each element controls the data collected by Splunk Observability Cloud for the specified namespace. Conflicts with the `customCloudwatchNamespaces` property.
//   - `defaultAction` - (Optional) Controls the Splunk Observability Cloud default behavior for processing data from an AWS namespace. Splunk Observability Cloud ignores this property unless you specify the `filterAction` and `filterSource` properties. If you do specify them, use this property to control how Splunk Observability Cloud treats data that doesn't match the filter. The available actions are one of `"Include"` or `"Exclude"`.
//   - `filterAction` - (Optional) Controls how Splunk Observability Cloud processes data from a custom AWS namespace. The available actions are one of `"Include"` or `"Exclude"`.
//   - `filterSource` - (Optional) Expression that selects the data that Splunk Observability Cloud should sync for the custom namespace associated with this sync rule. The expression uses the syntax defined for the SignalFlow `filter()` function; it can be any valid SignalFlow filter expression.
//   - `namespace` - (Required) An AWS custom namespace having custom AWS metrics that you want to sync with Splunk Observability Cloud. See the AWS documentation on publishing metrics for more information.
//
// * `importCloudWatch` - (Optional) Flag that controls how Splunk Observability Cloud imports Cloud Watch metrics. If true, Splunk Observability Cloud imports Cloud Watch metrics from AWS.
// * `integrationId` - (Required) The id of one of a `aws.ExternalIntegration` or `aws.TokenIntegration`.
// * `key` - (Optional) If you specify `authMethod = \"SecurityToken\"` in your request to create an AWS integration object, use this property to specify the key (this is typically equivalent to the `AWS_SECRET_ACCESS_KEY` environment variable).
// * `metricStatsToSync` - (Optional) Each element in the array is an object that contains an AWS namespace name, AWS metric name and a list of statistics that Splunk Observability Cloud collects for this metric. If you specify this property, Splunk Observability Cloud retrieves only specified AWS statistics when AWS metric streams are not used. When AWS metric streams are used this property specifies additional extended statistics to collect (please note that AWS metric streams API supports percentile stats only; other stats are ignored). If you don't specify this property, Splunk Observability Cloud retrieves the AWS standard set of statistics.
//   - `metric` - (Required) AWS metric that you want to pick statistics for
//   - `namespace` - (Required) An AWS namespace having AWS metric that you want to pick statistics for
//   - `stats` - (Required) AWS statistics you want to collect
//
// * `name` - (Required) Name of the integration.
// * `namedToken` - (Optional) Name of the org token to be used for data ingestion. If not specified then default access token is used.
// * `namespaceSyncRule` - (Optional) Each element in the array is an object that contains an AWS namespace name and a filter that controls the data that Splunk Observability Cloud collects for the namespace. Conflicts with the `services` property. If you don't specify either property, Splunk Observability Cloud syncs all data in all AWS namespaces.
//   - `defaultAction` - (Optional) Controls the Splunk Observability Cloud default behavior for processing data from an AWS namespace. Splunk Observability Cloud ignores this property unless you specify the `filterAction` and `filterSource` properties. If you do specify them, use this property to control how Splunk Observability Cloud treats data that doesn't match the filter. The available actions are one of `"Include"` or `"Exclude"`.
//   - `filterAction` - (Optional) Controls how Splunk Observability Cloud processes data from a custom AWS namespace. The available actions are one of `"Include"` or `"Exclude"`.
//   - `filterSource` - (Optional) Expression that selects the data that Splunk Observability Cloud should sync for the custom namespace associated with this sync rule. The expression uses the syntax defined for the SignalFlow `filter()` function; it can be any valid SignalFlow filter expression.
//   - `namespace` - (Required) An AWS custom namespace having custom AWS metrics that you want to sync with Splunk Observability Cloud. See `services` field description below for additional information.
//   - `pollRate` - (Optional) AWS poll rate (in seconds). Value between `60` and `600`. Default: `300`.
//   - `regions` - (Required) List of AWS regions that Splunk Observability Cloud should monitor. It cannot be empty.
//   - `roleArn` - (Optional) Role ARN that you add to an existing AWS integration object. **Note**: Ensure you use the `arn` property of your role, not the id!
//   - `services` - (Optional) List of AWS services that you want Splunk Observability Cloud to monitor. Each element is a string designating an AWS service. Can be an empty list to import data for all supported services. Conflicts with `namespaceSyncRule`. See [Amazon Web Services](https://docs.splunk.com/Observability/gdi/get-data-in/integrations.html#amazon-web-services) for a list of valid values.
//   - `syncCustomNamespacesOnly` - (Optional) Indicates that Splunk Observability Cloud should sync metrics and metadata from custom AWS namespaces only (see the `customNamespaceSyncRule` above). Defaults to `false`.
//   - `token` - (Optional) If you specify `authMethod = \"SecurityToken\"` in your request to create an AWS integration object, use this property to specify the token (this is typically equivalent to the `AWS_ACCESS_KEY_ID` environment variable).
//   - `useMetricStreamsSync` - (Optional) Enable the use of Amazon Cloudwatch Metric Streams for ingesting metrics.<br>
//     Note that this requires the inclusion of `"cloudwatch:ListMetricStreams"`,`"cloudwatch:GetMetricStream"`, `"cloudwatch:PutMetricStream"`, `"cloudwatch:DeleteMetricStream"`, `"cloudwatch:StartMetricStreams"`, `"cloudwatch:StopMetricStreams"` and `"iam:PassRole"` permissions.<br>
//     Note you need to deploy additional resources on your AWS account to enable CloudWatch metrics streaming. Select one of the [CloudFormation templates](https://docs.splunk.com/Observability/gdi/get-data-in/connect/aws/aws-cloudformation.html) to deploy all the required resources.
type Integration struct {
	pulumi.CustomResourceState

	// The mechanism used to authenticate with AWS. Use one of `signalfx_aws_external_integration` or
	// `signalfx_aws_token_integration` to define this
	AuthMethod pulumi.StringOutput `pulumi:"authMethod"`
	// List of custom AWS CloudWatch namespaces to monitor. Custom namespaces contain custom metrics that you define in AWS;
	// Splunk Observability imports the metrics so you can monitor them.
	CustomCloudwatchNamespaces pulumi.StringArrayOutput `pulumi:"customCloudwatchNamespaces"`
	// Each element controls the data collected by Splunk Observability for the specified namespace. If you specify this
	// property, Splunk Observability ignores values in the "custom_cloudwatch_namespaces" property.
	CustomNamespaceSyncRules IntegrationCustomNamespaceSyncRuleArrayOutput `pulumi:"customNamespaceSyncRules"`
	// Flag that controls how Splunk Observability imports usage metrics from AWS to use with AWS Cost Optimizer. If `true`,
	// Splunk Observability imports the metrics.
	EnableAwsUsage pulumi.BoolPtrOutput `pulumi:"enableAwsUsage"`
	// Controls how Splunk Observability checks for large amounts of data for this AWS integration. If true, Splunk
	// Observability monitors the amount of data coming in from the integration.
	EnableCheckLargeVolume pulumi.BoolPtrOutput `pulumi:"enableCheckLargeVolume"`
	// Enables AWS logs synchronization.
	EnableLogsSync pulumi.BoolOutput `pulumi:"enableLogsSync"`
	// Whether the integration is enabled or not
	Enabled pulumi.BoolOutput `pulumi:"enabled"`
	// Used with `signalfx_aws_external_integration`. Use this property to specify the external id.
	ExternalId pulumi.StringPtrOutput `pulumi:"externalId"`
	// Flag that controls how Splunk Observability imports Cloud Watch metrics. If true, Splunk Observability imports Cloud
	// Watch metrics from AWS.
	ImportCloudWatch pulumi.BoolPtrOutput `pulumi:"importCloudWatch"`
	// The ID of this integration
	IntegrationId pulumi.StringOutput `pulumi:"integrationId"`
	// Used with `signalfx_aws_token_integration`. Use this property to specify the token.
	Key pulumi.StringPtrOutput `pulumi:"key"`
	// Each element in the array is an object that contains an AWS namespace name, AWS metric name and a list of statistics
	// that Splunk Observability collects for this metric. If you specify this property, Splunk Observability retrieves only
	// specified AWS statistics. If you don't specify this property, Splunk Observability retrieves the AWS standard set of
	// statistics.
	MetricStatsToSyncs IntegrationMetricStatsToSyncArrayOutput `pulumi:"metricStatsToSyncs"`
	// Name of the integration. Please specify the name in `signalfx_aws_external_integration` or
	// `signalfx_aws_integration_token`
	Name pulumi.StringOutput `pulumi:"name"`
	// A named token to use for ingest
	NamedToken pulumi.StringPtrOutput `pulumi:"namedToken"`
	// Each element in the array is an object that contains an AWS namespace name and a filter that controls the data that
	// Splunk Observability collects for the namespace. If you specify this property, Splunk Observability ignores the values
	// in the AWS CloudWatch Integration Model "services" property. If you don't specify either property, Splunk Observability
	// syncs all data in all AWS namespaces.
	NamespaceSyncRules IntegrationNamespaceSyncRuleArrayOutput `pulumi:"namespaceSyncRules"`
	// AWS poll rate (in seconds). Between `60` and `600`.
	PollRate pulumi.IntPtrOutput `pulumi:"pollRate"`
	// List of AWS regions that Splunk Observability should monitor.
	Regions pulumi.StringArrayOutput `pulumi:"regions"`
	// Used with `signalfx_aws_external_integration`. Use this property to specify the AIM role ARN.
	RoleArn pulumi.StringPtrOutput `pulumi:"roleArn"`
	// List of AWS services that you want Splunk Observability to monitor. Each element is a string designating an AWS service.
	Services pulumi.StringArrayOutput `pulumi:"services"`
	// Indicates that Splunk Observability should sync metrics and metadata from custom AWS namespaces only (see the
	// `custom_namespace_sync_rule` field for details). Defaults to `false`.
	SyncCustomNamespacesOnly pulumi.BoolPtrOutput `pulumi:"syncCustomNamespacesOnly"`
	// Used with `signalfx_aws_token_integration`. Use this property to specify the token.
	Token pulumi.StringPtrOutput `pulumi:"token"`
	// Enables the use of Cloudwatch Metric Streams for metrics synchronization.
	UseMetricStreamsSync pulumi.BoolOutput `pulumi:"useMetricStreamsSync"`
}

// NewIntegration registers a new resource with the given unique name, arguments, and options.
func NewIntegration(ctx *pulumi.Context,
	name string, args *IntegrationArgs, opts ...pulumi.ResourceOption) (*Integration, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Enabled == nil {
		return nil, errors.New("invalid value for required argument 'Enabled'")
	}
	if args.IntegrationId == nil {
		return nil, errors.New("invalid value for required argument 'IntegrationId'")
	}
	if args.Regions == nil {
		return nil, errors.New("invalid value for required argument 'Regions'")
	}
	if args.ExternalId != nil {
		args.ExternalId = pulumi.ToSecret(args.ExternalId).(pulumi.StringPtrInput)
	}
	if args.Key != nil {
		args.Key = pulumi.ToSecret(args.Key).(pulumi.StringPtrInput)
	}
	secrets := pulumi.AdditionalSecretOutputs([]string{
		"externalId",
		"key",
	})
	opts = append(opts, secrets)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Integration
	err := ctx.RegisterResource("signalfx:aws/integration:Integration", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetIntegration gets an existing Integration resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetIntegration(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *IntegrationState, opts ...pulumi.ResourceOption) (*Integration, error) {
	var resource Integration
	err := ctx.ReadResource("signalfx:aws/integration:Integration", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Integration resources.
type integrationState struct {
	// The mechanism used to authenticate with AWS. Use one of `signalfx_aws_external_integration` or
	// `signalfx_aws_token_integration` to define this
	AuthMethod *string `pulumi:"authMethod"`
	// List of custom AWS CloudWatch namespaces to monitor. Custom namespaces contain custom metrics that you define in AWS;
	// Splunk Observability imports the metrics so you can monitor them.
	CustomCloudwatchNamespaces []string `pulumi:"customCloudwatchNamespaces"`
	// Each element controls the data collected by Splunk Observability for the specified namespace. If you specify this
	// property, Splunk Observability ignores values in the "custom_cloudwatch_namespaces" property.
	CustomNamespaceSyncRules []IntegrationCustomNamespaceSyncRule `pulumi:"customNamespaceSyncRules"`
	// Flag that controls how Splunk Observability imports usage metrics from AWS to use with AWS Cost Optimizer. If `true`,
	// Splunk Observability imports the metrics.
	EnableAwsUsage *bool `pulumi:"enableAwsUsage"`
	// Controls how Splunk Observability checks for large amounts of data for this AWS integration. If true, Splunk
	// Observability monitors the amount of data coming in from the integration.
	EnableCheckLargeVolume *bool `pulumi:"enableCheckLargeVolume"`
	// Enables AWS logs synchronization.
	EnableLogsSync *bool `pulumi:"enableLogsSync"`
	// Whether the integration is enabled or not
	Enabled *bool `pulumi:"enabled"`
	// Used with `signalfx_aws_external_integration`. Use this property to specify the external id.
	ExternalId *string `pulumi:"externalId"`
	// Flag that controls how Splunk Observability imports Cloud Watch metrics. If true, Splunk Observability imports Cloud
	// Watch metrics from AWS.
	ImportCloudWatch *bool `pulumi:"importCloudWatch"`
	// The ID of this integration
	IntegrationId *string `pulumi:"integrationId"`
	// Used with `signalfx_aws_token_integration`. Use this property to specify the token.
	Key *string `pulumi:"key"`
	// Each element in the array is an object that contains an AWS namespace name, AWS metric name and a list of statistics
	// that Splunk Observability collects for this metric. If you specify this property, Splunk Observability retrieves only
	// specified AWS statistics. If you don't specify this property, Splunk Observability retrieves the AWS standard set of
	// statistics.
	MetricStatsToSyncs []IntegrationMetricStatsToSync `pulumi:"metricStatsToSyncs"`
	// Name of the integration. Please specify the name in `signalfx_aws_external_integration` or
	// `signalfx_aws_integration_token`
	Name *string `pulumi:"name"`
	// A named token to use for ingest
	NamedToken *string `pulumi:"namedToken"`
	// Each element in the array is an object that contains an AWS namespace name and a filter that controls the data that
	// Splunk Observability collects for the namespace. If you specify this property, Splunk Observability ignores the values
	// in the AWS CloudWatch Integration Model "services" property. If you don't specify either property, Splunk Observability
	// syncs all data in all AWS namespaces.
	NamespaceSyncRules []IntegrationNamespaceSyncRule `pulumi:"namespaceSyncRules"`
	// AWS poll rate (in seconds). Between `60` and `600`.
	PollRate *int `pulumi:"pollRate"`
	// List of AWS regions that Splunk Observability should monitor.
	Regions []string `pulumi:"regions"`
	// Used with `signalfx_aws_external_integration`. Use this property to specify the AIM role ARN.
	RoleArn *string `pulumi:"roleArn"`
	// List of AWS services that you want Splunk Observability to monitor. Each element is a string designating an AWS service.
	Services []string `pulumi:"services"`
	// Indicates that Splunk Observability should sync metrics and metadata from custom AWS namespaces only (see the
	// `custom_namespace_sync_rule` field for details). Defaults to `false`.
	SyncCustomNamespacesOnly *bool `pulumi:"syncCustomNamespacesOnly"`
	// Used with `signalfx_aws_token_integration`. Use this property to specify the token.
	Token *string `pulumi:"token"`
	// Enables the use of Cloudwatch Metric Streams for metrics synchronization.
	UseMetricStreamsSync *bool `pulumi:"useMetricStreamsSync"`
}

type IntegrationState struct {
	// The mechanism used to authenticate with AWS. Use one of `signalfx_aws_external_integration` or
	// `signalfx_aws_token_integration` to define this
	AuthMethod pulumi.StringPtrInput
	// List of custom AWS CloudWatch namespaces to monitor. Custom namespaces contain custom metrics that you define in AWS;
	// Splunk Observability imports the metrics so you can monitor them.
	CustomCloudwatchNamespaces pulumi.StringArrayInput
	// Each element controls the data collected by Splunk Observability for the specified namespace. If you specify this
	// property, Splunk Observability ignores values in the "custom_cloudwatch_namespaces" property.
	CustomNamespaceSyncRules IntegrationCustomNamespaceSyncRuleArrayInput
	// Flag that controls how Splunk Observability imports usage metrics from AWS to use with AWS Cost Optimizer. If `true`,
	// Splunk Observability imports the metrics.
	EnableAwsUsage pulumi.BoolPtrInput
	// Controls how Splunk Observability checks for large amounts of data for this AWS integration. If true, Splunk
	// Observability monitors the amount of data coming in from the integration.
	EnableCheckLargeVolume pulumi.BoolPtrInput
	// Enables AWS logs synchronization.
	EnableLogsSync pulumi.BoolPtrInput
	// Whether the integration is enabled or not
	Enabled pulumi.BoolPtrInput
	// Used with `signalfx_aws_external_integration`. Use this property to specify the external id.
	ExternalId pulumi.StringPtrInput
	// Flag that controls how Splunk Observability imports Cloud Watch metrics. If true, Splunk Observability imports Cloud
	// Watch metrics from AWS.
	ImportCloudWatch pulumi.BoolPtrInput
	// The ID of this integration
	IntegrationId pulumi.StringPtrInput
	// Used with `signalfx_aws_token_integration`. Use this property to specify the token.
	Key pulumi.StringPtrInput
	// Each element in the array is an object that contains an AWS namespace name, AWS metric name and a list of statistics
	// that Splunk Observability collects for this metric. If you specify this property, Splunk Observability retrieves only
	// specified AWS statistics. If you don't specify this property, Splunk Observability retrieves the AWS standard set of
	// statistics.
	MetricStatsToSyncs IntegrationMetricStatsToSyncArrayInput
	// Name of the integration. Please specify the name in `signalfx_aws_external_integration` or
	// `signalfx_aws_integration_token`
	Name pulumi.StringPtrInput
	// A named token to use for ingest
	NamedToken pulumi.StringPtrInput
	// Each element in the array is an object that contains an AWS namespace name and a filter that controls the data that
	// Splunk Observability collects for the namespace. If you specify this property, Splunk Observability ignores the values
	// in the AWS CloudWatch Integration Model "services" property. If you don't specify either property, Splunk Observability
	// syncs all data in all AWS namespaces.
	NamespaceSyncRules IntegrationNamespaceSyncRuleArrayInput
	// AWS poll rate (in seconds). Between `60` and `600`.
	PollRate pulumi.IntPtrInput
	// List of AWS regions that Splunk Observability should monitor.
	Regions pulumi.StringArrayInput
	// Used with `signalfx_aws_external_integration`. Use this property to specify the AIM role ARN.
	RoleArn pulumi.StringPtrInput
	// List of AWS services that you want Splunk Observability to monitor. Each element is a string designating an AWS service.
	Services pulumi.StringArrayInput
	// Indicates that Splunk Observability should sync metrics and metadata from custom AWS namespaces only (see the
	// `custom_namespace_sync_rule` field for details). Defaults to `false`.
	SyncCustomNamespacesOnly pulumi.BoolPtrInput
	// Used with `signalfx_aws_token_integration`. Use this property to specify the token.
	Token pulumi.StringPtrInput
	// Enables the use of Cloudwatch Metric Streams for metrics synchronization.
	UseMetricStreamsSync pulumi.BoolPtrInput
}

func (IntegrationState) ElementType() reflect.Type {
	return reflect.TypeOf((*integrationState)(nil)).Elem()
}

type integrationArgs struct {
	// List of custom AWS CloudWatch namespaces to monitor. Custom namespaces contain custom metrics that you define in AWS;
	// Splunk Observability imports the metrics so you can monitor them.
	CustomCloudwatchNamespaces []string `pulumi:"customCloudwatchNamespaces"`
	// Each element controls the data collected by Splunk Observability for the specified namespace. If you specify this
	// property, Splunk Observability ignores values in the "custom_cloudwatch_namespaces" property.
	CustomNamespaceSyncRules []IntegrationCustomNamespaceSyncRule `pulumi:"customNamespaceSyncRules"`
	// Flag that controls how Splunk Observability imports usage metrics from AWS to use with AWS Cost Optimizer. If `true`,
	// Splunk Observability imports the metrics.
	EnableAwsUsage *bool `pulumi:"enableAwsUsage"`
	// Controls how Splunk Observability checks for large amounts of data for this AWS integration. If true, Splunk
	// Observability monitors the amount of data coming in from the integration.
	EnableCheckLargeVolume *bool `pulumi:"enableCheckLargeVolume"`
	// Enables AWS logs synchronization.
	EnableLogsSync *bool `pulumi:"enableLogsSync"`
	// Whether the integration is enabled or not
	Enabled bool `pulumi:"enabled"`
	// Used with `signalfx_aws_external_integration`. Use this property to specify the external id.
	ExternalId *string `pulumi:"externalId"`
	// Flag that controls how Splunk Observability imports Cloud Watch metrics. If true, Splunk Observability imports Cloud
	// Watch metrics from AWS.
	ImportCloudWatch *bool `pulumi:"importCloudWatch"`
	// The ID of this integration
	IntegrationId string `pulumi:"integrationId"`
	// Used with `signalfx_aws_token_integration`. Use this property to specify the token.
	Key *string `pulumi:"key"`
	// Each element in the array is an object that contains an AWS namespace name, AWS metric name and a list of statistics
	// that Splunk Observability collects for this metric. If you specify this property, Splunk Observability retrieves only
	// specified AWS statistics. If you don't specify this property, Splunk Observability retrieves the AWS standard set of
	// statistics.
	MetricStatsToSyncs []IntegrationMetricStatsToSync `pulumi:"metricStatsToSyncs"`
	// A named token to use for ingest
	NamedToken *string `pulumi:"namedToken"`
	// Each element in the array is an object that contains an AWS namespace name and a filter that controls the data that
	// Splunk Observability collects for the namespace. If you specify this property, Splunk Observability ignores the values
	// in the AWS CloudWatch Integration Model "services" property. If you don't specify either property, Splunk Observability
	// syncs all data in all AWS namespaces.
	NamespaceSyncRules []IntegrationNamespaceSyncRule `pulumi:"namespaceSyncRules"`
	// AWS poll rate (in seconds). Between `60` and `600`.
	PollRate *int `pulumi:"pollRate"`
	// List of AWS regions that Splunk Observability should monitor.
	Regions []string `pulumi:"regions"`
	// Used with `signalfx_aws_external_integration`. Use this property to specify the AIM role ARN.
	RoleArn *string `pulumi:"roleArn"`
	// List of AWS services that you want Splunk Observability to monitor. Each element is a string designating an AWS service.
	Services []string `pulumi:"services"`
	// Indicates that Splunk Observability should sync metrics and metadata from custom AWS namespaces only (see the
	// `custom_namespace_sync_rule` field for details). Defaults to `false`.
	SyncCustomNamespacesOnly *bool `pulumi:"syncCustomNamespacesOnly"`
	// Used with `signalfx_aws_token_integration`. Use this property to specify the token.
	Token *string `pulumi:"token"`
	// Enables the use of Cloudwatch Metric Streams for metrics synchronization.
	UseMetricStreamsSync *bool `pulumi:"useMetricStreamsSync"`
}

// The set of arguments for constructing a Integration resource.
type IntegrationArgs struct {
	// List of custom AWS CloudWatch namespaces to monitor. Custom namespaces contain custom metrics that you define in AWS;
	// Splunk Observability imports the metrics so you can monitor them.
	CustomCloudwatchNamespaces pulumi.StringArrayInput
	// Each element controls the data collected by Splunk Observability for the specified namespace. If you specify this
	// property, Splunk Observability ignores values in the "custom_cloudwatch_namespaces" property.
	CustomNamespaceSyncRules IntegrationCustomNamespaceSyncRuleArrayInput
	// Flag that controls how Splunk Observability imports usage metrics from AWS to use with AWS Cost Optimizer. If `true`,
	// Splunk Observability imports the metrics.
	EnableAwsUsage pulumi.BoolPtrInput
	// Controls how Splunk Observability checks for large amounts of data for this AWS integration. If true, Splunk
	// Observability monitors the amount of data coming in from the integration.
	EnableCheckLargeVolume pulumi.BoolPtrInput
	// Enables AWS logs synchronization.
	EnableLogsSync pulumi.BoolPtrInput
	// Whether the integration is enabled or not
	Enabled pulumi.BoolInput
	// Used with `signalfx_aws_external_integration`. Use this property to specify the external id.
	ExternalId pulumi.StringPtrInput
	// Flag that controls how Splunk Observability imports Cloud Watch metrics. If true, Splunk Observability imports Cloud
	// Watch metrics from AWS.
	ImportCloudWatch pulumi.BoolPtrInput
	// The ID of this integration
	IntegrationId pulumi.StringInput
	// Used with `signalfx_aws_token_integration`. Use this property to specify the token.
	Key pulumi.StringPtrInput
	// Each element in the array is an object that contains an AWS namespace name, AWS metric name and a list of statistics
	// that Splunk Observability collects for this metric. If you specify this property, Splunk Observability retrieves only
	// specified AWS statistics. If you don't specify this property, Splunk Observability retrieves the AWS standard set of
	// statistics.
	MetricStatsToSyncs IntegrationMetricStatsToSyncArrayInput
	// A named token to use for ingest
	NamedToken pulumi.StringPtrInput
	// Each element in the array is an object that contains an AWS namespace name and a filter that controls the data that
	// Splunk Observability collects for the namespace. If you specify this property, Splunk Observability ignores the values
	// in the AWS CloudWatch Integration Model "services" property. If you don't specify either property, Splunk Observability
	// syncs all data in all AWS namespaces.
	NamespaceSyncRules IntegrationNamespaceSyncRuleArrayInput
	// AWS poll rate (in seconds). Between `60` and `600`.
	PollRate pulumi.IntPtrInput
	// List of AWS regions that Splunk Observability should monitor.
	Regions pulumi.StringArrayInput
	// Used with `signalfx_aws_external_integration`. Use this property to specify the AIM role ARN.
	RoleArn pulumi.StringPtrInput
	// List of AWS services that you want Splunk Observability to monitor. Each element is a string designating an AWS service.
	Services pulumi.StringArrayInput
	// Indicates that Splunk Observability should sync metrics and metadata from custom AWS namespaces only (see the
	// `custom_namespace_sync_rule` field for details). Defaults to `false`.
	SyncCustomNamespacesOnly pulumi.BoolPtrInput
	// Used with `signalfx_aws_token_integration`. Use this property to specify the token.
	Token pulumi.StringPtrInput
	// Enables the use of Cloudwatch Metric Streams for metrics synchronization.
	UseMetricStreamsSync pulumi.BoolPtrInput
}

func (IntegrationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*integrationArgs)(nil)).Elem()
}

type IntegrationInput interface {
	pulumi.Input

	ToIntegrationOutput() IntegrationOutput
	ToIntegrationOutputWithContext(ctx context.Context) IntegrationOutput
}

func (*Integration) ElementType() reflect.Type {
	return reflect.TypeOf((**Integration)(nil)).Elem()
}

func (i *Integration) ToIntegrationOutput() IntegrationOutput {
	return i.ToIntegrationOutputWithContext(context.Background())
}

func (i *Integration) ToIntegrationOutputWithContext(ctx context.Context) IntegrationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IntegrationOutput)
}

// IntegrationArrayInput is an input type that accepts IntegrationArray and IntegrationArrayOutput values.
// You can construct a concrete instance of `IntegrationArrayInput` via:
//
//	IntegrationArray{ IntegrationArgs{...} }
type IntegrationArrayInput interface {
	pulumi.Input

	ToIntegrationArrayOutput() IntegrationArrayOutput
	ToIntegrationArrayOutputWithContext(context.Context) IntegrationArrayOutput
}

type IntegrationArray []IntegrationInput

func (IntegrationArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Integration)(nil)).Elem()
}

func (i IntegrationArray) ToIntegrationArrayOutput() IntegrationArrayOutput {
	return i.ToIntegrationArrayOutputWithContext(context.Background())
}

func (i IntegrationArray) ToIntegrationArrayOutputWithContext(ctx context.Context) IntegrationArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IntegrationArrayOutput)
}

// IntegrationMapInput is an input type that accepts IntegrationMap and IntegrationMapOutput values.
// You can construct a concrete instance of `IntegrationMapInput` via:
//
//	IntegrationMap{ "key": IntegrationArgs{...} }
type IntegrationMapInput interface {
	pulumi.Input

	ToIntegrationMapOutput() IntegrationMapOutput
	ToIntegrationMapOutputWithContext(context.Context) IntegrationMapOutput
}

type IntegrationMap map[string]IntegrationInput

func (IntegrationMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Integration)(nil)).Elem()
}

func (i IntegrationMap) ToIntegrationMapOutput() IntegrationMapOutput {
	return i.ToIntegrationMapOutputWithContext(context.Background())
}

func (i IntegrationMap) ToIntegrationMapOutputWithContext(ctx context.Context) IntegrationMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IntegrationMapOutput)
}

type IntegrationOutput struct{ *pulumi.OutputState }

func (IntegrationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Integration)(nil)).Elem()
}

func (o IntegrationOutput) ToIntegrationOutput() IntegrationOutput {
	return o
}

func (o IntegrationOutput) ToIntegrationOutputWithContext(ctx context.Context) IntegrationOutput {
	return o
}

// The mechanism used to authenticate with AWS. Use one of `signalfx_aws_external_integration` or
// `signalfx_aws_token_integration` to define this
func (o IntegrationOutput) AuthMethod() pulumi.StringOutput {
	return o.ApplyT(func(v *Integration) pulumi.StringOutput { return v.AuthMethod }).(pulumi.StringOutput)
}

// List of custom AWS CloudWatch namespaces to monitor. Custom namespaces contain custom metrics that you define in AWS;
// Splunk Observability imports the metrics so you can monitor them.
func (o IntegrationOutput) CustomCloudwatchNamespaces() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Integration) pulumi.StringArrayOutput { return v.CustomCloudwatchNamespaces }).(pulumi.StringArrayOutput)
}

// Each element controls the data collected by Splunk Observability for the specified namespace. If you specify this
// property, Splunk Observability ignores values in the "custom_cloudwatch_namespaces" property.
func (o IntegrationOutput) CustomNamespaceSyncRules() IntegrationCustomNamespaceSyncRuleArrayOutput {
	return o.ApplyT(func(v *Integration) IntegrationCustomNamespaceSyncRuleArrayOutput { return v.CustomNamespaceSyncRules }).(IntegrationCustomNamespaceSyncRuleArrayOutput)
}

// Flag that controls how Splunk Observability imports usage metrics from AWS to use with AWS Cost Optimizer. If `true`,
// Splunk Observability imports the metrics.
func (o IntegrationOutput) EnableAwsUsage() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Integration) pulumi.BoolPtrOutput { return v.EnableAwsUsage }).(pulumi.BoolPtrOutput)
}

// Controls how Splunk Observability checks for large amounts of data for this AWS integration. If true, Splunk
// Observability monitors the amount of data coming in from the integration.
func (o IntegrationOutput) EnableCheckLargeVolume() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Integration) pulumi.BoolPtrOutput { return v.EnableCheckLargeVolume }).(pulumi.BoolPtrOutput)
}

// Enables AWS logs synchronization.
func (o IntegrationOutput) EnableLogsSync() pulumi.BoolOutput {
	return o.ApplyT(func(v *Integration) pulumi.BoolOutput { return v.EnableLogsSync }).(pulumi.BoolOutput)
}

// Whether the integration is enabled or not
func (o IntegrationOutput) Enabled() pulumi.BoolOutput {
	return o.ApplyT(func(v *Integration) pulumi.BoolOutput { return v.Enabled }).(pulumi.BoolOutput)
}

// Used with `signalfx_aws_external_integration`. Use this property to specify the external id.
func (o IntegrationOutput) ExternalId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Integration) pulumi.StringPtrOutput { return v.ExternalId }).(pulumi.StringPtrOutput)
}

// Flag that controls how Splunk Observability imports Cloud Watch metrics. If true, Splunk Observability imports Cloud
// Watch metrics from AWS.
func (o IntegrationOutput) ImportCloudWatch() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Integration) pulumi.BoolPtrOutput { return v.ImportCloudWatch }).(pulumi.BoolPtrOutput)
}

// The ID of this integration
func (o IntegrationOutput) IntegrationId() pulumi.StringOutput {
	return o.ApplyT(func(v *Integration) pulumi.StringOutput { return v.IntegrationId }).(pulumi.StringOutput)
}

// Used with `signalfx_aws_token_integration`. Use this property to specify the token.
func (o IntegrationOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Integration) pulumi.StringPtrOutput { return v.Key }).(pulumi.StringPtrOutput)
}

// Each element in the array is an object that contains an AWS namespace name, AWS metric name and a list of statistics
// that Splunk Observability collects for this metric. If you specify this property, Splunk Observability retrieves only
// specified AWS statistics. If you don't specify this property, Splunk Observability retrieves the AWS standard set of
// statistics.
func (o IntegrationOutput) MetricStatsToSyncs() IntegrationMetricStatsToSyncArrayOutput {
	return o.ApplyT(func(v *Integration) IntegrationMetricStatsToSyncArrayOutput { return v.MetricStatsToSyncs }).(IntegrationMetricStatsToSyncArrayOutput)
}

// Name of the integration. Please specify the name in `signalfx_aws_external_integration` or
// `signalfx_aws_integration_token`
func (o IntegrationOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Integration) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// A named token to use for ingest
func (o IntegrationOutput) NamedToken() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Integration) pulumi.StringPtrOutput { return v.NamedToken }).(pulumi.StringPtrOutput)
}

// Each element in the array is an object that contains an AWS namespace name and a filter that controls the data that
// Splunk Observability collects for the namespace. If you specify this property, Splunk Observability ignores the values
// in the AWS CloudWatch Integration Model "services" property. If you don't specify either property, Splunk Observability
// syncs all data in all AWS namespaces.
func (o IntegrationOutput) NamespaceSyncRules() IntegrationNamespaceSyncRuleArrayOutput {
	return o.ApplyT(func(v *Integration) IntegrationNamespaceSyncRuleArrayOutput { return v.NamespaceSyncRules }).(IntegrationNamespaceSyncRuleArrayOutput)
}

// AWS poll rate (in seconds). Between `60` and `600`.
func (o IntegrationOutput) PollRate() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Integration) pulumi.IntPtrOutput { return v.PollRate }).(pulumi.IntPtrOutput)
}

// List of AWS regions that Splunk Observability should monitor.
func (o IntegrationOutput) Regions() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Integration) pulumi.StringArrayOutput { return v.Regions }).(pulumi.StringArrayOutput)
}

// Used with `signalfx_aws_external_integration`. Use this property to specify the AIM role ARN.
func (o IntegrationOutput) RoleArn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Integration) pulumi.StringPtrOutput { return v.RoleArn }).(pulumi.StringPtrOutput)
}

// List of AWS services that you want Splunk Observability to monitor. Each element is a string designating an AWS service.
func (o IntegrationOutput) Services() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Integration) pulumi.StringArrayOutput { return v.Services }).(pulumi.StringArrayOutput)
}

// Indicates that Splunk Observability should sync metrics and metadata from custom AWS namespaces only (see the
// `custom_namespace_sync_rule` field for details). Defaults to `false`.
func (o IntegrationOutput) SyncCustomNamespacesOnly() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Integration) pulumi.BoolPtrOutput { return v.SyncCustomNamespacesOnly }).(pulumi.BoolPtrOutput)
}

// Used with `signalfx_aws_token_integration`. Use this property to specify the token.
func (o IntegrationOutput) Token() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Integration) pulumi.StringPtrOutput { return v.Token }).(pulumi.StringPtrOutput)
}

// Enables the use of Cloudwatch Metric Streams for metrics synchronization.
func (o IntegrationOutput) UseMetricStreamsSync() pulumi.BoolOutput {
	return o.ApplyT(func(v *Integration) pulumi.BoolOutput { return v.UseMetricStreamsSync }).(pulumi.BoolOutput)
}

type IntegrationArrayOutput struct{ *pulumi.OutputState }

func (IntegrationArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Integration)(nil)).Elem()
}

func (o IntegrationArrayOutput) ToIntegrationArrayOutput() IntegrationArrayOutput {
	return o
}

func (o IntegrationArrayOutput) ToIntegrationArrayOutputWithContext(ctx context.Context) IntegrationArrayOutput {
	return o
}

func (o IntegrationArrayOutput) Index(i pulumi.IntInput) IntegrationOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Integration {
		return vs[0].([]*Integration)[vs[1].(int)]
	}).(IntegrationOutput)
}

type IntegrationMapOutput struct{ *pulumi.OutputState }

func (IntegrationMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Integration)(nil)).Elem()
}

func (o IntegrationMapOutput) ToIntegrationMapOutput() IntegrationMapOutput {
	return o
}

func (o IntegrationMapOutput) ToIntegrationMapOutputWithContext(ctx context.Context) IntegrationMapOutput {
	return o
}

func (o IntegrationMapOutput) MapIndex(k pulumi.StringInput) IntegrationOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Integration {
		return vs[0].(map[string]*Integration)[vs[1].(string)]
	}).(IntegrationOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*IntegrationInput)(nil)).Elem(), &Integration{})
	pulumi.RegisterInputType(reflect.TypeOf((*IntegrationArrayInput)(nil)).Elem(), IntegrationArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*IntegrationMapInput)(nil)).Elem(), IntegrationMap{})
	pulumi.RegisterOutputType(IntegrationOutput{})
	pulumi.RegisterOutputType(IntegrationArrayOutput{})
	pulumi.RegisterOutputType(IntegrationMapOutput{})
}
