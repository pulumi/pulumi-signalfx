// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package aws

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-signalfx/sdk/v7/go/signalfx/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Splunk Observability AWS CloudWatch integrations using Role ARNs. For help with this integration see [Connect to AWS CloudWatch](https://docs.splunk.com/observability/en/gdi/get-data-in/connect/aws/aws-apiconfig.html).
//
// > **NOTE** When managing integrations, use a session token of an administrator to authenticate the Splunk Observability provider. See [Operations that require a session token for an administrator](https://dev.splunk.com/observability/docs/administration/authtokens#Operations-that-require-a-session-token-for-an-administrator).
//
// > **WARNING** This resource implements part of a workflow. Use it with `aws.Integration`. Check with Splunk support for your realm's AWS account id.
//
// ## Example
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-aws/sdk/v4/go/aws/iam"
//	"github.com/pulumi/pulumi-signalfx/sdk/v7/go/signalfx/aws"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			awsMyteamExtern, err := aws.NewExternalIntegration(ctx, "awsMyteamExtern", nil)
//			if err != nil {
//				return err
//			}
//			signalfxAssumePolicy := iam.GetPolicyDocumentOutput(ctx, iam.GetPolicyDocumentOutputArgs{
//				Statements: iam.GetPolicyDocumentStatementArray{
//					&iam.GetPolicyDocumentStatementArgs{
//						Actions: pulumi.StringArray{
//							pulumi.String("sts:AssumeRole"),
//						},
//						Principals: iam.GetPolicyDocumentStatementPrincipalArray{
//							&iam.GetPolicyDocumentStatementPrincipalArgs{
//								Type: pulumi.String("AWS"),
//								Identifiers: pulumi.StringArray{
//									awsMyteamExtern.SignalfxAwsAccount,
//								},
//							},
//						},
//						Conditions: iam.GetPolicyDocumentStatementConditionArray{
//							&iam.GetPolicyDocumentStatementConditionArgs{
//								Test:     pulumi.String("StringEquals"),
//								Variable: pulumi.String("sts:ExternalId"),
//								Values: pulumi.StringArray{
//									awsMyteamExtern.ExternalId,
//								},
//							},
//						},
//					},
//				},
//			}, nil)
//			awsSplunkRole, err := iam.NewRole(ctx, "awsSplunkRole", &iam.RoleArgs{
//				Description: pulumi.String("Splunk Observability Cloud integration to read out data and send it to signalfxs aws account"),
//				AssumeRolePolicy: signalfxAssumePolicy.ApplyT(func(signalfxAssumePolicy iam.GetPolicyDocumentResult) (*string, error) {
//					return &signalfxAssumePolicy.Json, nil
//				}).(pulumi.StringPtrOutput),
//			})
//			if err != nil {
//				return err
//			}
//			awsSplunkPolicy, err := iam.NewPolicy(ctx, "awsSplunkPolicy", &iam.PolicyArgs{
//				Description: pulumi.String("AWS permissions required by the Splunk Observability Cloud"),
//				Policy: pulumi.Any(`{
//	  "Version": "2012-10-17",
//	  "Statement": [
//	    {
//	      "Effect": "Allow",
//	      "Action": [
//	        "apigateway:GET",
//	        "autoscaling:DescribeAutoScalingGroups",
//	        "cloudfront:GetDistributionConfig",
//	        "cloudfront:ListDistributions",
//	        "cloudfront:ListTagsForResource",
//	        "cloudwatch:DescribeAlarms",
//	        "cloudwatch:GetMetricData",
//	        "cloudwatch:GetMetricStatistics",
//	        "cloudwatch:ListMetrics",
//	        "directconnect:DescribeConnections",
//	        "dynamodb:DescribeTable",
//	        "dynamodb:ListTables",
//	        "dynamodb:ListTagsOfResource",
//	        "ec2:DescribeInstances",
//	        "ec2:DescribeInstanceStatus",
//	        "ec2:DescribeRegions",
//	        "ec2:DescribeReservedInstances",
//	        "ec2:DescribeReservedInstancesModifications",
//	        "ec2:DescribeTags",
//	        "ec2:DescribeVolumes",
//	        "ecs:DescribeClusters",
//	        "ecs:DescribeServices",
//	        "ecs:DescribeTasks",
//	        "ecs:ListClusters",
//	        "ecs:ListServices",
//	        "ecs:ListTagsForResource",
//	        "ecs:ListTaskDefinitions",
//	        "ecs:ListTasks",
//	        "elasticache:DescribeCacheClusters",
//	        "elasticloadbalancing:DescribeLoadBalancerAttributes",
//	        "elasticloadbalancing:DescribeLoadBalancers",
//	        "elasticloadbalancing:DescribeTags",
//	        "elasticloadbalancing:DescribeTargetGroups",
//	        "elasticmapreduce:DescribeCluster",
//	        "elasticmapreduce:ListClusters",
//	        "es:DescribeElasticsearchDomain",
//	        "es:ListDomainNames",
//	        "kinesis:DescribeStream",
//	        "kinesis:ListShards",
//	        "kinesis:ListStreams",
//	        "kinesis:ListTagsForStream",
//	        "lambda:GetAlias",
//	        "lambda:ListFunctions",
//	        "lambda:ListTags",
//	        "logs:DeleteSubscriptionFilter",
//	        "logs:DescribeLogGroups",
//	        "logs:DescribeSubscriptionFilters",
//	        "logs:PutSubscriptionFilter",
//	        "organizations:DescribeOrganization",
//	        "rds:DescribeDBClusters",
//	        "rds:DescribeDBInstances",
//	        "rds:ListTagsForResource",
//	        "redshift:DescribeClusters",
//	        "redshift:DescribeLoggingStatus",
//	        "s3:GetBucketLocation",
//	        "s3:GetBucketLogging",
//	        "s3:GetBucketNotification",
//	        "s3:GetBucketTagging",
//	        "s3:ListAllMyBuckets",
//	        "s3:ListBucket",
//	        "s3:PutBucketNotification",
//	        "sqs:GetQueueAttributes",
//	        "sqs:ListQueues",
//	        "sqs:ListQueueTags",
//	        "states:ListStateMachines",
//	        "tag:GetResources",
//	        "workspaces:DescribeWorkspaces"
//	      ],
//	      "Resource": "*"
//	    }
//	  ]
//	}
//
// `),
//
//			})
//			if err != nil {
//				return err
//			}
//			_, err = iam.NewRolePolicyAttachment(ctx, "splunkRolePolicyAttach", &iam.RolePolicyAttachmentArgs{
//				Role:      awsSplunkRole.Name,
//				PolicyArn: awsSplunkPolicy.Arn,
//			})
//			if err != nil {
//				return err
//			}
//			_, err = aws.NewIntegration(ctx, "awsMyteam", &aws.IntegrationArgs{
//				Enabled:       pulumi.Bool(true),
//				IntegrationId: awsMyteamExtern.ID(),
//				ExternalId:    awsMyteamExtern.ExternalId,
//				RoleArn:       awsSplunkRole.Arn,
//				Regions: pulumi.StringArray{
//					pulumi.String("us-east-1"),
//				},
//				PollRate:         pulumi.Int(300),
//				ImportCloudWatch: pulumi.Bool(true),
//				EnableAwsUsage:   pulumi.Bool(true),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Arguments
//
// * `name` - (Required) The name of this integration
//
// ## Attributes
//
// In addition to all arguments above, the following attributes are exported:
//
// * `id` - The ID of this integration, used with `aws.Integration`
// * `externalId` - The external ID to use with your IAM role and with `aws.Integration`.
// * `signalfxAwsAccount` - The AWS Account ARN to use with your policies/roles, provided by Splunk Observability Cloud.
type ExternalIntegration struct {
	pulumi.CustomResourceState

	// The AWS external ID generated by Splunk Observability to use with an AWS integration.
	ExternalId pulumi.StringOutput `pulumi:"externalId"`
	// Name of the integration
	Name pulumi.StringOutput `pulumi:"name"`
	// The Splunk Observability AWS account ID to use with an AWS role.
	SignalfxAwsAccount pulumi.StringOutput `pulumi:"signalfxAwsAccount"`
}

// NewExternalIntegration registers a new resource with the given unique name, arguments, and options.
func NewExternalIntegration(ctx *pulumi.Context,
	name string, args *ExternalIntegrationArgs, opts ...pulumi.ResourceOption) (*ExternalIntegration, error) {
	if args == nil {
		args = &ExternalIntegrationArgs{}
	}

	secrets := pulumi.AdditionalSecretOutputs([]string{
		"externalId",
		"signalfxAwsAccount",
	})
	opts = append(opts, secrets)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource ExternalIntegration
	err := ctx.RegisterResource("signalfx:aws/externalIntegration:ExternalIntegration", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetExternalIntegration gets an existing ExternalIntegration resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetExternalIntegration(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ExternalIntegrationState, opts ...pulumi.ResourceOption) (*ExternalIntegration, error) {
	var resource ExternalIntegration
	err := ctx.ReadResource("signalfx:aws/externalIntegration:ExternalIntegration", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ExternalIntegration resources.
type externalIntegrationState struct {
	// The AWS external ID generated by Splunk Observability to use with an AWS integration.
	ExternalId *string `pulumi:"externalId"`
	// Name of the integration
	Name *string `pulumi:"name"`
	// The Splunk Observability AWS account ID to use with an AWS role.
	SignalfxAwsAccount *string `pulumi:"signalfxAwsAccount"`
}

type ExternalIntegrationState struct {
	// The AWS external ID generated by Splunk Observability to use with an AWS integration.
	ExternalId pulumi.StringPtrInput
	// Name of the integration
	Name pulumi.StringPtrInput
	// The Splunk Observability AWS account ID to use with an AWS role.
	SignalfxAwsAccount pulumi.StringPtrInput
}

func (ExternalIntegrationState) ElementType() reflect.Type {
	return reflect.TypeOf((*externalIntegrationState)(nil)).Elem()
}

type externalIntegrationArgs struct {
	// Name of the integration
	Name *string `pulumi:"name"`
}

// The set of arguments for constructing a ExternalIntegration resource.
type ExternalIntegrationArgs struct {
	// Name of the integration
	Name pulumi.StringPtrInput
}

func (ExternalIntegrationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*externalIntegrationArgs)(nil)).Elem()
}

type ExternalIntegrationInput interface {
	pulumi.Input

	ToExternalIntegrationOutput() ExternalIntegrationOutput
	ToExternalIntegrationOutputWithContext(ctx context.Context) ExternalIntegrationOutput
}

func (*ExternalIntegration) ElementType() reflect.Type {
	return reflect.TypeOf((**ExternalIntegration)(nil)).Elem()
}

func (i *ExternalIntegration) ToExternalIntegrationOutput() ExternalIntegrationOutput {
	return i.ToExternalIntegrationOutputWithContext(context.Background())
}

func (i *ExternalIntegration) ToExternalIntegrationOutputWithContext(ctx context.Context) ExternalIntegrationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExternalIntegrationOutput)
}

// ExternalIntegrationArrayInput is an input type that accepts ExternalIntegrationArray and ExternalIntegrationArrayOutput values.
// You can construct a concrete instance of `ExternalIntegrationArrayInput` via:
//
//	ExternalIntegrationArray{ ExternalIntegrationArgs{...} }
type ExternalIntegrationArrayInput interface {
	pulumi.Input

	ToExternalIntegrationArrayOutput() ExternalIntegrationArrayOutput
	ToExternalIntegrationArrayOutputWithContext(context.Context) ExternalIntegrationArrayOutput
}

type ExternalIntegrationArray []ExternalIntegrationInput

func (ExternalIntegrationArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ExternalIntegration)(nil)).Elem()
}

func (i ExternalIntegrationArray) ToExternalIntegrationArrayOutput() ExternalIntegrationArrayOutput {
	return i.ToExternalIntegrationArrayOutputWithContext(context.Background())
}

func (i ExternalIntegrationArray) ToExternalIntegrationArrayOutputWithContext(ctx context.Context) ExternalIntegrationArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExternalIntegrationArrayOutput)
}

// ExternalIntegrationMapInput is an input type that accepts ExternalIntegrationMap and ExternalIntegrationMapOutput values.
// You can construct a concrete instance of `ExternalIntegrationMapInput` via:
//
//	ExternalIntegrationMap{ "key": ExternalIntegrationArgs{...} }
type ExternalIntegrationMapInput interface {
	pulumi.Input

	ToExternalIntegrationMapOutput() ExternalIntegrationMapOutput
	ToExternalIntegrationMapOutputWithContext(context.Context) ExternalIntegrationMapOutput
}

type ExternalIntegrationMap map[string]ExternalIntegrationInput

func (ExternalIntegrationMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ExternalIntegration)(nil)).Elem()
}

func (i ExternalIntegrationMap) ToExternalIntegrationMapOutput() ExternalIntegrationMapOutput {
	return i.ToExternalIntegrationMapOutputWithContext(context.Background())
}

func (i ExternalIntegrationMap) ToExternalIntegrationMapOutputWithContext(ctx context.Context) ExternalIntegrationMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExternalIntegrationMapOutput)
}

type ExternalIntegrationOutput struct{ *pulumi.OutputState }

func (ExternalIntegrationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ExternalIntegration)(nil)).Elem()
}

func (o ExternalIntegrationOutput) ToExternalIntegrationOutput() ExternalIntegrationOutput {
	return o
}

func (o ExternalIntegrationOutput) ToExternalIntegrationOutputWithContext(ctx context.Context) ExternalIntegrationOutput {
	return o
}

// The AWS external ID generated by Splunk Observability to use with an AWS integration.
func (o ExternalIntegrationOutput) ExternalId() pulumi.StringOutput {
	return o.ApplyT(func(v *ExternalIntegration) pulumi.StringOutput { return v.ExternalId }).(pulumi.StringOutput)
}

// Name of the integration
func (o ExternalIntegrationOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *ExternalIntegration) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The Splunk Observability AWS account ID to use with an AWS role.
func (o ExternalIntegrationOutput) SignalfxAwsAccount() pulumi.StringOutput {
	return o.ApplyT(func(v *ExternalIntegration) pulumi.StringOutput { return v.SignalfxAwsAccount }).(pulumi.StringOutput)
}

type ExternalIntegrationArrayOutput struct{ *pulumi.OutputState }

func (ExternalIntegrationArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ExternalIntegration)(nil)).Elem()
}

func (o ExternalIntegrationArrayOutput) ToExternalIntegrationArrayOutput() ExternalIntegrationArrayOutput {
	return o
}

func (o ExternalIntegrationArrayOutput) ToExternalIntegrationArrayOutputWithContext(ctx context.Context) ExternalIntegrationArrayOutput {
	return o
}

func (o ExternalIntegrationArrayOutput) Index(i pulumi.IntInput) ExternalIntegrationOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ExternalIntegration {
		return vs[0].([]*ExternalIntegration)[vs[1].(int)]
	}).(ExternalIntegrationOutput)
}

type ExternalIntegrationMapOutput struct{ *pulumi.OutputState }

func (ExternalIntegrationMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ExternalIntegration)(nil)).Elem()
}

func (o ExternalIntegrationMapOutput) ToExternalIntegrationMapOutput() ExternalIntegrationMapOutput {
	return o
}

func (o ExternalIntegrationMapOutput) ToExternalIntegrationMapOutputWithContext(ctx context.Context) ExternalIntegrationMapOutput {
	return o
}

func (o ExternalIntegrationMapOutput) MapIndex(k pulumi.StringInput) ExternalIntegrationOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ExternalIntegration {
		return vs[0].(map[string]*ExternalIntegration)[vs[1].(string)]
	}).(ExternalIntegrationOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ExternalIntegrationInput)(nil)).Elem(), &ExternalIntegration{})
	pulumi.RegisterInputType(reflect.TypeOf((*ExternalIntegrationArrayInput)(nil)).Elem(), ExternalIntegrationArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ExternalIntegrationMapInput)(nil)).Elem(), ExternalIntegrationMap{})
	pulumi.RegisterOutputType(ExternalIntegrationOutput{})
	pulumi.RegisterOutputType(ExternalIntegrationArrayOutput{})
	pulumi.RegisterOutputType(ExternalIntegrationMapOutput{})
}
