// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package jira

import (
	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// SignalFx Jira integrations. For help with this integration see [Integration with Jira](https://docs.signalfx.com/en/latest/admin-guide/integrate-notifications.html#integrate-with-jira).
// 
// **Note:** When managing integrations you'll need to use an admin token to authenticate the SignalFx provider. Otherwise you'll receive a 4xx error.
//
// > This content is derived from https://github.com/terraform-providers/terraform-provider-signalfx/blob/master/website/docs/r/jira_integration.html.markdown.
type Integration struct {
	s *pulumi.ResourceState
}

// NewIntegration registers a new resource with the given unique name, arguments, and options.
func NewIntegration(ctx *pulumi.Context,
	name string, args *IntegrationArgs, opts ...pulumi.ResourceOpt) (*Integration, error) {
	if args == nil || args.AssigneeName == nil {
		return nil, errors.New("missing required argument 'AssigneeName'")
	}
	if args == nil || args.AuthMethod == nil {
		return nil, errors.New("missing required argument 'AuthMethod'")
	}
	if args == nil || args.BaseUrl == nil {
		return nil, errors.New("missing required argument 'BaseUrl'")
	}
	if args == nil || args.Enabled == nil {
		return nil, errors.New("missing required argument 'Enabled'")
	}
	if args == nil || args.IssueType == nil {
		return nil, errors.New("missing required argument 'IssueType'")
	}
	if args == nil || args.ProjectKey == nil {
		return nil, errors.New("missing required argument 'ProjectKey'")
	}
	inputs := make(map[string]interface{})
	if args == nil {
		inputs["apiToken"] = nil
		inputs["assigneeDisplayName"] = nil
		inputs["assigneeName"] = nil
		inputs["authMethod"] = nil
		inputs["baseUrl"] = nil
		inputs["enabled"] = nil
		inputs["issueType"] = nil
		inputs["name"] = nil
		inputs["password"] = nil
		inputs["projectKey"] = nil
		inputs["userEmail"] = nil
		inputs["username"] = nil
	} else {
		inputs["apiToken"] = args.ApiToken
		inputs["assigneeDisplayName"] = args.AssigneeDisplayName
		inputs["assigneeName"] = args.AssigneeName
		inputs["authMethod"] = args.AuthMethod
		inputs["baseUrl"] = args.BaseUrl
		inputs["enabled"] = args.Enabled
		inputs["issueType"] = args.IssueType
		inputs["name"] = args.Name
		inputs["password"] = args.Password
		inputs["projectKey"] = args.ProjectKey
		inputs["userEmail"] = args.UserEmail
		inputs["username"] = args.Username
	}
	s, err := ctx.RegisterResource("signalfx:jira/integration:Integration", name, true, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &Integration{s: s}, nil
}

// GetIntegration gets an existing Integration resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetIntegration(ctx *pulumi.Context,
	name string, id pulumi.ID, state *IntegrationState, opts ...pulumi.ResourceOpt) (*Integration, error) {
	inputs := make(map[string]interface{})
	if state != nil {
		inputs["apiToken"] = state.ApiToken
		inputs["assigneeDisplayName"] = state.AssigneeDisplayName
		inputs["assigneeName"] = state.AssigneeName
		inputs["authMethod"] = state.AuthMethod
		inputs["baseUrl"] = state.BaseUrl
		inputs["enabled"] = state.Enabled
		inputs["issueType"] = state.IssueType
		inputs["name"] = state.Name
		inputs["password"] = state.Password
		inputs["projectKey"] = state.ProjectKey
		inputs["userEmail"] = state.UserEmail
		inputs["username"] = state.Username
	}
	s, err := ctx.ReadResource("signalfx:jira/integration:Integration", name, id, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &Integration{s: s}, nil
}

// URN is this resource's unique name assigned by Pulumi.
func (r *Integration) URN() *pulumi.URNOutput {
	return r.s.URN()
}

// ID is this resource's unique identifier assigned by its provider.
func (r *Integration) ID() *pulumi.IDOutput {
	return r.s.ID()
}

// The API token for the user email
func (r *Integration) ApiToken() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["apiToken"])
}

// Jira display name for the assignee.
func (r *Integration) AssigneeDisplayName() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["assigneeDisplayName"])
}

// Jira user name for the assignee.
func (r *Integration) AssigneeName() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["assigneeName"])
}

// Authentication method used when creating the Jira integration. One of `EmailAndToken` (using `userEmail` and `apiToken`) or `UsernameAndPassword` (using `username` and `password`).
func (r *Integration) AuthMethod() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["authMethod"])
}

// Base URL of the Jira instance that's integrated with SignalFx.
func (r *Integration) BaseUrl() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["baseUrl"])
}

// Whether the integration is enabled.
func (r *Integration) Enabled() *pulumi.BoolOutput {
	return (*pulumi.BoolOutput)(r.s.State["enabled"])
}

// Issue type (for example, Story) for tickets that Jira creates for detector notifications. SignalFx validates issue types, so you must specify a type that's valid for the Jira project specified in `projectKey`.
func (r *Integration) IssueType() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["issueType"])
}

// Name of the integration.
func (r *Integration) Name() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["name"])
}

// Password used to authenticate the Jira integration.
func (r *Integration) Password() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["password"])
}

// Jira key of an existing project. When Jira creates a new ticket for a detector notification, the ticket is assigned to this project.
func (r *Integration) ProjectKey() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["projectKey"])
}

// Email address used to authenticate the Jira integration.
func (r *Integration) UserEmail() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["userEmail"])
}

// User name used to authenticate the Jira integration.
func (r *Integration) Username() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["username"])
}

// Input properties used for looking up and filtering Integration resources.
type IntegrationState struct {
	// The API token for the user email
	ApiToken interface{}
	// Jira display name for the assignee.
	AssigneeDisplayName interface{}
	// Jira user name for the assignee.
	AssigneeName interface{}
	// Authentication method used when creating the Jira integration. One of `EmailAndToken` (using `userEmail` and `apiToken`) or `UsernameAndPassword` (using `username` and `password`).
	AuthMethod interface{}
	// Base URL of the Jira instance that's integrated with SignalFx.
	BaseUrl interface{}
	// Whether the integration is enabled.
	Enabled interface{}
	// Issue type (for example, Story) for tickets that Jira creates for detector notifications. SignalFx validates issue types, so you must specify a type that's valid for the Jira project specified in `projectKey`.
	IssueType interface{}
	// Name of the integration.
	Name interface{}
	// Password used to authenticate the Jira integration.
	Password interface{}
	// Jira key of an existing project. When Jira creates a new ticket for a detector notification, the ticket is assigned to this project.
	ProjectKey interface{}
	// Email address used to authenticate the Jira integration.
	UserEmail interface{}
	// User name used to authenticate the Jira integration.
	Username interface{}
}

// The set of arguments for constructing a Integration resource.
type IntegrationArgs struct {
	// The API token for the user email
	ApiToken interface{}
	// Jira display name for the assignee.
	AssigneeDisplayName interface{}
	// Jira user name for the assignee.
	AssigneeName interface{}
	// Authentication method used when creating the Jira integration. One of `EmailAndToken` (using `userEmail` and `apiToken`) or `UsernameAndPassword` (using `username` and `password`).
	AuthMethod interface{}
	// Base URL of the Jira instance that's integrated with SignalFx.
	BaseUrl interface{}
	// Whether the integration is enabled.
	Enabled interface{}
	// Issue type (for example, Story) for tickets that Jira creates for detector notifications. SignalFx validates issue types, so you must specify a type that's valid for the Jira project specified in `projectKey`.
	IssueType interface{}
	// Name of the integration.
	Name interface{}
	// Password used to authenticate the Jira integration.
	Password interface{}
	// Jira key of an existing project. When Jira creates a new ticket for a detector notification, the ticket is assigned to this project.
	ProjectKey interface{}
	// Email address used to authenticate the Jira integration.
	UserEmail interface{}
	// User name used to authenticate the Jira integration.
	Username interface{}
}
