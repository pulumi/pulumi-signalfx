// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package jira

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-signalfx/sdk/v7/go/signalfx/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Splunk Observability Cloud Jira integrations. For help with this integration see [Integration with Jira](https://docs.splunk.com/observability/en/admin/notif-services/jira.html).
//
// > **NOTE** When managing integrations, use a session token of an administrator to authenticate the Splunk Observability Cloud provider. See [Operations that require a session token for an administrator](https://dev.splunk.com/observability/docs/administration/authtokens#Operations-that-require-a-session-token-for-an-administrator). Otherwise you'll receive a 4xx error.
//
// ## Example
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-signalfx/sdk/v7/go/signalfx/jira"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := jira.NewIntegration(ctx, "jiraMyteamXX", &jira.IntegrationArgs{
//				AssigneeDisplayName: pulumi.String("Testy Testerson"),
//				AssigneeName:        pulumi.String("testytesterson"),
//				AuthMethod:          pulumi.String("UsernameAndPassword"),
//				BaseUrl:             pulumi.String("https://www.example.com"),
//				Enabled:             pulumi.Bool(false),
//				IssueType:           pulumi.String("Story"),
//				Password:            pulumi.String("paasword"),
//				ProjectKey:          pulumi.String("TEST"),
//				Username:            pulumi.String("yoosername"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Arguments
//
// * `name` - (Required) Name of the integration.
// * `enabled` - (Required) Whether the integration is enabled.
// * `authMethod` - (Required) Authentication method used when creating the Jira integration. One of `EmailAndToken` (using `userEmail` and `apiToken`) or `UsernameAndPassword` (using `username` and `password`).
// * `apiToken` - (Required if `authMethod` is `EmailAndToken`) The API token for the user email
// * `userEmail` - (Required if `authMethod` is `EmailAndToken`) Email address used to authenticate the Jira integration.
// * `username` - (Required if `authMethod` is `UsernameAndPassword`) User name used to authenticate the Jira integration.
// * `password` - (Required if `authMethod` is `UsernameAndPassword`) Password used to authenticate the Jira integration.
// * `baseUrl` - (Required) Base URL of the Jira instance that's integrated with SignalFx.
// * `issueType` - (Required) Issue type (for example, Story) for tickets that Jira creates for detector notifications. Splunk Observability Cloud validates issue types, so you must specify a type that's valid for the Jira project specified in `projectKey`.
// * `projectKey` - (Required) Jira key of an existing project. When Jira creates a new ticket for a detector notification, the ticket is assigned to this project.
// * `assigneeName` - (Required) Jira user name for the assignee.
// * `assigneeDisplayName` - (Optional) Jira display name for the assignee.
//
// ## Attributes
//
// In a addition to all arguments above, the following attributes are exported:
//
// * `id` - The ID of the integration.
type Integration struct {
	pulumi.CustomResourceState

	// The API token for the user email
	ApiToken pulumi.StringPtrOutput `pulumi:"apiToken"`
	// Jira display name for the assignee
	AssigneeDisplayName pulumi.StringPtrOutput `pulumi:"assigneeDisplayName"`
	// Jira user name for the assignee
	AssigneeName pulumi.StringOutput `pulumi:"assigneeName"`
	// Authentication method used when creating the Jira integration. One of `EmailAndToken` or `UsernameAndPassword`
	AuthMethod pulumi.StringOutput `pulumi:"authMethod"`
	// Base URL of the Jira instance that's integrated with SignalFx.
	BaseUrl pulumi.StringOutput `pulumi:"baseUrl"`
	// Whether the integration is enabled or not
	Enabled pulumi.BoolOutput `pulumi:"enabled"`
	// Issue type (for example, Story) for tickets that Jira creates for detector notifications. Splunk Observability Cloud
	// validates issue types, so you must specify a type that's valid for the Jira project specified in `projectKey`.
	IssueType pulumi.StringOutput `pulumi:"issueType"`
	// Name of the integration
	Name pulumi.StringOutput `pulumi:"name"`
	// Password used to authenticate the Jira integration.
	Password pulumi.StringPtrOutput `pulumi:"password"`
	// Jira key of an existing project. When Jira creates a new ticket for a detector notification, the ticket is assigned to
	// this project.
	ProjectKey pulumi.StringOutput `pulumi:"projectKey"`
	// Email address used to authenticate the Jira integration.
	UserEmail pulumi.StringPtrOutput `pulumi:"userEmail"`
	// User name used to authenticate the Jira integration.
	Username pulumi.StringPtrOutput `pulumi:"username"`
}

// NewIntegration registers a new resource with the given unique name, arguments, and options.
func NewIntegration(ctx *pulumi.Context,
	name string, args *IntegrationArgs, opts ...pulumi.ResourceOption) (*Integration, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.AssigneeName == nil {
		return nil, errors.New("invalid value for required argument 'AssigneeName'")
	}
	if args.AuthMethod == nil {
		return nil, errors.New("invalid value for required argument 'AuthMethod'")
	}
	if args.BaseUrl == nil {
		return nil, errors.New("invalid value for required argument 'BaseUrl'")
	}
	if args.Enabled == nil {
		return nil, errors.New("invalid value for required argument 'Enabled'")
	}
	if args.IssueType == nil {
		return nil, errors.New("invalid value for required argument 'IssueType'")
	}
	if args.ProjectKey == nil {
		return nil, errors.New("invalid value for required argument 'ProjectKey'")
	}
	if args.ApiToken != nil {
		args.ApiToken = pulumi.ToSecret(args.ApiToken).(pulumi.StringPtrInput)
	}
	if args.Password != nil {
		args.Password = pulumi.ToSecret(args.Password).(pulumi.StringPtrInput)
	}
	secrets := pulumi.AdditionalSecretOutputs([]string{
		"apiToken",
		"password",
	})
	opts = append(opts, secrets)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Integration
	err := ctx.RegisterResource("signalfx:jira/integration:Integration", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetIntegration gets an existing Integration resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetIntegration(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *IntegrationState, opts ...pulumi.ResourceOption) (*Integration, error) {
	var resource Integration
	err := ctx.ReadResource("signalfx:jira/integration:Integration", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Integration resources.
type integrationState struct {
	// The API token for the user email
	ApiToken *string `pulumi:"apiToken"`
	// Jira display name for the assignee
	AssigneeDisplayName *string `pulumi:"assigneeDisplayName"`
	// Jira user name for the assignee
	AssigneeName *string `pulumi:"assigneeName"`
	// Authentication method used when creating the Jira integration. One of `EmailAndToken` or `UsernameAndPassword`
	AuthMethod *string `pulumi:"authMethod"`
	// Base URL of the Jira instance that's integrated with SignalFx.
	BaseUrl *string `pulumi:"baseUrl"`
	// Whether the integration is enabled or not
	Enabled *bool `pulumi:"enabled"`
	// Issue type (for example, Story) for tickets that Jira creates for detector notifications. Splunk Observability Cloud
	// validates issue types, so you must specify a type that's valid for the Jira project specified in `projectKey`.
	IssueType *string `pulumi:"issueType"`
	// Name of the integration
	Name *string `pulumi:"name"`
	// Password used to authenticate the Jira integration.
	Password *string `pulumi:"password"`
	// Jira key of an existing project. When Jira creates a new ticket for a detector notification, the ticket is assigned to
	// this project.
	ProjectKey *string `pulumi:"projectKey"`
	// Email address used to authenticate the Jira integration.
	UserEmail *string `pulumi:"userEmail"`
	// User name used to authenticate the Jira integration.
	Username *string `pulumi:"username"`
}

type IntegrationState struct {
	// The API token for the user email
	ApiToken pulumi.StringPtrInput
	// Jira display name for the assignee
	AssigneeDisplayName pulumi.StringPtrInput
	// Jira user name for the assignee
	AssigneeName pulumi.StringPtrInput
	// Authentication method used when creating the Jira integration. One of `EmailAndToken` or `UsernameAndPassword`
	AuthMethod pulumi.StringPtrInput
	// Base URL of the Jira instance that's integrated with SignalFx.
	BaseUrl pulumi.StringPtrInput
	// Whether the integration is enabled or not
	Enabled pulumi.BoolPtrInput
	// Issue type (for example, Story) for tickets that Jira creates for detector notifications. Splunk Observability Cloud
	// validates issue types, so you must specify a type that's valid for the Jira project specified in `projectKey`.
	IssueType pulumi.StringPtrInput
	// Name of the integration
	Name pulumi.StringPtrInput
	// Password used to authenticate the Jira integration.
	Password pulumi.StringPtrInput
	// Jira key of an existing project. When Jira creates a new ticket for a detector notification, the ticket is assigned to
	// this project.
	ProjectKey pulumi.StringPtrInput
	// Email address used to authenticate the Jira integration.
	UserEmail pulumi.StringPtrInput
	// User name used to authenticate the Jira integration.
	Username pulumi.StringPtrInput
}

func (IntegrationState) ElementType() reflect.Type {
	return reflect.TypeOf((*integrationState)(nil)).Elem()
}

type integrationArgs struct {
	// The API token for the user email
	ApiToken *string `pulumi:"apiToken"`
	// Jira display name for the assignee
	AssigneeDisplayName *string `pulumi:"assigneeDisplayName"`
	// Jira user name for the assignee
	AssigneeName string `pulumi:"assigneeName"`
	// Authentication method used when creating the Jira integration. One of `EmailAndToken` or `UsernameAndPassword`
	AuthMethod string `pulumi:"authMethod"`
	// Base URL of the Jira instance that's integrated with SignalFx.
	BaseUrl string `pulumi:"baseUrl"`
	// Whether the integration is enabled or not
	Enabled bool `pulumi:"enabled"`
	// Issue type (for example, Story) for tickets that Jira creates for detector notifications. Splunk Observability Cloud
	// validates issue types, so you must specify a type that's valid for the Jira project specified in `projectKey`.
	IssueType string `pulumi:"issueType"`
	// Name of the integration
	Name *string `pulumi:"name"`
	// Password used to authenticate the Jira integration.
	Password *string `pulumi:"password"`
	// Jira key of an existing project. When Jira creates a new ticket for a detector notification, the ticket is assigned to
	// this project.
	ProjectKey string `pulumi:"projectKey"`
	// Email address used to authenticate the Jira integration.
	UserEmail *string `pulumi:"userEmail"`
	// User name used to authenticate the Jira integration.
	Username *string `pulumi:"username"`
}

// The set of arguments for constructing a Integration resource.
type IntegrationArgs struct {
	// The API token for the user email
	ApiToken pulumi.StringPtrInput
	// Jira display name for the assignee
	AssigneeDisplayName pulumi.StringPtrInput
	// Jira user name for the assignee
	AssigneeName pulumi.StringInput
	// Authentication method used when creating the Jira integration. One of `EmailAndToken` or `UsernameAndPassword`
	AuthMethod pulumi.StringInput
	// Base URL of the Jira instance that's integrated with SignalFx.
	BaseUrl pulumi.StringInput
	// Whether the integration is enabled or not
	Enabled pulumi.BoolInput
	// Issue type (for example, Story) for tickets that Jira creates for detector notifications. Splunk Observability Cloud
	// validates issue types, so you must specify a type that's valid for the Jira project specified in `projectKey`.
	IssueType pulumi.StringInput
	// Name of the integration
	Name pulumi.StringPtrInput
	// Password used to authenticate the Jira integration.
	Password pulumi.StringPtrInput
	// Jira key of an existing project. When Jira creates a new ticket for a detector notification, the ticket is assigned to
	// this project.
	ProjectKey pulumi.StringInput
	// Email address used to authenticate the Jira integration.
	UserEmail pulumi.StringPtrInput
	// User name used to authenticate the Jira integration.
	Username pulumi.StringPtrInput
}

func (IntegrationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*integrationArgs)(nil)).Elem()
}

type IntegrationInput interface {
	pulumi.Input

	ToIntegrationOutput() IntegrationOutput
	ToIntegrationOutputWithContext(ctx context.Context) IntegrationOutput
}

func (*Integration) ElementType() reflect.Type {
	return reflect.TypeOf((**Integration)(nil)).Elem()
}

func (i *Integration) ToIntegrationOutput() IntegrationOutput {
	return i.ToIntegrationOutputWithContext(context.Background())
}

func (i *Integration) ToIntegrationOutputWithContext(ctx context.Context) IntegrationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IntegrationOutput)
}

// IntegrationArrayInput is an input type that accepts IntegrationArray and IntegrationArrayOutput values.
// You can construct a concrete instance of `IntegrationArrayInput` via:
//
//	IntegrationArray{ IntegrationArgs{...} }
type IntegrationArrayInput interface {
	pulumi.Input

	ToIntegrationArrayOutput() IntegrationArrayOutput
	ToIntegrationArrayOutputWithContext(context.Context) IntegrationArrayOutput
}

type IntegrationArray []IntegrationInput

func (IntegrationArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Integration)(nil)).Elem()
}

func (i IntegrationArray) ToIntegrationArrayOutput() IntegrationArrayOutput {
	return i.ToIntegrationArrayOutputWithContext(context.Background())
}

func (i IntegrationArray) ToIntegrationArrayOutputWithContext(ctx context.Context) IntegrationArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IntegrationArrayOutput)
}

// IntegrationMapInput is an input type that accepts IntegrationMap and IntegrationMapOutput values.
// You can construct a concrete instance of `IntegrationMapInput` via:
//
//	IntegrationMap{ "key": IntegrationArgs{...} }
type IntegrationMapInput interface {
	pulumi.Input

	ToIntegrationMapOutput() IntegrationMapOutput
	ToIntegrationMapOutputWithContext(context.Context) IntegrationMapOutput
}

type IntegrationMap map[string]IntegrationInput

func (IntegrationMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Integration)(nil)).Elem()
}

func (i IntegrationMap) ToIntegrationMapOutput() IntegrationMapOutput {
	return i.ToIntegrationMapOutputWithContext(context.Background())
}

func (i IntegrationMap) ToIntegrationMapOutputWithContext(ctx context.Context) IntegrationMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IntegrationMapOutput)
}

type IntegrationOutput struct{ *pulumi.OutputState }

func (IntegrationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Integration)(nil)).Elem()
}

func (o IntegrationOutput) ToIntegrationOutput() IntegrationOutput {
	return o
}

func (o IntegrationOutput) ToIntegrationOutputWithContext(ctx context.Context) IntegrationOutput {
	return o
}

// The API token for the user email
func (o IntegrationOutput) ApiToken() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Integration) pulumi.StringPtrOutput { return v.ApiToken }).(pulumi.StringPtrOutput)
}

// Jira display name for the assignee
func (o IntegrationOutput) AssigneeDisplayName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Integration) pulumi.StringPtrOutput { return v.AssigneeDisplayName }).(pulumi.StringPtrOutput)
}

// Jira user name for the assignee
func (o IntegrationOutput) AssigneeName() pulumi.StringOutput {
	return o.ApplyT(func(v *Integration) pulumi.StringOutput { return v.AssigneeName }).(pulumi.StringOutput)
}

// Authentication method used when creating the Jira integration. One of `EmailAndToken` or `UsernameAndPassword`
func (o IntegrationOutput) AuthMethod() pulumi.StringOutput {
	return o.ApplyT(func(v *Integration) pulumi.StringOutput { return v.AuthMethod }).(pulumi.StringOutput)
}

// Base URL of the Jira instance that's integrated with SignalFx.
func (o IntegrationOutput) BaseUrl() pulumi.StringOutput {
	return o.ApplyT(func(v *Integration) pulumi.StringOutput { return v.BaseUrl }).(pulumi.StringOutput)
}

// Whether the integration is enabled or not
func (o IntegrationOutput) Enabled() pulumi.BoolOutput {
	return o.ApplyT(func(v *Integration) pulumi.BoolOutput { return v.Enabled }).(pulumi.BoolOutput)
}

// Issue type (for example, Story) for tickets that Jira creates for detector notifications. Splunk Observability Cloud
// validates issue types, so you must specify a type that's valid for the Jira project specified in `projectKey`.
func (o IntegrationOutput) IssueType() pulumi.StringOutput {
	return o.ApplyT(func(v *Integration) pulumi.StringOutput { return v.IssueType }).(pulumi.StringOutput)
}

// Name of the integration
func (o IntegrationOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Integration) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Password used to authenticate the Jira integration.
func (o IntegrationOutput) Password() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Integration) pulumi.StringPtrOutput { return v.Password }).(pulumi.StringPtrOutput)
}

// Jira key of an existing project. When Jira creates a new ticket for a detector notification, the ticket is assigned to
// this project.
func (o IntegrationOutput) ProjectKey() pulumi.StringOutput {
	return o.ApplyT(func(v *Integration) pulumi.StringOutput { return v.ProjectKey }).(pulumi.StringOutput)
}

// Email address used to authenticate the Jira integration.
func (o IntegrationOutput) UserEmail() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Integration) pulumi.StringPtrOutput { return v.UserEmail }).(pulumi.StringPtrOutput)
}

// User name used to authenticate the Jira integration.
func (o IntegrationOutput) Username() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Integration) pulumi.StringPtrOutput { return v.Username }).(pulumi.StringPtrOutput)
}

type IntegrationArrayOutput struct{ *pulumi.OutputState }

func (IntegrationArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Integration)(nil)).Elem()
}

func (o IntegrationArrayOutput) ToIntegrationArrayOutput() IntegrationArrayOutput {
	return o
}

func (o IntegrationArrayOutput) ToIntegrationArrayOutputWithContext(ctx context.Context) IntegrationArrayOutput {
	return o
}

func (o IntegrationArrayOutput) Index(i pulumi.IntInput) IntegrationOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Integration {
		return vs[0].([]*Integration)[vs[1].(int)]
	}).(IntegrationOutput)
}

type IntegrationMapOutput struct{ *pulumi.OutputState }

func (IntegrationMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Integration)(nil)).Elem()
}

func (o IntegrationMapOutput) ToIntegrationMapOutput() IntegrationMapOutput {
	return o
}

func (o IntegrationMapOutput) ToIntegrationMapOutputWithContext(ctx context.Context) IntegrationMapOutput {
	return o
}

func (o IntegrationMapOutput) MapIndex(k pulumi.StringInput) IntegrationOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Integration {
		return vs[0].(map[string]*Integration)[vs[1].(string)]
	}).(IntegrationOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*IntegrationInput)(nil)).Elem(), &Integration{})
	pulumi.RegisterInputType(reflect.TypeOf((*IntegrationArrayInput)(nil)).Elem(), IntegrationArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*IntegrationMapInput)(nil)).Elem(), IntegrationMap{})
	pulumi.RegisterOutputType(IntegrationOutput{})
	pulumi.RegisterOutputType(IntegrationArrayOutput{})
	pulumi.RegisterOutputType(IntegrationMapOutput{})
}
