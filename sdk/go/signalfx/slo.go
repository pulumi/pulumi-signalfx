// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package signalfx

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-signalfx/sdk/v7/go/signalfx/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides a Splunk Observability Cloud slo resource. This can be used to create and manage SLOs.
//
// To learn more about this feature take a look on [documentation for SLO](https://docs.splunk.com/observability/en/alerts-detectors-notifications/slo/slo-intro.html).
//
// ## Example
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-signalfx/sdk/v7/go/signalfx"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := signalfx.NewSlo(ctx, "foo_service_slo", &signalfx.SloArgs{
//				Name:        pulumi.String("foo service SLO"),
//				Type:        pulumi.String("RequestBased"),
//				Description: pulumi.String("SLO monitoring for foo service"),
//				Input: &signalfx.SloInputTypeArgs{
//					ProgramText:      pulumi.String("G = data('spans.count', filter=filter('sf_error', 'false') and filter('sf_service', 'foo-service'))\nT = data('spans.count', filter=filter('sf_service', 'foo-service'))"),
//					GoodEventsLabel:  pulumi.String("G"),
//					TotalEventsLabel: pulumi.String("T"),
//				},
//				Target: &signalfx.SloTargetArgs{
//					Type:             pulumi.String("RollingWindow"),
//					Slo:              pulumi.Float64(95),
//					CompliancePeriod: pulumi.String("30d"),
//					AlertRules: signalfx.SloTargetAlertRuleArray{
//						&signalfx.SloTargetAlertRuleArgs{
//							Type: pulumi.String("BREACH"),
//							Rules: signalfx.SloTargetAlertRuleRuleArray{
//								&signalfx.SloTargetAlertRuleRuleArgs{
//									Severity: pulumi.String("Warning"),
//									Notifications: pulumi.StringArray{
//										pulumi.String("Email,foo-alerts@bar.com"),
//									},
//								},
//							},
//						},
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Notification format
//
// As Splunk Observability Cloud supports different notification mechanisms, use a comma-delimited string to provide inputs. If you want to specify multiple notifications, each must be a member in the list, like so:
//
// See [Splunk Observability Cloud Docs](https://dev.splunk.com/observability/reference/api/detectors/latest) for more information.
//
// Here are some example of how to configure each notification type:
//
// ### Email
//
// ### Jira
//
// Note that the `credentialId` is the Splunk-provided ID shown after setting up your Jira integration. See also `jira.Integration`.
//
// ### OpsGenie
//
// Note that the `credentialId` is the Splunk-provided ID shown after setting up your Opsgenie integration. `Team` here is hardcoded as the `responderType` as that is the only acceptable type as per the API docs.
//
// ### PagerDuty
//
// ### Slack
//
// Exclude the `#` on the channel name:
//
// ### Team
//
// Sends [notifications to a team](https://docs.signalfx.com/en/latest/managing/teams/team-notifications.html).
//
// ### TeamEmail
//
// Sends an email to every member of a team.
//
// ### Splunk On-Call (formerly VictorOps)
//
// ### Webhooks
//
// You need to include all the commas even if you only use a credential id.
//
// You can either configure a Webhook to use an existing integration's credential id:
//
// Or configure one inline:
type Slo struct {
	pulumi.CustomResourceState

	// Description of the SLO.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// Properties to configure an SLO object inputs
	Input SloInputTypeOutput `pulumi:"input"`
	// Name of the SLO. Each SLO name must be unique within an organization.
	Name pulumi.StringOutput `pulumi:"name"`
	// Define target value of the service level indicator in the appropriate time period.
	Target SloTargetOutput `pulumi:"target"`
	// Type of the SLO. Currently just: `"RequestBased"` is supported.
	Type pulumi.StringOutput `pulumi:"type"`
}

// NewSlo registers a new resource with the given unique name, arguments, and options.
func NewSlo(ctx *pulumi.Context,
	name string, args *SloArgs, opts ...pulumi.ResourceOption) (*Slo, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Input == nil {
		return nil, errors.New("invalid value for required argument 'Input'")
	}
	if args.Target == nil {
		return nil, errors.New("invalid value for required argument 'Target'")
	}
	if args.Type == nil {
		return nil, errors.New("invalid value for required argument 'Type'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Slo
	err := ctx.RegisterResource("signalfx:index/slo:Slo", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSlo gets an existing Slo resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSlo(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SloState, opts ...pulumi.ResourceOption) (*Slo, error) {
	var resource Slo
	err := ctx.ReadResource("signalfx:index/slo:Slo", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Slo resources.
type sloState struct {
	// Description of the SLO.
	Description *string `pulumi:"description"`
	// Properties to configure an SLO object inputs
	Input *SloInputType `pulumi:"input"`
	// Name of the SLO. Each SLO name must be unique within an organization.
	Name *string `pulumi:"name"`
	// Define target value of the service level indicator in the appropriate time period.
	Target *SloTarget `pulumi:"target"`
	// Type of the SLO. Currently just: `"RequestBased"` is supported.
	Type *string `pulumi:"type"`
}

type SloState struct {
	// Description of the SLO.
	Description pulumi.StringPtrInput
	// Properties to configure an SLO object inputs
	Input SloInputTypePtrInput
	// Name of the SLO. Each SLO name must be unique within an organization.
	Name pulumi.StringPtrInput
	// Define target value of the service level indicator in the appropriate time period.
	Target SloTargetPtrInput
	// Type of the SLO. Currently just: `"RequestBased"` is supported.
	Type pulumi.StringPtrInput
}

func (SloState) ElementType() reflect.Type {
	return reflect.TypeOf((*sloState)(nil)).Elem()
}

type sloArgs struct {
	// Description of the SLO.
	Description *string `pulumi:"description"`
	// Properties to configure an SLO object inputs
	Input SloInputType `pulumi:"input"`
	// Name of the SLO. Each SLO name must be unique within an organization.
	Name *string `pulumi:"name"`
	// Define target value of the service level indicator in the appropriate time period.
	Target SloTarget `pulumi:"target"`
	// Type of the SLO. Currently just: `"RequestBased"` is supported.
	Type string `pulumi:"type"`
}

// The set of arguments for constructing a Slo resource.
type SloArgs struct {
	// Description of the SLO.
	Description pulumi.StringPtrInput
	// Properties to configure an SLO object inputs
	Input SloInputTypeInput
	// Name of the SLO. Each SLO name must be unique within an organization.
	Name pulumi.StringPtrInput
	// Define target value of the service level indicator in the appropriate time period.
	Target SloTargetInput
	// Type of the SLO. Currently just: `"RequestBased"` is supported.
	Type pulumi.StringInput
}

func (SloArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*sloArgs)(nil)).Elem()
}

type SloInput interface {
	pulumi.Input

	ToSloOutput() SloOutput
	ToSloOutputWithContext(ctx context.Context) SloOutput
}

func (*Slo) ElementType() reflect.Type {
	return reflect.TypeOf((**Slo)(nil)).Elem()
}

func (i *Slo) ToSloOutput() SloOutput {
	return i.ToSloOutputWithContext(context.Background())
}

func (i *Slo) ToSloOutputWithContext(ctx context.Context) SloOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SloOutput)
}

// SloArrayInput is an input type that accepts SloArray and SloArrayOutput values.
// You can construct a concrete instance of `SloArrayInput` via:
//
//	SloArray{ SloArgs{...} }
type SloArrayInput interface {
	pulumi.Input

	ToSloArrayOutput() SloArrayOutput
	ToSloArrayOutputWithContext(context.Context) SloArrayOutput
}

type SloArray []SloInput

func (SloArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Slo)(nil)).Elem()
}

func (i SloArray) ToSloArrayOutput() SloArrayOutput {
	return i.ToSloArrayOutputWithContext(context.Background())
}

func (i SloArray) ToSloArrayOutputWithContext(ctx context.Context) SloArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SloArrayOutput)
}

// SloMapInput is an input type that accepts SloMap and SloMapOutput values.
// You can construct a concrete instance of `SloMapInput` via:
//
//	SloMap{ "key": SloArgs{...} }
type SloMapInput interface {
	pulumi.Input

	ToSloMapOutput() SloMapOutput
	ToSloMapOutputWithContext(context.Context) SloMapOutput
}

type SloMap map[string]SloInput

func (SloMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Slo)(nil)).Elem()
}

func (i SloMap) ToSloMapOutput() SloMapOutput {
	return i.ToSloMapOutputWithContext(context.Background())
}

func (i SloMap) ToSloMapOutputWithContext(ctx context.Context) SloMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SloMapOutput)
}

type SloOutput struct{ *pulumi.OutputState }

func (SloOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Slo)(nil)).Elem()
}

func (o SloOutput) ToSloOutput() SloOutput {
	return o
}

func (o SloOutput) ToSloOutputWithContext(ctx context.Context) SloOutput {
	return o
}

// Description of the SLO.
func (o SloOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Slo) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// Properties to configure an SLO object inputs
func (o SloOutput) Input() SloInputTypeOutput {
	return o.ApplyT(func(v *Slo) SloInputTypeOutput { return v.Input }).(SloInputTypeOutput)
}

// Name of the SLO. Each SLO name must be unique within an organization.
func (o SloOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Slo) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Define target value of the service level indicator in the appropriate time period.
func (o SloOutput) Target() SloTargetOutput {
	return o.ApplyT(func(v *Slo) SloTargetOutput { return v.Target }).(SloTargetOutput)
}

// Type of the SLO. Currently just: `"RequestBased"` is supported.
func (o SloOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v *Slo) pulumi.StringOutput { return v.Type }).(pulumi.StringOutput)
}

type SloArrayOutput struct{ *pulumi.OutputState }

func (SloArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Slo)(nil)).Elem()
}

func (o SloArrayOutput) ToSloArrayOutput() SloArrayOutput {
	return o
}

func (o SloArrayOutput) ToSloArrayOutputWithContext(ctx context.Context) SloArrayOutput {
	return o
}

func (o SloArrayOutput) Index(i pulumi.IntInput) SloOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Slo {
		return vs[0].([]*Slo)[vs[1].(int)]
	}).(SloOutput)
}

type SloMapOutput struct{ *pulumi.OutputState }

func (SloMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Slo)(nil)).Elem()
}

func (o SloMapOutput) ToSloMapOutput() SloMapOutput {
	return o
}

func (o SloMapOutput) ToSloMapOutputWithContext(ctx context.Context) SloMapOutput {
	return o
}

func (o SloMapOutput) MapIndex(k pulumi.StringInput) SloOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Slo {
		return vs[0].(map[string]*Slo)[vs[1].(string)]
	}).(SloOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*SloInput)(nil)).Elem(), &Slo{})
	pulumi.RegisterInputType(reflect.TypeOf((*SloArrayInput)(nil)).Elem(), SloArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SloMapInput)(nil)).Elem(), SloMap{})
	pulumi.RegisterOutputType(SloOutput{})
	pulumi.RegisterOutputType(SloArrayOutput{})
	pulumi.RegisterOutputType(SloMapOutput{})
}
