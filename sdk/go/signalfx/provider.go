// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package signalfx

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-signalfx/sdk/v7/go/signalfx/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// The provider type for the signalfx package. By default, resources use package-wide configuration
// settings, however an explicit `Provider` instance may be created and passed during resource
// construction to achieve fine-grained programmatic control over provider settings. See the
// [documentation](https://www.pulumi.com/docs/reference/programming-model/#providers) for more information.
type Provider struct {
	pulumi.ProviderResourceState

	// API URL for your Splunk Observability Cloud org, may include a realm
	ApiUrl pulumi.StringPtrOutput `pulumi:"apiUrl"`
	// Splunk Observability Cloud auth token
	AuthToken pulumi.StringPtrOutput `pulumi:"authToken"`
	// Application URL for your Splunk Observability Cloud org, often customized for organizations using SSO
	//
	// Deprecated: Remove the definition, the provider will automatically populate the custom app URL as needed
	CustomAppUrl pulumi.StringPtrOutput `pulumi:"customAppUrl"`
	// Used to create a session token instead of an API token, it requires the account to be configured to login with Email and
	// Password
	Email pulumi.StringPtrOutput `pulumi:"email"`
	// Required if the user is configured to be part of multiple organizations
	OrganizationId pulumi.StringPtrOutput `pulumi:"organizationId"`
	// Used to create a session token instead of an API token, it requires the account to be configured to login with Email and
	// Password
	Password pulumi.StringPtrOutput `pulumi:"password"`
}

// NewProvider registers a new resource with the given unique name, arguments, and options.
func NewProvider(ctx *pulumi.Context,
	name string, args *ProviderArgs, opts ...pulumi.ResourceOption) (*Provider, error) {
	if args == nil {
		args = &ProviderArgs{}
	}

	if args.Password != nil {
		args.Password = pulumi.ToSecret(args.Password).(pulumi.StringPtrInput)
	}
	secrets := pulumi.AdditionalSecretOutputs([]string{
		"password",
	})
	opts = append(opts, secrets)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Provider
	err := ctx.RegisterResource("pulumi:providers:signalfx", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

type providerArgs struct {
	// API URL for your Splunk Observability Cloud org, may include a realm
	ApiUrl *string `pulumi:"apiUrl"`
	// Splunk Observability Cloud auth token
	AuthToken *string `pulumi:"authToken"`
	// Application URL for your Splunk Observability Cloud org, often customized for organizations using SSO
	//
	// Deprecated: Remove the definition, the provider will automatically populate the custom app URL as needed
	CustomAppUrl *string `pulumi:"customAppUrl"`
	// Used to create a session token instead of an API token, it requires the account to be configured to login with Email and
	// Password
	Email *string `pulumi:"email"`
	// Allows for users to opt-in to new features that are considered experimental or not ready for general availability yet.
	FeaturePreview map[string]bool `pulumi:"featurePreview"`
	// Required if the user is configured to be part of multiple organizations
	OrganizationId *string `pulumi:"organizationId"`
	// Used to create a session token instead of an API token, it requires the account to be configured to login with Email and
	// Password
	Password *string `pulumi:"password"`
	// Max retries for a single HTTP call. Defaults to 4
	RetryMaxAttempts *int `pulumi:"retryMaxAttempts"`
	// Maximum retry wait for a single HTTP call in seconds. Defaults to 30
	RetryWaitMaxSeconds *int `pulumi:"retryWaitMaxSeconds"`
	// Minimum retry wait for a single HTTP call in seconds. Defaults to 1
	RetryWaitMinSeconds *int `pulumi:"retryWaitMinSeconds"`
	// Allows for Tags to be added by default to resources that allow for tags to be included. If there is already tags
	// configured, the global tags are added in prefix.
	Tags []string `pulumi:"tags"`
	// Allows for teams to be defined at a provider level, and apply to all applicable resources created.
	Teams []string `pulumi:"teams"`
	// Timeout duration for a single HTTP call in seconds. Defaults to 120
	TimeoutSeconds *int `pulumi:"timeoutSeconds"`
}

// The set of arguments for constructing a Provider resource.
type ProviderArgs struct {
	// API URL for your Splunk Observability Cloud org, may include a realm
	ApiUrl pulumi.StringPtrInput
	// Splunk Observability Cloud auth token
	AuthToken pulumi.StringPtrInput
	// Application URL for your Splunk Observability Cloud org, often customized for organizations using SSO
	//
	// Deprecated: Remove the definition, the provider will automatically populate the custom app URL as needed
	CustomAppUrl pulumi.StringPtrInput
	// Used to create a session token instead of an API token, it requires the account to be configured to login with Email and
	// Password
	Email pulumi.StringPtrInput
	// Allows for users to opt-in to new features that are considered experimental or not ready for general availability yet.
	FeaturePreview pulumi.BoolMapInput
	// Required if the user is configured to be part of multiple organizations
	OrganizationId pulumi.StringPtrInput
	// Used to create a session token instead of an API token, it requires the account to be configured to login with Email and
	// Password
	Password pulumi.StringPtrInput
	// Max retries for a single HTTP call. Defaults to 4
	RetryMaxAttempts pulumi.IntPtrInput
	// Maximum retry wait for a single HTTP call in seconds. Defaults to 30
	RetryWaitMaxSeconds pulumi.IntPtrInput
	// Minimum retry wait for a single HTTP call in seconds. Defaults to 1
	RetryWaitMinSeconds pulumi.IntPtrInput
	// Allows for Tags to be added by default to resources that allow for tags to be included. If there is already tags
	// configured, the global tags are added in prefix.
	Tags pulumi.StringArrayInput
	// Allows for teams to be defined at a provider level, and apply to all applicable resources created.
	Teams pulumi.StringArrayInput
	// Timeout duration for a single HTTP call in seconds. Defaults to 120
	TimeoutSeconds pulumi.IntPtrInput
}

func (ProviderArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*providerArgs)(nil)).Elem()
}

// This function returns a Terraform config object with terraform-namecased keys,to be used with the Terraform Module Provider.
func (r *Provider) TerraformConfig(ctx *pulumi.Context) (ProviderTerraformConfigResultOutput, error) {
	out, err := ctx.Call("pulumi:providers:signalfx/terraformConfig", nil, ProviderTerraformConfigResultOutput{}, r)
	if err != nil {
		return ProviderTerraformConfigResultOutput{}, err
	}
	return out.(ProviderTerraformConfigResultOutput), nil
}

type ProviderTerraformConfigResult struct {
	Result map[string]interface{} `pulumi:"result"`
}

type ProviderTerraformConfigResultOutput struct{ *pulumi.OutputState }

func (ProviderTerraformConfigResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ProviderTerraformConfigResult)(nil)).Elem()
}

func (o ProviderTerraformConfigResultOutput) Result() pulumi.MapOutput {
	return o.ApplyT(func(v ProviderTerraformConfigResult) map[string]interface{} { return v.Result }).(pulumi.MapOutput)
}

type ProviderInput interface {
	pulumi.Input

	ToProviderOutput() ProviderOutput
	ToProviderOutputWithContext(ctx context.Context) ProviderOutput
}

func (*Provider) ElementType() reflect.Type {
	return reflect.TypeOf((**Provider)(nil)).Elem()
}

func (i *Provider) ToProviderOutput() ProviderOutput {
	return i.ToProviderOutputWithContext(context.Background())
}

func (i *Provider) ToProviderOutputWithContext(ctx context.Context) ProviderOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProviderOutput)
}

type ProviderOutput struct{ *pulumi.OutputState }

func (ProviderOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Provider)(nil)).Elem()
}

func (o ProviderOutput) ToProviderOutput() ProviderOutput {
	return o
}

func (o ProviderOutput) ToProviderOutputWithContext(ctx context.Context) ProviderOutput {
	return o
}

// API URL for your Splunk Observability Cloud org, may include a realm
func (o ProviderOutput) ApiUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Provider) pulumi.StringPtrOutput { return v.ApiUrl }).(pulumi.StringPtrOutput)
}

// Splunk Observability Cloud auth token
func (o ProviderOutput) AuthToken() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Provider) pulumi.StringPtrOutput { return v.AuthToken }).(pulumi.StringPtrOutput)
}

// Application URL for your Splunk Observability Cloud org, often customized for organizations using SSO
//
// Deprecated: Remove the definition, the provider will automatically populate the custom app URL as needed
func (o ProviderOutput) CustomAppUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Provider) pulumi.StringPtrOutput { return v.CustomAppUrl }).(pulumi.StringPtrOutput)
}

// Used to create a session token instead of an API token, it requires the account to be configured to login with Email and
// Password
func (o ProviderOutput) Email() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Provider) pulumi.StringPtrOutput { return v.Email }).(pulumi.StringPtrOutput)
}

// Required if the user is configured to be part of multiple organizations
func (o ProviderOutput) OrganizationId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Provider) pulumi.StringPtrOutput { return v.OrganizationId }).(pulumi.StringPtrOutput)
}

// Used to create a session token instead of an API token, it requires the account to be configured to login with Email and
// Password
func (o ProviderOutput) Password() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Provider) pulumi.StringPtrOutput { return v.Password }).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ProviderInput)(nil)).Elem(), &Provider{})
	pulumi.RegisterOutputType(ProviderOutput{})
	pulumi.RegisterOutputType(ProviderTerraformConfigResultOutput{})
}
