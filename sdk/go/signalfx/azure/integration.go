// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package azure

import (
	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// SignalFx Azure integrations. For help with this integration see [Monitoring Microsoft Azure](https://docs.signalfx.com/en/latest/integrations/azure-info.html).
// 
// **Note:** When managing integrations you'll need to use an admin token to authenticate the SignalFx provider. Otherwise you'll receive a 4xx error.
// 
// ## Service Names
// 
// Fields that expect an Azure service will work with one of: "microsoft.sql/servers/elasticpools" "microsoft.storage/storageaccounts" "microsoft.storage/storageaccountsservices/tableservices" "microsoft.storage/storageaccountsservices/blobservices" "microsoft.storage/storageaccounts/queueservices" "microsoft.storage/storageaccounts/fileservices" "microsoft.compute/virtualmachinescalesets" "microsoft.compute/virtualmachinescalesets/virtualmachines" "microsoft.compute/virtualmachines" "microsoft.devices/iothubs" "microsoft.eventHub/namespaces" "microsoft.batch/batchaccounts" "microsoft.sql/servers/databases" "microsoft.cache/redis" "microsoft.logic/workflows".
//
// > This content is derived from https://github.com/terraform-providers/terraform-provider-signalfx/blob/master/website/docs/r/azure_integration.html.markdown.
type Integration struct {
	s *pulumi.ResourceState
}

// NewIntegration registers a new resource with the given unique name, arguments, and options.
func NewIntegration(ctx *pulumi.Context,
	name string, args *IntegrationArgs, opts ...pulumi.ResourceOpt) (*Integration, error) {
	if args == nil || args.AppId == nil {
		return nil, errors.New("missing required argument 'AppId'")
	}
	if args == nil || args.Enabled == nil {
		return nil, errors.New("missing required argument 'Enabled'")
	}
	if args == nil || args.SecretKey == nil {
		return nil, errors.New("missing required argument 'SecretKey'")
	}
	if args == nil || args.Subscriptions == nil {
		return nil, errors.New("missing required argument 'Subscriptions'")
	}
	if args == nil || args.TenantId == nil {
		return nil, errors.New("missing required argument 'TenantId'")
	}
	inputs := make(map[string]interface{})
	if args == nil {
		inputs["appId"] = nil
		inputs["enabled"] = nil
		inputs["environment"] = nil
		inputs["name"] = nil
		inputs["pollRate"] = nil
		inputs["secretKey"] = nil
		inputs["services"] = nil
		inputs["subscriptions"] = nil
		inputs["tenantId"] = nil
	} else {
		inputs["appId"] = args.AppId
		inputs["enabled"] = args.Enabled
		inputs["environment"] = args.Environment
		inputs["name"] = args.Name
		inputs["pollRate"] = args.PollRate
		inputs["secretKey"] = args.SecretKey
		inputs["services"] = args.Services
		inputs["subscriptions"] = args.Subscriptions
		inputs["tenantId"] = args.TenantId
	}
	s, err := ctx.RegisterResource("signalfx:azure/integration:Integration", name, true, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &Integration{s: s}, nil
}

// GetIntegration gets an existing Integration resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetIntegration(ctx *pulumi.Context,
	name string, id pulumi.ID, state *IntegrationState, opts ...pulumi.ResourceOpt) (*Integration, error) {
	inputs := make(map[string]interface{})
	if state != nil {
		inputs["appId"] = state.AppId
		inputs["enabled"] = state.Enabled
		inputs["environment"] = state.Environment
		inputs["name"] = state.Name
		inputs["pollRate"] = state.PollRate
		inputs["secretKey"] = state.SecretKey
		inputs["services"] = state.Services
		inputs["subscriptions"] = state.Subscriptions
		inputs["tenantId"] = state.TenantId
	}
	s, err := ctx.ReadResource("signalfx:azure/integration:Integration", name, id, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &Integration{s: s}, nil
}

// URN is this resource's unique name assigned by Pulumi.
func (r *Integration) URN() *pulumi.URNOutput {
	return r.s.URN()
}

// ID is this resource's unique identifier assigned by its provider.
func (r *Integration) ID() *pulumi.IDOutput {
	return r.s.ID()
}

// Azure application ID for the SignalFx app. To learn how to get this ID, see the topic [Connect to Microsoft Azure](https://docs.signalfx.com/en/latest/getting-started/send-data.html#connect-to-microsoft-azure) in the product documentation.
func (r *Integration) AppId() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["appId"])
}

// Whether the integration is enabled.
func (r *Integration) Enabled() *pulumi.BoolOutput {
	return (*pulumi.BoolOutput)(r.s.State["enabled"])
}

// What type of Azure integration this is. The allowed values are `\"azure_us_government\"` and `\"azure\"`. Defaults to `\"azure\"`.
func (r *Integration) Environment() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["environment"])
}

// Name of the integration.
func (r *Integration) Name() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["name"])
}

// AWS poll rate (in seconds). One of `60` or `300`.
func (r *Integration) PollRate() *pulumi.IntOutput {
	return (*pulumi.IntOutput)(r.s.State["pollRate"])
}

// Azure secret key that associates the SignalFx app in Azure with the Azure tenant ID. To learn how to get this ID, see the topic [Connect to Microsoft Azure](https://docs.signalfx.com/en/latest/getting-started/send-data.html#connect-to-microsoft-azure) in the product documentation.
func (r *Integration) SecretKey() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["secretKey"])
}

// List of Microsoft Azure service names for the Azure services you want SignalFx to monitor.
func (r *Integration) Services() *pulumi.ArrayOutput {
	return (*pulumi.ArrayOutput)(r.s.State["services"])
}

// List of Azure subscriptions that SignalFx should monitor.
func (r *Integration) Subscriptions() *pulumi.ArrayOutput {
	return (*pulumi.ArrayOutput)(r.s.State["subscriptions"])
}

// Azure ID of the Azure tenant. To learn how to get this ID, see the topic [Connect to Microsoft Azure](https://docs.signalfx.com/en/latest/getting-started/send-data.html#connect-to-microsoft-azure) in the product documentation.
func (r *Integration) TenantId() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["tenantId"])
}

// Input properties used for looking up and filtering Integration resources.
type IntegrationState struct {
	// Azure application ID for the SignalFx app. To learn how to get this ID, see the topic [Connect to Microsoft Azure](https://docs.signalfx.com/en/latest/getting-started/send-data.html#connect-to-microsoft-azure) in the product documentation.
	AppId interface{}
	// Whether the integration is enabled.
	Enabled interface{}
	// What type of Azure integration this is. The allowed values are `\"azure_us_government\"` and `\"azure\"`. Defaults to `\"azure\"`.
	Environment interface{}
	// Name of the integration.
	Name interface{}
	// AWS poll rate (in seconds). One of `60` or `300`.
	PollRate interface{}
	// Azure secret key that associates the SignalFx app in Azure with the Azure tenant ID. To learn how to get this ID, see the topic [Connect to Microsoft Azure](https://docs.signalfx.com/en/latest/getting-started/send-data.html#connect-to-microsoft-azure) in the product documentation.
	SecretKey interface{}
	// List of Microsoft Azure service names for the Azure services you want SignalFx to monitor.
	Services interface{}
	// List of Azure subscriptions that SignalFx should monitor.
	Subscriptions interface{}
	// Azure ID of the Azure tenant. To learn how to get this ID, see the topic [Connect to Microsoft Azure](https://docs.signalfx.com/en/latest/getting-started/send-data.html#connect-to-microsoft-azure) in the product documentation.
	TenantId interface{}
}

// The set of arguments for constructing a Integration resource.
type IntegrationArgs struct {
	// Azure application ID for the SignalFx app. To learn how to get this ID, see the topic [Connect to Microsoft Azure](https://docs.signalfx.com/en/latest/getting-started/send-data.html#connect-to-microsoft-azure) in the product documentation.
	AppId interface{}
	// Whether the integration is enabled.
	Enabled interface{}
	// What type of Azure integration this is. The allowed values are `\"azure_us_government\"` and `\"azure\"`. Defaults to `\"azure\"`.
	Environment interface{}
	// Name of the integration.
	Name interface{}
	// AWS poll rate (in seconds). One of `60` or `300`.
	PollRate interface{}
	// Azure secret key that associates the SignalFx app in Azure with the Azure tenant ID. To learn how to get this ID, see the topic [Connect to Microsoft Azure](https://docs.signalfx.com/en/latest/getting-started/send-data.html#connect-to-microsoft-azure) in the product documentation.
	SecretKey interface{}
	// List of Microsoft Azure service names for the Azure services you want SignalFx to monitor.
	Services interface{}
	// List of Azure subscriptions that SignalFx should monitor.
	Subscriptions interface{}
	// Azure ID of the Azure tenant. To learn how to get this ID, see the topic [Connect to Microsoft Azure](https://docs.signalfx.com/en/latest/getting-started/send-data.html#connect-to-microsoft-azure) in the product documentation.
	TenantId interface{}
}
