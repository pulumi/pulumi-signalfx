// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

// nolint: lll
package signalfx

import (
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// SignalFx Webhook integration.
// 
// > **NOTE** When managing integrations you'll need to use an admin token to authenticate the SignalFx provider. Otherwise you'll receive a 4xx error.
// 
// > This content is derived from https://github.com/terraform-providers/terraform-provider-signalfx/blob/master/website/docs/r/webhook_integration.html.markdown.
type WebhookIntegration struct {
	pulumi.CustomResourceState

	// Whether the integration is enabled.
	Enabled pulumi.BoolOutput `pulumi:"enabled"`
	// A header to send with the request
	Headers WebhookIntegrationHeaderArrayOutput `pulumi:"headers"`
	// Name of the integration.
	Name pulumi.StringOutput `pulumi:"name"`
	SharedSecret pulumi.StringPtrOutput `pulumi:"sharedSecret"`
	// The URL to request
	Url pulumi.StringPtrOutput `pulumi:"url"`
}

// NewWebhookIntegration registers a new resource with the given unique name, arguments, and options.
func NewWebhookIntegration(ctx *pulumi.Context,
	name string, args *WebhookIntegrationArgs, opts ...pulumi.ResourceOption) (*WebhookIntegration, error) {
	if args == nil || args.Enabled == nil {
		return nil, errors.New("missing required argument 'Enabled'")
	}
	if args == nil {
		args = &WebhookIntegrationArgs{}
	}
	var resource WebhookIntegration
	err := ctx.RegisterResource("signalfx:index/webhookIntegration:WebhookIntegration", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetWebhookIntegration gets an existing WebhookIntegration resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetWebhookIntegration(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *WebhookIntegrationState, opts ...pulumi.ResourceOption) (*WebhookIntegration, error) {
	var resource WebhookIntegration
	err := ctx.ReadResource("signalfx:index/webhookIntegration:WebhookIntegration", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering WebhookIntegration resources.
type webhookIntegrationState struct {
	// Whether the integration is enabled.
	Enabled *bool `pulumi:"enabled"`
	// A header to send with the request
	Headers []WebhookIntegrationHeader `pulumi:"headers"`
	// Name of the integration.
	Name *string `pulumi:"name"`
	SharedSecret *string `pulumi:"sharedSecret"`
	// The URL to request
	Url *string `pulumi:"url"`
}

type WebhookIntegrationState struct {
	// Whether the integration is enabled.
	Enabled pulumi.BoolPtrInput
	// A header to send with the request
	Headers WebhookIntegrationHeaderArrayInput
	// Name of the integration.
	Name pulumi.StringPtrInput
	SharedSecret pulumi.StringPtrInput
	// The URL to request
	Url pulumi.StringPtrInput
}

func (WebhookIntegrationState) ElementType() reflect.Type {
	return reflect.TypeOf((*webhookIntegrationState)(nil)).Elem()
}

type webhookIntegrationArgs struct {
	// Whether the integration is enabled.
	Enabled bool `pulumi:"enabled"`
	// A header to send with the request
	Headers []WebhookIntegrationHeader `pulumi:"headers"`
	// Name of the integration.
	Name *string `pulumi:"name"`
	SharedSecret *string `pulumi:"sharedSecret"`
	// The URL to request
	Url *string `pulumi:"url"`
}

// The set of arguments for constructing a WebhookIntegration resource.
type WebhookIntegrationArgs struct {
	// Whether the integration is enabled.
	Enabled pulumi.BoolInput
	// A header to send with the request
	Headers WebhookIntegrationHeaderArrayInput
	// Name of the integration.
	Name pulumi.StringPtrInput
	SharedSecret pulumi.StringPtrInput
	// The URL to request
	Url pulumi.StringPtrInput
}

func (WebhookIntegrationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*webhookIntegrationArgs)(nil)).Elem()
}

