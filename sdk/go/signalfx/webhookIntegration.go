// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package signalfx

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// SignalFx Webhook integration.
//
// > **NOTE** When managing integrations you'll need to use an admin token to authenticate the SignalFx provider. Otherwise you'll receive a 4xx error.
type WebhookIntegration struct {
	pulumi.CustomResourceState

	// Whether the integration is enabled.
	Enabled pulumi.BoolOutput `pulumi:"enabled"`
	// A header to send with the request
	Headers WebhookIntegrationHeaderArrayOutput `pulumi:"headers"`
	// Name of the integration.
	Name         pulumi.StringOutput    `pulumi:"name"`
	SharedSecret pulumi.StringPtrOutput `pulumi:"sharedSecret"`
	// The URL to request
	Url pulumi.StringPtrOutput `pulumi:"url"`
}

// NewWebhookIntegration registers a new resource with the given unique name, arguments, and options.
func NewWebhookIntegration(ctx *pulumi.Context,
	name string, args *WebhookIntegrationArgs, opts ...pulumi.ResourceOption) (*WebhookIntegration, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Enabled == nil {
		return nil, errors.New("invalid value for required argument 'Enabled'")
	}
	var resource WebhookIntegration
	err := ctx.RegisterResource("signalfx:index/webhookIntegration:WebhookIntegration", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetWebhookIntegration gets an existing WebhookIntegration resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetWebhookIntegration(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *WebhookIntegrationState, opts ...pulumi.ResourceOption) (*WebhookIntegration, error) {
	var resource WebhookIntegration
	err := ctx.ReadResource("signalfx:index/webhookIntegration:WebhookIntegration", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering WebhookIntegration resources.
type webhookIntegrationState struct {
	// Whether the integration is enabled.
	Enabled *bool `pulumi:"enabled"`
	// A header to send with the request
	Headers []WebhookIntegrationHeader `pulumi:"headers"`
	// Name of the integration.
	Name         *string `pulumi:"name"`
	SharedSecret *string `pulumi:"sharedSecret"`
	// The URL to request
	Url *string `pulumi:"url"`
}

type WebhookIntegrationState struct {
	// Whether the integration is enabled.
	Enabled pulumi.BoolPtrInput
	// A header to send with the request
	Headers WebhookIntegrationHeaderArrayInput
	// Name of the integration.
	Name         pulumi.StringPtrInput
	SharedSecret pulumi.StringPtrInput
	// The URL to request
	Url pulumi.StringPtrInput
}

func (WebhookIntegrationState) ElementType() reflect.Type {
	return reflect.TypeOf((*webhookIntegrationState)(nil)).Elem()
}

type webhookIntegrationArgs struct {
	// Whether the integration is enabled.
	Enabled bool `pulumi:"enabled"`
	// A header to send with the request
	Headers []WebhookIntegrationHeader `pulumi:"headers"`
	// Name of the integration.
	Name         *string `pulumi:"name"`
	SharedSecret *string `pulumi:"sharedSecret"`
	// The URL to request
	Url *string `pulumi:"url"`
}

// The set of arguments for constructing a WebhookIntegration resource.
type WebhookIntegrationArgs struct {
	// Whether the integration is enabled.
	Enabled pulumi.BoolInput
	// A header to send with the request
	Headers WebhookIntegrationHeaderArrayInput
	// Name of the integration.
	Name         pulumi.StringPtrInput
	SharedSecret pulumi.StringPtrInput
	// The URL to request
	Url pulumi.StringPtrInput
}

func (WebhookIntegrationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*webhookIntegrationArgs)(nil)).Elem()
}

type WebhookIntegrationInput interface {
	pulumi.Input

	ToWebhookIntegrationOutput() WebhookIntegrationOutput
	ToWebhookIntegrationOutputWithContext(ctx context.Context) WebhookIntegrationOutput
}

func (*WebhookIntegration) ElementType() reflect.Type {
	return reflect.TypeOf((*WebhookIntegration)(nil))
}

func (i *WebhookIntegration) ToWebhookIntegrationOutput() WebhookIntegrationOutput {
	return i.ToWebhookIntegrationOutputWithContext(context.Background())
}

func (i *WebhookIntegration) ToWebhookIntegrationOutputWithContext(ctx context.Context) WebhookIntegrationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WebhookIntegrationOutput)
}

func (i *WebhookIntegration) ToWebhookIntegrationPtrOutput() WebhookIntegrationPtrOutput {
	return i.ToWebhookIntegrationPtrOutputWithContext(context.Background())
}

func (i *WebhookIntegration) ToWebhookIntegrationPtrOutputWithContext(ctx context.Context) WebhookIntegrationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WebhookIntegrationPtrOutput)
}

type WebhookIntegrationPtrInput interface {
	pulumi.Input

	ToWebhookIntegrationPtrOutput() WebhookIntegrationPtrOutput
	ToWebhookIntegrationPtrOutputWithContext(ctx context.Context) WebhookIntegrationPtrOutput
}

type webhookIntegrationPtrType WebhookIntegrationArgs

func (*webhookIntegrationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**WebhookIntegration)(nil))
}

func (i *webhookIntegrationPtrType) ToWebhookIntegrationPtrOutput() WebhookIntegrationPtrOutput {
	return i.ToWebhookIntegrationPtrOutputWithContext(context.Background())
}

func (i *webhookIntegrationPtrType) ToWebhookIntegrationPtrOutputWithContext(ctx context.Context) WebhookIntegrationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WebhookIntegrationPtrOutput)
}

// WebhookIntegrationArrayInput is an input type that accepts WebhookIntegrationArray and WebhookIntegrationArrayOutput values.
// You can construct a concrete instance of `WebhookIntegrationArrayInput` via:
//
//          WebhookIntegrationArray{ WebhookIntegrationArgs{...} }
type WebhookIntegrationArrayInput interface {
	pulumi.Input

	ToWebhookIntegrationArrayOutput() WebhookIntegrationArrayOutput
	ToWebhookIntegrationArrayOutputWithContext(context.Context) WebhookIntegrationArrayOutput
}

type WebhookIntegrationArray []WebhookIntegrationInput

func (WebhookIntegrationArray) ElementType() reflect.Type {
	return reflect.TypeOf(([]*WebhookIntegration)(nil))
}

func (i WebhookIntegrationArray) ToWebhookIntegrationArrayOutput() WebhookIntegrationArrayOutput {
	return i.ToWebhookIntegrationArrayOutputWithContext(context.Background())
}

func (i WebhookIntegrationArray) ToWebhookIntegrationArrayOutputWithContext(ctx context.Context) WebhookIntegrationArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WebhookIntegrationArrayOutput)
}

// WebhookIntegrationMapInput is an input type that accepts WebhookIntegrationMap and WebhookIntegrationMapOutput values.
// You can construct a concrete instance of `WebhookIntegrationMapInput` via:
//
//          WebhookIntegrationMap{ "key": WebhookIntegrationArgs{...} }
type WebhookIntegrationMapInput interface {
	pulumi.Input

	ToWebhookIntegrationMapOutput() WebhookIntegrationMapOutput
	ToWebhookIntegrationMapOutputWithContext(context.Context) WebhookIntegrationMapOutput
}

type WebhookIntegrationMap map[string]WebhookIntegrationInput

func (WebhookIntegrationMap) ElementType() reflect.Type {
	return reflect.TypeOf((map[string]*WebhookIntegration)(nil))
}

func (i WebhookIntegrationMap) ToWebhookIntegrationMapOutput() WebhookIntegrationMapOutput {
	return i.ToWebhookIntegrationMapOutputWithContext(context.Background())
}

func (i WebhookIntegrationMap) ToWebhookIntegrationMapOutputWithContext(ctx context.Context) WebhookIntegrationMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WebhookIntegrationMapOutput)
}

type WebhookIntegrationOutput struct {
	*pulumi.OutputState
}

func (WebhookIntegrationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*WebhookIntegration)(nil))
}

func (o WebhookIntegrationOutput) ToWebhookIntegrationOutput() WebhookIntegrationOutput {
	return o
}

func (o WebhookIntegrationOutput) ToWebhookIntegrationOutputWithContext(ctx context.Context) WebhookIntegrationOutput {
	return o
}

func (o WebhookIntegrationOutput) ToWebhookIntegrationPtrOutput() WebhookIntegrationPtrOutput {
	return o.ToWebhookIntegrationPtrOutputWithContext(context.Background())
}

func (o WebhookIntegrationOutput) ToWebhookIntegrationPtrOutputWithContext(ctx context.Context) WebhookIntegrationPtrOutput {
	return o.ApplyT(func(v WebhookIntegration) *WebhookIntegration {
		return &v
	}).(WebhookIntegrationPtrOutput)
}

type WebhookIntegrationPtrOutput struct {
	*pulumi.OutputState
}

func (WebhookIntegrationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**WebhookIntegration)(nil))
}

func (o WebhookIntegrationPtrOutput) ToWebhookIntegrationPtrOutput() WebhookIntegrationPtrOutput {
	return o
}

func (o WebhookIntegrationPtrOutput) ToWebhookIntegrationPtrOutputWithContext(ctx context.Context) WebhookIntegrationPtrOutput {
	return o
}

type WebhookIntegrationArrayOutput struct{ *pulumi.OutputState }

func (WebhookIntegrationArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]WebhookIntegration)(nil))
}

func (o WebhookIntegrationArrayOutput) ToWebhookIntegrationArrayOutput() WebhookIntegrationArrayOutput {
	return o
}

func (o WebhookIntegrationArrayOutput) ToWebhookIntegrationArrayOutputWithContext(ctx context.Context) WebhookIntegrationArrayOutput {
	return o
}

func (o WebhookIntegrationArrayOutput) Index(i pulumi.IntInput) WebhookIntegrationOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) WebhookIntegration {
		return vs[0].([]WebhookIntegration)[vs[1].(int)]
	}).(WebhookIntegrationOutput)
}

type WebhookIntegrationMapOutput struct{ *pulumi.OutputState }

func (WebhookIntegrationMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]WebhookIntegration)(nil))
}

func (o WebhookIntegrationMapOutput) ToWebhookIntegrationMapOutput() WebhookIntegrationMapOutput {
	return o
}

func (o WebhookIntegrationMapOutput) ToWebhookIntegrationMapOutputWithContext(ctx context.Context) WebhookIntegrationMapOutput {
	return o
}

func (o WebhookIntegrationMapOutput) MapIndex(k pulumi.StringInput) WebhookIntegrationOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) WebhookIntegration {
		return vs[0].(map[string]WebhookIntegration)[vs[1].(string)]
	}).(WebhookIntegrationOutput)
}

func init() {
	pulumi.RegisterOutputType(WebhookIntegrationOutput{})
	pulumi.RegisterOutputType(WebhookIntegrationPtrOutput{})
	pulumi.RegisterOutputType(WebhookIntegrationArrayOutput{})
	pulumi.RegisterOutputType(WebhookIntegrationMapOutput{})
}
