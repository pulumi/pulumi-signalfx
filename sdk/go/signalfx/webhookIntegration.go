// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package signalfx

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-signalfx/sdk/v7/go/signalfx/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Splunk Observability Cloud webhook integration.
//
// > **NOTE** When managing integrations, use a session token of an administrator to authenticate the Splunk Observability Cloud provider. See [Operations that require a session token for an administrator](https://dev.splunk.com/observability/docs/administration/authtokens#Operations-that-require-a-session-token-for-an-administrator). Otherwise you'll receive a 4xx error.
//
// ## Example
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-signalfx/sdk/v7/go/signalfx"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := signalfx.NewWebhookIntegration(ctx, "webhook_myteam", &signalfx.WebhookIntegrationArgs{
//				Name:            pulumi.String("Webhook - My Team"),
//				Enabled:         pulumi.Bool(true),
//				Url:             pulumi.String("https://www.example.com"),
//				SharedSecret:    pulumi.String("abc1234"),
//				Method:          pulumi.String("POST"),
//				PayloadTemplate: pulumi.String("{\n  \"incidentId\": \"{{{incidentId}}}\"\n}\n"),
//				Headers: signalfx.WebhookIntegrationHeaderArray{
//					&signalfx.WebhookIntegrationHeaderArgs{
//						HeaderKey:   pulumi.String("some_header"),
//						HeaderValue: pulumi.String("value_for_that_header"),
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
type WebhookIntegration struct {
	pulumi.CustomResourceState

	// Whether the integration is enabled.
	Enabled pulumi.BoolOutput `pulumi:"enabled"`
	// A header to send with the request
	Headers WebhookIntegrationHeaderArrayOutput `pulumi:"headers"`
	// HTTP method used for the webhook request, such as 'GET', 'POST' and 'PUT'
	Method pulumi.StringPtrOutput `pulumi:"method"`
	// Name of the integration.
	Name pulumi.StringOutput `pulumi:"name"`
	// Template for the payload to be sent with the webhook request in JSON format
	PayloadTemplate pulumi.StringPtrOutput `pulumi:"payloadTemplate"`
	SharedSecret    pulumi.StringPtrOutput `pulumi:"sharedSecret"`
	// The URL to request
	Url pulumi.StringPtrOutput `pulumi:"url"`
}

// NewWebhookIntegration registers a new resource with the given unique name, arguments, and options.
func NewWebhookIntegration(ctx *pulumi.Context,
	name string, args *WebhookIntegrationArgs, opts ...pulumi.ResourceOption) (*WebhookIntegration, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Enabled == nil {
		return nil, errors.New("invalid value for required argument 'Enabled'")
	}
	if args.Headers != nil {
		args.Headers = pulumi.ToSecret(args.Headers).(WebhookIntegrationHeaderArrayInput)
	}
	if args.SharedSecret != nil {
		args.SharedSecret = pulumi.ToSecret(args.SharedSecret).(pulumi.StringPtrInput)
	}
	secrets := pulumi.AdditionalSecretOutputs([]string{
		"headers",
		"sharedSecret",
	})
	opts = append(opts, secrets)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource WebhookIntegration
	err := ctx.RegisterResource("signalfx:index/webhookIntegration:WebhookIntegration", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetWebhookIntegration gets an existing WebhookIntegration resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetWebhookIntegration(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *WebhookIntegrationState, opts ...pulumi.ResourceOption) (*WebhookIntegration, error) {
	var resource WebhookIntegration
	err := ctx.ReadResource("signalfx:index/webhookIntegration:WebhookIntegration", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering WebhookIntegration resources.
type webhookIntegrationState struct {
	// Whether the integration is enabled.
	Enabled *bool `pulumi:"enabled"`
	// A header to send with the request
	Headers []WebhookIntegrationHeader `pulumi:"headers"`
	// HTTP method used for the webhook request, such as 'GET', 'POST' and 'PUT'
	Method *string `pulumi:"method"`
	// Name of the integration.
	Name *string `pulumi:"name"`
	// Template for the payload to be sent with the webhook request in JSON format
	PayloadTemplate *string `pulumi:"payloadTemplate"`
	SharedSecret    *string `pulumi:"sharedSecret"`
	// The URL to request
	Url *string `pulumi:"url"`
}

type WebhookIntegrationState struct {
	// Whether the integration is enabled.
	Enabled pulumi.BoolPtrInput
	// A header to send with the request
	Headers WebhookIntegrationHeaderArrayInput
	// HTTP method used for the webhook request, such as 'GET', 'POST' and 'PUT'
	Method pulumi.StringPtrInput
	// Name of the integration.
	Name pulumi.StringPtrInput
	// Template for the payload to be sent with the webhook request in JSON format
	PayloadTemplate pulumi.StringPtrInput
	SharedSecret    pulumi.StringPtrInput
	// The URL to request
	Url pulumi.StringPtrInput
}

func (WebhookIntegrationState) ElementType() reflect.Type {
	return reflect.TypeOf((*webhookIntegrationState)(nil)).Elem()
}

type webhookIntegrationArgs struct {
	// Whether the integration is enabled.
	Enabled bool `pulumi:"enabled"`
	// A header to send with the request
	Headers []WebhookIntegrationHeader `pulumi:"headers"`
	// HTTP method used for the webhook request, such as 'GET', 'POST' and 'PUT'
	Method *string `pulumi:"method"`
	// Name of the integration.
	Name *string `pulumi:"name"`
	// Template for the payload to be sent with the webhook request in JSON format
	PayloadTemplate *string `pulumi:"payloadTemplate"`
	SharedSecret    *string `pulumi:"sharedSecret"`
	// The URL to request
	Url *string `pulumi:"url"`
}

// The set of arguments for constructing a WebhookIntegration resource.
type WebhookIntegrationArgs struct {
	// Whether the integration is enabled.
	Enabled pulumi.BoolInput
	// A header to send with the request
	Headers WebhookIntegrationHeaderArrayInput
	// HTTP method used for the webhook request, such as 'GET', 'POST' and 'PUT'
	Method pulumi.StringPtrInput
	// Name of the integration.
	Name pulumi.StringPtrInput
	// Template for the payload to be sent with the webhook request in JSON format
	PayloadTemplate pulumi.StringPtrInput
	SharedSecret    pulumi.StringPtrInput
	// The URL to request
	Url pulumi.StringPtrInput
}

func (WebhookIntegrationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*webhookIntegrationArgs)(nil)).Elem()
}

type WebhookIntegrationInput interface {
	pulumi.Input

	ToWebhookIntegrationOutput() WebhookIntegrationOutput
	ToWebhookIntegrationOutputWithContext(ctx context.Context) WebhookIntegrationOutput
}

func (*WebhookIntegration) ElementType() reflect.Type {
	return reflect.TypeOf((**WebhookIntegration)(nil)).Elem()
}

func (i *WebhookIntegration) ToWebhookIntegrationOutput() WebhookIntegrationOutput {
	return i.ToWebhookIntegrationOutputWithContext(context.Background())
}

func (i *WebhookIntegration) ToWebhookIntegrationOutputWithContext(ctx context.Context) WebhookIntegrationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WebhookIntegrationOutput)
}

// WebhookIntegrationArrayInput is an input type that accepts WebhookIntegrationArray and WebhookIntegrationArrayOutput values.
// You can construct a concrete instance of `WebhookIntegrationArrayInput` via:
//
//	WebhookIntegrationArray{ WebhookIntegrationArgs{...} }
type WebhookIntegrationArrayInput interface {
	pulumi.Input

	ToWebhookIntegrationArrayOutput() WebhookIntegrationArrayOutput
	ToWebhookIntegrationArrayOutputWithContext(context.Context) WebhookIntegrationArrayOutput
}

type WebhookIntegrationArray []WebhookIntegrationInput

func (WebhookIntegrationArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*WebhookIntegration)(nil)).Elem()
}

func (i WebhookIntegrationArray) ToWebhookIntegrationArrayOutput() WebhookIntegrationArrayOutput {
	return i.ToWebhookIntegrationArrayOutputWithContext(context.Background())
}

func (i WebhookIntegrationArray) ToWebhookIntegrationArrayOutputWithContext(ctx context.Context) WebhookIntegrationArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WebhookIntegrationArrayOutput)
}

// WebhookIntegrationMapInput is an input type that accepts WebhookIntegrationMap and WebhookIntegrationMapOutput values.
// You can construct a concrete instance of `WebhookIntegrationMapInput` via:
//
//	WebhookIntegrationMap{ "key": WebhookIntegrationArgs{...} }
type WebhookIntegrationMapInput interface {
	pulumi.Input

	ToWebhookIntegrationMapOutput() WebhookIntegrationMapOutput
	ToWebhookIntegrationMapOutputWithContext(context.Context) WebhookIntegrationMapOutput
}

type WebhookIntegrationMap map[string]WebhookIntegrationInput

func (WebhookIntegrationMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*WebhookIntegration)(nil)).Elem()
}

func (i WebhookIntegrationMap) ToWebhookIntegrationMapOutput() WebhookIntegrationMapOutput {
	return i.ToWebhookIntegrationMapOutputWithContext(context.Background())
}

func (i WebhookIntegrationMap) ToWebhookIntegrationMapOutputWithContext(ctx context.Context) WebhookIntegrationMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WebhookIntegrationMapOutput)
}

type WebhookIntegrationOutput struct{ *pulumi.OutputState }

func (WebhookIntegrationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**WebhookIntegration)(nil)).Elem()
}

func (o WebhookIntegrationOutput) ToWebhookIntegrationOutput() WebhookIntegrationOutput {
	return o
}

func (o WebhookIntegrationOutput) ToWebhookIntegrationOutputWithContext(ctx context.Context) WebhookIntegrationOutput {
	return o
}

// Whether the integration is enabled.
func (o WebhookIntegrationOutput) Enabled() pulumi.BoolOutput {
	return o.ApplyT(func(v *WebhookIntegration) pulumi.BoolOutput { return v.Enabled }).(pulumi.BoolOutput)
}

// A header to send with the request
func (o WebhookIntegrationOutput) Headers() WebhookIntegrationHeaderArrayOutput {
	return o.ApplyT(func(v *WebhookIntegration) WebhookIntegrationHeaderArrayOutput { return v.Headers }).(WebhookIntegrationHeaderArrayOutput)
}

// HTTP method used for the webhook request, such as 'GET', 'POST' and 'PUT'
func (o WebhookIntegrationOutput) Method() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WebhookIntegration) pulumi.StringPtrOutput { return v.Method }).(pulumi.StringPtrOutput)
}

// Name of the integration.
func (o WebhookIntegrationOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *WebhookIntegration) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Template for the payload to be sent with the webhook request in JSON format
func (o WebhookIntegrationOutput) PayloadTemplate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WebhookIntegration) pulumi.StringPtrOutput { return v.PayloadTemplate }).(pulumi.StringPtrOutput)
}

func (o WebhookIntegrationOutput) SharedSecret() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WebhookIntegration) pulumi.StringPtrOutput { return v.SharedSecret }).(pulumi.StringPtrOutput)
}

// The URL to request
func (o WebhookIntegrationOutput) Url() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WebhookIntegration) pulumi.StringPtrOutput { return v.Url }).(pulumi.StringPtrOutput)
}

type WebhookIntegrationArrayOutput struct{ *pulumi.OutputState }

func (WebhookIntegrationArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*WebhookIntegration)(nil)).Elem()
}

func (o WebhookIntegrationArrayOutput) ToWebhookIntegrationArrayOutput() WebhookIntegrationArrayOutput {
	return o
}

func (o WebhookIntegrationArrayOutput) ToWebhookIntegrationArrayOutputWithContext(ctx context.Context) WebhookIntegrationArrayOutput {
	return o
}

func (o WebhookIntegrationArrayOutput) Index(i pulumi.IntInput) WebhookIntegrationOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *WebhookIntegration {
		return vs[0].([]*WebhookIntegration)[vs[1].(int)]
	}).(WebhookIntegrationOutput)
}

type WebhookIntegrationMapOutput struct{ *pulumi.OutputState }

func (WebhookIntegrationMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*WebhookIntegration)(nil)).Elem()
}

func (o WebhookIntegrationMapOutput) ToWebhookIntegrationMapOutput() WebhookIntegrationMapOutput {
	return o
}

func (o WebhookIntegrationMapOutput) ToWebhookIntegrationMapOutputWithContext(ctx context.Context) WebhookIntegrationMapOutput {
	return o
}

func (o WebhookIntegrationMapOutput) MapIndex(k pulumi.StringInput) WebhookIntegrationOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *WebhookIntegration {
		return vs[0].(map[string]*WebhookIntegration)[vs[1].(string)]
	}).(WebhookIntegrationOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*WebhookIntegrationInput)(nil)).Elem(), &WebhookIntegration{})
	pulumi.RegisterInputType(reflect.TypeOf((*WebhookIntegrationArrayInput)(nil)).Elem(), WebhookIntegrationArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*WebhookIntegrationMapInput)(nil)).Elem(), WebhookIntegrationMap{})
	pulumi.RegisterOutputType(WebhookIntegrationOutput{})
	pulumi.RegisterOutputType(WebhookIntegrationArrayOutput{})
	pulumi.RegisterOutputType(WebhookIntegrationMapOutput{})
}
