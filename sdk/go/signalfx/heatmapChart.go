// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package signalfx

import (
	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// This chart type displays the specified plot in a heatmap fashion. This format is similar to the [Infrastructure Navigator](https://signalfx-product-docs.readthedocs-hosted.com/en/latest/built-in-content/infra-nav.html#infra), with squares representing each source for the selected metric, and the color of each square representing the value range of the metric.
//
// > This content is derived from https://github.com/terraform-providers/terraform-provider-signalfx/blob/master/website/docs/r/heatmap_chart.html.markdown.
type HeatmapChart struct {
	s *pulumi.ResourceState
}

// NewHeatmapChart registers a new resource with the given unique name, arguments, and options.
func NewHeatmapChart(ctx *pulumi.Context,
	name string, args *HeatmapChartArgs, opts ...pulumi.ResourceOpt) (*HeatmapChart, error) {
	if args == nil || args.ProgramText == nil {
		return nil, errors.New("missing required argument 'ProgramText'")
	}
	inputs := make(map[string]interface{})
	if args == nil {
		inputs["colorRange"] = nil
		inputs["colorScales"] = nil
		inputs["description"] = nil
		inputs["disableSampling"] = nil
		inputs["groupBies"] = nil
		inputs["hideTimestamp"] = nil
		inputs["maxDelay"] = nil
		inputs["minimumResolution"] = nil
		inputs["name"] = nil
		inputs["programText"] = nil
		inputs["refreshInterval"] = nil
		inputs["sortBy"] = nil
		inputs["unitPrefix"] = nil
	} else {
		inputs["colorRange"] = args.ColorRange
		inputs["colorScales"] = args.ColorScales
		inputs["description"] = args.Description
		inputs["disableSampling"] = args.DisableSampling
		inputs["groupBies"] = args.GroupBies
		inputs["hideTimestamp"] = args.HideTimestamp
		inputs["maxDelay"] = args.MaxDelay
		inputs["minimumResolution"] = args.MinimumResolution
		inputs["name"] = args.Name
		inputs["programText"] = args.ProgramText
		inputs["refreshInterval"] = args.RefreshInterval
		inputs["sortBy"] = args.SortBy
		inputs["unitPrefix"] = args.UnitPrefix
	}
	inputs["url"] = nil
	s, err := ctx.RegisterResource("signalfx:index/heatmapChart:HeatmapChart", name, true, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &HeatmapChart{s: s}, nil
}

// GetHeatmapChart gets an existing HeatmapChart resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetHeatmapChart(ctx *pulumi.Context,
	name string, id pulumi.ID, state *HeatmapChartState, opts ...pulumi.ResourceOpt) (*HeatmapChart, error) {
	inputs := make(map[string]interface{})
	if state != nil {
		inputs["colorRange"] = state.ColorRange
		inputs["colorScales"] = state.ColorScales
		inputs["description"] = state.Description
		inputs["disableSampling"] = state.DisableSampling
		inputs["groupBies"] = state.GroupBies
		inputs["hideTimestamp"] = state.HideTimestamp
		inputs["maxDelay"] = state.MaxDelay
		inputs["minimumResolution"] = state.MinimumResolution
		inputs["name"] = state.Name
		inputs["programText"] = state.ProgramText
		inputs["refreshInterval"] = state.RefreshInterval
		inputs["sortBy"] = state.SortBy
		inputs["unitPrefix"] = state.UnitPrefix
		inputs["url"] = state.Url
	}
	s, err := ctx.ReadResource("signalfx:index/heatmapChart:HeatmapChart", name, id, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &HeatmapChart{s: s}, nil
}

// URN is this resource's unique name assigned by Pulumi.
func (r *HeatmapChart) URN() *pulumi.URNOutput {
	return r.s.URN()
}

// ID is this resource's unique identifier assigned by its provider.
func (r *HeatmapChart) ID() *pulumi.IDOutput {
	return r.s.ID()
}

// Values and color for the color range. Example: `colorRange : { min : 0, max : 100, color : "#0000ff" }`. Look at this [link](https://docs.signalfx.com/en/latest/charts/chart-options-tab.html).
func (r *HeatmapChart) ColorRange() *pulumi.Output {
	return r.s.State["colorRange"]
}

// Single color range including both the color to display for that range and the borders of the range. Example: `[{ gt = 60, color = "blue" }, { lte = 60, color = "yellow" }]`. Look at this [link](https://docs.signalfx.com/en/latest/charts/chart-options-tab.html).
func (r *HeatmapChart) ColorScales() *pulumi.ArrayOutput {
	return (*pulumi.ArrayOutput)(r.s.State["colorScales"])
}

// Description of the chart.
func (r *HeatmapChart) Description() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["description"])
}

// If `false`, samples a subset of the output MTS, which improves UI performance. `false` by default.
func (r *HeatmapChart) DisableSampling() *pulumi.BoolOutput {
	return (*pulumi.BoolOutput)(r.s.State["disableSampling"])
}

// Properties to group by in the heatmap (in nesting order).
func (r *HeatmapChart) GroupBies() *pulumi.ArrayOutput {
	return (*pulumi.ArrayOutput)(r.s.State["groupBies"])
}

// Whether to show the timestamp in the chart. `false` by default.
func (r *HeatmapChart) HideTimestamp() *pulumi.BoolOutput {
	return (*pulumi.BoolOutput)(r.s.State["hideTimestamp"])
}

// How long (in seconds) to wait for late datapoints.
func (r *HeatmapChart) MaxDelay() *pulumi.IntOutput {
	return (*pulumi.IntOutput)(r.s.State["maxDelay"])
}

// The minimum resolution (in seconds) to use for computing the underlying program.
func (r *HeatmapChart) MinimumResolution() *pulumi.IntOutput {
	return (*pulumi.IntOutput)(r.s.State["minimumResolution"])
}

// Name of the chart.
func (r *HeatmapChart) Name() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["name"])
}

// Signalflow program text for the chart. More info at <https://developers.signalfx.com/docs/signalflow-overview>.
func (r *HeatmapChart) ProgramText() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["programText"])
}

// How often (in seconds) to refresh the values of the heatmap.
func (r *HeatmapChart) RefreshInterval() *pulumi.IntOutput {
	return (*pulumi.IntOutput)(r.s.State["refreshInterval"])
}

// The property to use when sorting the elements. Must be prepended with `+` for ascending or `-` for descending (e.g. `-foo`).
func (r *HeatmapChart) SortBy() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["sortBy"])
}

// Must be `"Metric"` or `"Binary`". `"Metric"` by default.
func (r *HeatmapChart) UnitPrefix() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["unitPrefix"])
}

// URL of the chart
func (r *HeatmapChart) Url() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["url"])
}

// Input properties used for looking up and filtering HeatmapChart resources.
type HeatmapChartState struct {
	// Values and color for the color range. Example: `colorRange : { min : 0, max : 100, color : "#0000ff" }`. Look at this [link](https://docs.signalfx.com/en/latest/charts/chart-options-tab.html).
	ColorRange interface{}
	// Single color range including both the color to display for that range and the borders of the range. Example: `[{ gt = 60, color = "blue" }, { lte = 60, color = "yellow" }]`. Look at this [link](https://docs.signalfx.com/en/latest/charts/chart-options-tab.html).
	ColorScales interface{}
	// Description of the chart.
	Description interface{}
	// If `false`, samples a subset of the output MTS, which improves UI performance. `false` by default.
	DisableSampling interface{}
	// Properties to group by in the heatmap (in nesting order).
	GroupBies interface{}
	// Whether to show the timestamp in the chart. `false` by default.
	HideTimestamp interface{}
	// How long (in seconds) to wait for late datapoints.
	MaxDelay interface{}
	// The minimum resolution (in seconds) to use for computing the underlying program.
	MinimumResolution interface{}
	// Name of the chart.
	Name interface{}
	// Signalflow program text for the chart. More info at <https://developers.signalfx.com/docs/signalflow-overview>.
	ProgramText interface{}
	// How often (in seconds) to refresh the values of the heatmap.
	RefreshInterval interface{}
	// The property to use when sorting the elements. Must be prepended with `+` for ascending or `-` for descending (e.g. `-foo`).
	SortBy interface{}
	// Must be `"Metric"` or `"Binary`". `"Metric"` by default.
	UnitPrefix interface{}
	// URL of the chart
	Url interface{}
}

// The set of arguments for constructing a HeatmapChart resource.
type HeatmapChartArgs struct {
	// Values and color for the color range. Example: `colorRange : { min : 0, max : 100, color : "#0000ff" }`. Look at this [link](https://docs.signalfx.com/en/latest/charts/chart-options-tab.html).
	ColorRange interface{}
	// Single color range including both the color to display for that range and the borders of the range. Example: `[{ gt = 60, color = "blue" }, { lte = 60, color = "yellow" }]`. Look at this [link](https://docs.signalfx.com/en/latest/charts/chart-options-tab.html).
	ColorScales interface{}
	// Description of the chart.
	Description interface{}
	// If `false`, samples a subset of the output MTS, which improves UI performance. `false` by default.
	DisableSampling interface{}
	// Properties to group by in the heatmap (in nesting order).
	GroupBies interface{}
	// Whether to show the timestamp in the chart. `false` by default.
	HideTimestamp interface{}
	// How long (in seconds) to wait for late datapoints.
	MaxDelay interface{}
	// The minimum resolution (in seconds) to use for computing the underlying program.
	MinimumResolution interface{}
	// Name of the chart.
	Name interface{}
	// Signalflow program text for the chart. More info at <https://developers.signalfx.com/docs/signalflow-overview>.
	ProgramText interface{}
	// How often (in seconds) to refresh the values of the heatmap.
	RefreshInterval interface{}
	// The property to use when sorting the elements. Must be prepended with `+` for ascending or `-` for descending (e.g. `-foo`).
	SortBy interface{}
	// Must be `"Metric"` or `"Binary`". `"Metric"` by default.
	UnitPrefix interface{}
}
