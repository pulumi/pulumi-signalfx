// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package signalfx

import (
	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// Provides a SignalFx detector resource. This can be used to create and manage detectors.
// 
// > **NOTE** If you're interested in using SignalFx detector features such as Historical Anomaly, Resource Running Out, or others then consider building them in the UI first then using the "Show SignalFlow" feature to extract the value for `programText`. You may also consult the [documentation for detector functions in signalflow-library](https://github.com/signalfx/signalflow-library/tree/master/library/signalfx/detectors).
//
// > This content is derived from https://github.com/terraform-providers/terraform-provider-signalfx/blob/master/website/docs/r/detector.html.markdown.
type Detector struct {
	s *pulumi.ResourceState
}

// NewDetector registers a new resource with the given unique name, arguments, and options.
func NewDetector(ctx *pulumi.Context,
	name string, args *DetectorArgs, opts ...pulumi.ResourceOpt) (*Detector, error) {
	if args == nil || args.ProgramText == nil {
		return nil, errors.New("missing required argument 'ProgramText'")
	}
	if args == nil || args.Rules == nil {
		return nil, errors.New("missing required argument 'Rules'")
	}
	inputs := make(map[string]interface{})
	if args == nil {
		inputs["authorizedWriterTeams"] = nil
		inputs["authorizedWriterUsers"] = nil
		inputs["description"] = nil
		inputs["disableSampling"] = nil
		inputs["endTime"] = nil
		inputs["maxDelay"] = nil
		inputs["name"] = nil
		inputs["programText"] = nil
		inputs["rules"] = nil
		inputs["showDataMarkers"] = nil
		inputs["showEventLines"] = nil
		inputs["startTime"] = nil
		inputs["teams"] = nil
		inputs["timeRange"] = nil
	} else {
		inputs["authorizedWriterTeams"] = args.AuthorizedWriterTeams
		inputs["authorizedWriterUsers"] = args.AuthorizedWriterUsers
		inputs["description"] = args.Description
		inputs["disableSampling"] = args.DisableSampling
		inputs["endTime"] = args.EndTime
		inputs["maxDelay"] = args.MaxDelay
		inputs["name"] = args.Name
		inputs["programText"] = args.ProgramText
		inputs["rules"] = args.Rules
		inputs["showDataMarkers"] = args.ShowDataMarkers
		inputs["showEventLines"] = args.ShowEventLines
		inputs["startTime"] = args.StartTime
		inputs["teams"] = args.Teams
		inputs["timeRange"] = args.TimeRange
	}
	inputs["url"] = nil
	s, err := ctx.RegisterResource("signalfx:index/detector:Detector", name, true, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &Detector{s: s}, nil
}

// GetDetector gets an existing Detector resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetDetector(ctx *pulumi.Context,
	name string, id pulumi.ID, state *DetectorState, opts ...pulumi.ResourceOpt) (*Detector, error) {
	inputs := make(map[string]interface{})
	if state != nil {
		inputs["authorizedWriterTeams"] = state.AuthorizedWriterTeams
		inputs["authorizedWriterUsers"] = state.AuthorizedWriterUsers
		inputs["description"] = state.Description
		inputs["disableSampling"] = state.DisableSampling
		inputs["endTime"] = state.EndTime
		inputs["maxDelay"] = state.MaxDelay
		inputs["name"] = state.Name
		inputs["programText"] = state.ProgramText
		inputs["rules"] = state.Rules
		inputs["showDataMarkers"] = state.ShowDataMarkers
		inputs["showEventLines"] = state.ShowEventLines
		inputs["startTime"] = state.StartTime
		inputs["teams"] = state.Teams
		inputs["timeRange"] = state.TimeRange
		inputs["url"] = state.Url
	}
	s, err := ctx.ReadResource("signalfx:index/detector:Detector", name, id, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &Detector{s: s}, nil
}

// URN is this resource's unique name assigned by Pulumi.
func (r *Detector) URN() pulumi.URNOutput {
	return r.s.URN()
}

// ID is this resource's unique identifier assigned by its provider.
func (r *Detector) ID() pulumi.IDOutput {
	return r.s.ID()
}

// Team IDs that have write access to this detector. Remember to use an admin's token if using this feature and to include that admin's team (or user id in `authorizedWriterTeams`).
func (r *Detector) AuthorizedWriterTeams() pulumi.ArrayOutput {
	return (pulumi.ArrayOutput)(r.s.State["authorizedWriterTeams"])
}

// User IDs that have write access to this detector. Remember to use an admin's token if using this feature and to include that admin's user id (or team id in `authorizedWriterTeams`).
func (r *Detector) AuthorizedWriterUsers() pulumi.ArrayOutput {
	return (pulumi.ArrayOutput)(r.s.State["authorizedWriterUsers"])
}

// Description for the rule. Displays as the alert condition in the Alert Rules tab of the detector editor in the web UI. 
func (r *Detector) Description() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["description"])
}

// When `false`, the visualization may sample the output timeseries rather than displaying them all. `false` by default.
func (r *Detector) DisableSampling() pulumi.BoolOutput {
	return (pulumi.BoolOutput)(r.s.State["disableSampling"])
}

// Seconds since epoch. Used for visualization. Conflicts with `timeRange`.
func (r *Detector) EndTime() pulumi.IntOutput {
	return (pulumi.IntOutput)(r.s.State["endTime"])
}

// How long (in seconds) to wait for late datapoints. See <https://signalfx-product-docs.readthedocs-hosted.com/en/latest/charts/chart-builder.html#delayed-datapoints> for more info. Max value is `900` seconds (15 minutes).
func (r *Detector) MaxDelay() pulumi.IntOutput {
	return (pulumi.IntOutput)(r.s.State["maxDelay"])
}

// Name of the detector.
func (r *Detector) Name() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["name"])
}

// Signalflow program text for the detector. More info at <https://developers.signalfx.com/signalflow_analytics/signalflow_overview.html>.
func (r *Detector) ProgramText() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["programText"])
}

// Set of rules used for alerting.
func (r *Detector) Rules() pulumi.ArrayOutput {
	return (pulumi.ArrayOutput)(r.s.State["rules"])
}

// When `true`, markers will be drawn for each datapoint within the visualization. `false` by default.
func (r *Detector) ShowDataMarkers() pulumi.BoolOutput {
	return (pulumi.BoolOutput)(r.s.State["showDataMarkers"])
}

// When `true`, the visualization will display a vertical line for each event trigger. `false` by default.
func (r *Detector) ShowEventLines() pulumi.BoolOutput {
	return (pulumi.BoolOutput)(r.s.State["showEventLines"])
}

// Seconds since epoch. Used for visualization. Conflicts with `timeRange`.
func (r *Detector) StartTime() pulumi.IntOutput {
	return (pulumi.IntOutput)(r.s.State["startTime"])
}

// Team IDs to associate the detector to.
func (r *Detector) Teams() pulumi.ArrayOutput {
	return (pulumi.ArrayOutput)(r.s.State["teams"])
}

// Seconds to display in the visualization. This is a rolling range from the current time. Example: 3600 = `-1h`. Defaults to 3600.
func (r *Detector) TimeRange() pulumi.IntOutput {
	return (pulumi.IntOutput)(r.s.State["timeRange"])
}

// URL of the detector
func (r *Detector) Url() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["url"])
}

// Input properties used for looking up and filtering Detector resources.
type DetectorState struct {
	// Team IDs that have write access to this detector. Remember to use an admin's token if using this feature and to include that admin's team (or user id in `authorizedWriterTeams`).
	AuthorizedWriterTeams interface{}
	// User IDs that have write access to this detector. Remember to use an admin's token if using this feature and to include that admin's user id (or team id in `authorizedWriterTeams`).
	AuthorizedWriterUsers interface{}
	// Description for the rule. Displays as the alert condition in the Alert Rules tab of the detector editor in the web UI. 
	Description interface{}
	// When `false`, the visualization may sample the output timeseries rather than displaying them all. `false` by default.
	DisableSampling interface{}
	// Seconds since epoch. Used for visualization. Conflicts with `timeRange`.
	EndTime interface{}
	// How long (in seconds) to wait for late datapoints. See <https://signalfx-product-docs.readthedocs-hosted.com/en/latest/charts/chart-builder.html#delayed-datapoints> for more info. Max value is `900` seconds (15 minutes).
	MaxDelay interface{}
	// Name of the detector.
	Name interface{}
	// Signalflow program text for the detector. More info at <https://developers.signalfx.com/signalflow_analytics/signalflow_overview.html>.
	ProgramText interface{}
	// Set of rules used for alerting.
	Rules interface{}
	// When `true`, markers will be drawn for each datapoint within the visualization. `false` by default.
	ShowDataMarkers interface{}
	// When `true`, the visualization will display a vertical line for each event trigger. `false` by default.
	ShowEventLines interface{}
	// Seconds since epoch. Used for visualization. Conflicts with `timeRange`.
	StartTime interface{}
	// Team IDs to associate the detector to.
	Teams interface{}
	// Seconds to display in the visualization. This is a rolling range from the current time. Example: 3600 = `-1h`. Defaults to 3600.
	TimeRange interface{}
	// URL of the detector
	Url interface{}
}

// The set of arguments for constructing a Detector resource.
type DetectorArgs struct {
	// Team IDs that have write access to this detector. Remember to use an admin's token if using this feature and to include that admin's team (or user id in `authorizedWriterTeams`).
	AuthorizedWriterTeams interface{}
	// User IDs that have write access to this detector. Remember to use an admin's token if using this feature and to include that admin's user id (or team id in `authorizedWriterTeams`).
	AuthorizedWriterUsers interface{}
	// Description for the rule. Displays as the alert condition in the Alert Rules tab of the detector editor in the web UI. 
	Description interface{}
	// When `false`, the visualization may sample the output timeseries rather than displaying them all. `false` by default.
	DisableSampling interface{}
	// Seconds since epoch. Used for visualization. Conflicts with `timeRange`.
	EndTime interface{}
	// How long (in seconds) to wait for late datapoints. See <https://signalfx-product-docs.readthedocs-hosted.com/en/latest/charts/chart-builder.html#delayed-datapoints> for more info. Max value is `900` seconds (15 minutes).
	MaxDelay interface{}
	// Name of the detector.
	Name interface{}
	// Signalflow program text for the detector. More info at <https://developers.signalfx.com/signalflow_analytics/signalflow_overview.html>.
	ProgramText interface{}
	// Set of rules used for alerting.
	Rules interface{}
	// When `true`, markers will be drawn for each datapoint within the visualization. `false` by default.
	ShowDataMarkers interface{}
	// When `true`, the visualization will display a vertical line for each event trigger. `false` by default.
	ShowEventLines interface{}
	// Seconds since epoch. Used for visualization. Conflicts with `timeRange`.
	StartTime interface{}
	// Team IDs to associate the detector to.
	Teams interface{}
	// Seconds to display in the visualization. This is a rolling range from the current time. Example: 3600 = `-1h`. Defaults to 3600.
	TimeRange interface{}
}
