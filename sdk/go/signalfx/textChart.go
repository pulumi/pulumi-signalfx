// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package signalfx

import (
	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// This special type of chart doesnâ€™t display any metric data. Rather, it lets you place a text note on the dashboard.
//
// > This content is derived from https://github.com/terraform-providers/terraform-provider-signalfx/blob/master/website/docs/r/text_chart.html.markdown.
type TextChart struct {
	s *pulumi.ResourceState
}

// NewTextChart registers a new resource with the given unique name, arguments, and options.
func NewTextChart(ctx *pulumi.Context,
	name string, args *TextChartArgs, opts ...pulumi.ResourceOpt) (*TextChart, error) {
	if args == nil || args.Markdown == nil {
		return nil, errors.New("missing required argument 'Markdown'")
	}
	inputs := make(map[string]interface{})
	if args == nil {
		inputs["description"] = nil
		inputs["markdown"] = nil
		inputs["name"] = nil
	} else {
		inputs["description"] = args.Description
		inputs["markdown"] = args.Markdown
		inputs["name"] = args.Name
	}
	inputs["url"] = nil
	s, err := ctx.RegisterResource("signalfx:index/textChart:TextChart", name, true, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &TextChart{s: s}, nil
}

// GetTextChart gets an existing TextChart resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetTextChart(ctx *pulumi.Context,
	name string, id pulumi.ID, state *TextChartState, opts ...pulumi.ResourceOpt) (*TextChart, error) {
	inputs := make(map[string]interface{})
	if state != nil {
		inputs["description"] = state.Description
		inputs["markdown"] = state.Markdown
		inputs["name"] = state.Name
		inputs["url"] = state.Url
	}
	s, err := ctx.ReadResource("signalfx:index/textChart:TextChart", name, id, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &TextChart{s: s}, nil
}

// URN is this resource's unique name assigned by Pulumi.
func (r *TextChart) URN() *pulumi.URNOutput {
	return r.s.URN()
}

// ID is this resource's unique identifier assigned by its provider.
func (r *TextChart) ID() *pulumi.IDOutput {
	return r.s.ID()
}

// Description of the text note.
func (r *TextChart) Description() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["description"])
}

// Markdown text to display.
func (r *TextChart) Markdown() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["markdown"])
}

// Name of the text note.
func (r *TextChart) Name() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["name"])
}

// URL of the chart
func (r *TextChart) Url() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["url"])
}

// Input properties used for looking up and filtering TextChart resources.
type TextChartState struct {
	// Description of the text note.
	Description interface{}
	// Markdown text to display.
	Markdown interface{}
	// Name of the text note.
	Name interface{}
	// URL of the chart
	Url interface{}
}

// The set of arguments for constructing a TextChart resource.
type TextChartArgs struct {
	// Description of the text note.
	Description interface{}
	// Markdown text to display.
	Markdown interface{}
	// Name of the text note.
	Name interface{}
}
