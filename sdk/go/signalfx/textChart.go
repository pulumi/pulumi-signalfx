// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

// nolint: lll
package signalfx

import (
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// This special type of chart doesnâ€™t display any metric data. Rather, it lets you place a text note on the dashboard.
//
// > This content is derived from https://github.com/terraform-providers/terraform-provider-signalfx/blob/master/website/docs/r/text_chart.html.markdown.
type TextChart struct {
	pulumi.CustomResourceState

	// Description of the text note.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// Markdown text to display.
	Markdown pulumi.StringOutput `pulumi:"markdown"`
	// Name of the text note.
	Name pulumi.StringOutput `pulumi:"name"`
	// URL of the chart
	Url pulumi.StringOutput `pulumi:"url"`
}

// NewTextChart registers a new resource with the given unique name, arguments, and options.
func NewTextChart(ctx *pulumi.Context,
	name string, args *TextChartArgs, opts ...pulumi.ResourceOption) (*TextChart, error) {
	if args == nil || args.Markdown == nil {
		return nil, errors.New("missing required argument 'Markdown'")
	}
	if args == nil {
		args = &TextChartArgs{}
	}
	var resource TextChart
	err := ctx.RegisterResource("signalfx:index/textChart:TextChart", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetTextChart gets an existing TextChart resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetTextChart(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *TextChartState, opts ...pulumi.ResourceOption) (*TextChart, error) {
	var resource TextChart
	err := ctx.ReadResource("signalfx:index/textChart:TextChart", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering TextChart resources.
type textChartState struct {
	// Description of the text note.
	Description *string `pulumi:"description"`
	// Markdown text to display.
	Markdown *string `pulumi:"markdown"`
	// Name of the text note.
	Name *string `pulumi:"name"`
	// URL of the chart
	Url *string `pulumi:"url"`
}

type TextChartState struct {
	// Description of the text note.
	Description pulumi.StringPtrInput
	// Markdown text to display.
	Markdown pulumi.StringPtrInput
	// Name of the text note.
	Name pulumi.StringPtrInput
	// URL of the chart
	Url pulumi.StringPtrInput
}

func (TextChartState) ElementType() reflect.Type {
	return reflect.TypeOf((*textChartState)(nil)).Elem()
}

type textChartArgs struct {
	// Description of the text note.
	Description *string `pulumi:"description"`
	// Markdown text to display.
	Markdown string `pulumi:"markdown"`
	// Name of the text note.
	Name *string `pulumi:"name"`
}

// The set of arguments for constructing a TextChart resource.
type TextChartArgs struct {
	// Description of the text note.
	Description pulumi.StringPtrInput
	// Markdown text to display.
	Markdown pulumi.StringInput
	// Name of the text note.
	Name pulumi.StringPtrInput
}

func (TextChartArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*textChartArgs)(nil)).Elem()
}
