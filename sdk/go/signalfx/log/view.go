// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package log

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-signalfx/sdk/v7/go/signalfx/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// You can add logs data to your Observability Cloud dashboards without turning your logs into metrics first.
//
// A log view displays log lines in a table form in a dashboard and shows you in detail what is happening and why.
//
// ## Example
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-signalfx/sdk/v7/go/signalfx/log"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := log.NewView(ctx, "myLogView", &log.ViewArgs{
//				Columns: log.ViewColumnArray{
//					&log.ViewColumnArgs{
//						Name: pulumi.String("severity"),
//					},
//					&log.ViewColumnArgs{
//						Name: pulumi.String("time"),
//					},
//					&log.ViewColumnArgs{
//						Name: pulumi.String("amount.currency_code"),
//					},
//					&log.ViewColumnArgs{
//						Name: pulumi.String("amount.nanos"),
//					},
//					&log.ViewColumnArgs{
//						Name: pulumi.String("amount.units"),
//					},
//					&log.ViewColumnArgs{
//						Name: pulumi.String("message"),
//					},
//				},
//				Description: pulumi.String("Lorem ipsum dolor sit amet, laudem tibique iracundia at mea. Nam posse dolores ex, nec cu adhuc putent honestatis"),
//				ProgramText: pulumi.String("logs(filter=field('message') == 'Transaction processed' and field('service.name') == 'paymentservice').publish()\n\n"),
//				SortOptions: log.ViewSortOptionArray{
//					&log.ViewSortOptionArgs{
//						Descending: pulumi.Bool(false),
//						Field:      pulumi.String("severity"),
//					},
//				},
//				TimeRange: pulumi.Int(900),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Arguments
//
// The following arguments are supported in the resource block:
//
// * `name` - (Required) Name of the log view.
// * `programText` - (Required) Signalflow program text for the log view. More info at https://developers.signalfx.com/docs/signalflow-overview.
// * `description` - (Optional) Description of the log view.
// * `timeRange` - (Optional) From when to display data. Splunk Observability Cloud time syntax (e.g. `"-5m"`, `"-1h"`). Conflicts with `startTime` and `endTime`.
// * `startTime` - (Optional) Seconds since epoch. Used for visualization. Conflicts with `timeRange`.
// * `endTime` - (Optional) Seconds since epoch. Used for visualization. Conflicts with `timeRange`.
// * `columns` - (Optional) The column headers to show on the log view.
// * `sortOptions` - (Optional) The sorting options configuration to specify if the log view table needs to be sorted in a particular field.
// * `defaultConnection` - (Optional) The connection that the log view uses to fetch data. This could be Splunk Enterprise, Splunk Enterprise Cloud or Observability Cloud.
//
// ## Attributes
//
// In a addition to all arguments above, the following attributes are exported:
//
// * `id` - The ID of the log view.
// * `url` - The URL of the log view.
type View struct {
	pulumi.CustomResourceState

	// Column configuration
	Columns ViewColumnArrayOutput `pulumi:"columns"`
	// default connection that the dashboard uses
	DefaultConnection pulumi.StringPtrOutput `pulumi:"defaultConnection"`
	// Description of the chart (Optional)
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// Seconds since epoch to end the visualization
	EndTime pulumi.IntPtrOutput `pulumi:"endTime"`
	// Name of the chart
	Name pulumi.StringOutput `pulumi:"name"`
	// Signalflow program text for the chart. More info at "https://developers.signalfx.com/docs/signalflow-overview"
	ProgramText pulumi.StringOutput `pulumi:"programText"`
	// Sorting options configuration
	SortOptions ViewSortOptionArrayOutput `pulumi:"sortOptions"`
	// Seconds since epoch to start the visualization
	StartTime pulumi.IntPtrOutput `pulumi:"startTime"`
	// Seconds to display in the visualization. This is a rolling range from the current time. Example: 3600 = `-1h`
	TimeRange pulumi.IntPtrOutput `pulumi:"timeRange"`
	// URL of the chart
	Url pulumi.StringOutput `pulumi:"url"`
}

// NewView registers a new resource with the given unique name, arguments, and options.
func NewView(ctx *pulumi.Context,
	name string, args *ViewArgs, opts ...pulumi.ResourceOption) (*View, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ProgramText == nil {
		return nil, errors.New("invalid value for required argument 'ProgramText'")
	}
	aliases := pulumi.Aliases([]pulumi.Alias{
		{
			Type: pulumi.String("signalfx:logs/view:View"),
		},
	})
	opts = append(opts, aliases)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource View
	err := ctx.RegisterResource("signalfx:log/view:View", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetView gets an existing View resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetView(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ViewState, opts ...pulumi.ResourceOption) (*View, error) {
	var resource View
	err := ctx.ReadResource("signalfx:log/view:View", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering View resources.
type viewState struct {
	// Column configuration
	Columns []ViewColumn `pulumi:"columns"`
	// default connection that the dashboard uses
	DefaultConnection *string `pulumi:"defaultConnection"`
	// Description of the chart (Optional)
	Description *string `pulumi:"description"`
	// Seconds since epoch to end the visualization
	EndTime *int `pulumi:"endTime"`
	// Name of the chart
	Name *string `pulumi:"name"`
	// Signalflow program text for the chart. More info at "https://developers.signalfx.com/docs/signalflow-overview"
	ProgramText *string `pulumi:"programText"`
	// Sorting options configuration
	SortOptions []ViewSortOption `pulumi:"sortOptions"`
	// Seconds since epoch to start the visualization
	StartTime *int `pulumi:"startTime"`
	// Seconds to display in the visualization. This is a rolling range from the current time. Example: 3600 = `-1h`
	TimeRange *int `pulumi:"timeRange"`
	// URL of the chart
	Url *string `pulumi:"url"`
}

type ViewState struct {
	// Column configuration
	Columns ViewColumnArrayInput
	// default connection that the dashboard uses
	DefaultConnection pulumi.StringPtrInput
	// Description of the chart (Optional)
	Description pulumi.StringPtrInput
	// Seconds since epoch to end the visualization
	EndTime pulumi.IntPtrInput
	// Name of the chart
	Name pulumi.StringPtrInput
	// Signalflow program text for the chart. More info at "https://developers.signalfx.com/docs/signalflow-overview"
	ProgramText pulumi.StringPtrInput
	// Sorting options configuration
	SortOptions ViewSortOptionArrayInput
	// Seconds since epoch to start the visualization
	StartTime pulumi.IntPtrInput
	// Seconds to display in the visualization. This is a rolling range from the current time. Example: 3600 = `-1h`
	TimeRange pulumi.IntPtrInput
	// URL of the chart
	Url pulumi.StringPtrInput
}

func (ViewState) ElementType() reflect.Type {
	return reflect.TypeOf((*viewState)(nil)).Elem()
}

type viewArgs struct {
	// Column configuration
	Columns []ViewColumn `pulumi:"columns"`
	// default connection that the dashboard uses
	DefaultConnection *string `pulumi:"defaultConnection"`
	// Description of the chart (Optional)
	Description *string `pulumi:"description"`
	// Seconds since epoch to end the visualization
	EndTime *int `pulumi:"endTime"`
	// Name of the chart
	Name *string `pulumi:"name"`
	// Signalflow program text for the chart. More info at "https://developers.signalfx.com/docs/signalflow-overview"
	ProgramText string `pulumi:"programText"`
	// Sorting options configuration
	SortOptions []ViewSortOption `pulumi:"sortOptions"`
	// Seconds since epoch to start the visualization
	StartTime *int `pulumi:"startTime"`
	// Seconds to display in the visualization. This is a rolling range from the current time. Example: 3600 = `-1h`
	TimeRange *int `pulumi:"timeRange"`
}

// The set of arguments for constructing a View resource.
type ViewArgs struct {
	// Column configuration
	Columns ViewColumnArrayInput
	// default connection that the dashboard uses
	DefaultConnection pulumi.StringPtrInput
	// Description of the chart (Optional)
	Description pulumi.StringPtrInput
	// Seconds since epoch to end the visualization
	EndTime pulumi.IntPtrInput
	// Name of the chart
	Name pulumi.StringPtrInput
	// Signalflow program text for the chart. More info at "https://developers.signalfx.com/docs/signalflow-overview"
	ProgramText pulumi.StringInput
	// Sorting options configuration
	SortOptions ViewSortOptionArrayInput
	// Seconds since epoch to start the visualization
	StartTime pulumi.IntPtrInput
	// Seconds to display in the visualization. This is a rolling range from the current time. Example: 3600 = `-1h`
	TimeRange pulumi.IntPtrInput
}

func (ViewArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*viewArgs)(nil)).Elem()
}

type ViewInput interface {
	pulumi.Input

	ToViewOutput() ViewOutput
	ToViewOutputWithContext(ctx context.Context) ViewOutput
}

func (*View) ElementType() reflect.Type {
	return reflect.TypeOf((**View)(nil)).Elem()
}

func (i *View) ToViewOutput() ViewOutput {
	return i.ToViewOutputWithContext(context.Background())
}

func (i *View) ToViewOutputWithContext(ctx context.Context) ViewOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ViewOutput)
}

// ViewArrayInput is an input type that accepts ViewArray and ViewArrayOutput values.
// You can construct a concrete instance of `ViewArrayInput` via:
//
//	ViewArray{ ViewArgs{...} }
type ViewArrayInput interface {
	pulumi.Input

	ToViewArrayOutput() ViewArrayOutput
	ToViewArrayOutputWithContext(context.Context) ViewArrayOutput
}

type ViewArray []ViewInput

func (ViewArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*View)(nil)).Elem()
}

func (i ViewArray) ToViewArrayOutput() ViewArrayOutput {
	return i.ToViewArrayOutputWithContext(context.Background())
}

func (i ViewArray) ToViewArrayOutputWithContext(ctx context.Context) ViewArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ViewArrayOutput)
}

// ViewMapInput is an input type that accepts ViewMap and ViewMapOutput values.
// You can construct a concrete instance of `ViewMapInput` via:
//
//	ViewMap{ "key": ViewArgs{...} }
type ViewMapInput interface {
	pulumi.Input

	ToViewMapOutput() ViewMapOutput
	ToViewMapOutputWithContext(context.Context) ViewMapOutput
}

type ViewMap map[string]ViewInput

func (ViewMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*View)(nil)).Elem()
}

func (i ViewMap) ToViewMapOutput() ViewMapOutput {
	return i.ToViewMapOutputWithContext(context.Background())
}

func (i ViewMap) ToViewMapOutputWithContext(ctx context.Context) ViewMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ViewMapOutput)
}

type ViewOutput struct{ *pulumi.OutputState }

func (ViewOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**View)(nil)).Elem()
}

func (o ViewOutput) ToViewOutput() ViewOutput {
	return o
}

func (o ViewOutput) ToViewOutputWithContext(ctx context.Context) ViewOutput {
	return o
}

// Column configuration
func (o ViewOutput) Columns() ViewColumnArrayOutput {
	return o.ApplyT(func(v *View) ViewColumnArrayOutput { return v.Columns }).(ViewColumnArrayOutput)
}

// default connection that the dashboard uses
func (o ViewOutput) DefaultConnection() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *View) pulumi.StringPtrOutput { return v.DefaultConnection }).(pulumi.StringPtrOutput)
}

// Description of the chart (Optional)
func (o ViewOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *View) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// Seconds since epoch to end the visualization
func (o ViewOutput) EndTime() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *View) pulumi.IntPtrOutput { return v.EndTime }).(pulumi.IntPtrOutput)
}

// Name of the chart
func (o ViewOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *View) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Signalflow program text for the chart. More info at "https://developers.signalfx.com/docs/signalflow-overview"
func (o ViewOutput) ProgramText() pulumi.StringOutput {
	return o.ApplyT(func(v *View) pulumi.StringOutput { return v.ProgramText }).(pulumi.StringOutput)
}

// Sorting options configuration
func (o ViewOutput) SortOptions() ViewSortOptionArrayOutput {
	return o.ApplyT(func(v *View) ViewSortOptionArrayOutput { return v.SortOptions }).(ViewSortOptionArrayOutput)
}

// Seconds since epoch to start the visualization
func (o ViewOutput) StartTime() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *View) pulumi.IntPtrOutput { return v.StartTime }).(pulumi.IntPtrOutput)
}

// Seconds to display in the visualization. This is a rolling range from the current time. Example: 3600 = `-1h`
func (o ViewOutput) TimeRange() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *View) pulumi.IntPtrOutput { return v.TimeRange }).(pulumi.IntPtrOutput)
}

// URL of the chart
func (o ViewOutput) Url() pulumi.StringOutput {
	return o.ApplyT(func(v *View) pulumi.StringOutput { return v.Url }).(pulumi.StringOutput)
}

type ViewArrayOutput struct{ *pulumi.OutputState }

func (ViewArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*View)(nil)).Elem()
}

func (o ViewArrayOutput) ToViewArrayOutput() ViewArrayOutput {
	return o
}

func (o ViewArrayOutput) ToViewArrayOutputWithContext(ctx context.Context) ViewArrayOutput {
	return o
}

func (o ViewArrayOutput) Index(i pulumi.IntInput) ViewOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *View {
		return vs[0].([]*View)[vs[1].(int)]
	}).(ViewOutput)
}

type ViewMapOutput struct{ *pulumi.OutputState }

func (ViewMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*View)(nil)).Elem()
}

func (o ViewMapOutput) ToViewMapOutput() ViewMapOutput {
	return o
}

func (o ViewMapOutput) ToViewMapOutputWithContext(ctx context.Context) ViewMapOutput {
	return o
}

func (o ViewMapOutput) MapIndex(k pulumi.StringInput) ViewOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *View {
		return vs[0].(map[string]*View)[vs[1].(string)]
	}).(ViewOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ViewInput)(nil)).Elem(), &View{})
	pulumi.RegisterInputType(reflect.TypeOf((*ViewArrayInput)(nil)).Elem(), ViewArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ViewMapInput)(nil)).Elem(), ViewMap{})
	pulumi.RegisterOutputType(ViewOutput{})
	pulumi.RegisterOutputType(ViewArrayOutput{})
	pulumi.RegisterOutputType(ViewMapOutput{})
}
