// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package log

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-signalfx/sdk/v7/go/signalfx/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// You can add logs data to your Observability Cloud dashboards without turning your logs into metrics first.
//
// A log timeline chart displays timeline visualization in a dashboard and shows you in detail what is happening and why.
//
// ## Example
type Timeline struct {
	pulumi.CustomResourceState

	// The connection that the log timeline uses to fetch data. This could be Splunk Enterprise, Splunk Enterprise Cloud or Observability Cloud.
	DefaultConnection pulumi.StringPtrOutput `pulumi:"defaultConnection"`
	// Description of the log timeline.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// Seconds since epoch. Used for visualization. Conflicts with `timeRange`.
	EndTime pulumi.IntPtrOutput `pulumi:"endTime"`
	// Name of the log timeline.
	Name pulumi.StringOutput `pulumi:"name"`
	// Signalflow program text for the log timeline. More info at https://dev.splunk.com/observability/docs/.
	ProgramText pulumi.StringOutput `pulumi:"programText"`
	// Seconds since epoch. Used for visualization. Conflicts with `timeRange`.
	StartTime pulumi.IntPtrOutput `pulumi:"startTime"`
	// From when to display data. Splunk Observability Cloud time syntax (e.g. `"-5m"`, `"-1h"`). Conflicts with `startTime` and `endTime`.
	TimeRange pulumi.IntPtrOutput `pulumi:"timeRange"`
	// The URL of the log timeline.
	Url pulumi.StringOutput `pulumi:"url"`
}

// NewTimeline registers a new resource with the given unique name, arguments, and options.
func NewTimeline(ctx *pulumi.Context,
	name string, args *TimelineArgs, opts ...pulumi.ResourceOption) (*Timeline, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ProgramText == nil {
		return nil, errors.New("invalid value for required argument 'ProgramText'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Timeline
	err := ctx.RegisterResource("signalfx:log/timeline:Timeline", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetTimeline gets an existing Timeline resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetTimeline(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *TimelineState, opts ...pulumi.ResourceOption) (*Timeline, error) {
	var resource Timeline
	err := ctx.ReadResource("signalfx:log/timeline:Timeline", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Timeline resources.
type timelineState struct {
	// The connection that the log timeline uses to fetch data. This could be Splunk Enterprise, Splunk Enterprise Cloud or Observability Cloud.
	DefaultConnection *string `pulumi:"defaultConnection"`
	// Description of the log timeline.
	Description *string `pulumi:"description"`
	// Seconds since epoch. Used for visualization. Conflicts with `timeRange`.
	EndTime *int `pulumi:"endTime"`
	// Name of the log timeline.
	Name *string `pulumi:"name"`
	// Signalflow program text for the log timeline. More info at https://dev.splunk.com/observability/docs/.
	ProgramText *string `pulumi:"programText"`
	// Seconds since epoch. Used for visualization. Conflicts with `timeRange`.
	StartTime *int `pulumi:"startTime"`
	// From when to display data. Splunk Observability Cloud time syntax (e.g. `"-5m"`, `"-1h"`). Conflicts with `startTime` and `endTime`.
	TimeRange *int `pulumi:"timeRange"`
	// The URL of the log timeline.
	Url *string `pulumi:"url"`
}

type TimelineState struct {
	// The connection that the log timeline uses to fetch data. This could be Splunk Enterprise, Splunk Enterprise Cloud or Observability Cloud.
	DefaultConnection pulumi.StringPtrInput
	// Description of the log timeline.
	Description pulumi.StringPtrInput
	// Seconds since epoch. Used for visualization. Conflicts with `timeRange`.
	EndTime pulumi.IntPtrInput
	// Name of the log timeline.
	Name pulumi.StringPtrInput
	// Signalflow program text for the log timeline. More info at https://dev.splunk.com/observability/docs/.
	ProgramText pulumi.StringPtrInput
	// Seconds since epoch. Used for visualization. Conflicts with `timeRange`.
	StartTime pulumi.IntPtrInput
	// From when to display data. Splunk Observability Cloud time syntax (e.g. `"-5m"`, `"-1h"`). Conflicts with `startTime` and `endTime`.
	TimeRange pulumi.IntPtrInput
	// The URL of the log timeline.
	Url pulumi.StringPtrInput
}

func (TimelineState) ElementType() reflect.Type {
	return reflect.TypeOf((*timelineState)(nil)).Elem()
}

type timelineArgs struct {
	// The connection that the log timeline uses to fetch data. This could be Splunk Enterprise, Splunk Enterprise Cloud or Observability Cloud.
	DefaultConnection *string `pulumi:"defaultConnection"`
	// Description of the log timeline.
	Description *string `pulumi:"description"`
	// Seconds since epoch. Used for visualization. Conflicts with `timeRange`.
	EndTime *int `pulumi:"endTime"`
	// Name of the log timeline.
	Name *string `pulumi:"name"`
	// Signalflow program text for the log timeline. More info at https://dev.splunk.com/observability/docs/.
	ProgramText string `pulumi:"programText"`
	// Seconds since epoch. Used for visualization. Conflicts with `timeRange`.
	StartTime *int `pulumi:"startTime"`
	// From when to display data. Splunk Observability Cloud time syntax (e.g. `"-5m"`, `"-1h"`). Conflicts with `startTime` and `endTime`.
	TimeRange *int `pulumi:"timeRange"`
}

// The set of arguments for constructing a Timeline resource.
type TimelineArgs struct {
	// The connection that the log timeline uses to fetch data. This could be Splunk Enterprise, Splunk Enterprise Cloud or Observability Cloud.
	DefaultConnection pulumi.StringPtrInput
	// Description of the log timeline.
	Description pulumi.StringPtrInput
	// Seconds since epoch. Used for visualization. Conflicts with `timeRange`.
	EndTime pulumi.IntPtrInput
	// Name of the log timeline.
	Name pulumi.StringPtrInput
	// Signalflow program text for the log timeline. More info at https://dev.splunk.com/observability/docs/.
	ProgramText pulumi.StringInput
	// Seconds since epoch. Used for visualization. Conflicts with `timeRange`.
	StartTime pulumi.IntPtrInput
	// From when to display data. Splunk Observability Cloud time syntax (e.g. `"-5m"`, `"-1h"`). Conflicts with `startTime` and `endTime`.
	TimeRange pulumi.IntPtrInput
}

func (TimelineArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*timelineArgs)(nil)).Elem()
}

type TimelineInput interface {
	pulumi.Input

	ToTimelineOutput() TimelineOutput
	ToTimelineOutputWithContext(ctx context.Context) TimelineOutput
}

func (*Timeline) ElementType() reflect.Type {
	return reflect.TypeOf((**Timeline)(nil)).Elem()
}

func (i *Timeline) ToTimelineOutput() TimelineOutput {
	return i.ToTimelineOutputWithContext(context.Background())
}

func (i *Timeline) ToTimelineOutputWithContext(ctx context.Context) TimelineOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TimelineOutput)
}

// TimelineArrayInput is an input type that accepts TimelineArray and TimelineArrayOutput values.
// You can construct a concrete instance of `TimelineArrayInput` via:
//
//	TimelineArray{ TimelineArgs{...} }
type TimelineArrayInput interface {
	pulumi.Input

	ToTimelineArrayOutput() TimelineArrayOutput
	ToTimelineArrayOutputWithContext(context.Context) TimelineArrayOutput
}

type TimelineArray []TimelineInput

func (TimelineArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Timeline)(nil)).Elem()
}

func (i TimelineArray) ToTimelineArrayOutput() TimelineArrayOutput {
	return i.ToTimelineArrayOutputWithContext(context.Background())
}

func (i TimelineArray) ToTimelineArrayOutputWithContext(ctx context.Context) TimelineArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TimelineArrayOutput)
}

// TimelineMapInput is an input type that accepts TimelineMap and TimelineMapOutput values.
// You can construct a concrete instance of `TimelineMapInput` via:
//
//	TimelineMap{ "key": TimelineArgs{...} }
type TimelineMapInput interface {
	pulumi.Input

	ToTimelineMapOutput() TimelineMapOutput
	ToTimelineMapOutputWithContext(context.Context) TimelineMapOutput
}

type TimelineMap map[string]TimelineInput

func (TimelineMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Timeline)(nil)).Elem()
}

func (i TimelineMap) ToTimelineMapOutput() TimelineMapOutput {
	return i.ToTimelineMapOutputWithContext(context.Background())
}

func (i TimelineMap) ToTimelineMapOutputWithContext(ctx context.Context) TimelineMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TimelineMapOutput)
}

type TimelineOutput struct{ *pulumi.OutputState }

func (TimelineOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Timeline)(nil)).Elem()
}

func (o TimelineOutput) ToTimelineOutput() TimelineOutput {
	return o
}

func (o TimelineOutput) ToTimelineOutputWithContext(ctx context.Context) TimelineOutput {
	return o
}

// The connection that the log timeline uses to fetch data. This could be Splunk Enterprise, Splunk Enterprise Cloud or Observability Cloud.
func (o TimelineOutput) DefaultConnection() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Timeline) pulumi.StringPtrOutput { return v.DefaultConnection }).(pulumi.StringPtrOutput)
}

// Description of the log timeline.
func (o TimelineOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Timeline) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// Seconds since epoch. Used for visualization. Conflicts with `timeRange`.
func (o TimelineOutput) EndTime() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Timeline) pulumi.IntPtrOutput { return v.EndTime }).(pulumi.IntPtrOutput)
}

// Name of the log timeline.
func (o TimelineOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Timeline) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Signalflow program text for the log timeline. More info at https://dev.splunk.com/observability/docs/.
func (o TimelineOutput) ProgramText() pulumi.StringOutput {
	return o.ApplyT(func(v *Timeline) pulumi.StringOutput { return v.ProgramText }).(pulumi.StringOutput)
}

// Seconds since epoch. Used for visualization. Conflicts with `timeRange`.
func (o TimelineOutput) StartTime() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Timeline) pulumi.IntPtrOutput { return v.StartTime }).(pulumi.IntPtrOutput)
}

// From when to display data. Splunk Observability Cloud time syntax (e.g. `"-5m"`, `"-1h"`). Conflicts with `startTime` and `endTime`.
func (o TimelineOutput) TimeRange() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Timeline) pulumi.IntPtrOutput { return v.TimeRange }).(pulumi.IntPtrOutput)
}

// The URL of the log timeline.
func (o TimelineOutput) Url() pulumi.StringOutput {
	return o.ApplyT(func(v *Timeline) pulumi.StringOutput { return v.Url }).(pulumi.StringOutput)
}

type TimelineArrayOutput struct{ *pulumi.OutputState }

func (TimelineArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Timeline)(nil)).Elem()
}

func (o TimelineArrayOutput) ToTimelineArrayOutput() TimelineArrayOutput {
	return o
}

func (o TimelineArrayOutput) ToTimelineArrayOutputWithContext(ctx context.Context) TimelineArrayOutput {
	return o
}

func (o TimelineArrayOutput) Index(i pulumi.IntInput) TimelineOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Timeline {
		return vs[0].([]*Timeline)[vs[1].(int)]
	}).(TimelineOutput)
}

type TimelineMapOutput struct{ *pulumi.OutputState }

func (TimelineMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Timeline)(nil)).Elem()
}

func (o TimelineMapOutput) ToTimelineMapOutput() TimelineMapOutput {
	return o
}

func (o TimelineMapOutput) ToTimelineMapOutputWithContext(ctx context.Context) TimelineMapOutput {
	return o
}

func (o TimelineMapOutput) MapIndex(k pulumi.StringInput) TimelineOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Timeline {
		return vs[0].(map[string]*Timeline)[vs[1].(string)]
	}).(TimelineOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*TimelineInput)(nil)).Elem(), &Timeline{})
	pulumi.RegisterInputType(reflect.TypeOf((*TimelineArrayInput)(nil)).Elem(), TimelineArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*TimelineMapInput)(nil)).Elem(), TimelineMap{})
	pulumi.RegisterOutputType(TimelineOutput{})
	pulumi.RegisterOutputType(TimelineArrayOutput{})
	pulumi.RegisterOutputType(TimelineMapOutput{})
}
