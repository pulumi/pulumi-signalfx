// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package signalfx

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

type AlertMutingRuleFilter struct {
	// Determines if this is a "not" filter. Defaults to `false`.
	Negated *bool `pulumi:"negated"`
	// The property to filter.
	Property string `pulumi:"property"`
	// The property value to filter.
	PropertyValue string `pulumi:"propertyValue"`
}

// AlertMutingRuleFilterInput is an input type that accepts AlertMutingRuleFilterArgs and AlertMutingRuleFilterOutput values.
// You can construct a concrete instance of `AlertMutingRuleFilterInput` via:
//
//          AlertMutingRuleFilterArgs{...}
type AlertMutingRuleFilterInput interface {
	pulumi.Input

	ToAlertMutingRuleFilterOutput() AlertMutingRuleFilterOutput
	ToAlertMutingRuleFilterOutputWithContext(context.Context) AlertMutingRuleFilterOutput
}

type AlertMutingRuleFilterArgs struct {
	// Determines if this is a "not" filter. Defaults to `false`.
	Negated pulumi.BoolPtrInput `pulumi:"negated"`
	// The property to filter.
	Property pulumi.StringInput `pulumi:"property"`
	// The property value to filter.
	PropertyValue pulumi.StringInput `pulumi:"propertyValue"`
}

func (AlertMutingRuleFilterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AlertMutingRuleFilter)(nil)).Elem()
}

func (i AlertMutingRuleFilterArgs) ToAlertMutingRuleFilterOutput() AlertMutingRuleFilterOutput {
	return i.ToAlertMutingRuleFilterOutputWithContext(context.Background())
}

func (i AlertMutingRuleFilterArgs) ToAlertMutingRuleFilterOutputWithContext(ctx context.Context) AlertMutingRuleFilterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertMutingRuleFilterOutput)
}

// AlertMutingRuleFilterArrayInput is an input type that accepts AlertMutingRuleFilterArray and AlertMutingRuleFilterArrayOutput values.
// You can construct a concrete instance of `AlertMutingRuleFilterArrayInput` via:
//
//          AlertMutingRuleFilterArray{ AlertMutingRuleFilterArgs{...} }
type AlertMutingRuleFilterArrayInput interface {
	pulumi.Input

	ToAlertMutingRuleFilterArrayOutput() AlertMutingRuleFilterArrayOutput
	ToAlertMutingRuleFilterArrayOutputWithContext(context.Context) AlertMutingRuleFilterArrayOutput
}

type AlertMutingRuleFilterArray []AlertMutingRuleFilterInput

func (AlertMutingRuleFilterArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AlertMutingRuleFilter)(nil)).Elem()
}

func (i AlertMutingRuleFilterArray) ToAlertMutingRuleFilterArrayOutput() AlertMutingRuleFilterArrayOutput {
	return i.ToAlertMutingRuleFilterArrayOutputWithContext(context.Background())
}

func (i AlertMutingRuleFilterArray) ToAlertMutingRuleFilterArrayOutputWithContext(ctx context.Context) AlertMutingRuleFilterArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertMutingRuleFilterArrayOutput)
}

type AlertMutingRuleFilterOutput struct{ *pulumi.OutputState }

func (AlertMutingRuleFilterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AlertMutingRuleFilter)(nil)).Elem()
}

func (o AlertMutingRuleFilterOutput) ToAlertMutingRuleFilterOutput() AlertMutingRuleFilterOutput {
	return o
}

func (o AlertMutingRuleFilterOutput) ToAlertMutingRuleFilterOutputWithContext(ctx context.Context) AlertMutingRuleFilterOutput {
	return o
}

// Determines if this is a "not" filter. Defaults to `false`.
func (o AlertMutingRuleFilterOutput) Negated() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v AlertMutingRuleFilter) *bool { return v.Negated }).(pulumi.BoolPtrOutput)
}

// The property to filter.
func (o AlertMutingRuleFilterOutput) Property() pulumi.StringOutput {
	return o.ApplyT(func(v AlertMutingRuleFilter) string { return v.Property }).(pulumi.StringOutput)
}

// The property value to filter.
func (o AlertMutingRuleFilterOutput) PropertyValue() pulumi.StringOutput {
	return o.ApplyT(func(v AlertMutingRuleFilter) string { return v.PropertyValue }).(pulumi.StringOutput)
}

type AlertMutingRuleFilterArrayOutput struct{ *pulumi.OutputState }

func (AlertMutingRuleFilterArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AlertMutingRuleFilter)(nil)).Elem()
}

func (o AlertMutingRuleFilterArrayOutput) ToAlertMutingRuleFilterArrayOutput() AlertMutingRuleFilterArrayOutput {
	return o
}

func (o AlertMutingRuleFilterArrayOutput) ToAlertMutingRuleFilterArrayOutputWithContext(ctx context.Context) AlertMutingRuleFilterArrayOutput {
	return o
}

func (o AlertMutingRuleFilterArrayOutput) Index(i pulumi.IntInput) AlertMutingRuleFilterOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) AlertMutingRuleFilter {
		return vs[0].([]AlertMutingRuleFilter)[vs[1].(int)]
	}).(AlertMutingRuleFilterOutput)
}

type DashboardChart struct {
	// ID of the chart to display.
	ChartId string `pulumi:"chartId"`
	// Column number for the layout.
	Column *int `pulumi:"column"`
	// How many rows every chart should take up (greater than or equal to 1). 1 by default.
	Height *int `pulumi:"height"`
	// The row to show the chart in (zero-based); if `height > 1`, this value represents the topmost row of the chart (greater than or equal to `0`).
	Row *int `pulumi:"row"`
	// How many columns (out of a total of `12`) every chart should take up (between `1` and `12`). `12` by default.
	Width *int `pulumi:"width"`
}

// DashboardChartInput is an input type that accepts DashboardChartArgs and DashboardChartOutput values.
// You can construct a concrete instance of `DashboardChartInput` via:
//
//          DashboardChartArgs{...}
type DashboardChartInput interface {
	pulumi.Input

	ToDashboardChartOutput() DashboardChartOutput
	ToDashboardChartOutputWithContext(context.Context) DashboardChartOutput
}

type DashboardChartArgs struct {
	// ID of the chart to display.
	ChartId pulumi.StringInput `pulumi:"chartId"`
	// Column number for the layout.
	Column pulumi.IntPtrInput `pulumi:"column"`
	// How many rows every chart should take up (greater than or equal to 1). 1 by default.
	Height pulumi.IntPtrInput `pulumi:"height"`
	// The row to show the chart in (zero-based); if `height > 1`, this value represents the topmost row of the chart (greater than or equal to `0`).
	Row pulumi.IntPtrInput `pulumi:"row"`
	// How many columns (out of a total of `12`) every chart should take up (between `1` and `12`). `12` by default.
	Width pulumi.IntPtrInput `pulumi:"width"`
}

func (DashboardChartArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DashboardChart)(nil)).Elem()
}

func (i DashboardChartArgs) ToDashboardChartOutput() DashboardChartOutput {
	return i.ToDashboardChartOutputWithContext(context.Background())
}

func (i DashboardChartArgs) ToDashboardChartOutputWithContext(ctx context.Context) DashboardChartOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardChartOutput)
}

// DashboardChartArrayInput is an input type that accepts DashboardChartArray and DashboardChartArrayOutput values.
// You can construct a concrete instance of `DashboardChartArrayInput` via:
//
//          DashboardChartArray{ DashboardChartArgs{...} }
type DashboardChartArrayInput interface {
	pulumi.Input

	ToDashboardChartArrayOutput() DashboardChartArrayOutput
	ToDashboardChartArrayOutputWithContext(context.Context) DashboardChartArrayOutput
}

type DashboardChartArray []DashboardChartInput

func (DashboardChartArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DashboardChart)(nil)).Elem()
}

func (i DashboardChartArray) ToDashboardChartArrayOutput() DashboardChartArrayOutput {
	return i.ToDashboardChartArrayOutputWithContext(context.Background())
}

func (i DashboardChartArray) ToDashboardChartArrayOutputWithContext(ctx context.Context) DashboardChartArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardChartArrayOutput)
}

type DashboardChartOutput struct{ *pulumi.OutputState }

func (DashboardChartOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DashboardChart)(nil)).Elem()
}

func (o DashboardChartOutput) ToDashboardChartOutput() DashboardChartOutput {
	return o
}

func (o DashboardChartOutput) ToDashboardChartOutputWithContext(ctx context.Context) DashboardChartOutput {
	return o
}

// ID of the chart to display.
func (o DashboardChartOutput) ChartId() pulumi.StringOutput {
	return o.ApplyT(func(v DashboardChart) string { return v.ChartId }).(pulumi.StringOutput)
}

// Column number for the layout.
func (o DashboardChartOutput) Column() pulumi.IntPtrOutput {
	return o.ApplyT(func(v DashboardChart) *int { return v.Column }).(pulumi.IntPtrOutput)
}

// How many rows every chart should take up (greater than or equal to 1). 1 by default.
func (o DashboardChartOutput) Height() pulumi.IntPtrOutput {
	return o.ApplyT(func(v DashboardChart) *int { return v.Height }).(pulumi.IntPtrOutput)
}

// The row to show the chart in (zero-based); if `height > 1`, this value represents the topmost row of the chart (greater than or equal to `0`).
func (o DashboardChartOutput) Row() pulumi.IntPtrOutput {
	return o.ApplyT(func(v DashboardChart) *int { return v.Row }).(pulumi.IntPtrOutput)
}

// How many columns (out of a total of `12`) every chart should take up (between `1` and `12`). `12` by default.
func (o DashboardChartOutput) Width() pulumi.IntPtrOutput {
	return o.ApplyT(func(v DashboardChart) *int { return v.Width }).(pulumi.IntPtrOutput)
}

type DashboardChartArrayOutput struct{ *pulumi.OutputState }

func (DashboardChartArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DashboardChart)(nil)).Elem()
}

func (o DashboardChartArrayOutput) ToDashboardChartArrayOutput() DashboardChartArrayOutput {
	return o
}

func (o DashboardChartArrayOutput) ToDashboardChartArrayOutputWithContext(ctx context.Context) DashboardChartArrayOutput {
	return o
}

func (o DashboardChartArrayOutput) Index(i pulumi.IntInput) DashboardChartOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) DashboardChart {
		return vs[0].([]DashboardChart)[vs[1].(int)]
	}).(DashboardChartOutput)
}

type DashboardColumn struct {
	// List of IDs of the charts to display.
	ChartIds []string `pulumi:"chartIds"`
	// Column number for the layout.
	Column *int `pulumi:"column"`
	// How many rows every chart should take up (greater than or equal to 1). 1 by default.
	Height *int `pulumi:"height"`
	// How many columns (out of a total of `12`) every chart should take up (between `1` and `12`). `12` by default.
	Width *int `pulumi:"width"`
}

// DashboardColumnInput is an input type that accepts DashboardColumnArgs and DashboardColumnOutput values.
// You can construct a concrete instance of `DashboardColumnInput` via:
//
//          DashboardColumnArgs{...}
type DashboardColumnInput interface {
	pulumi.Input

	ToDashboardColumnOutput() DashboardColumnOutput
	ToDashboardColumnOutputWithContext(context.Context) DashboardColumnOutput
}

type DashboardColumnArgs struct {
	// List of IDs of the charts to display.
	ChartIds pulumi.StringArrayInput `pulumi:"chartIds"`
	// Column number for the layout.
	Column pulumi.IntPtrInput `pulumi:"column"`
	// How many rows every chart should take up (greater than or equal to 1). 1 by default.
	Height pulumi.IntPtrInput `pulumi:"height"`
	// How many columns (out of a total of `12`) every chart should take up (between `1` and `12`). `12` by default.
	Width pulumi.IntPtrInput `pulumi:"width"`
}

func (DashboardColumnArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DashboardColumn)(nil)).Elem()
}

func (i DashboardColumnArgs) ToDashboardColumnOutput() DashboardColumnOutput {
	return i.ToDashboardColumnOutputWithContext(context.Background())
}

func (i DashboardColumnArgs) ToDashboardColumnOutputWithContext(ctx context.Context) DashboardColumnOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardColumnOutput)
}

// DashboardColumnArrayInput is an input type that accepts DashboardColumnArray and DashboardColumnArrayOutput values.
// You can construct a concrete instance of `DashboardColumnArrayInput` via:
//
//          DashboardColumnArray{ DashboardColumnArgs{...} }
type DashboardColumnArrayInput interface {
	pulumi.Input

	ToDashboardColumnArrayOutput() DashboardColumnArrayOutput
	ToDashboardColumnArrayOutputWithContext(context.Context) DashboardColumnArrayOutput
}

type DashboardColumnArray []DashboardColumnInput

func (DashboardColumnArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DashboardColumn)(nil)).Elem()
}

func (i DashboardColumnArray) ToDashboardColumnArrayOutput() DashboardColumnArrayOutput {
	return i.ToDashboardColumnArrayOutputWithContext(context.Background())
}

func (i DashboardColumnArray) ToDashboardColumnArrayOutputWithContext(ctx context.Context) DashboardColumnArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardColumnArrayOutput)
}

type DashboardColumnOutput struct{ *pulumi.OutputState }

func (DashboardColumnOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DashboardColumn)(nil)).Elem()
}

func (o DashboardColumnOutput) ToDashboardColumnOutput() DashboardColumnOutput {
	return o
}

func (o DashboardColumnOutput) ToDashboardColumnOutputWithContext(ctx context.Context) DashboardColumnOutput {
	return o
}

// List of IDs of the charts to display.
func (o DashboardColumnOutput) ChartIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v DashboardColumn) []string { return v.ChartIds }).(pulumi.StringArrayOutput)
}

// Column number for the layout.
func (o DashboardColumnOutput) Column() pulumi.IntPtrOutput {
	return o.ApplyT(func(v DashboardColumn) *int { return v.Column }).(pulumi.IntPtrOutput)
}

// How many rows every chart should take up (greater than or equal to 1). 1 by default.
func (o DashboardColumnOutput) Height() pulumi.IntPtrOutput {
	return o.ApplyT(func(v DashboardColumn) *int { return v.Height }).(pulumi.IntPtrOutput)
}

// How many columns (out of a total of `12`) every chart should take up (between `1` and `12`). `12` by default.
func (o DashboardColumnOutput) Width() pulumi.IntPtrOutput {
	return o.ApplyT(func(v DashboardColumn) *int { return v.Width }).(pulumi.IntPtrOutput)
}

type DashboardColumnArrayOutput struct{ *pulumi.OutputState }

func (DashboardColumnArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DashboardColumn)(nil)).Elem()
}

func (o DashboardColumnArrayOutput) ToDashboardColumnArrayOutput() DashboardColumnArrayOutput {
	return o
}

func (o DashboardColumnArrayOutput) ToDashboardColumnArrayOutputWithContext(ctx context.Context) DashboardColumnArrayOutput {
	return o
}

func (o DashboardColumnArrayOutput) Index(i pulumi.IntInput) DashboardColumnOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) DashboardColumn {
		return vs[0].([]DashboardColumn)[vs[1].(int)]
	}).(DashboardColumnOutput)
}

type DashboardEventOverlay struct {
	// Color to use : gray, blue, azure, navy, brown, orange, yellow, iris, magenta, pink, purple, violet, lilac, emerald, green, aquamarine.
	Color *string `pulumi:"color"`
	// Text shown in the dropdown when selecting this overlay from the menu.
	Label *string `pulumi:"label"`
	// Show a vertical line for the event. `false` by default.
	Line *bool `pulumi:"line"`
	// Search term used to choose the events shown in the overlay.
	Signal string `pulumi:"signal"`
	// Each element specifies a filter to use against the signal specified in the `signal`.
	Sources []DashboardEventOverlaySource `pulumi:"sources"`
	// Can be set to `eventTimeSeries` (the default) to refer to externally reported events, or `detectorEvents` to refer to events from detector triggers.
	Type *string `pulumi:"type"`
}

// DashboardEventOverlayInput is an input type that accepts DashboardEventOverlayArgs and DashboardEventOverlayOutput values.
// You can construct a concrete instance of `DashboardEventOverlayInput` via:
//
//          DashboardEventOverlayArgs{...}
type DashboardEventOverlayInput interface {
	pulumi.Input

	ToDashboardEventOverlayOutput() DashboardEventOverlayOutput
	ToDashboardEventOverlayOutputWithContext(context.Context) DashboardEventOverlayOutput
}

type DashboardEventOverlayArgs struct {
	// Color to use : gray, blue, azure, navy, brown, orange, yellow, iris, magenta, pink, purple, violet, lilac, emerald, green, aquamarine.
	Color pulumi.StringPtrInput `pulumi:"color"`
	// Text shown in the dropdown when selecting this overlay from the menu.
	Label pulumi.StringPtrInput `pulumi:"label"`
	// Show a vertical line for the event. `false` by default.
	Line pulumi.BoolPtrInput `pulumi:"line"`
	// Search term used to choose the events shown in the overlay.
	Signal pulumi.StringInput `pulumi:"signal"`
	// Each element specifies a filter to use against the signal specified in the `signal`.
	Sources DashboardEventOverlaySourceArrayInput `pulumi:"sources"`
	// Can be set to `eventTimeSeries` (the default) to refer to externally reported events, or `detectorEvents` to refer to events from detector triggers.
	Type pulumi.StringPtrInput `pulumi:"type"`
}

func (DashboardEventOverlayArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DashboardEventOverlay)(nil)).Elem()
}

func (i DashboardEventOverlayArgs) ToDashboardEventOverlayOutput() DashboardEventOverlayOutput {
	return i.ToDashboardEventOverlayOutputWithContext(context.Background())
}

func (i DashboardEventOverlayArgs) ToDashboardEventOverlayOutputWithContext(ctx context.Context) DashboardEventOverlayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardEventOverlayOutput)
}

// DashboardEventOverlayArrayInput is an input type that accepts DashboardEventOverlayArray and DashboardEventOverlayArrayOutput values.
// You can construct a concrete instance of `DashboardEventOverlayArrayInput` via:
//
//          DashboardEventOverlayArray{ DashboardEventOverlayArgs{...} }
type DashboardEventOverlayArrayInput interface {
	pulumi.Input

	ToDashboardEventOverlayArrayOutput() DashboardEventOverlayArrayOutput
	ToDashboardEventOverlayArrayOutputWithContext(context.Context) DashboardEventOverlayArrayOutput
}

type DashboardEventOverlayArray []DashboardEventOverlayInput

func (DashboardEventOverlayArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DashboardEventOverlay)(nil)).Elem()
}

func (i DashboardEventOverlayArray) ToDashboardEventOverlayArrayOutput() DashboardEventOverlayArrayOutput {
	return i.ToDashboardEventOverlayArrayOutputWithContext(context.Background())
}

func (i DashboardEventOverlayArray) ToDashboardEventOverlayArrayOutputWithContext(ctx context.Context) DashboardEventOverlayArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardEventOverlayArrayOutput)
}

type DashboardEventOverlayOutput struct{ *pulumi.OutputState }

func (DashboardEventOverlayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DashboardEventOverlay)(nil)).Elem()
}

func (o DashboardEventOverlayOutput) ToDashboardEventOverlayOutput() DashboardEventOverlayOutput {
	return o
}

func (o DashboardEventOverlayOutput) ToDashboardEventOverlayOutputWithContext(ctx context.Context) DashboardEventOverlayOutput {
	return o
}

// Color to use : gray, blue, azure, navy, brown, orange, yellow, iris, magenta, pink, purple, violet, lilac, emerald, green, aquamarine.
func (o DashboardEventOverlayOutput) Color() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DashboardEventOverlay) *string { return v.Color }).(pulumi.StringPtrOutput)
}

// Text shown in the dropdown when selecting this overlay from the menu.
func (o DashboardEventOverlayOutput) Label() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DashboardEventOverlay) *string { return v.Label }).(pulumi.StringPtrOutput)
}

// Show a vertical line for the event. `false` by default.
func (o DashboardEventOverlayOutput) Line() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v DashboardEventOverlay) *bool { return v.Line }).(pulumi.BoolPtrOutput)
}

// Search term used to choose the events shown in the overlay.
func (o DashboardEventOverlayOutput) Signal() pulumi.StringOutput {
	return o.ApplyT(func(v DashboardEventOverlay) string { return v.Signal }).(pulumi.StringOutput)
}

// Each element specifies a filter to use against the signal specified in the `signal`.
func (o DashboardEventOverlayOutput) Sources() DashboardEventOverlaySourceArrayOutput {
	return o.ApplyT(func(v DashboardEventOverlay) []DashboardEventOverlaySource { return v.Sources }).(DashboardEventOverlaySourceArrayOutput)
}

// Can be set to `eventTimeSeries` (the default) to refer to externally reported events, or `detectorEvents` to refer to events from detector triggers.
func (o DashboardEventOverlayOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DashboardEventOverlay) *string { return v.Type }).(pulumi.StringPtrOutput)
}

type DashboardEventOverlayArrayOutput struct{ *pulumi.OutputState }

func (DashboardEventOverlayArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DashboardEventOverlay)(nil)).Elem()
}

func (o DashboardEventOverlayArrayOutput) ToDashboardEventOverlayArrayOutput() DashboardEventOverlayArrayOutput {
	return o
}

func (o DashboardEventOverlayArrayOutput) ToDashboardEventOverlayArrayOutputWithContext(ctx context.Context) DashboardEventOverlayArrayOutput {
	return o
}

func (o DashboardEventOverlayArrayOutput) Index(i pulumi.IntInput) DashboardEventOverlayOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) DashboardEventOverlay {
		return vs[0].([]DashboardEventOverlay)[vs[1].(int)]
	}).(DashboardEventOverlayOutput)
}

type DashboardEventOverlaySource struct {
	// If true,  only data that does not match the specified value of the specified property appear in the event overlay. Defaults to `false`.
	Negated *bool `pulumi:"negated"`
	// The name of a dimension to filter against.
	Property string `pulumi:"property"`
	// A list of values to be used with the `property`, they will be combined via `OR`.
	Values []string `pulumi:"values"`
}

// DashboardEventOverlaySourceInput is an input type that accepts DashboardEventOverlaySourceArgs and DashboardEventOverlaySourceOutput values.
// You can construct a concrete instance of `DashboardEventOverlaySourceInput` via:
//
//          DashboardEventOverlaySourceArgs{...}
type DashboardEventOverlaySourceInput interface {
	pulumi.Input

	ToDashboardEventOverlaySourceOutput() DashboardEventOverlaySourceOutput
	ToDashboardEventOverlaySourceOutputWithContext(context.Context) DashboardEventOverlaySourceOutput
}

type DashboardEventOverlaySourceArgs struct {
	// If true,  only data that does not match the specified value of the specified property appear in the event overlay. Defaults to `false`.
	Negated pulumi.BoolPtrInput `pulumi:"negated"`
	// The name of a dimension to filter against.
	Property pulumi.StringInput `pulumi:"property"`
	// A list of values to be used with the `property`, they will be combined via `OR`.
	Values pulumi.StringArrayInput `pulumi:"values"`
}

func (DashboardEventOverlaySourceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DashboardEventOverlaySource)(nil)).Elem()
}

func (i DashboardEventOverlaySourceArgs) ToDashboardEventOverlaySourceOutput() DashboardEventOverlaySourceOutput {
	return i.ToDashboardEventOverlaySourceOutputWithContext(context.Background())
}

func (i DashboardEventOverlaySourceArgs) ToDashboardEventOverlaySourceOutputWithContext(ctx context.Context) DashboardEventOverlaySourceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardEventOverlaySourceOutput)
}

// DashboardEventOverlaySourceArrayInput is an input type that accepts DashboardEventOverlaySourceArray and DashboardEventOverlaySourceArrayOutput values.
// You can construct a concrete instance of `DashboardEventOverlaySourceArrayInput` via:
//
//          DashboardEventOverlaySourceArray{ DashboardEventOverlaySourceArgs{...} }
type DashboardEventOverlaySourceArrayInput interface {
	pulumi.Input

	ToDashboardEventOverlaySourceArrayOutput() DashboardEventOverlaySourceArrayOutput
	ToDashboardEventOverlaySourceArrayOutputWithContext(context.Context) DashboardEventOverlaySourceArrayOutput
}

type DashboardEventOverlaySourceArray []DashboardEventOverlaySourceInput

func (DashboardEventOverlaySourceArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DashboardEventOverlaySource)(nil)).Elem()
}

func (i DashboardEventOverlaySourceArray) ToDashboardEventOverlaySourceArrayOutput() DashboardEventOverlaySourceArrayOutput {
	return i.ToDashboardEventOverlaySourceArrayOutputWithContext(context.Background())
}

func (i DashboardEventOverlaySourceArray) ToDashboardEventOverlaySourceArrayOutputWithContext(ctx context.Context) DashboardEventOverlaySourceArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardEventOverlaySourceArrayOutput)
}

type DashboardEventOverlaySourceOutput struct{ *pulumi.OutputState }

func (DashboardEventOverlaySourceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DashboardEventOverlaySource)(nil)).Elem()
}

func (o DashboardEventOverlaySourceOutput) ToDashboardEventOverlaySourceOutput() DashboardEventOverlaySourceOutput {
	return o
}

func (o DashboardEventOverlaySourceOutput) ToDashboardEventOverlaySourceOutputWithContext(ctx context.Context) DashboardEventOverlaySourceOutput {
	return o
}

// If true,  only data that does not match the specified value of the specified property appear in the event overlay. Defaults to `false`.
func (o DashboardEventOverlaySourceOutput) Negated() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v DashboardEventOverlaySource) *bool { return v.Negated }).(pulumi.BoolPtrOutput)
}

// The name of a dimension to filter against.
func (o DashboardEventOverlaySourceOutput) Property() pulumi.StringOutput {
	return o.ApplyT(func(v DashboardEventOverlaySource) string { return v.Property }).(pulumi.StringOutput)
}

// A list of values to be used with the `property`, they will be combined via `OR`.
func (o DashboardEventOverlaySourceOutput) Values() pulumi.StringArrayOutput {
	return o.ApplyT(func(v DashboardEventOverlaySource) []string { return v.Values }).(pulumi.StringArrayOutput)
}

type DashboardEventOverlaySourceArrayOutput struct{ *pulumi.OutputState }

func (DashboardEventOverlaySourceArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DashboardEventOverlaySource)(nil)).Elem()
}

func (o DashboardEventOverlaySourceArrayOutput) ToDashboardEventOverlaySourceArrayOutput() DashboardEventOverlaySourceArrayOutput {
	return o
}

func (o DashboardEventOverlaySourceArrayOutput) ToDashboardEventOverlaySourceArrayOutputWithContext(ctx context.Context) DashboardEventOverlaySourceArrayOutput {
	return o
}

func (o DashboardEventOverlaySourceArrayOutput) Index(i pulumi.IntInput) DashboardEventOverlaySourceOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) DashboardEventOverlaySource {
		return vs[0].([]DashboardEventOverlaySource)[vs[1].(int)]
	}).(DashboardEventOverlaySourceOutput)
}

type DashboardFilter struct {
	// If true, this variable will also match data that doesn't have this property at all.
	ApplyIfExist *bool `pulumi:"applyIfExist"`
	// If true,  only data that does not match the specified value of the specified property appear in the event overlay. Defaults to `false`.
	Negated *bool `pulumi:"negated"`
	// The name of a dimension to filter against.
	Property string `pulumi:"property"`
	// A list of values to be used with the `property`, they will be combined via `OR`.
	Values []string `pulumi:"values"`
}

// DashboardFilterInput is an input type that accepts DashboardFilterArgs and DashboardFilterOutput values.
// You can construct a concrete instance of `DashboardFilterInput` via:
//
//          DashboardFilterArgs{...}
type DashboardFilterInput interface {
	pulumi.Input

	ToDashboardFilterOutput() DashboardFilterOutput
	ToDashboardFilterOutputWithContext(context.Context) DashboardFilterOutput
}

type DashboardFilterArgs struct {
	// If true, this variable will also match data that doesn't have this property at all.
	ApplyIfExist pulumi.BoolPtrInput `pulumi:"applyIfExist"`
	// If true,  only data that does not match the specified value of the specified property appear in the event overlay. Defaults to `false`.
	Negated pulumi.BoolPtrInput `pulumi:"negated"`
	// The name of a dimension to filter against.
	Property pulumi.StringInput `pulumi:"property"`
	// A list of values to be used with the `property`, they will be combined via `OR`.
	Values pulumi.StringArrayInput `pulumi:"values"`
}

func (DashboardFilterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DashboardFilter)(nil)).Elem()
}

func (i DashboardFilterArgs) ToDashboardFilterOutput() DashboardFilterOutput {
	return i.ToDashboardFilterOutputWithContext(context.Background())
}

func (i DashboardFilterArgs) ToDashboardFilterOutputWithContext(ctx context.Context) DashboardFilterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardFilterOutput)
}

// DashboardFilterArrayInput is an input type that accepts DashboardFilterArray and DashboardFilterArrayOutput values.
// You can construct a concrete instance of `DashboardFilterArrayInput` via:
//
//          DashboardFilterArray{ DashboardFilterArgs{...} }
type DashboardFilterArrayInput interface {
	pulumi.Input

	ToDashboardFilterArrayOutput() DashboardFilterArrayOutput
	ToDashboardFilterArrayOutputWithContext(context.Context) DashboardFilterArrayOutput
}

type DashboardFilterArray []DashboardFilterInput

func (DashboardFilterArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DashboardFilter)(nil)).Elem()
}

func (i DashboardFilterArray) ToDashboardFilterArrayOutput() DashboardFilterArrayOutput {
	return i.ToDashboardFilterArrayOutputWithContext(context.Background())
}

func (i DashboardFilterArray) ToDashboardFilterArrayOutputWithContext(ctx context.Context) DashboardFilterArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardFilterArrayOutput)
}

type DashboardFilterOutput struct{ *pulumi.OutputState }

func (DashboardFilterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DashboardFilter)(nil)).Elem()
}

func (o DashboardFilterOutput) ToDashboardFilterOutput() DashboardFilterOutput {
	return o
}

func (o DashboardFilterOutput) ToDashboardFilterOutputWithContext(ctx context.Context) DashboardFilterOutput {
	return o
}

// If true, this variable will also match data that doesn't have this property at all.
func (o DashboardFilterOutput) ApplyIfExist() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v DashboardFilter) *bool { return v.ApplyIfExist }).(pulumi.BoolPtrOutput)
}

// If true,  only data that does not match the specified value of the specified property appear in the event overlay. Defaults to `false`.
func (o DashboardFilterOutput) Negated() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v DashboardFilter) *bool { return v.Negated }).(pulumi.BoolPtrOutput)
}

// The name of a dimension to filter against.
func (o DashboardFilterOutput) Property() pulumi.StringOutput {
	return o.ApplyT(func(v DashboardFilter) string { return v.Property }).(pulumi.StringOutput)
}

// A list of values to be used with the `property`, they will be combined via `OR`.
func (o DashboardFilterOutput) Values() pulumi.StringArrayOutput {
	return o.ApplyT(func(v DashboardFilter) []string { return v.Values }).(pulumi.StringArrayOutput)
}

type DashboardFilterArrayOutput struct{ *pulumi.OutputState }

func (DashboardFilterArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DashboardFilter)(nil)).Elem()
}

func (o DashboardFilterArrayOutput) ToDashboardFilterArrayOutput() DashboardFilterArrayOutput {
	return o
}

func (o DashboardFilterArrayOutput) ToDashboardFilterArrayOutputWithContext(ctx context.Context) DashboardFilterArrayOutput {
	return o
}

func (o DashboardFilterArrayOutput) Index(i pulumi.IntInput) DashboardFilterOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) DashboardFilter {
		return vs[0].([]DashboardFilter)[vs[1].(int)]
	}).(DashboardFilterOutput)
}

type DashboardGrid struct {
	// List of IDs of the charts to display.
	ChartIds []string `pulumi:"chartIds"`
	// How many rows every chart should take up (greater than or equal to 1). 1 by default.
	Height *int `pulumi:"height"`
	// How many columns (out of a total of `12`) every chart should take up (between `1` and `12`). `12` by default.
	Width *int `pulumi:"width"`
}

// DashboardGridInput is an input type that accepts DashboardGridArgs and DashboardGridOutput values.
// You can construct a concrete instance of `DashboardGridInput` via:
//
//          DashboardGridArgs{...}
type DashboardGridInput interface {
	pulumi.Input

	ToDashboardGridOutput() DashboardGridOutput
	ToDashboardGridOutputWithContext(context.Context) DashboardGridOutput
}

type DashboardGridArgs struct {
	// List of IDs of the charts to display.
	ChartIds pulumi.StringArrayInput `pulumi:"chartIds"`
	// How many rows every chart should take up (greater than or equal to 1). 1 by default.
	Height pulumi.IntPtrInput `pulumi:"height"`
	// How many columns (out of a total of `12`) every chart should take up (between `1` and `12`). `12` by default.
	Width pulumi.IntPtrInput `pulumi:"width"`
}

func (DashboardGridArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DashboardGrid)(nil)).Elem()
}

func (i DashboardGridArgs) ToDashboardGridOutput() DashboardGridOutput {
	return i.ToDashboardGridOutputWithContext(context.Background())
}

func (i DashboardGridArgs) ToDashboardGridOutputWithContext(ctx context.Context) DashboardGridOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardGridOutput)
}

// DashboardGridArrayInput is an input type that accepts DashboardGridArray and DashboardGridArrayOutput values.
// You can construct a concrete instance of `DashboardGridArrayInput` via:
//
//          DashboardGridArray{ DashboardGridArgs{...} }
type DashboardGridArrayInput interface {
	pulumi.Input

	ToDashboardGridArrayOutput() DashboardGridArrayOutput
	ToDashboardGridArrayOutputWithContext(context.Context) DashboardGridArrayOutput
}

type DashboardGridArray []DashboardGridInput

func (DashboardGridArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DashboardGrid)(nil)).Elem()
}

func (i DashboardGridArray) ToDashboardGridArrayOutput() DashboardGridArrayOutput {
	return i.ToDashboardGridArrayOutputWithContext(context.Background())
}

func (i DashboardGridArray) ToDashboardGridArrayOutputWithContext(ctx context.Context) DashboardGridArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardGridArrayOutput)
}

type DashboardGridOutput struct{ *pulumi.OutputState }

func (DashboardGridOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DashboardGrid)(nil)).Elem()
}

func (o DashboardGridOutput) ToDashboardGridOutput() DashboardGridOutput {
	return o
}

func (o DashboardGridOutput) ToDashboardGridOutputWithContext(ctx context.Context) DashboardGridOutput {
	return o
}

// List of IDs of the charts to display.
func (o DashboardGridOutput) ChartIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v DashboardGrid) []string { return v.ChartIds }).(pulumi.StringArrayOutput)
}

// How many rows every chart should take up (greater than or equal to 1). 1 by default.
func (o DashboardGridOutput) Height() pulumi.IntPtrOutput {
	return o.ApplyT(func(v DashboardGrid) *int { return v.Height }).(pulumi.IntPtrOutput)
}

// How many columns (out of a total of `12`) every chart should take up (between `1` and `12`). `12` by default.
func (o DashboardGridOutput) Width() pulumi.IntPtrOutput {
	return o.ApplyT(func(v DashboardGrid) *int { return v.Width }).(pulumi.IntPtrOutput)
}

type DashboardGridArrayOutput struct{ *pulumi.OutputState }

func (DashboardGridArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DashboardGrid)(nil)).Elem()
}

func (o DashboardGridArrayOutput) ToDashboardGridArrayOutput() DashboardGridArrayOutput {
	return o
}

func (o DashboardGridArrayOutput) ToDashboardGridArrayOutputWithContext(ctx context.Context) DashboardGridArrayOutput {
	return o
}

func (o DashboardGridArrayOutput) Index(i pulumi.IntInput) DashboardGridOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) DashboardGrid {
		return vs[0].([]DashboardGrid)[vs[1].(int)]
	}).(DashboardGridOutput)
}

type DashboardGroupDashboard struct {
	// The dashboard id to mirror
	DashboardId string `pulumi:"dashboardId"`
	// The description that will override the original dashboards's description.
	DescriptionOverride *string `pulumi:"descriptionOverride"`
	// The description that will override the original dashboards's description.
	FilterOverrides []DashboardGroupDashboardFilterOverride `pulumi:"filterOverrides"`
	// The name that will override the original dashboards's name.
	NameOverride      *string                                   `pulumi:"nameOverride"`
	VariableOverrides []DashboardGroupDashboardVariableOverride `pulumi:"variableOverrides"`
}

// DashboardGroupDashboardInput is an input type that accepts DashboardGroupDashboardArgs and DashboardGroupDashboardOutput values.
// You can construct a concrete instance of `DashboardGroupDashboardInput` via:
//
//          DashboardGroupDashboardArgs{...}
type DashboardGroupDashboardInput interface {
	pulumi.Input

	ToDashboardGroupDashboardOutput() DashboardGroupDashboardOutput
	ToDashboardGroupDashboardOutputWithContext(context.Context) DashboardGroupDashboardOutput
}

type DashboardGroupDashboardArgs struct {
	// The dashboard id to mirror
	DashboardId pulumi.StringInput `pulumi:"dashboardId"`
	// The description that will override the original dashboards's description.
	DescriptionOverride pulumi.StringPtrInput `pulumi:"descriptionOverride"`
	// The description that will override the original dashboards's description.
	FilterOverrides DashboardGroupDashboardFilterOverrideArrayInput `pulumi:"filterOverrides"`
	// The name that will override the original dashboards's name.
	NameOverride      pulumi.StringPtrInput                             `pulumi:"nameOverride"`
	VariableOverrides DashboardGroupDashboardVariableOverrideArrayInput `pulumi:"variableOverrides"`
}

func (DashboardGroupDashboardArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DashboardGroupDashboard)(nil)).Elem()
}

func (i DashboardGroupDashboardArgs) ToDashboardGroupDashboardOutput() DashboardGroupDashboardOutput {
	return i.ToDashboardGroupDashboardOutputWithContext(context.Background())
}

func (i DashboardGroupDashboardArgs) ToDashboardGroupDashboardOutputWithContext(ctx context.Context) DashboardGroupDashboardOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardGroupDashboardOutput)
}

// DashboardGroupDashboardArrayInput is an input type that accepts DashboardGroupDashboardArray and DashboardGroupDashboardArrayOutput values.
// You can construct a concrete instance of `DashboardGroupDashboardArrayInput` via:
//
//          DashboardGroupDashboardArray{ DashboardGroupDashboardArgs{...} }
type DashboardGroupDashboardArrayInput interface {
	pulumi.Input

	ToDashboardGroupDashboardArrayOutput() DashboardGroupDashboardArrayOutput
	ToDashboardGroupDashboardArrayOutputWithContext(context.Context) DashboardGroupDashboardArrayOutput
}

type DashboardGroupDashboardArray []DashboardGroupDashboardInput

func (DashboardGroupDashboardArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DashboardGroupDashboard)(nil)).Elem()
}

func (i DashboardGroupDashboardArray) ToDashboardGroupDashboardArrayOutput() DashboardGroupDashboardArrayOutput {
	return i.ToDashboardGroupDashboardArrayOutputWithContext(context.Background())
}

func (i DashboardGroupDashboardArray) ToDashboardGroupDashboardArrayOutputWithContext(ctx context.Context) DashboardGroupDashboardArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardGroupDashboardArrayOutput)
}

type DashboardGroupDashboardOutput struct{ *pulumi.OutputState }

func (DashboardGroupDashboardOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DashboardGroupDashboard)(nil)).Elem()
}

func (o DashboardGroupDashboardOutput) ToDashboardGroupDashboardOutput() DashboardGroupDashboardOutput {
	return o
}

func (o DashboardGroupDashboardOutput) ToDashboardGroupDashboardOutputWithContext(ctx context.Context) DashboardGroupDashboardOutput {
	return o
}

// The dashboard id to mirror
func (o DashboardGroupDashboardOutput) DashboardId() pulumi.StringOutput {
	return o.ApplyT(func(v DashboardGroupDashboard) string { return v.DashboardId }).(pulumi.StringOutput)
}

// The description that will override the original dashboards's description.
func (o DashboardGroupDashboardOutput) DescriptionOverride() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DashboardGroupDashboard) *string { return v.DescriptionOverride }).(pulumi.StringPtrOutput)
}

// The description that will override the original dashboards's description.
func (o DashboardGroupDashboardOutput) FilterOverrides() DashboardGroupDashboardFilterOverrideArrayOutput {
	return o.ApplyT(func(v DashboardGroupDashboard) []DashboardGroupDashboardFilterOverride { return v.FilterOverrides }).(DashboardGroupDashboardFilterOverrideArrayOutput)
}

// The name that will override the original dashboards's name.
func (o DashboardGroupDashboardOutput) NameOverride() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DashboardGroupDashboard) *string { return v.NameOverride }).(pulumi.StringPtrOutput)
}

func (o DashboardGroupDashboardOutput) VariableOverrides() DashboardGroupDashboardVariableOverrideArrayOutput {
	return o.ApplyT(func(v DashboardGroupDashboard) []DashboardGroupDashboardVariableOverride { return v.VariableOverrides }).(DashboardGroupDashboardVariableOverrideArrayOutput)
}

type DashboardGroupDashboardArrayOutput struct{ *pulumi.OutputState }

func (DashboardGroupDashboardArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DashboardGroupDashboard)(nil)).Elem()
}

func (o DashboardGroupDashboardArrayOutput) ToDashboardGroupDashboardArrayOutput() DashboardGroupDashboardArrayOutput {
	return o
}

func (o DashboardGroupDashboardArrayOutput) ToDashboardGroupDashboardArrayOutputWithContext(ctx context.Context) DashboardGroupDashboardArrayOutput {
	return o
}

func (o DashboardGroupDashboardArrayOutput) Index(i pulumi.IntInput) DashboardGroupDashboardOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) DashboardGroupDashboard {
		return vs[0].([]DashboardGroupDashboard)[vs[1].(int)]
	}).(DashboardGroupDashboardOutput)
}

type DashboardGroupDashboardFilterOverride struct {
	// If true,  only data that does not match the specified value of the specified property appear in the event overlay. Defaults to `false`.
	Negated *bool `pulumi:"negated"`
	// A metric time series dimension or property name.
	Property string `pulumi:"property"`
	// (Optional) List of of strings (which will be treated as an OR filter on the property).
	Values []string `pulumi:"values"`
}

// DashboardGroupDashboardFilterOverrideInput is an input type that accepts DashboardGroupDashboardFilterOverrideArgs and DashboardGroupDashboardFilterOverrideOutput values.
// You can construct a concrete instance of `DashboardGroupDashboardFilterOverrideInput` via:
//
//          DashboardGroupDashboardFilterOverrideArgs{...}
type DashboardGroupDashboardFilterOverrideInput interface {
	pulumi.Input

	ToDashboardGroupDashboardFilterOverrideOutput() DashboardGroupDashboardFilterOverrideOutput
	ToDashboardGroupDashboardFilterOverrideOutputWithContext(context.Context) DashboardGroupDashboardFilterOverrideOutput
}

type DashboardGroupDashboardFilterOverrideArgs struct {
	// If true,  only data that does not match the specified value of the specified property appear in the event overlay. Defaults to `false`.
	Negated pulumi.BoolPtrInput `pulumi:"negated"`
	// A metric time series dimension or property name.
	Property pulumi.StringInput `pulumi:"property"`
	// (Optional) List of of strings (which will be treated as an OR filter on the property).
	Values pulumi.StringArrayInput `pulumi:"values"`
}

func (DashboardGroupDashboardFilterOverrideArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DashboardGroupDashboardFilterOverride)(nil)).Elem()
}

func (i DashboardGroupDashboardFilterOverrideArgs) ToDashboardGroupDashboardFilterOverrideOutput() DashboardGroupDashboardFilterOverrideOutput {
	return i.ToDashboardGroupDashboardFilterOverrideOutputWithContext(context.Background())
}

func (i DashboardGroupDashboardFilterOverrideArgs) ToDashboardGroupDashboardFilterOverrideOutputWithContext(ctx context.Context) DashboardGroupDashboardFilterOverrideOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardGroupDashboardFilterOverrideOutput)
}

// DashboardGroupDashboardFilterOverrideArrayInput is an input type that accepts DashboardGroupDashboardFilterOverrideArray and DashboardGroupDashboardFilterOverrideArrayOutput values.
// You can construct a concrete instance of `DashboardGroupDashboardFilterOverrideArrayInput` via:
//
//          DashboardGroupDashboardFilterOverrideArray{ DashboardGroupDashboardFilterOverrideArgs{...} }
type DashboardGroupDashboardFilterOverrideArrayInput interface {
	pulumi.Input

	ToDashboardGroupDashboardFilterOverrideArrayOutput() DashboardGroupDashboardFilterOverrideArrayOutput
	ToDashboardGroupDashboardFilterOverrideArrayOutputWithContext(context.Context) DashboardGroupDashboardFilterOverrideArrayOutput
}

type DashboardGroupDashboardFilterOverrideArray []DashboardGroupDashboardFilterOverrideInput

func (DashboardGroupDashboardFilterOverrideArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DashboardGroupDashboardFilterOverride)(nil)).Elem()
}

func (i DashboardGroupDashboardFilterOverrideArray) ToDashboardGroupDashboardFilterOverrideArrayOutput() DashboardGroupDashboardFilterOverrideArrayOutput {
	return i.ToDashboardGroupDashboardFilterOverrideArrayOutputWithContext(context.Background())
}

func (i DashboardGroupDashboardFilterOverrideArray) ToDashboardGroupDashboardFilterOverrideArrayOutputWithContext(ctx context.Context) DashboardGroupDashboardFilterOverrideArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardGroupDashboardFilterOverrideArrayOutput)
}

type DashboardGroupDashboardFilterOverrideOutput struct{ *pulumi.OutputState }

func (DashboardGroupDashboardFilterOverrideOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DashboardGroupDashboardFilterOverride)(nil)).Elem()
}

func (o DashboardGroupDashboardFilterOverrideOutput) ToDashboardGroupDashboardFilterOverrideOutput() DashboardGroupDashboardFilterOverrideOutput {
	return o
}

func (o DashboardGroupDashboardFilterOverrideOutput) ToDashboardGroupDashboardFilterOverrideOutputWithContext(ctx context.Context) DashboardGroupDashboardFilterOverrideOutput {
	return o
}

// If true,  only data that does not match the specified value of the specified property appear in the event overlay. Defaults to `false`.
func (o DashboardGroupDashboardFilterOverrideOutput) Negated() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v DashboardGroupDashboardFilterOverride) *bool { return v.Negated }).(pulumi.BoolPtrOutput)
}

// A metric time series dimension or property name.
func (o DashboardGroupDashboardFilterOverrideOutput) Property() pulumi.StringOutput {
	return o.ApplyT(func(v DashboardGroupDashboardFilterOverride) string { return v.Property }).(pulumi.StringOutput)
}

// (Optional) List of of strings (which will be treated as an OR filter on the property).
func (o DashboardGroupDashboardFilterOverrideOutput) Values() pulumi.StringArrayOutput {
	return o.ApplyT(func(v DashboardGroupDashboardFilterOverride) []string { return v.Values }).(pulumi.StringArrayOutput)
}

type DashboardGroupDashboardFilterOverrideArrayOutput struct{ *pulumi.OutputState }

func (DashboardGroupDashboardFilterOverrideArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DashboardGroupDashboardFilterOverride)(nil)).Elem()
}

func (o DashboardGroupDashboardFilterOverrideArrayOutput) ToDashboardGroupDashboardFilterOverrideArrayOutput() DashboardGroupDashboardFilterOverrideArrayOutput {
	return o
}

func (o DashboardGroupDashboardFilterOverrideArrayOutput) ToDashboardGroupDashboardFilterOverrideArrayOutputWithContext(ctx context.Context) DashboardGroupDashboardFilterOverrideArrayOutput {
	return o
}

func (o DashboardGroupDashboardFilterOverrideArrayOutput) Index(i pulumi.IntInput) DashboardGroupDashboardFilterOverrideOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) DashboardGroupDashboardFilterOverride {
		return vs[0].([]DashboardGroupDashboardFilterOverride)[vs[1].(int)]
	}).(DashboardGroupDashboardFilterOverrideOutput)
}

type DashboardGroupDashboardVariableOverride struct {
	// A metric time series dimension or property name.
	Property string `pulumi:"property"`
	// (Optional) List of of strings (which will be treated as an OR filter on the property).
	Values []string `pulumi:"values"`
	// A list of strings of suggested values for this variable; these suggestions will receive priority when values are autosuggested for this variable.
	ValuesSuggesteds []string `pulumi:"valuesSuggesteds"`
}

// DashboardGroupDashboardVariableOverrideInput is an input type that accepts DashboardGroupDashboardVariableOverrideArgs and DashboardGroupDashboardVariableOverrideOutput values.
// You can construct a concrete instance of `DashboardGroupDashboardVariableOverrideInput` via:
//
//          DashboardGroupDashboardVariableOverrideArgs{...}
type DashboardGroupDashboardVariableOverrideInput interface {
	pulumi.Input

	ToDashboardGroupDashboardVariableOverrideOutput() DashboardGroupDashboardVariableOverrideOutput
	ToDashboardGroupDashboardVariableOverrideOutputWithContext(context.Context) DashboardGroupDashboardVariableOverrideOutput
}

type DashboardGroupDashboardVariableOverrideArgs struct {
	// A metric time series dimension or property name.
	Property pulumi.StringInput `pulumi:"property"`
	// (Optional) List of of strings (which will be treated as an OR filter on the property).
	Values pulumi.StringArrayInput `pulumi:"values"`
	// A list of strings of suggested values for this variable; these suggestions will receive priority when values are autosuggested for this variable.
	ValuesSuggesteds pulumi.StringArrayInput `pulumi:"valuesSuggesteds"`
}

func (DashboardGroupDashboardVariableOverrideArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DashboardGroupDashboardVariableOverride)(nil)).Elem()
}

func (i DashboardGroupDashboardVariableOverrideArgs) ToDashboardGroupDashboardVariableOverrideOutput() DashboardGroupDashboardVariableOverrideOutput {
	return i.ToDashboardGroupDashboardVariableOverrideOutputWithContext(context.Background())
}

func (i DashboardGroupDashboardVariableOverrideArgs) ToDashboardGroupDashboardVariableOverrideOutputWithContext(ctx context.Context) DashboardGroupDashboardVariableOverrideOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardGroupDashboardVariableOverrideOutput)
}

// DashboardGroupDashboardVariableOverrideArrayInput is an input type that accepts DashboardGroupDashboardVariableOverrideArray and DashboardGroupDashboardVariableOverrideArrayOutput values.
// You can construct a concrete instance of `DashboardGroupDashboardVariableOverrideArrayInput` via:
//
//          DashboardGroupDashboardVariableOverrideArray{ DashboardGroupDashboardVariableOverrideArgs{...} }
type DashboardGroupDashboardVariableOverrideArrayInput interface {
	pulumi.Input

	ToDashboardGroupDashboardVariableOverrideArrayOutput() DashboardGroupDashboardVariableOverrideArrayOutput
	ToDashboardGroupDashboardVariableOverrideArrayOutputWithContext(context.Context) DashboardGroupDashboardVariableOverrideArrayOutput
}

type DashboardGroupDashboardVariableOverrideArray []DashboardGroupDashboardVariableOverrideInput

func (DashboardGroupDashboardVariableOverrideArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DashboardGroupDashboardVariableOverride)(nil)).Elem()
}

func (i DashboardGroupDashboardVariableOverrideArray) ToDashboardGroupDashboardVariableOverrideArrayOutput() DashboardGroupDashboardVariableOverrideArrayOutput {
	return i.ToDashboardGroupDashboardVariableOverrideArrayOutputWithContext(context.Background())
}

func (i DashboardGroupDashboardVariableOverrideArray) ToDashboardGroupDashboardVariableOverrideArrayOutputWithContext(ctx context.Context) DashboardGroupDashboardVariableOverrideArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardGroupDashboardVariableOverrideArrayOutput)
}

type DashboardGroupDashboardVariableOverrideOutput struct{ *pulumi.OutputState }

func (DashboardGroupDashboardVariableOverrideOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DashboardGroupDashboardVariableOverride)(nil)).Elem()
}

func (o DashboardGroupDashboardVariableOverrideOutput) ToDashboardGroupDashboardVariableOverrideOutput() DashboardGroupDashboardVariableOverrideOutput {
	return o
}

func (o DashboardGroupDashboardVariableOverrideOutput) ToDashboardGroupDashboardVariableOverrideOutputWithContext(ctx context.Context) DashboardGroupDashboardVariableOverrideOutput {
	return o
}

// A metric time series dimension or property name.
func (o DashboardGroupDashboardVariableOverrideOutput) Property() pulumi.StringOutput {
	return o.ApplyT(func(v DashboardGroupDashboardVariableOverride) string { return v.Property }).(pulumi.StringOutput)
}

// (Optional) List of of strings (which will be treated as an OR filter on the property).
func (o DashboardGroupDashboardVariableOverrideOutput) Values() pulumi.StringArrayOutput {
	return o.ApplyT(func(v DashboardGroupDashboardVariableOverride) []string { return v.Values }).(pulumi.StringArrayOutput)
}

// A list of strings of suggested values for this variable; these suggestions will receive priority when values are autosuggested for this variable.
func (o DashboardGroupDashboardVariableOverrideOutput) ValuesSuggesteds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v DashboardGroupDashboardVariableOverride) []string { return v.ValuesSuggesteds }).(pulumi.StringArrayOutput)
}

type DashboardGroupDashboardVariableOverrideArrayOutput struct{ *pulumi.OutputState }

func (DashboardGroupDashboardVariableOverrideArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DashboardGroupDashboardVariableOverride)(nil)).Elem()
}

func (o DashboardGroupDashboardVariableOverrideArrayOutput) ToDashboardGroupDashboardVariableOverrideArrayOutput() DashboardGroupDashboardVariableOverrideArrayOutput {
	return o
}

func (o DashboardGroupDashboardVariableOverrideArrayOutput) ToDashboardGroupDashboardVariableOverrideArrayOutputWithContext(ctx context.Context) DashboardGroupDashboardVariableOverrideArrayOutput {
	return o
}

func (o DashboardGroupDashboardVariableOverrideArrayOutput) Index(i pulumi.IntInput) DashboardGroupDashboardVariableOverrideOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) DashboardGroupDashboardVariableOverride {
		return vs[0].([]DashboardGroupDashboardVariableOverride)[vs[1].(int)]
	}).(DashboardGroupDashboardVariableOverrideOutput)
}

type DashboardGroupImportQualifier struct {
	Filters []DashboardGroupImportQualifierFilter `pulumi:"filters"`
	Metric  string                                `pulumi:"metric"`
}

// DashboardGroupImportQualifierInput is an input type that accepts DashboardGroupImportQualifierArgs and DashboardGroupImportQualifierOutput values.
// You can construct a concrete instance of `DashboardGroupImportQualifierInput` via:
//
//          DashboardGroupImportQualifierArgs{...}
type DashboardGroupImportQualifierInput interface {
	pulumi.Input

	ToDashboardGroupImportQualifierOutput() DashboardGroupImportQualifierOutput
	ToDashboardGroupImportQualifierOutputWithContext(context.Context) DashboardGroupImportQualifierOutput
}

type DashboardGroupImportQualifierArgs struct {
	Filters DashboardGroupImportQualifierFilterArrayInput `pulumi:"filters"`
	Metric  pulumi.StringInput                            `pulumi:"metric"`
}

func (DashboardGroupImportQualifierArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DashboardGroupImportQualifier)(nil)).Elem()
}

func (i DashboardGroupImportQualifierArgs) ToDashboardGroupImportQualifierOutput() DashboardGroupImportQualifierOutput {
	return i.ToDashboardGroupImportQualifierOutputWithContext(context.Background())
}

func (i DashboardGroupImportQualifierArgs) ToDashboardGroupImportQualifierOutputWithContext(ctx context.Context) DashboardGroupImportQualifierOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardGroupImportQualifierOutput)
}

// DashboardGroupImportQualifierArrayInput is an input type that accepts DashboardGroupImportQualifierArray and DashboardGroupImportQualifierArrayOutput values.
// You can construct a concrete instance of `DashboardGroupImportQualifierArrayInput` via:
//
//          DashboardGroupImportQualifierArray{ DashboardGroupImportQualifierArgs{...} }
type DashboardGroupImportQualifierArrayInput interface {
	pulumi.Input

	ToDashboardGroupImportQualifierArrayOutput() DashboardGroupImportQualifierArrayOutput
	ToDashboardGroupImportQualifierArrayOutputWithContext(context.Context) DashboardGroupImportQualifierArrayOutput
}

type DashboardGroupImportQualifierArray []DashboardGroupImportQualifierInput

func (DashboardGroupImportQualifierArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DashboardGroupImportQualifier)(nil)).Elem()
}

func (i DashboardGroupImportQualifierArray) ToDashboardGroupImportQualifierArrayOutput() DashboardGroupImportQualifierArrayOutput {
	return i.ToDashboardGroupImportQualifierArrayOutputWithContext(context.Background())
}

func (i DashboardGroupImportQualifierArray) ToDashboardGroupImportQualifierArrayOutputWithContext(ctx context.Context) DashboardGroupImportQualifierArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardGroupImportQualifierArrayOutput)
}

type DashboardGroupImportQualifierOutput struct{ *pulumi.OutputState }

func (DashboardGroupImportQualifierOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DashboardGroupImportQualifier)(nil)).Elem()
}

func (o DashboardGroupImportQualifierOutput) ToDashboardGroupImportQualifierOutput() DashboardGroupImportQualifierOutput {
	return o
}

func (o DashboardGroupImportQualifierOutput) ToDashboardGroupImportQualifierOutputWithContext(ctx context.Context) DashboardGroupImportQualifierOutput {
	return o
}

func (o DashboardGroupImportQualifierOutput) Filters() DashboardGroupImportQualifierFilterArrayOutput {
	return o.ApplyT(func(v DashboardGroupImportQualifier) []DashboardGroupImportQualifierFilter { return v.Filters }).(DashboardGroupImportQualifierFilterArrayOutput)
}

func (o DashboardGroupImportQualifierOutput) Metric() pulumi.StringOutput {
	return o.ApplyT(func(v DashboardGroupImportQualifier) string { return v.Metric }).(pulumi.StringOutput)
}

type DashboardGroupImportQualifierArrayOutput struct{ *pulumi.OutputState }

func (DashboardGroupImportQualifierArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DashboardGroupImportQualifier)(nil)).Elem()
}

func (o DashboardGroupImportQualifierArrayOutput) ToDashboardGroupImportQualifierArrayOutput() DashboardGroupImportQualifierArrayOutput {
	return o
}

func (o DashboardGroupImportQualifierArrayOutput) ToDashboardGroupImportQualifierArrayOutputWithContext(ctx context.Context) DashboardGroupImportQualifierArrayOutput {
	return o
}

func (o DashboardGroupImportQualifierArrayOutput) Index(i pulumi.IntInput) DashboardGroupImportQualifierOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) DashboardGroupImportQualifier {
		return vs[0].([]DashboardGroupImportQualifier)[vs[1].(int)]
	}).(DashboardGroupImportQualifierOutput)
}

type DashboardGroupImportQualifierFilter struct {
	// If true,  only data that does not match the specified value of the specified property appear in the event overlay. Defaults to `false`.
	Negated *bool `pulumi:"negated"`
	// A metric time series dimension or property name.
	Property string `pulumi:"property"`
	// (Optional) List of of strings (which will be treated as an OR filter on the property).
	Values []string `pulumi:"values"`
}

// DashboardGroupImportQualifierFilterInput is an input type that accepts DashboardGroupImportQualifierFilterArgs and DashboardGroupImportQualifierFilterOutput values.
// You can construct a concrete instance of `DashboardGroupImportQualifierFilterInput` via:
//
//          DashboardGroupImportQualifierFilterArgs{...}
type DashboardGroupImportQualifierFilterInput interface {
	pulumi.Input

	ToDashboardGroupImportQualifierFilterOutput() DashboardGroupImportQualifierFilterOutput
	ToDashboardGroupImportQualifierFilterOutputWithContext(context.Context) DashboardGroupImportQualifierFilterOutput
}

type DashboardGroupImportQualifierFilterArgs struct {
	// If true,  only data that does not match the specified value of the specified property appear in the event overlay. Defaults to `false`.
	Negated pulumi.BoolPtrInput `pulumi:"negated"`
	// A metric time series dimension or property name.
	Property pulumi.StringInput `pulumi:"property"`
	// (Optional) List of of strings (which will be treated as an OR filter on the property).
	Values pulumi.StringArrayInput `pulumi:"values"`
}

func (DashboardGroupImportQualifierFilterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DashboardGroupImportQualifierFilter)(nil)).Elem()
}

func (i DashboardGroupImportQualifierFilterArgs) ToDashboardGroupImportQualifierFilterOutput() DashboardGroupImportQualifierFilterOutput {
	return i.ToDashboardGroupImportQualifierFilterOutputWithContext(context.Background())
}

func (i DashboardGroupImportQualifierFilterArgs) ToDashboardGroupImportQualifierFilterOutputWithContext(ctx context.Context) DashboardGroupImportQualifierFilterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardGroupImportQualifierFilterOutput)
}

// DashboardGroupImportQualifierFilterArrayInput is an input type that accepts DashboardGroupImportQualifierFilterArray and DashboardGroupImportQualifierFilterArrayOutput values.
// You can construct a concrete instance of `DashboardGroupImportQualifierFilterArrayInput` via:
//
//          DashboardGroupImportQualifierFilterArray{ DashboardGroupImportQualifierFilterArgs{...} }
type DashboardGroupImportQualifierFilterArrayInput interface {
	pulumi.Input

	ToDashboardGroupImportQualifierFilterArrayOutput() DashboardGroupImportQualifierFilterArrayOutput
	ToDashboardGroupImportQualifierFilterArrayOutputWithContext(context.Context) DashboardGroupImportQualifierFilterArrayOutput
}

type DashboardGroupImportQualifierFilterArray []DashboardGroupImportQualifierFilterInput

func (DashboardGroupImportQualifierFilterArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DashboardGroupImportQualifierFilter)(nil)).Elem()
}

func (i DashboardGroupImportQualifierFilterArray) ToDashboardGroupImportQualifierFilterArrayOutput() DashboardGroupImportQualifierFilterArrayOutput {
	return i.ToDashboardGroupImportQualifierFilterArrayOutputWithContext(context.Background())
}

func (i DashboardGroupImportQualifierFilterArray) ToDashboardGroupImportQualifierFilterArrayOutputWithContext(ctx context.Context) DashboardGroupImportQualifierFilterArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardGroupImportQualifierFilterArrayOutput)
}

type DashboardGroupImportQualifierFilterOutput struct{ *pulumi.OutputState }

func (DashboardGroupImportQualifierFilterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DashboardGroupImportQualifierFilter)(nil)).Elem()
}

func (o DashboardGroupImportQualifierFilterOutput) ToDashboardGroupImportQualifierFilterOutput() DashboardGroupImportQualifierFilterOutput {
	return o
}

func (o DashboardGroupImportQualifierFilterOutput) ToDashboardGroupImportQualifierFilterOutputWithContext(ctx context.Context) DashboardGroupImportQualifierFilterOutput {
	return o
}

// If true,  only data that does not match the specified value of the specified property appear in the event overlay. Defaults to `false`.
func (o DashboardGroupImportQualifierFilterOutput) Negated() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v DashboardGroupImportQualifierFilter) *bool { return v.Negated }).(pulumi.BoolPtrOutput)
}

// A metric time series dimension or property name.
func (o DashboardGroupImportQualifierFilterOutput) Property() pulumi.StringOutput {
	return o.ApplyT(func(v DashboardGroupImportQualifierFilter) string { return v.Property }).(pulumi.StringOutput)
}

// (Optional) List of of strings (which will be treated as an OR filter on the property).
func (o DashboardGroupImportQualifierFilterOutput) Values() pulumi.StringArrayOutput {
	return o.ApplyT(func(v DashboardGroupImportQualifierFilter) []string { return v.Values }).(pulumi.StringArrayOutput)
}

type DashboardGroupImportQualifierFilterArrayOutput struct{ *pulumi.OutputState }

func (DashboardGroupImportQualifierFilterArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DashboardGroupImportQualifierFilter)(nil)).Elem()
}

func (o DashboardGroupImportQualifierFilterArrayOutput) ToDashboardGroupImportQualifierFilterArrayOutput() DashboardGroupImportQualifierFilterArrayOutput {
	return o
}

func (o DashboardGroupImportQualifierFilterArrayOutput) ToDashboardGroupImportQualifierFilterArrayOutputWithContext(ctx context.Context) DashboardGroupImportQualifierFilterArrayOutput {
	return o
}

func (o DashboardGroupImportQualifierFilterArrayOutput) Index(i pulumi.IntInput) DashboardGroupImportQualifierFilterOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) DashboardGroupImportQualifierFilter {
		return vs[0].([]DashboardGroupImportQualifierFilter)[vs[1].(int)]
	}).(DashboardGroupImportQualifierFilterOutput)
}

type DashboardSelectedEventOverlay struct {
	// Search term used to choose the events shown in the overlay.
	Signal string `pulumi:"signal"`
	// Each element specifies a filter to use against the signal specified in the `signal`.
	Sources []DashboardSelectedEventOverlaySource `pulumi:"sources"`
	// Can be set to `eventTimeSeries` (the default) to refer to externally reported events, or `detectorEvents` to refer to events from detector triggers.
	Type *string `pulumi:"type"`
}

// DashboardSelectedEventOverlayInput is an input type that accepts DashboardSelectedEventOverlayArgs and DashboardSelectedEventOverlayOutput values.
// You can construct a concrete instance of `DashboardSelectedEventOverlayInput` via:
//
//          DashboardSelectedEventOverlayArgs{...}
type DashboardSelectedEventOverlayInput interface {
	pulumi.Input

	ToDashboardSelectedEventOverlayOutput() DashboardSelectedEventOverlayOutput
	ToDashboardSelectedEventOverlayOutputWithContext(context.Context) DashboardSelectedEventOverlayOutput
}

type DashboardSelectedEventOverlayArgs struct {
	// Search term used to choose the events shown in the overlay.
	Signal pulumi.StringInput `pulumi:"signal"`
	// Each element specifies a filter to use against the signal specified in the `signal`.
	Sources DashboardSelectedEventOverlaySourceArrayInput `pulumi:"sources"`
	// Can be set to `eventTimeSeries` (the default) to refer to externally reported events, or `detectorEvents` to refer to events from detector triggers.
	Type pulumi.StringPtrInput `pulumi:"type"`
}

func (DashboardSelectedEventOverlayArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DashboardSelectedEventOverlay)(nil)).Elem()
}

func (i DashboardSelectedEventOverlayArgs) ToDashboardSelectedEventOverlayOutput() DashboardSelectedEventOverlayOutput {
	return i.ToDashboardSelectedEventOverlayOutputWithContext(context.Background())
}

func (i DashboardSelectedEventOverlayArgs) ToDashboardSelectedEventOverlayOutputWithContext(ctx context.Context) DashboardSelectedEventOverlayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardSelectedEventOverlayOutput)
}

// DashboardSelectedEventOverlayArrayInput is an input type that accepts DashboardSelectedEventOverlayArray and DashboardSelectedEventOverlayArrayOutput values.
// You can construct a concrete instance of `DashboardSelectedEventOverlayArrayInput` via:
//
//          DashboardSelectedEventOverlayArray{ DashboardSelectedEventOverlayArgs{...} }
type DashboardSelectedEventOverlayArrayInput interface {
	pulumi.Input

	ToDashboardSelectedEventOverlayArrayOutput() DashboardSelectedEventOverlayArrayOutput
	ToDashboardSelectedEventOverlayArrayOutputWithContext(context.Context) DashboardSelectedEventOverlayArrayOutput
}

type DashboardSelectedEventOverlayArray []DashboardSelectedEventOverlayInput

func (DashboardSelectedEventOverlayArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DashboardSelectedEventOverlay)(nil)).Elem()
}

func (i DashboardSelectedEventOverlayArray) ToDashboardSelectedEventOverlayArrayOutput() DashboardSelectedEventOverlayArrayOutput {
	return i.ToDashboardSelectedEventOverlayArrayOutputWithContext(context.Background())
}

func (i DashboardSelectedEventOverlayArray) ToDashboardSelectedEventOverlayArrayOutputWithContext(ctx context.Context) DashboardSelectedEventOverlayArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardSelectedEventOverlayArrayOutput)
}

type DashboardSelectedEventOverlayOutput struct{ *pulumi.OutputState }

func (DashboardSelectedEventOverlayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DashboardSelectedEventOverlay)(nil)).Elem()
}

func (o DashboardSelectedEventOverlayOutput) ToDashboardSelectedEventOverlayOutput() DashboardSelectedEventOverlayOutput {
	return o
}

func (o DashboardSelectedEventOverlayOutput) ToDashboardSelectedEventOverlayOutputWithContext(ctx context.Context) DashboardSelectedEventOverlayOutput {
	return o
}

// Search term used to choose the events shown in the overlay.
func (o DashboardSelectedEventOverlayOutput) Signal() pulumi.StringOutput {
	return o.ApplyT(func(v DashboardSelectedEventOverlay) string { return v.Signal }).(pulumi.StringOutput)
}

// Each element specifies a filter to use against the signal specified in the `signal`.
func (o DashboardSelectedEventOverlayOutput) Sources() DashboardSelectedEventOverlaySourceArrayOutput {
	return o.ApplyT(func(v DashboardSelectedEventOverlay) []DashboardSelectedEventOverlaySource { return v.Sources }).(DashboardSelectedEventOverlaySourceArrayOutput)
}

// Can be set to `eventTimeSeries` (the default) to refer to externally reported events, or `detectorEvents` to refer to events from detector triggers.
func (o DashboardSelectedEventOverlayOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DashboardSelectedEventOverlay) *string { return v.Type }).(pulumi.StringPtrOutput)
}

type DashboardSelectedEventOverlayArrayOutput struct{ *pulumi.OutputState }

func (DashboardSelectedEventOverlayArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DashboardSelectedEventOverlay)(nil)).Elem()
}

func (o DashboardSelectedEventOverlayArrayOutput) ToDashboardSelectedEventOverlayArrayOutput() DashboardSelectedEventOverlayArrayOutput {
	return o
}

func (o DashboardSelectedEventOverlayArrayOutput) ToDashboardSelectedEventOverlayArrayOutputWithContext(ctx context.Context) DashboardSelectedEventOverlayArrayOutput {
	return o
}

func (o DashboardSelectedEventOverlayArrayOutput) Index(i pulumi.IntInput) DashboardSelectedEventOverlayOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) DashboardSelectedEventOverlay {
		return vs[0].([]DashboardSelectedEventOverlay)[vs[1].(int)]
	}).(DashboardSelectedEventOverlayOutput)
}

type DashboardSelectedEventOverlaySource struct {
	// If true,  only data that does not match the specified value of the specified property appear in the event overlay. Defaults to `false`.
	Negated *bool `pulumi:"negated"`
	// The name of a dimension to filter against.
	Property string `pulumi:"property"`
	// A list of values to be used with the `property`, they will be combined via `OR`.
	Values []string `pulumi:"values"`
}

// DashboardSelectedEventOverlaySourceInput is an input type that accepts DashboardSelectedEventOverlaySourceArgs and DashboardSelectedEventOverlaySourceOutput values.
// You can construct a concrete instance of `DashboardSelectedEventOverlaySourceInput` via:
//
//          DashboardSelectedEventOverlaySourceArgs{...}
type DashboardSelectedEventOverlaySourceInput interface {
	pulumi.Input

	ToDashboardSelectedEventOverlaySourceOutput() DashboardSelectedEventOverlaySourceOutput
	ToDashboardSelectedEventOverlaySourceOutputWithContext(context.Context) DashboardSelectedEventOverlaySourceOutput
}

type DashboardSelectedEventOverlaySourceArgs struct {
	// If true,  only data that does not match the specified value of the specified property appear in the event overlay. Defaults to `false`.
	Negated pulumi.BoolPtrInput `pulumi:"negated"`
	// The name of a dimension to filter against.
	Property pulumi.StringInput `pulumi:"property"`
	// A list of values to be used with the `property`, they will be combined via `OR`.
	Values pulumi.StringArrayInput `pulumi:"values"`
}

func (DashboardSelectedEventOverlaySourceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DashboardSelectedEventOverlaySource)(nil)).Elem()
}

func (i DashboardSelectedEventOverlaySourceArgs) ToDashboardSelectedEventOverlaySourceOutput() DashboardSelectedEventOverlaySourceOutput {
	return i.ToDashboardSelectedEventOverlaySourceOutputWithContext(context.Background())
}

func (i DashboardSelectedEventOverlaySourceArgs) ToDashboardSelectedEventOverlaySourceOutputWithContext(ctx context.Context) DashboardSelectedEventOverlaySourceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardSelectedEventOverlaySourceOutput)
}

// DashboardSelectedEventOverlaySourceArrayInput is an input type that accepts DashboardSelectedEventOverlaySourceArray and DashboardSelectedEventOverlaySourceArrayOutput values.
// You can construct a concrete instance of `DashboardSelectedEventOverlaySourceArrayInput` via:
//
//          DashboardSelectedEventOverlaySourceArray{ DashboardSelectedEventOverlaySourceArgs{...} }
type DashboardSelectedEventOverlaySourceArrayInput interface {
	pulumi.Input

	ToDashboardSelectedEventOverlaySourceArrayOutput() DashboardSelectedEventOverlaySourceArrayOutput
	ToDashboardSelectedEventOverlaySourceArrayOutputWithContext(context.Context) DashboardSelectedEventOverlaySourceArrayOutput
}

type DashboardSelectedEventOverlaySourceArray []DashboardSelectedEventOverlaySourceInput

func (DashboardSelectedEventOverlaySourceArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DashboardSelectedEventOverlaySource)(nil)).Elem()
}

func (i DashboardSelectedEventOverlaySourceArray) ToDashboardSelectedEventOverlaySourceArrayOutput() DashboardSelectedEventOverlaySourceArrayOutput {
	return i.ToDashboardSelectedEventOverlaySourceArrayOutputWithContext(context.Background())
}

func (i DashboardSelectedEventOverlaySourceArray) ToDashboardSelectedEventOverlaySourceArrayOutputWithContext(ctx context.Context) DashboardSelectedEventOverlaySourceArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardSelectedEventOverlaySourceArrayOutput)
}

type DashboardSelectedEventOverlaySourceOutput struct{ *pulumi.OutputState }

func (DashboardSelectedEventOverlaySourceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DashboardSelectedEventOverlaySource)(nil)).Elem()
}

func (o DashboardSelectedEventOverlaySourceOutput) ToDashboardSelectedEventOverlaySourceOutput() DashboardSelectedEventOverlaySourceOutput {
	return o
}

func (o DashboardSelectedEventOverlaySourceOutput) ToDashboardSelectedEventOverlaySourceOutputWithContext(ctx context.Context) DashboardSelectedEventOverlaySourceOutput {
	return o
}

// If true,  only data that does not match the specified value of the specified property appear in the event overlay. Defaults to `false`.
func (o DashboardSelectedEventOverlaySourceOutput) Negated() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v DashboardSelectedEventOverlaySource) *bool { return v.Negated }).(pulumi.BoolPtrOutput)
}

// The name of a dimension to filter against.
func (o DashboardSelectedEventOverlaySourceOutput) Property() pulumi.StringOutput {
	return o.ApplyT(func(v DashboardSelectedEventOverlaySource) string { return v.Property }).(pulumi.StringOutput)
}

// A list of values to be used with the `property`, they will be combined via `OR`.
func (o DashboardSelectedEventOverlaySourceOutput) Values() pulumi.StringArrayOutput {
	return o.ApplyT(func(v DashboardSelectedEventOverlaySource) []string { return v.Values }).(pulumi.StringArrayOutput)
}

type DashboardSelectedEventOverlaySourceArrayOutput struct{ *pulumi.OutputState }

func (DashboardSelectedEventOverlaySourceArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DashboardSelectedEventOverlaySource)(nil)).Elem()
}

func (o DashboardSelectedEventOverlaySourceArrayOutput) ToDashboardSelectedEventOverlaySourceArrayOutput() DashboardSelectedEventOverlaySourceArrayOutput {
	return o
}

func (o DashboardSelectedEventOverlaySourceArrayOutput) ToDashboardSelectedEventOverlaySourceArrayOutputWithContext(ctx context.Context) DashboardSelectedEventOverlaySourceArrayOutput {
	return o
}

func (o DashboardSelectedEventOverlaySourceArrayOutput) Index(i pulumi.IntInput) DashboardSelectedEventOverlaySourceOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) DashboardSelectedEventOverlaySource {
		return vs[0].([]DashboardSelectedEventOverlaySource)[vs[1].(int)]
	}).(DashboardSelectedEventOverlaySourceOutput)
}

type DashboardVariable struct {
	// An alias for the dashboard variable. This text will appear as the label for the dropdown field on the dashboard.
	Alias string `pulumi:"alias"`
	// If true, this variable will also match data that doesn't have this property at all.
	ApplyIfExist *bool `pulumi:"applyIfExist"`
	// Variable description.
	Description *string `pulumi:"description"`
	// The name of a dimension to filter against.
	Property string `pulumi:"property"`
	// If `true`, this variable will only apply to charts that have a filter for the property.
	ReplaceOnly *bool `pulumi:"replaceOnly"`
	// If `true`, this variable may only be set to the values listed in `valuesSuggested` and only these values will appear in autosuggestion menus. `false` by default.
	RestrictedSuggestions *bool `pulumi:"restrictedSuggestions"`
	// Determines whether a value is required for this variable (and therefore whether it will be possible to view this dashboard without this filter applied). `false` by default.
	ValueRequired *bool `pulumi:"valueRequired"`
	// A list of values to be used with the `property`, they will be combined via `OR`.
	Values []string `pulumi:"values"`
	// A list of strings of suggested values for this variable; these suggestions will receive priority when values are autosuggested for this variable.
	ValuesSuggesteds []string `pulumi:"valuesSuggesteds"`
}

// DashboardVariableInput is an input type that accepts DashboardVariableArgs and DashboardVariableOutput values.
// You can construct a concrete instance of `DashboardVariableInput` via:
//
//          DashboardVariableArgs{...}
type DashboardVariableInput interface {
	pulumi.Input

	ToDashboardVariableOutput() DashboardVariableOutput
	ToDashboardVariableOutputWithContext(context.Context) DashboardVariableOutput
}

type DashboardVariableArgs struct {
	// An alias for the dashboard variable. This text will appear as the label for the dropdown field on the dashboard.
	Alias pulumi.StringInput `pulumi:"alias"`
	// If true, this variable will also match data that doesn't have this property at all.
	ApplyIfExist pulumi.BoolPtrInput `pulumi:"applyIfExist"`
	// Variable description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The name of a dimension to filter against.
	Property pulumi.StringInput `pulumi:"property"`
	// If `true`, this variable will only apply to charts that have a filter for the property.
	ReplaceOnly pulumi.BoolPtrInput `pulumi:"replaceOnly"`
	// If `true`, this variable may only be set to the values listed in `valuesSuggested` and only these values will appear in autosuggestion menus. `false` by default.
	RestrictedSuggestions pulumi.BoolPtrInput `pulumi:"restrictedSuggestions"`
	// Determines whether a value is required for this variable (and therefore whether it will be possible to view this dashboard without this filter applied). `false` by default.
	ValueRequired pulumi.BoolPtrInput `pulumi:"valueRequired"`
	// A list of values to be used with the `property`, they will be combined via `OR`.
	Values pulumi.StringArrayInput `pulumi:"values"`
	// A list of strings of suggested values for this variable; these suggestions will receive priority when values are autosuggested for this variable.
	ValuesSuggesteds pulumi.StringArrayInput `pulumi:"valuesSuggesteds"`
}

func (DashboardVariableArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DashboardVariable)(nil)).Elem()
}

func (i DashboardVariableArgs) ToDashboardVariableOutput() DashboardVariableOutput {
	return i.ToDashboardVariableOutputWithContext(context.Background())
}

func (i DashboardVariableArgs) ToDashboardVariableOutputWithContext(ctx context.Context) DashboardVariableOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardVariableOutput)
}

// DashboardVariableArrayInput is an input type that accepts DashboardVariableArray and DashboardVariableArrayOutput values.
// You can construct a concrete instance of `DashboardVariableArrayInput` via:
//
//          DashboardVariableArray{ DashboardVariableArgs{...} }
type DashboardVariableArrayInput interface {
	pulumi.Input

	ToDashboardVariableArrayOutput() DashboardVariableArrayOutput
	ToDashboardVariableArrayOutputWithContext(context.Context) DashboardVariableArrayOutput
}

type DashboardVariableArray []DashboardVariableInput

func (DashboardVariableArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DashboardVariable)(nil)).Elem()
}

func (i DashboardVariableArray) ToDashboardVariableArrayOutput() DashboardVariableArrayOutput {
	return i.ToDashboardVariableArrayOutputWithContext(context.Background())
}

func (i DashboardVariableArray) ToDashboardVariableArrayOutputWithContext(ctx context.Context) DashboardVariableArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardVariableArrayOutput)
}

type DashboardVariableOutput struct{ *pulumi.OutputState }

func (DashboardVariableOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DashboardVariable)(nil)).Elem()
}

func (o DashboardVariableOutput) ToDashboardVariableOutput() DashboardVariableOutput {
	return o
}

func (o DashboardVariableOutput) ToDashboardVariableOutputWithContext(ctx context.Context) DashboardVariableOutput {
	return o
}

// An alias for the dashboard variable. This text will appear as the label for the dropdown field on the dashboard.
func (o DashboardVariableOutput) Alias() pulumi.StringOutput {
	return o.ApplyT(func(v DashboardVariable) string { return v.Alias }).(pulumi.StringOutput)
}

// If true, this variable will also match data that doesn't have this property at all.
func (o DashboardVariableOutput) ApplyIfExist() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v DashboardVariable) *bool { return v.ApplyIfExist }).(pulumi.BoolPtrOutput)
}

// Variable description.
func (o DashboardVariableOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DashboardVariable) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The name of a dimension to filter against.
func (o DashboardVariableOutput) Property() pulumi.StringOutput {
	return o.ApplyT(func(v DashboardVariable) string { return v.Property }).(pulumi.StringOutput)
}

// If `true`, this variable will only apply to charts that have a filter for the property.
func (o DashboardVariableOutput) ReplaceOnly() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v DashboardVariable) *bool { return v.ReplaceOnly }).(pulumi.BoolPtrOutput)
}

// If `true`, this variable may only be set to the values listed in `valuesSuggested` and only these values will appear in autosuggestion menus. `false` by default.
func (o DashboardVariableOutput) RestrictedSuggestions() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v DashboardVariable) *bool { return v.RestrictedSuggestions }).(pulumi.BoolPtrOutput)
}

// Determines whether a value is required for this variable (and therefore whether it will be possible to view this dashboard without this filter applied). `false` by default.
func (o DashboardVariableOutput) ValueRequired() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v DashboardVariable) *bool { return v.ValueRequired }).(pulumi.BoolPtrOutput)
}

// A list of values to be used with the `property`, they will be combined via `OR`.
func (o DashboardVariableOutput) Values() pulumi.StringArrayOutput {
	return o.ApplyT(func(v DashboardVariable) []string { return v.Values }).(pulumi.StringArrayOutput)
}

// A list of strings of suggested values for this variable; these suggestions will receive priority when values are autosuggested for this variable.
func (o DashboardVariableOutput) ValuesSuggesteds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v DashboardVariable) []string { return v.ValuesSuggesteds }).(pulumi.StringArrayOutput)
}

type DashboardVariableArrayOutput struct{ *pulumi.OutputState }

func (DashboardVariableArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DashboardVariable)(nil)).Elem()
}

func (o DashboardVariableArrayOutput) ToDashboardVariableArrayOutput() DashboardVariableArrayOutput {
	return o
}

func (o DashboardVariableArrayOutput) ToDashboardVariableArrayOutputWithContext(ctx context.Context) DashboardVariableArrayOutput {
	return o
}

func (o DashboardVariableArrayOutput) Index(i pulumi.IntInput) DashboardVariableOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) DashboardVariable {
		return vs[0].([]DashboardVariable)[vs[1].(int)]
	}).(DashboardVariableOutput)
}

type DataLinkTargetExternalUrl struct {
	// Flag that designates a target as the default for a data link object. `true` by default
	IsDefault *bool `pulumi:"isDefault"`
	// The [minimum time window](https://developers.signalfx.com/administration/data_links_overview.html#_minimum_time_window) for a search sent to an external site. Defaults to `6000`
	MinimumTimeWindow *string `pulumi:"minimumTimeWindow"`
	// User-assigned target name. Use this value to differentiate between the link targets for a data link object.
	Name string `pulumi:"name"`
	// Describes the relationship between SignalFx metadata keys and external system properties when the key names are different.
	PropertyKeyMapping map[string]string `pulumi:"propertyKeyMapping"`
	// [Designates the format](https://developers.signalfx.com/administration/data_links_overview.html#_minimum_time_window) of `minimumTimeWindow` in the same data link target object. Must be one of `"ISO8601"`, `"EpochSeconds"` or `"Epoch"` (which is milliseconds). Defaults to `"ISO8601"`.
	TimeFormat *string `pulumi:"timeFormat"`
	// URL string for a Splunk instance or external system data link target. [See the supported template variables](https://developers.signalfx.com/administration/data_links_overview.html#_external_link_targets).
	Url string `pulumi:"url"`
}

// DataLinkTargetExternalUrlInput is an input type that accepts DataLinkTargetExternalUrlArgs and DataLinkTargetExternalUrlOutput values.
// You can construct a concrete instance of `DataLinkTargetExternalUrlInput` via:
//
//          DataLinkTargetExternalUrlArgs{...}
type DataLinkTargetExternalUrlInput interface {
	pulumi.Input

	ToDataLinkTargetExternalUrlOutput() DataLinkTargetExternalUrlOutput
	ToDataLinkTargetExternalUrlOutputWithContext(context.Context) DataLinkTargetExternalUrlOutput
}

type DataLinkTargetExternalUrlArgs struct {
	// Flag that designates a target as the default for a data link object. `true` by default
	IsDefault pulumi.BoolPtrInput `pulumi:"isDefault"`
	// The [minimum time window](https://developers.signalfx.com/administration/data_links_overview.html#_minimum_time_window) for a search sent to an external site. Defaults to `6000`
	MinimumTimeWindow pulumi.StringPtrInput `pulumi:"minimumTimeWindow"`
	// User-assigned target name. Use this value to differentiate between the link targets for a data link object.
	Name pulumi.StringInput `pulumi:"name"`
	// Describes the relationship between SignalFx metadata keys and external system properties when the key names are different.
	PropertyKeyMapping pulumi.StringMapInput `pulumi:"propertyKeyMapping"`
	// [Designates the format](https://developers.signalfx.com/administration/data_links_overview.html#_minimum_time_window) of `minimumTimeWindow` in the same data link target object. Must be one of `"ISO8601"`, `"EpochSeconds"` or `"Epoch"` (which is milliseconds). Defaults to `"ISO8601"`.
	TimeFormat pulumi.StringPtrInput `pulumi:"timeFormat"`
	// URL string for a Splunk instance or external system data link target. [See the supported template variables](https://developers.signalfx.com/administration/data_links_overview.html#_external_link_targets).
	Url pulumi.StringInput `pulumi:"url"`
}

func (DataLinkTargetExternalUrlArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DataLinkTargetExternalUrl)(nil)).Elem()
}

func (i DataLinkTargetExternalUrlArgs) ToDataLinkTargetExternalUrlOutput() DataLinkTargetExternalUrlOutput {
	return i.ToDataLinkTargetExternalUrlOutputWithContext(context.Background())
}

func (i DataLinkTargetExternalUrlArgs) ToDataLinkTargetExternalUrlOutputWithContext(ctx context.Context) DataLinkTargetExternalUrlOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataLinkTargetExternalUrlOutput)
}

// DataLinkTargetExternalUrlArrayInput is an input type that accepts DataLinkTargetExternalUrlArray and DataLinkTargetExternalUrlArrayOutput values.
// You can construct a concrete instance of `DataLinkTargetExternalUrlArrayInput` via:
//
//          DataLinkTargetExternalUrlArray{ DataLinkTargetExternalUrlArgs{...} }
type DataLinkTargetExternalUrlArrayInput interface {
	pulumi.Input

	ToDataLinkTargetExternalUrlArrayOutput() DataLinkTargetExternalUrlArrayOutput
	ToDataLinkTargetExternalUrlArrayOutputWithContext(context.Context) DataLinkTargetExternalUrlArrayOutput
}

type DataLinkTargetExternalUrlArray []DataLinkTargetExternalUrlInput

func (DataLinkTargetExternalUrlArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DataLinkTargetExternalUrl)(nil)).Elem()
}

func (i DataLinkTargetExternalUrlArray) ToDataLinkTargetExternalUrlArrayOutput() DataLinkTargetExternalUrlArrayOutput {
	return i.ToDataLinkTargetExternalUrlArrayOutputWithContext(context.Background())
}

func (i DataLinkTargetExternalUrlArray) ToDataLinkTargetExternalUrlArrayOutputWithContext(ctx context.Context) DataLinkTargetExternalUrlArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataLinkTargetExternalUrlArrayOutput)
}

type DataLinkTargetExternalUrlOutput struct{ *pulumi.OutputState }

func (DataLinkTargetExternalUrlOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DataLinkTargetExternalUrl)(nil)).Elem()
}

func (o DataLinkTargetExternalUrlOutput) ToDataLinkTargetExternalUrlOutput() DataLinkTargetExternalUrlOutput {
	return o
}

func (o DataLinkTargetExternalUrlOutput) ToDataLinkTargetExternalUrlOutputWithContext(ctx context.Context) DataLinkTargetExternalUrlOutput {
	return o
}

// Flag that designates a target as the default for a data link object. `true` by default
func (o DataLinkTargetExternalUrlOutput) IsDefault() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v DataLinkTargetExternalUrl) *bool { return v.IsDefault }).(pulumi.BoolPtrOutput)
}

// The [minimum time window](https://developers.signalfx.com/administration/data_links_overview.html#_minimum_time_window) for a search sent to an external site. Defaults to `6000`
func (o DataLinkTargetExternalUrlOutput) MinimumTimeWindow() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DataLinkTargetExternalUrl) *string { return v.MinimumTimeWindow }).(pulumi.StringPtrOutput)
}

// User-assigned target name. Use this value to differentiate between the link targets for a data link object.
func (o DataLinkTargetExternalUrlOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v DataLinkTargetExternalUrl) string { return v.Name }).(pulumi.StringOutput)
}

// Describes the relationship between SignalFx metadata keys and external system properties when the key names are different.
func (o DataLinkTargetExternalUrlOutput) PropertyKeyMapping() pulumi.StringMapOutput {
	return o.ApplyT(func(v DataLinkTargetExternalUrl) map[string]string { return v.PropertyKeyMapping }).(pulumi.StringMapOutput)
}

// [Designates the format](https://developers.signalfx.com/administration/data_links_overview.html#_minimum_time_window) of `minimumTimeWindow` in the same data link target object. Must be one of `"ISO8601"`, `"EpochSeconds"` or `"Epoch"` (which is milliseconds). Defaults to `"ISO8601"`.
func (o DataLinkTargetExternalUrlOutput) TimeFormat() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DataLinkTargetExternalUrl) *string { return v.TimeFormat }).(pulumi.StringPtrOutput)
}

// URL string for a Splunk instance or external system data link target. [See the supported template variables](https://developers.signalfx.com/administration/data_links_overview.html#_external_link_targets).
func (o DataLinkTargetExternalUrlOutput) Url() pulumi.StringOutput {
	return o.ApplyT(func(v DataLinkTargetExternalUrl) string { return v.Url }).(pulumi.StringOutput)
}

type DataLinkTargetExternalUrlArrayOutput struct{ *pulumi.OutputState }

func (DataLinkTargetExternalUrlArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DataLinkTargetExternalUrl)(nil)).Elem()
}

func (o DataLinkTargetExternalUrlArrayOutput) ToDataLinkTargetExternalUrlArrayOutput() DataLinkTargetExternalUrlArrayOutput {
	return o
}

func (o DataLinkTargetExternalUrlArrayOutput) ToDataLinkTargetExternalUrlArrayOutputWithContext(ctx context.Context) DataLinkTargetExternalUrlArrayOutput {
	return o
}

func (o DataLinkTargetExternalUrlArrayOutput) Index(i pulumi.IntInput) DataLinkTargetExternalUrlOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) DataLinkTargetExternalUrl {
		return vs[0].([]DataLinkTargetExternalUrl)[vs[1].(int)]
	}).(DataLinkTargetExternalUrlOutput)
}

type DataLinkTargetSignalfxDashboard struct {
	// SignalFx-assigned ID of the dashboard link target's dashboard group
	DashboardGroupId string `pulumi:"dashboardGroupId"`
	// SignalFx-assigned ID of the dashboard link target
	DashboardId string `pulumi:"dashboardId"`
	// Flag that designates a target as the default for a data link object. `true` by default
	IsDefault *bool `pulumi:"isDefault"`
	// User-assigned target name. Use this value to differentiate between the link targets for a data link object.
	Name string `pulumi:"name"`
}

// DataLinkTargetSignalfxDashboardInput is an input type that accepts DataLinkTargetSignalfxDashboardArgs and DataLinkTargetSignalfxDashboardOutput values.
// You can construct a concrete instance of `DataLinkTargetSignalfxDashboardInput` via:
//
//          DataLinkTargetSignalfxDashboardArgs{...}
type DataLinkTargetSignalfxDashboardInput interface {
	pulumi.Input

	ToDataLinkTargetSignalfxDashboardOutput() DataLinkTargetSignalfxDashboardOutput
	ToDataLinkTargetSignalfxDashboardOutputWithContext(context.Context) DataLinkTargetSignalfxDashboardOutput
}

type DataLinkTargetSignalfxDashboardArgs struct {
	// SignalFx-assigned ID of the dashboard link target's dashboard group
	DashboardGroupId pulumi.StringInput `pulumi:"dashboardGroupId"`
	// SignalFx-assigned ID of the dashboard link target
	DashboardId pulumi.StringInput `pulumi:"dashboardId"`
	// Flag that designates a target as the default for a data link object. `true` by default
	IsDefault pulumi.BoolPtrInput `pulumi:"isDefault"`
	// User-assigned target name. Use this value to differentiate between the link targets for a data link object.
	Name pulumi.StringInput `pulumi:"name"`
}

func (DataLinkTargetSignalfxDashboardArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DataLinkTargetSignalfxDashboard)(nil)).Elem()
}

func (i DataLinkTargetSignalfxDashboardArgs) ToDataLinkTargetSignalfxDashboardOutput() DataLinkTargetSignalfxDashboardOutput {
	return i.ToDataLinkTargetSignalfxDashboardOutputWithContext(context.Background())
}

func (i DataLinkTargetSignalfxDashboardArgs) ToDataLinkTargetSignalfxDashboardOutputWithContext(ctx context.Context) DataLinkTargetSignalfxDashboardOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataLinkTargetSignalfxDashboardOutput)
}

// DataLinkTargetSignalfxDashboardArrayInput is an input type that accepts DataLinkTargetSignalfxDashboardArray and DataLinkTargetSignalfxDashboardArrayOutput values.
// You can construct a concrete instance of `DataLinkTargetSignalfxDashboardArrayInput` via:
//
//          DataLinkTargetSignalfxDashboardArray{ DataLinkTargetSignalfxDashboardArgs{...} }
type DataLinkTargetSignalfxDashboardArrayInput interface {
	pulumi.Input

	ToDataLinkTargetSignalfxDashboardArrayOutput() DataLinkTargetSignalfxDashboardArrayOutput
	ToDataLinkTargetSignalfxDashboardArrayOutputWithContext(context.Context) DataLinkTargetSignalfxDashboardArrayOutput
}

type DataLinkTargetSignalfxDashboardArray []DataLinkTargetSignalfxDashboardInput

func (DataLinkTargetSignalfxDashboardArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DataLinkTargetSignalfxDashboard)(nil)).Elem()
}

func (i DataLinkTargetSignalfxDashboardArray) ToDataLinkTargetSignalfxDashboardArrayOutput() DataLinkTargetSignalfxDashboardArrayOutput {
	return i.ToDataLinkTargetSignalfxDashboardArrayOutputWithContext(context.Background())
}

func (i DataLinkTargetSignalfxDashboardArray) ToDataLinkTargetSignalfxDashboardArrayOutputWithContext(ctx context.Context) DataLinkTargetSignalfxDashboardArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataLinkTargetSignalfxDashboardArrayOutput)
}

type DataLinkTargetSignalfxDashboardOutput struct{ *pulumi.OutputState }

func (DataLinkTargetSignalfxDashboardOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DataLinkTargetSignalfxDashboard)(nil)).Elem()
}

func (o DataLinkTargetSignalfxDashboardOutput) ToDataLinkTargetSignalfxDashboardOutput() DataLinkTargetSignalfxDashboardOutput {
	return o
}

func (o DataLinkTargetSignalfxDashboardOutput) ToDataLinkTargetSignalfxDashboardOutputWithContext(ctx context.Context) DataLinkTargetSignalfxDashboardOutput {
	return o
}

// SignalFx-assigned ID of the dashboard link target's dashboard group
func (o DataLinkTargetSignalfxDashboardOutput) DashboardGroupId() pulumi.StringOutput {
	return o.ApplyT(func(v DataLinkTargetSignalfxDashboard) string { return v.DashboardGroupId }).(pulumi.StringOutput)
}

// SignalFx-assigned ID of the dashboard link target
func (o DataLinkTargetSignalfxDashboardOutput) DashboardId() pulumi.StringOutput {
	return o.ApplyT(func(v DataLinkTargetSignalfxDashboard) string { return v.DashboardId }).(pulumi.StringOutput)
}

// Flag that designates a target as the default for a data link object. `true` by default
func (o DataLinkTargetSignalfxDashboardOutput) IsDefault() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v DataLinkTargetSignalfxDashboard) *bool { return v.IsDefault }).(pulumi.BoolPtrOutput)
}

// User-assigned target name. Use this value to differentiate between the link targets for a data link object.
func (o DataLinkTargetSignalfxDashboardOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v DataLinkTargetSignalfxDashboard) string { return v.Name }).(pulumi.StringOutput)
}

type DataLinkTargetSignalfxDashboardArrayOutput struct{ *pulumi.OutputState }

func (DataLinkTargetSignalfxDashboardArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DataLinkTargetSignalfxDashboard)(nil)).Elem()
}

func (o DataLinkTargetSignalfxDashboardArrayOutput) ToDataLinkTargetSignalfxDashboardArrayOutput() DataLinkTargetSignalfxDashboardArrayOutput {
	return o
}

func (o DataLinkTargetSignalfxDashboardArrayOutput) ToDataLinkTargetSignalfxDashboardArrayOutputWithContext(ctx context.Context) DataLinkTargetSignalfxDashboardArrayOutput {
	return o
}

func (o DataLinkTargetSignalfxDashboardArrayOutput) Index(i pulumi.IntInput) DataLinkTargetSignalfxDashboardOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) DataLinkTargetSignalfxDashboard {
		return vs[0].([]DataLinkTargetSignalfxDashboard)[vs[1].(int)]
	}).(DataLinkTargetSignalfxDashboardOutput)
}

type DataLinkTargetSplunk struct {
	// Flag that designates a target as the default for a data link object. `true` by default
	IsDefault *bool `pulumi:"isDefault"`
	// User-assigned target name. Use this value to differentiate between the link targets for a data link object.
	Name string `pulumi:"name"`
	// Describes the relationship between SignalFx metadata keys and external system properties when the key names are different.
	PropertyKeyMapping map[string]string `pulumi:"propertyKeyMapping"`
}

// DataLinkTargetSplunkInput is an input type that accepts DataLinkTargetSplunkArgs and DataLinkTargetSplunkOutput values.
// You can construct a concrete instance of `DataLinkTargetSplunkInput` via:
//
//          DataLinkTargetSplunkArgs{...}
type DataLinkTargetSplunkInput interface {
	pulumi.Input

	ToDataLinkTargetSplunkOutput() DataLinkTargetSplunkOutput
	ToDataLinkTargetSplunkOutputWithContext(context.Context) DataLinkTargetSplunkOutput
}

type DataLinkTargetSplunkArgs struct {
	// Flag that designates a target as the default for a data link object. `true` by default
	IsDefault pulumi.BoolPtrInput `pulumi:"isDefault"`
	// User-assigned target name. Use this value to differentiate between the link targets for a data link object.
	Name pulumi.StringInput `pulumi:"name"`
	// Describes the relationship between SignalFx metadata keys and external system properties when the key names are different.
	PropertyKeyMapping pulumi.StringMapInput `pulumi:"propertyKeyMapping"`
}

func (DataLinkTargetSplunkArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DataLinkTargetSplunk)(nil)).Elem()
}

func (i DataLinkTargetSplunkArgs) ToDataLinkTargetSplunkOutput() DataLinkTargetSplunkOutput {
	return i.ToDataLinkTargetSplunkOutputWithContext(context.Background())
}

func (i DataLinkTargetSplunkArgs) ToDataLinkTargetSplunkOutputWithContext(ctx context.Context) DataLinkTargetSplunkOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataLinkTargetSplunkOutput)
}

// DataLinkTargetSplunkArrayInput is an input type that accepts DataLinkTargetSplunkArray and DataLinkTargetSplunkArrayOutput values.
// You can construct a concrete instance of `DataLinkTargetSplunkArrayInput` via:
//
//          DataLinkTargetSplunkArray{ DataLinkTargetSplunkArgs{...} }
type DataLinkTargetSplunkArrayInput interface {
	pulumi.Input

	ToDataLinkTargetSplunkArrayOutput() DataLinkTargetSplunkArrayOutput
	ToDataLinkTargetSplunkArrayOutputWithContext(context.Context) DataLinkTargetSplunkArrayOutput
}

type DataLinkTargetSplunkArray []DataLinkTargetSplunkInput

func (DataLinkTargetSplunkArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DataLinkTargetSplunk)(nil)).Elem()
}

func (i DataLinkTargetSplunkArray) ToDataLinkTargetSplunkArrayOutput() DataLinkTargetSplunkArrayOutput {
	return i.ToDataLinkTargetSplunkArrayOutputWithContext(context.Background())
}

func (i DataLinkTargetSplunkArray) ToDataLinkTargetSplunkArrayOutputWithContext(ctx context.Context) DataLinkTargetSplunkArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataLinkTargetSplunkArrayOutput)
}

type DataLinkTargetSplunkOutput struct{ *pulumi.OutputState }

func (DataLinkTargetSplunkOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DataLinkTargetSplunk)(nil)).Elem()
}

func (o DataLinkTargetSplunkOutput) ToDataLinkTargetSplunkOutput() DataLinkTargetSplunkOutput {
	return o
}

func (o DataLinkTargetSplunkOutput) ToDataLinkTargetSplunkOutputWithContext(ctx context.Context) DataLinkTargetSplunkOutput {
	return o
}

// Flag that designates a target as the default for a data link object. `true` by default
func (o DataLinkTargetSplunkOutput) IsDefault() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v DataLinkTargetSplunk) *bool { return v.IsDefault }).(pulumi.BoolPtrOutput)
}

// User-assigned target name. Use this value to differentiate between the link targets for a data link object.
func (o DataLinkTargetSplunkOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v DataLinkTargetSplunk) string { return v.Name }).(pulumi.StringOutput)
}

// Describes the relationship between SignalFx metadata keys and external system properties when the key names are different.
func (o DataLinkTargetSplunkOutput) PropertyKeyMapping() pulumi.StringMapOutput {
	return o.ApplyT(func(v DataLinkTargetSplunk) map[string]string { return v.PropertyKeyMapping }).(pulumi.StringMapOutput)
}

type DataLinkTargetSplunkArrayOutput struct{ *pulumi.OutputState }

func (DataLinkTargetSplunkArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DataLinkTargetSplunk)(nil)).Elem()
}

func (o DataLinkTargetSplunkArrayOutput) ToDataLinkTargetSplunkArrayOutput() DataLinkTargetSplunkArrayOutput {
	return o
}

func (o DataLinkTargetSplunkArrayOutput) ToDataLinkTargetSplunkArrayOutputWithContext(ctx context.Context) DataLinkTargetSplunkArrayOutput {
	return o
}

func (o DataLinkTargetSplunkArrayOutput) Index(i pulumi.IntInput) DataLinkTargetSplunkOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) DataLinkTargetSplunk {
		return vs[0].([]DataLinkTargetSplunk)[vs[1].(int)]
	}).(DataLinkTargetSplunkOutput)
}

type DetectorRule struct {
	// Description for the rule. Displays as the alert condition in the Alert Rules tab of the detector editor in the web UI.
	Description *string `pulumi:"description"`
	// A detect label which matches a detect label within `programText`.
	DetectLabel string `pulumi:"detectLabel"`
	// When true, notifications and events will not be generated for the detect label. `false` by default.
	Disabled *bool `pulumi:"disabled"`
	// List of strings specifying where notifications will be sent when an incident occurs. See [Create A Single Detector](https://developers.signalfx.com/detectors_reference.html#operation/Create%20Single%20Detector) for more info.
	Notifications []string `pulumi:"notifications"`
	// Custom notification message body when an alert is triggered. See [Set Up Detectors to Trigger Alerts](https://docs.signalfx.com/en/latest/detect-alert/set-up-detectors.html#about-detectors#alert-settings) for more info.
	ParameterizedBody *string `pulumi:"parameterizedBody"`
	// Custom notification message subject when an alert is triggered. See [Set Up Detectors to Trigger Alerts](https://docs.signalfx.com/en/latest/detect-alert/set-up-detectors.html#about-detectors#alert-settings) for more info.
	ParameterizedSubject *string `pulumi:"parameterizedSubject"`
	// URL of page to consult when an alert is triggered. This can be used with custom notification messages.
	RunbookUrl *string `pulumi:"runbookUrl"`
	// The severity of the rule, must be one of: `"Critical"`, `"Major"`, `"Minor"`, `"Warning"`, `"Info"`.
	Severity string `pulumi:"severity"`
	// Plain text suggested first course of action, such as a command line to execute. This can be used with custom notification messages.
	Tip *string `pulumi:"tip"`
}

// DetectorRuleInput is an input type that accepts DetectorRuleArgs and DetectorRuleOutput values.
// You can construct a concrete instance of `DetectorRuleInput` via:
//
//          DetectorRuleArgs{...}
type DetectorRuleInput interface {
	pulumi.Input

	ToDetectorRuleOutput() DetectorRuleOutput
	ToDetectorRuleOutputWithContext(context.Context) DetectorRuleOutput
}

type DetectorRuleArgs struct {
	// Description for the rule. Displays as the alert condition in the Alert Rules tab of the detector editor in the web UI.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// A detect label which matches a detect label within `programText`.
	DetectLabel pulumi.StringInput `pulumi:"detectLabel"`
	// When true, notifications and events will not be generated for the detect label. `false` by default.
	Disabled pulumi.BoolPtrInput `pulumi:"disabled"`
	// List of strings specifying where notifications will be sent when an incident occurs. See [Create A Single Detector](https://developers.signalfx.com/detectors_reference.html#operation/Create%20Single%20Detector) for more info.
	Notifications pulumi.StringArrayInput `pulumi:"notifications"`
	// Custom notification message body when an alert is triggered. See [Set Up Detectors to Trigger Alerts](https://docs.signalfx.com/en/latest/detect-alert/set-up-detectors.html#about-detectors#alert-settings) for more info.
	ParameterizedBody pulumi.StringPtrInput `pulumi:"parameterizedBody"`
	// Custom notification message subject when an alert is triggered. See [Set Up Detectors to Trigger Alerts](https://docs.signalfx.com/en/latest/detect-alert/set-up-detectors.html#about-detectors#alert-settings) for more info.
	ParameterizedSubject pulumi.StringPtrInput `pulumi:"parameterizedSubject"`
	// URL of page to consult when an alert is triggered. This can be used with custom notification messages.
	RunbookUrl pulumi.StringPtrInput `pulumi:"runbookUrl"`
	// The severity of the rule, must be one of: `"Critical"`, `"Major"`, `"Minor"`, `"Warning"`, `"Info"`.
	Severity pulumi.StringInput `pulumi:"severity"`
	// Plain text suggested first course of action, such as a command line to execute. This can be used with custom notification messages.
	Tip pulumi.StringPtrInput `pulumi:"tip"`
}

func (DetectorRuleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DetectorRule)(nil)).Elem()
}

func (i DetectorRuleArgs) ToDetectorRuleOutput() DetectorRuleOutput {
	return i.ToDetectorRuleOutputWithContext(context.Background())
}

func (i DetectorRuleArgs) ToDetectorRuleOutputWithContext(ctx context.Context) DetectorRuleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DetectorRuleOutput)
}

// DetectorRuleArrayInput is an input type that accepts DetectorRuleArray and DetectorRuleArrayOutput values.
// You can construct a concrete instance of `DetectorRuleArrayInput` via:
//
//          DetectorRuleArray{ DetectorRuleArgs{...} }
type DetectorRuleArrayInput interface {
	pulumi.Input

	ToDetectorRuleArrayOutput() DetectorRuleArrayOutput
	ToDetectorRuleArrayOutputWithContext(context.Context) DetectorRuleArrayOutput
}

type DetectorRuleArray []DetectorRuleInput

func (DetectorRuleArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DetectorRule)(nil)).Elem()
}

func (i DetectorRuleArray) ToDetectorRuleArrayOutput() DetectorRuleArrayOutput {
	return i.ToDetectorRuleArrayOutputWithContext(context.Background())
}

func (i DetectorRuleArray) ToDetectorRuleArrayOutputWithContext(ctx context.Context) DetectorRuleArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DetectorRuleArrayOutput)
}

type DetectorRuleOutput struct{ *pulumi.OutputState }

func (DetectorRuleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DetectorRule)(nil)).Elem()
}

func (o DetectorRuleOutput) ToDetectorRuleOutput() DetectorRuleOutput {
	return o
}

func (o DetectorRuleOutput) ToDetectorRuleOutputWithContext(ctx context.Context) DetectorRuleOutput {
	return o
}

// Description for the rule. Displays as the alert condition in the Alert Rules tab of the detector editor in the web UI.
func (o DetectorRuleOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DetectorRule) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// A detect label which matches a detect label within `programText`.
func (o DetectorRuleOutput) DetectLabel() pulumi.StringOutput {
	return o.ApplyT(func(v DetectorRule) string { return v.DetectLabel }).(pulumi.StringOutput)
}

// When true, notifications and events will not be generated for the detect label. `false` by default.
func (o DetectorRuleOutput) Disabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v DetectorRule) *bool { return v.Disabled }).(pulumi.BoolPtrOutput)
}

// List of strings specifying where notifications will be sent when an incident occurs. See [Create A Single Detector](https://developers.signalfx.com/detectors_reference.html#operation/Create%20Single%20Detector) for more info.
func (o DetectorRuleOutput) Notifications() pulumi.StringArrayOutput {
	return o.ApplyT(func(v DetectorRule) []string { return v.Notifications }).(pulumi.StringArrayOutput)
}

// Custom notification message body when an alert is triggered. See [Set Up Detectors to Trigger Alerts](https://docs.signalfx.com/en/latest/detect-alert/set-up-detectors.html#about-detectors#alert-settings) for more info.
func (o DetectorRuleOutput) ParameterizedBody() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DetectorRule) *string { return v.ParameterizedBody }).(pulumi.StringPtrOutput)
}

// Custom notification message subject when an alert is triggered. See [Set Up Detectors to Trigger Alerts](https://docs.signalfx.com/en/latest/detect-alert/set-up-detectors.html#about-detectors#alert-settings) for more info.
func (o DetectorRuleOutput) ParameterizedSubject() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DetectorRule) *string { return v.ParameterizedSubject }).(pulumi.StringPtrOutput)
}

// URL of page to consult when an alert is triggered. This can be used with custom notification messages.
func (o DetectorRuleOutput) RunbookUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DetectorRule) *string { return v.RunbookUrl }).(pulumi.StringPtrOutput)
}

// The severity of the rule, must be one of: `"Critical"`, `"Major"`, `"Minor"`, `"Warning"`, `"Info"`.
func (o DetectorRuleOutput) Severity() pulumi.StringOutput {
	return o.ApplyT(func(v DetectorRule) string { return v.Severity }).(pulumi.StringOutput)
}

// Plain text suggested first course of action, such as a command line to execute. This can be used with custom notification messages.
func (o DetectorRuleOutput) Tip() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DetectorRule) *string { return v.Tip }).(pulumi.StringPtrOutput)
}

type DetectorRuleArrayOutput struct{ *pulumi.OutputState }

func (DetectorRuleArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DetectorRule)(nil)).Elem()
}

func (o DetectorRuleArrayOutput) ToDetectorRuleArrayOutput() DetectorRuleArrayOutput {
	return o
}

func (o DetectorRuleArrayOutput) ToDetectorRuleArrayOutputWithContext(ctx context.Context) DetectorRuleArrayOutput {
	return o
}

func (o DetectorRuleArrayOutput) Index(i pulumi.IntInput) DetectorRuleOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) DetectorRule {
		return vs[0].([]DetectorRule)[vs[1].(int)]
	}).(DetectorRuleOutput)
}

type DetectorVizOption struct {
	// Color to use : gray, blue, azure, navy, brown, orange, yellow, iris, magenta, pink, purple, violet, lilac, emerald, green, aquamarine.
	Color *string `pulumi:"color"`
	// Specifies an alternate value for the Plot Name column of the Data Table associated with the chart.
	DisplayName *string `pulumi:"displayName"`
	// Label used in the publish statement that displays the plot (metric time series data) you want to customize.
	Label       string  `pulumi:"label"`
	ValuePrefix *string `pulumi:"valuePrefix"`
	ValueSuffix *string `pulumi:"valueSuffix"`
	// A unit to attach to this plot. Units support automatic scaling (eg thousands of bytes will be displayed as kilobytes). Values values are `Bit, Kilobit, Megabit, Gigabit, Terabit, Petabit, Exabit, Zettabit, Yottabit, Byte, Kibibyte, Mebibyte, Gigibyte, Tebibyte, Pebibyte, Exbibyte, Zebibyte, Yobibyte, Nanosecond, Microsecond, Millisecond, Second, Minute, Hour, Day, Week`.
	// * `valuePrefix`, `valueSuffix` - (Optional) Arbitrary prefix/suffix to display with the value of this plot.
	ValueUnit *string `pulumi:"valueUnit"`
}

// DetectorVizOptionInput is an input type that accepts DetectorVizOptionArgs and DetectorVizOptionOutput values.
// You can construct a concrete instance of `DetectorVizOptionInput` via:
//
//          DetectorVizOptionArgs{...}
type DetectorVizOptionInput interface {
	pulumi.Input

	ToDetectorVizOptionOutput() DetectorVizOptionOutput
	ToDetectorVizOptionOutputWithContext(context.Context) DetectorVizOptionOutput
}

type DetectorVizOptionArgs struct {
	// Color to use : gray, blue, azure, navy, brown, orange, yellow, iris, magenta, pink, purple, violet, lilac, emerald, green, aquamarine.
	Color pulumi.StringPtrInput `pulumi:"color"`
	// Specifies an alternate value for the Plot Name column of the Data Table associated with the chart.
	DisplayName pulumi.StringPtrInput `pulumi:"displayName"`
	// Label used in the publish statement that displays the plot (metric time series data) you want to customize.
	Label       pulumi.StringInput    `pulumi:"label"`
	ValuePrefix pulumi.StringPtrInput `pulumi:"valuePrefix"`
	ValueSuffix pulumi.StringPtrInput `pulumi:"valueSuffix"`
	// A unit to attach to this plot. Units support automatic scaling (eg thousands of bytes will be displayed as kilobytes). Values values are `Bit, Kilobit, Megabit, Gigabit, Terabit, Petabit, Exabit, Zettabit, Yottabit, Byte, Kibibyte, Mebibyte, Gigibyte, Tebibyte, Pebibyte, Exbibyte, Zebibyte, Yobibyte, Nanosecond, Microsecond, Millisecond, Second, Minute, Hour, Day, Week`.
	// * `valuePrefix`, `valueSuffix` - (Optional) Arbitrary prefix/suffix to display with the value of this plot.
	ValueUnit pulumi.StringPtrInput `pulumi:"valueUnit"`
}

func (DetectorVizOptionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DetectorVizOption)(nil)).Elem()
}

func (i DetectorVizOptionArgs) ToDetectorVizOptionOutput() DetectorVizOptionOutput {
	return i.ToDetectorVizOptionOutputWithContext(context.Background())
}

func (i DetectorVizOptionArgs) ToDetectorVizOptionOutputWithContext(ctx context.Context) DetectorVizOptionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DetectorVizOptionOutput)
}

// DetectorVizOptionArrayInput is an input type that accepts DetectorVizOptionArray and DetectorVizOptionArrayOutput values.
// You can construct a concrete instance of `DetectorVizOptionArrayInput` via:
//
//          DetectorVizOptionArray{ DetectorVizOptionArgs{...} }
type DetectorVizOptionArrayInput interface {
	pulumi.Input

	ToDetectorVizOptionArrayOutput() DetectorVizOptionArrayOutput
	ToDetectorVizOptionArrayOutputWithContext(context.Context) DetectorVizOptionArrayOutput
}

type DetectorVizOptionArray []DetectorVizOptionInput

func (DetectorVizOptionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DetectorVizOption)(nil)).Elem()
}

func (i DetectorVizOptionArray) ToDetectorVizOptionArrayOutput() DetectorVizOptionArrayOutput {
	return i.ToDetectorVizOptionArrayOutputWithContext(context.Background())
}

func (i DetectorVizOptionArray) ToDetectorVizOptionArrayOutputWithContext(ctx context.Context) DetectorVizOptionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DetectorVizOptionArrayOutput)
}

type DetectorVizOptionOutput struct{ *pulumi.OutputState }

func (DetectorVizOptionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DetectorVizOption)(nil)).Elem()
}

func (o DetectorVizOptionOutput) ToDetectorVizOptionOutput() DetectorVizOptionOutput {
	return o
}

func (o DetectorVizOptionOutput) ToDetectorVizOptionOutputWithContext(ctx context.Context) DetectorVizOptionOutput {
	return o
}

// Color to use : gray, blue, azure, navy, brown, orange, yellow, iris, magenta, pink, purple, violet, lilac, emerald, green, aquamarine.
func (o DetectorVizOptionOutput) Color() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DetectorVizOption) *string { return v.Color }).(pulumi.StringPtrOutput)
}

// Specifies an alternate value for the Plot Name column of the Data Table associated with the chart.
func (o DetectorVizOptionOutput) DisplayName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DetectorVizOption) *string { return v.DisplayName }).(pulumi.StringPtrOutput)
}

// Label used in the publish statement that displays the plot (metric time series data) you want to customize.
func (o DetectorVizOptionOutput) Label() pulumi.StringOutput {
	return o.ApplyT(func(v DetectorVizOption) string { return v.Label }).(pulumi.StringOutput)
}

func (o DetectorVizOptionOutput) ValuePrefix() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DetectorVizOption) *string { return v.ValuePrefix }).(pulumi.StringPtrOutput)
}

func (o DetectorVizOptionOutput) ValueSuffix() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DetectorVizOption) *string { return v.ValueSuffix }).(pulumi.StringPtrOutput)
}

// A unit to attach to this plot. Units support automatic scaling (eg thousands of bytes will be displayed as kilobytes). Values values are `Bit, Kilobit, Megabit, Gigabit, Terabit, Petabit, Exabit, Zettabit, Yottabit, Byte, Kibibyte, Mebibyte, Gigibyte, Tebibyte, Pebibyte, Exbibyte, Zebibyte, Yobibyte, Nanosecond, Microsecond, Millisecond, Second, Minute, Hour, Day, Week`.
// * `valuePrefix`, `valueSuffix` - (Optional) Arbitrary prefix/suffix to display with the value of this plot.
func (o DetectorVizOptionOutput) ValueUnit() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DetectorVizOption) *string { return v.ValueUnit }).(pulumi.StringPtrOutput)
}

type DetectorVizOptionArrayOutput struct{ *pulumi.OutputState }

func (DetectorVizOptionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DetectorVizOption)(nil)).Elem()
}

func (o DetectorVizOptionArrayOutput) ToDetectorVizOptionArrayOutput() DetectorVizOptionArrayOutput {
	return o
}

func (o DetectorVizOptionArrayOutput) ToDetectorVizOptionArrayOutputWithContext(ctx context.Context) DetectorVizOptionArrayOutput {
	return o
}

func (o DetectorVizOptionArrayOutput) Index(i pulumi.IntInput) DetectorVizOptionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) DetectorVizOption {
		return vs[0].([]DetectorVizOption)[vs[1].(int)]
	}).(DetectorVizOptionOutput)
}

type HeatmapChartColorRange struct {
	// The color range to use. Hex values are not supported here. Must be one of gray, blue, light_blue, navy, dark_orange, orange, dark_yellow, magenta, cerise, pink, violet, purple, gray_blue, dark_green, green, aquamarine, red, yellow, vivid_yellow, light_green, or lime_green.
	Color string `pulumi:"color"`
	// The maximum value within the coloring range.
	MaxValue *float64 `pulumi:"maxValue"`
	// The minimum value within the coloring range.
	MinValue *float64 `pulumi:"minValue"`
}

// HeatmapChartColorRangeInput is an input type that accepts HeatmapChartColorRangeArgs and HeatmapChartColorRangeOutput values.
// You can construct a concrete instance of `HeatmapChartColorRangeInput` via:
//
//          HeatmapChartColorRangeArgs{...}
type HeatmapChartColorRangeInput interface {
	pulumi.Input

	ToHeatmapChartColorRangeOutput() HeatmapChartColorRangeOutput
	ToHeatmapChartColorRangeOutputWithContext(context.Context) HeatmapChartColorRangeOutput
}

type HeatmapChartColorRangeArgs struct {
	// The color range to use. Hex values are not supported here. Must be one of gray, blue, light_blue, navy, dark_orange, orange, dark_yellow, magenta, cerise, pink, violet, purple, gray_blue, dark_green, green, aquamarine, red, yellow, vivid_yellow, light_green, or lime_green.
	Color pulumi.StringInput `pulumi:"color"`
	// The maximum value within the coloring range.
	MaxValue pulumi.Float64PtrInput `pulumi:"maxValue"`
	// The minimum value within the coloring range.
	MinValue pulumi.Float64PtrInput `pulumi:"minValue"`
}

func (HeatmapChartColorRangeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*HeatmapChartColorRange)(nil)).Elem()
}

func (i HeatmapChartColorRangeArgs) ToHeatmapChartColorRangeOutput() HeatmapChartColorRangeOutput {
	return i.ToHeatmapChartColorRangeOutputWithContext(context.Background())
}

func (i HeatmapChartColorRangeArgs) ToHeatmapChartColorRangeOutputWithContext(ctx context.Context) HeatmapChartColorRangeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HeatmapChartColorRangeOutput)
}

func (i HeatmapChartColorRangeArgs) ToHeatmapChartColorRangePtrOutput() HeatmapChartColorRangePtrOutput {
	return i.ToHeatmapChartColorRangePtrOutputWithContext(context.Background())
}

func (i HeatmapChartColorRangeArgs) ToHeatmapChartColorRangePtrOutputWithContext(ctx context.Context) HeatmapChartColorRangePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HeatmapChartColorRangeOutput).ToHeatmapChartColorRangePtrOutputWithContext(ctx)
}

// HeatmapChartColorRangePtrInput is an input type that accepts HeatmapChartColorRangeArgs, HeatmapChartColorRangePtr and HeatmapChartColorRangePtrOutput values.
// You can construct a concrete instance of `HeatmapChartColorRangePtrInput` via:
//
//          HeatmapChartColorRangeArgs{...}
//
//  or:
//
//          nil
type HeatmapChartColorRangePtrInput interface {
	pulumi.Input

	ToHeatmapChartColorRangePtrOutput() HeatmapChartColorRangePtrOutput
	ToHeatmapChartColorRangePtrOutputWithContext(context.Context) HeatmapChartColorRangePtrOutput
}

type heatmapChartColorRangePtrType HeatmapChartColorRangeArgs

func HeatmapChartColorRangePtr(v *HeatmapChartColorRangeArgs) HeatmapChartColorRangePtrInput {
	return (*heatmapChartColorRangePtrType)(v)
}

func (*heatmapChartColorRangePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**HeatmapChartColorRange)(nil)).Elem()
}

func (i *heatmapChartColorRangePtrType) ToHeatmapChartColorRangePtrOutput() HeatmapChartColorRangePtrOutput {
	return i.ToHeatmapChartColorRangePtrOutputWithContext(context.Background())
}

func (i *heatmapChartColorRangePtrType) ToHeatmapChartColorRangePtrOutputWithContext(ctx context.Context) HeatmapChartColorRangePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HeatmapChartColorRangePtrOutput)
}

type HeatmapChartColorRangeOutput struct{ *pulumi.OutputState }

func (HeatmapChartColorRangeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*HeatmapChartColorRange)(nil)).Elem()
}

func (o HeatmapChartColorRangeOutput) ToHeatmapChartColorRangeOutput() HeatmapChartColorRangeOutput {
	return o
}

func (o HeatmapChartColorRangeOutput) ToHeatmapChartColorRangeOutputWithContext(ctx context.Context) HeatmapChartColorRangeOutput {
	return o
}

func (o HeatmapChartColorRangeOutput) ToHeatmapChartColorRangePtrOutput() HeatmapChartColorRangePtrOutput {
	return o.ToHeatmapChartColorRangePtrOutputWithContext(context.Background())
}

func (o HeatmapChartColorRangeOutput) ToHeatmapChartColorRangePtrOutputWithContext(ctx context.Context) HeatmapChartColorRangePtrOutput {
	return o.ApplyT(func(v HeatmapChartColorRange) *HeatmapChartColorRange {
		return &v
	}).(HeatmapChartColorRangePtrOutput)
}

// The color range to use. Hex values are not supported here. Must be one of gray, blue, light_blue, navy, dark_orange, orange, dark_yellow, magenta, cerise, pink, violet, purple, gray_blue, dark_green, green, aquamarine, red, yellow, vivid_yellow, light_green, or lime_green.
func (o HeatmapChartColorRangeOutput) Color() pulumi.StringOutput {
	return o.ApplyT(func(v HeatmapChartColorRange) string { return v.Color }).(pulumi.StringOutput)
}

// The maximum value within the coloring range.
func (o HeatmapChartColorRangeOutput) MaxValue() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v HeatmapChartColorRange) *float64 { return v.MaxValue }).(pulumi.Float64PtrOutput)
}

// The minimum value within the coloring range.
func (o HeatmapChartColorRangeOutput) MinValue() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v HeatmapChartColorRange) *float64 { return v.MinValue }).(pulumi.Float64PtrOutput)
}

type HeatmapChartColorRangePtrOutput struct{ *pulumi.OutputState }

func (HeatmapChartColorRangePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**HeatmapChartColorRange)(nil)).Elem()
}

func (o HeatmapChartColorRangePtrOutput) ToHeatmapChartColorRangePtrOutput() HeatmapChartColorRangePtrOutput {
	return o
}

func (o HeatmapChartColorRangePtrOutput) ToHeatmapChartColorRangePtrOutputWithContext(ctx context.Context) HeatmapChartColorRangePtrOutput {
	return o
}

func (o HeatmapChartColorRangePtrOutput) Elem() HeatmapChartColorRangeOutput {
	return o.ApplyT(func(v *HeatmapChartColorRange) HeatmapChartColorRange { return *v }).(HeatmapChartColorRangeOutput)
}

// The color range to use. Hex values are not supported here. Must be one of gray, blue, light_blue, navy, dark_orange, orange, dark_yellow, magenta, cerise, pink, violet, purple, gray_blue, dark_green, green, aquamarine, red, yellow, vivid_yellow, light_green, or lime_green.
func (o HeatmapChartColorRangePtrOutput) Color() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *HeatmapChartColorRange) *string {
		if v == nil {
			return nil
		}
		return &v.Color
	}).(pulumi.StringPtrOutput)
}

// The maximum value within the coloring range.
func (o HeatmapChartColorRangePtrOutput) MaxValue() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *HeatmapChartColorRange) *float64 {
		if v == nil {
			return nil
		}
		return v.MaxValue
	}).(pulumi.Float64PtrOutput)
}

// The minimum value within the coloring range.
func (o HeatmapChartColorRangePtrOutput) MinValue() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *HeatmapChartColorRange) *float64 {
		if v == nil {
			return nil
		}
		return v.MinValue
	}).(pulumi.Float64PtrOutput)
}

type HeatmapChartColorScale struct {
	// The color range to use. Hex values are not supported here. Must be one of gray, blue, light_blue, navy, dark_orange, orange, dark_yellow, magenta, cerise, pink, violet, purple, gray_blue, dark_green, green, aquamarine, red, yellow, vivid_yellow, light_green, or lime_green.
	Color string `pulumi:"color"`
	// Indicates the lower threshold non-inclusive value for this range.
	Gt *float64 `pulumi:"gt"`
	// Indicates the lower threshold inclusive value for this range.
	Gte *float64 `pulumi:"gte"`
	// Indicates the upper threshold non-inclusive value for this range.
	Lt *float64 `pulumi:"lt"`
	// Indicates the upper threshold inclusive value for this range.
	Lte *float64 `pulumi:"lte"`
}

// HeatmapChartColorScaleInput is an input type that accepts HeatmapChartColorScaleArgs and HeatmapChartColorScaleOutput values.
// You can construct a concrete instance of `HeatmapChartColorScaleInput` via:
//
//          HeatmapChartColorScaleArgs{...}
type HeatmapChartColorScaleInput interface {
	pulumi.Input

	ToHeatmapChartColorScaleOutput() HeatmapChartColorScaleOutput
	ToHeatmapChartColorScaleOutputWithContext(context.Context) HeatmapChartColorScaleOutput
}

type HeatmapChartColorScaleArgs struct {
	// The color range to use. Hex values are not supported here. Must be one of gray, blue, light_blue, navy, dark_orange, orange, dark_yellow, magenta, cerise, pink, violet, purple, gray_blue, dark_green, green, aquamarine, red, yellow, vivid_yellow, light_green, or lime_green.
	Color pulumi.StringInput `pulumi:"color"`
	// Indicates the lower threshold non-inclusive value for this range.
	Gt pulumi.Float64PtrInput `pulumi:"gt"`
	// Indicates the lower threshold inclusive value for this range.
	Gte pulumi.Float64PtrInput `pulumi:"gte"`
	// Indicates the upper threshold non-inclusive value for this range.
	Lt pulumi.Float64PtrInput `pulumi:"lt"`
	// Indicates the upper threshold inclusive value for this range.
	Lte pulumi.Float64PtrInput `pulumi:"lte"`
}

func (HeatmapChartColorScaleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*HeatmapChartColorScale)(nil)).Elem()
}

func (i HeatmapChartColorScaleArgs) ToHeatmapChartColorScaleOutput() HeatmapChartColorScaleOutput {
	return i.ToHeatmapChartColorScaleOutputWithContext(context.Background())
}

func (i HeatmapChartColorScaleArgs) ToHeatmapChartColorScaleOutputWithContext(ctx context.Context) HeatmapChartColorScaleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HeatmapChartColorScaleOutput)
}

// HeatmapChartColorScaleArrayInput is an input type that accepts HeatmapChartColorScaleArray and HeatmapChartColorScaleArrayOutput values.
// You can construct a concrete instance of `HeatmapChartColorScaleArrayInput` via:
//
//          HeatmapChartColorScaleArray{ HeatmapChartColorScaleArgs{...} }
type HeatmapChartColorScaleArrayInput interface {
	pulumi.Input

	ToHeatmapChartColorScaleArrayOutput() HeatmapChartColorScaleArrayOutput
	ToHeatmapChartColorScaleArrayOutputWithContext(context.Context) HeatmapChartColorScaleArrayOutput
}

type HeatmapChartColorScaleArray []HeatmapChartColorScaleInput

func (HeatmapChartColorScaleArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]HeatmapChartColorScale)(nil)).Elem()
}

func (i HeatmapChartColorScaleArray) ToHeatmapChartColorScaleArrayOutput() HeatmapChartColorScaleArrayOutput {
	return i.ToHeatmapChartColorScaleArrayOutputWithContext(context.Background())
}

func (i HeatmapChartColorScaleArray) ToHeatmapChartColorScaleArrayOutputWithContext(ctx context.Context) HeatmapChartColorScaleArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HeatmapChartColorScaleArrayOutput)
}

type HeatmapChartColorScaleOutput struct{ *pulumi.OutputState }

func (HeatmapChartColorScaleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*HeatmapChartColorScale)(nil)).Elem()
}

func (o HeatmapChartColorScaleOutput) ToHeatmapChartColorScaleOutput() HeatmapChartColorScaleOutput {
	return o
}

func (o HeatmapChartColorScaleOutput) ToHeatmapChartColorScaleOutputWithContext(ctx context.Context) HeatmapChartColorScaleOutput {
	return o
}

// The color range to use. Hex values are not supported here. Must be one of gray, blue, light_blue, navy, dark_orange, orange, dark_yellow, magenta, cerise, pink, violet, purple, gray_blue, dark_green, green, aquamarine, red, yellow, vivid_yellow, light_green, or lime_green.
func (o HeatmapChartColorScaleOutput) Color() pulumi.StringOutput {
	return o.ApplyT(func(v HeatmapChartColorScale) string { return v.Color }).(pulumi.StringOutput)
}

// Indicates the lower threshold non-inclusive value for this range.
func (o HeatmapChartColorScaleOutput) Gt() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v HeatmapChartColorScale) *float64 { return v.Gt }).(pulumi.Float64PtrOutput)
}

// Indicates the lower threshold inclusive value for this range.
func (o HeatmapChartColorScaleOutput) Gte() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v HeatmapChartColorScale) *float64 { return v.Gte }).(pulumi.Float64PtrOutput)
}

// Indicates the upper threshold non-inclusive value for this range.
func (o HeatmapChartColorScaleOutput) Lt() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v HeatmapChartColorScale) *float64 { return v.Lt }).(pulumi.Float64PtrOutput)
}

// Indicates the upper threshold inclusive value for this range.
func (o HeatmapChartColorScaleOutput) Lte() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v HeatmapChartColorScale) *float64 { return v.Lte }).(pulumi.Float64PtrOutput)
}

type HeatmapChartColorScaleArrayOutput struct{ *pulumi.OutputState }

func (HeatmapChartColorScaleArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]HeatmapChartColorScale)(nil)).Elem()
}

func (o HeatmapChartColorScaleArrayOutput) ToHeatmapChartColorScaleArrayOutput() HeatmapChartColorScaleArrayOutput {
	return o
}

func (o HeatmapChartColorScaleArrayOutput) ToHeatmapChartColorScaleArrayOutputWithContext(ctx context.Context) HeatmapChartColorScaleArrayOutput {
	return o
}

func (o HeatmapChartColorScaleArrayOutput) Index(i pulumi.IntInput) HeatmapChartColorScaleOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) HeatmapChartColorScale {
		return vs[0].([]HeatmapChartColorScale)[vs[1].(int)]
	}).(HeatmapChartColorScaleOutput)
}

type ListChartColorScale struct {
	// The color to use. Must be one of gray, blue, light_blue, navy, dark_orange, orange, dark_yellow, magenta, cerise, pink, violet, purple, gray_blue, dark_green, green, aquamarine, red, yellow, vivid_yellow, light_green, or lime_green.
	Color string `pulumi:"color"`
	// Indicates the lower threshold non-inclusive value for this range.
	Gt *float64 `pulumi:"gt"`
	// Indicates the lower threshold inclusive value for this range.
	Gte *float64 `pulumi:"gte"`
	// Indicates the upper threshold non-inculsive value for this range.
	Lt *float64 `pulumi:"lt"`
	// Indicates the upper threshold inclusive value for this range.
	Lte *float64 `pulumi:"lte"`
}

// ListChartColorScaleInput is an input type that accepts ListChartColorScaleArgs and ListChartColorScaleOutput values.
// You can construct a concrete instance of `ListChartColorScaleInput` via:
//
//          ListChartColorScaleArgs{...}
type ListChartColorScaleInput interface {
	pulumi.Input

	ToListChartColorScaleOutput() ListChartColorScaleOutput
	ToListChartColorScaleOutputWithContext(context.Context) ListChartColorScaleOutput
}

type ListChartColorScaleArgs struct {
	// The color to use. Must be one of gray, blue, light_blue, navy, dark_orange, orange, dark_yellow, magenta, cerise, pink, violet, purple, gray_blue, dark_green, green, aquamarine, red, yellow, vivid_yellow, light_green, or lime_green.
	Color pulumi.StringInput `pulumi:"color"`
	// Indicates the lower threshold non-inclusive value for this range.
	Gt pulumi.Float64PtrInput `pulumi:"gt"`
	// Indicates the lower threshold inclusive value for this range.
	Gte pulumi.Float64PtrInput `pulumi:"gte"`
	// Indicates the upper threshold non-inculsive value for this range.
	Lt pulumi.Float64PtrInput `pulumi:"lt"`
	// Indicates the upper threshold inclusive value for this range.
	Lte pulumi.Float64PtrInput `pulumi:"lte"`
}

func (ListChartColorScaleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ListChartColorScale)(nil)).Elem()
}

func (i ListChartColorScaleArgs) ToListChartColorScaleOutput() ListChartColorScaleOutput {
	return i.ToListChartColorScaleOutputWithContext(context.Background())
}

func (i ListChartColorScaleArgs) ToListChartColorScaleOutputWithContext(ctx context.Context) ListChartColorScaleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ListChartColorScaleOutput)
}

// ListChartColorScaleArrayInput is an input type that accepts ListChartColorScaleArray and ListChartColorScaleArrayOutput values.
// You can construct a concrete instance of `ListChartColorScaleArrayInput` via:
//
//          ListChartColorScaleArray{ ListChartColorScaleArgs{...} }
type ListChartColorScaleArrayInput interface {
	pulumi.Input

	ToListChartColorScaleArrayOutput() ListChartColorScaleArrayOutput
	ToListChartColorScaleArrayOutputWithContext(context.Context) ListChartColorScaleArrayOutput
}

type ListChartColorScaleArray []ListChartColorScaleInput

func (ListChartColorScaleArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ListChartColorScale)(nil)).Elem()
}

func (i ListChartColorScaleArray) ToListChartColorScaleArrayOutput() ListChartColorScaleArrayOutput {
	return i.ToListChartColorScaleArrayOutputWithContext(context.Background())
}

func (i ListChartColorScaleArray) ToListChartColorScaleArrayOutputWithContext(ctx context.Context) ListChartColorScaleArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ListChartColorScaleArrayOutput)
}

type ListChartColorScaleOutput struct{ *pulumi.OutputState }

func (ListChartColorScaleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ListChartColorScale)(nil)).Elem()
}

func (o ListChartColorScaleOutput) ToListChartColorScaleOutput() ListChartColorScaleOutput {
	return o
}

func (o ListChartColorScaleOutput) ToListChartColorScaleOutputWithContext(ctx context.Context) ListChartColorScaleOutput {
	return o
}

// The color to use. Must be one of gray, blue, light_blue, navy, dark_orange, orange, dark_yellow, magenta, cerise, pink, violet, purple, gray_blue, dark_green, green, aquamarine, red, yellow, vivid_yellow, light_green, or lime_green.
func (o ListChartColorScaleOutput) Color() pulumi.StringOutput {
	return o.ApplyT(func(v ListChartColorScale) string { return v.Color }).(pulumi.StringOutput)
}

// Indicates the lower threshold non-inclusive value for this range.
func (o ListChartColorScaleOutput) Gt() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v ListChartColorScale) *float64 { return v.Gt }).(pulumi.Float64PtrOutput)
}

// Indicates the lower threshold inclusive value for this range.
func (o ListChartColorScaleOutput) Gte() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v ListChartColorScale) *float64 { return v.Gte }).(pulumi.Float64PtrOutput)
}

// Indicates the upper threshold non-inculsive value for this range.
func (o ListChartColorScaleOutput) Lt() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v ListChartColorScale) *float64 { return v.Lt }).(pulumi.Float64PtrOutput)
}

// Indicates the upper threshold inclusive value for this range.
func (o ListChartColorScaleOutput) Lte() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v ListChartColorScale) *float64 { return v.Lte }).(pulumi.Float64PtrOutput)
}

type ListChartColorScaleArrayOutput struct{ *pulumi.OutputState }

func (ListChartColorScaleArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ListChartColorScale)(nil)).Elem()
}

func (o ListChartColorScaleArrayOutput) ToListChartColorScaleArrayOutput() ListChartColorScaleArrayOutput {
	return o
}

func (o ListChartColorScaleArrayOutput) ToListChartColorScaleArrayOutputWithContext(ctx context.Context) ListChartColorScaleArrayOutput {
	return o
}

func (o ListChartColorScaleArrayOutput) Index(i pulumi.IntInput) ListChartColorScaleOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ListChartColorScale {
		return vs[0].([]ListChartColorScale)[vs[1].(int)]
	}).(ListChartColorScaleOutput)
}

type ListChartLegendOptionsField struct {
	// True or False depending on if you want the property to be shown or hidden.
	Enabled *bool `pulumi:"enabled"`
	// The name of the property to display. Note the special values of `sfMetric` (corresponding with the API's `Plot Name`) which shows the label of the time series `publish()` and `sf_originatingMetric` (corresponding with the API's `metric (sf metric)`) that shows the [name of the metric](https://developers.signalfx.com/signalflow_analytics/functions/data_function.html#table-1-parameter-definitions) for the time series being displayed.
	Property string `pulumi:"property"`
}

// ListChartLegendOptionsFieldInput is an input type that accepts ListChartLegendOptionsFieldArgs and ListChartLegendOptionsFieldOutput values.
// You can construct a concrete instance of `ListChartLegendOptionsFieldInput` via:
//
//          ListChartLegendOptionsFieldArgs{...}
type ListChartLegendOptionsFieldInput interface {
	pulumi.Input

	ToListChartLegendOptionsFieldOutput() ListChartLegendOptionsFieldOutput
	ToListChartLegendOptionsFieldOutputWithContext(context.Context) ListChartLegendOptionsFieldOutput
}

type ListChartLegendOptionsFieldArgs struct {
	// True or False depending on if you want the property to be shown or hidden.
	Enabled pulumi.BoolPtrInput `pulumi:"enabled"`
	// The name of the property to display. Note the special values of `sfMetric` (corresponding with the API's `Plot Name`) which shows the label of the time series `publish()` and `sf_originatingMetric` (corresponding with the API's `metric (sf metric)`) that shows the [name of the metric](https://developers.signalfx.com/signalflow_analytics/functions/data_function.html#table-1-parameter-definitions) for the time series being displayed.
	Property pulumi.StringInput `pulumi:"property"`
}

func (ListChartLegendOptionsFieldArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ListChartLegendOptionsField)(nil)).Elem()
}

func (i ListChartLegendOptionsFieldArgs) ToListChartLegendOptionsFieldOutput() ListChartLegendOptionsFieldOutput {
	return i.ToListChartLegendOptionsFieldOutputWithContext(context.Background())
}

func (i ListChartLegendOptionsFieldArgs) ToListChartLegendOptionsFieldOutputWithContext(ctx context.Context) ListChartLegendOptionsFieldOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ListChartLegendOptionsFieldOutput)
}

// ListChartLegendOptionsFieldArrayInput is an input type that accepts ListChartLegendOptionsFieldArray and ListChartLegendOptionsFieldArrayOutput values.
// You can construct a concrete instance of `ListChartLegendOptionsFieldArrayInput` via:
//
//          ListChartLegendOptionsFieldArray{ ListChartLegendOptionsFieldArgs{...} }
type ListChartLegendOptionsFieldArrayInput interface {
	pulumi.Input

	ToListChartLegendOptionsFieldArrayOutput() ListChartLegendOptionsFieldArrayOutput
	ToListChartLegendOptionsFieldArrayOutputWithContext(context.Context) ListChartLegendOptionsFieldArrayOutput
}

type ListChartLegendOptionsFieldArray []ListChartLegendOptionsFieldInput

func (ListChartLegendOptionsFieldArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ListChartLegendOptionsField)(nil)).Elem()
}

func (i ListChartLegendOptionsFieldArray) ToListChartLegendOptionsFieldArrayOutput() ListChartLegendOptionsFieldArrayOutput {
	return i.ToListChartLegendOptionsFieldArrayOutputWithContext(context.Background())
}

func (i ListChartLegendOptionsFieldArray) ToListChartLegendOptionsFieldArrayOutputWithContext(ctx context.Context) ListChartLegendOptionsFieldArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ListChartLegendOptionsFieldArrayOutput)
}

type ListChartLegendOptionsFieldOutput struct{ *pulumi.OutputState }

func (ListChartLegendOptionsFieldOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ListChartLegendOptionsField)(nil)).Elem()
}

func (o ListChartLegendOptionsFieldOutput) ToListChartLegendOptionsFieldOutput() ListChartLegendOptionsFieldOutput {
	return o
}

func (o ListChartLegendOptionsFieldOutput) ToListChartLegendOptionsFieldOutputWithContext(ctx context.Context) ListChartLegendOptionsFieldOutput {
	return o
}

// True or False depending on if you want the property to be shown or hidden.
func (o ListChartLegendOptionsFieldOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ListChartLegendOptionsField) *bool { return v.Enabled }).(pulumi.BoolPtrOutput)
}

// The name of the property to display. Note the special values of `sfMetric` (corresponding with the API's `Plot Name`) which shows the label of the time series `publish()` and `sf_originatingMetric` (corresponding with the API's `metric (sf metric)`) that shows the [name of the metric](https://developers.signalfx.com/signalflow_analytics/functions/data_function.html#table-1-parameter-definitions) for the time series being displayed.
func (o ListChartLegendOptionsFieldOutput) Property() pulumi.StringOutput {
	return o.ApplyT(func(v ListChartLegendOptionsField) string { return v.Property }).(pulumi.StringOutput)
}

type ListChartLegendOptionsFieldArrayOutput struct{ *pulumi.OutputState }

func (ListChartLegendOptionsFieldArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ListChartLegendOptionsField)(nil)).Elem()
}

func (o ListChartLegendOptionsFieldArrayOutput) ToListChartLegendOptionsFieldArrayOutput() ListChartLegendOptionsFieldArrayOutput {
	return o
}

func (o ListChartLegendOptionsFieldArrayOutput) ToListChartLegendOptionsFieldArrayOutputWithContext(ctx context.Context) ListChartLegendOptionsFieldArrayOutput {
	return o
}

func (o ListChartLegendOptionsFieldArrayOutput) Index(i pulumi.IntInput) ListChartLegendOptionsFieldOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ListChartLegendOptionsField {
		return vs[0].([]ListChartLegendOptionsField)[vs[1].(int)]
	}).(ListChartLegendOptionsFieldOutput)
}

type ListChartVizOption struct {
	// The color to use. Must be one of gray, blue, light_blue, navy, dark_orange, orange, dark_yellow, magenta, cerise, pink, violet, purple, gray_blue, dark_green, green, aquamarine, red, yellow, vivid_yellow, light_green, or lime_green.
	Color *string `pulumi:"color"`
	// Specifies an alternate value for the Plot Name column of the Data Table associated with the chart.
	DisplayName *string `pulumi:"displayName"`
	// Label used in the publish statement that displays the plot (metric time series data) you want to customize.
	Label       string  `pulumi:"label"`
	ValuePrefix *string `pulumi:"valuePrefix"`
	ValueSuffix *string `pulumi:"valueSuffix"`
	// A unit to attach to this plot. Units support automatic scaling (eg thousands of bytes will be displayed as kilobytes). Values values are `Bit, Kilobit, Megabit, Gigabit, Terabit, Petabit, Exabit, Zettabit, Yottabit, Byte, Kibibyte, Mebibyte, Gigibyte, Tebibyte, Pebibyte, Exbibyte, Zebibyte, Yobibyte, Nanosecond, Microsecond, Millisecond, Second, Minute, Hour, Day, Week`.
	// * `valuePrefix`, `valueSuffix` - (Optional) Arbitrary prefix/suffix to display with the value of this plot.
	ValueUnit *string `pulumi:"valueUnit"`
}

// ListChartVizOptionInput is an input type that accepts ListChartVizOptionArgs and ListChartVizOptionOutput values.
// You can construct a concrete instance of `ListChartVizOptionInput` via:
//
//          ListChartVizOptionArgs{...}
type ListChartVizOptionInput interface {
	pulumi.Input

	ToListChartVizOptionOutput() ListChartVizOptionOutput
	ToListChartVizOptionOutputWithContext(context.Context) ListChartVizOptionOutput
}

type ListChartVizOptionArgs struct {
	// The color to use. Must be one of gray, blue, light_blue, navy, dark_orange, orange, dark_yellow, magenta, cerise, pink, violet, purple, gray_blue, dark_green, green, aquamarine, red, yellow, vivid_yellow, light_green, or lime_green.
	Color pulumi.StringPtrInput `pulumi:"color"`
	// Specifies an alternate value for the Plot Name column of the Data Table associated with the chart.
	DisplayName pulumi.StringPtrInput `pulumi:"displayName"`
	// Label used in the publish statement that displays the plot (metric time series data) you want to customize.
	Label       pulumi.StringInput    `pulumi:"label"`
	ValuePrefix pulumi.StringPtrInput `pulumi:"valuePrefix"`
	ValueSuffix pulumi.StringPtrInput `pulumi:"valueSuffix"`
	// A unit to attach to this plot. Units support automatic scaling (eg thousands of bytes will be displayed as kilobytes). Values values are `Bit, Kilobit, Megabit, Gigabit, Terabit, Petabit, Exabit, Zettabit, Yottabit, Byte, Kibibyte, Mebibyte, Gigibyte, Tebibyte, Pebibyte, Exbibyte, Zebibyte, Yobibyte, Nanosecond, Microsecond, Millisecond, Second, Minute, Hour, Day, Week`.
	// * `valuePrefix`, `valueSuffix` - (Optional) Arbitrary prefix/suffix to display with the value of this plot.
	ValueUnit pulumi.StringPtrInput `pulumi:"valueUnit"`
}

func (ListChartVizOptionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ListChartVizOption)(nil)).Elem()
}

func (i ListChartVizOptionArgs) ToListChartVizOptionOutput() ListChartVizOptionOutput {
	return i.ToListChartVizOptionOutputWithContext(context.Background())
}

func (i ListChartVizOptionArgs) ToListChartVizOptionOutputWithContext(ctx context.Context) ListChartVizOptionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ListChartVizOptionOutput)
}

// ListChartVizOptionArrayInput is an input type that accepts ListChartVizOptionArray and ListChartVizOptionArrayOutput values.
// You can construct a concrete instance of `ListChartVizOptionArrayInput` via:
//
//          ListChartVizOptionArray{ ListChartVizOptionArgs{...} }
type ListChartVizOptionArrayInput interface {
	pulumi.Input

	ToListChartVizOptionArrayOutput() ListChartVizOptionArrayOutput
	ToListChartVizOptionArrayOutputWithContext(context.Context) ListChartVizOptionArrayOutput
}

type ListChartVizOptionArray []ListChartVizOptionInput

func (ListChartVizOptionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ListChartVizOption)(nil)).Elem()
}

func (i ListChartVizOptionArray) ToListChartVizOptionArrayOutput() ListChartVizOptionArrayOutput {
	return i.ToListChartVizOptionArrayOutputWithContext(context.Background())
}

func (i ListChartVizOptionArray) ToListChartVizOptionArrayOutputWithContext(ctx context.Context) ListChartVizOptionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ListChartVizOptionArrayOutput)
}

type ListChartVizOptionOutput struct{ *pulumi.OutputState }

func (ListChartVizOptionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ListChartVizOption)(nil)).Elem()
}

func (o ListChartVizOptionOutput) ToListChartVizOptionOutput() ListChartVizOptionOutput {
	return o
}

func (o ListChartVizOptionOutput) ToListChartVizOptionOutputWithContext(ctx context.Context) ListChartVizOptionOutput {
	return o
}

// The color to use. Must be one of gray, blue, light_blue, navy, dark_orange, orange, dark_yellow, magenta, cerise, pink, violet, purple, gray_blue, dark_green, green, aquamarine, red, yellow, vivid_yellow, light_green, or lime_green.
func (o ListChartVizOptionOutput) Color() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ListChartVizOption) *string { return v.Color }).(pulumi.StringPtrOutput)
}

// Specifies an alternate value for the Plot Name column of the Data Table associated with the chart.
func (o ListChartVizOptionOutput) DisplayName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ListChartVizOption) *string { return v.DisplayName }).(pulumi.StringPtrOutput)
}

// Label used in the publish statement that displays the plot (metric time series data) you want to customize.
func (o ListChartVizOptionOutput) Label() pulumi.StringOutput {
	return o.ApplyT(func(v ListChartVizOption) string { return v.Label }).(pulumi.StringOutput)
}

func (o ListChartVizOptionOutput) ValuePrefix() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ListChartVizOption) *string { return v.ValuePrefix }).(pulumi.StringPtrOutput)
}

func (o ListChartVizOptionOutput) ValueSuffix() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ListChartVizOption) *string { return v.ValueSuffix }).(pulumi.StringPtrOutput)
}

// A unit to attach to this plot. Units support automatic scaling (eg thousands of bytes will be displayed as kilobytes). Values values are `Bit, Kilobit, Megabit, Gigabit, Terabit, Petabit, Exabit, Zettabit, Yottabit, Byte, Kibibyte, Mebibyte, Gigibyte, Tebibyte, Pebibyte, Exbibyte, Zebibyte, Yobibyte, Nanosecond, Microsecond, Millisecond, Second, Minute, Hour, Day, Week`.
// * `valuePrefix`, `valueSuffix` - (Optional) Arbitrary prefix/suffix to display with the value of this plot.
func (o ListChartVizOptionOutput) ValueUnit() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ListChartVizOption) *string { return v.ValueUnit }).(pulumi.StringPtrOutput)
}

type ListChartVizOptionArrayOutput struct{ *pulumi.OutputState }

func (ListChartVizOptionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ListChartVizOption)(nil)).Elem()
}

func (o ListChartVizOptionArrayOutput) ToListChartVizOptionArrayOutput() ListChartVizOptionArrayOutput {
	return o
}

func (o ListChartVizOptionArrayOutput) ToListChartVizOptionArrayOutputWithContext(ctx context.Context) ListChartVizOptionArrayOutput {
	return o
}

func (o ListChartVizOptionArrayOutput) Index(i pulumi.IntInput) ListChartVizOptionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ListChartVizOption {
		return vs[0].([]ListChartVizOption)[vs[1].(int)]
	}).(ListChartVizOptionOutput)
}

type OrgTokenDpmLimits struct {
	// The datapoints per minute (dpm) limit for this token. If you exceed this limit, SignalFx sends out an alert.
	DpmLimit int `pulumi:"dpmLimit"`
	// DPM level at which SignalFx sends the notification for this token. If you don't specify a notification, SignalFx sends the generic notification.
	DpmNotificationThreshold *int `pulumi:"dpmNotificationThreshold"`
}

// OrgTokenDpmLimitsInput is an input type that accepts OrgTokenDpmLimitsArgs and OrgTokenDpmLimitsOutput values.
// You can construct a concrete instance of `OrgTokenDpmLimitsInput` via:
//
//          OrgTokenDpmLimitsArgs{...}
type OrgTokenDpmLimitsInput interface {
	pulumi.Input

	ToOrgTokenDpmLimitsOutput() OrgTokenDpmLimitsOutput
	ToOrgTokenDpmLimitsOutputWithContext(context.Context) OrgTokenDpmLimitsOutput
}

type OrgTokenDpmLimitsArgs struct {
	// The datapoints per minute (dpm) limit for this token. If you exceed this limit, SignalFx sends out an alert.
	DpmLimit pulumi.IntInput `pulumi:"dpmLimit"`
	// DPM level at which SignalFx sends the notification for this token. If you don't specify a notification, SignalFx sends the generic notification.
	DpmNotificationThreshold pulumi.IntPtrInput `pulumi:"dpmNotificationThreshold"`
}

func (OrgTokenDpmLimitsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*OrgTokenDpmLimits)(nil)).Elem()
}

func (i OrgTokenDpmLimitsArgs) ToOrgTokenDpmLimitsOutput() OrgTokenDpmLimitsOutput {
	return i.ToOrgTokenDpmLimitsOutputWithContext(context.Background())
}

func (i OrgTokenDpmLimitsArgs) ToOrgTokenDpmLimitsOutputWithContext(ctx context.Context) OrgTokenDpmLimitsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OrgTokenDpmLimitsOutput)
}

func (i OrgTokenDpmLimitsArgs) ToOrgTokenDpmLimitsPtrOutput() OrgTokenDpmLimitsPtrOutput {
	return i.ToOrgTokenDpmLimitsPtrOutputWithContext(context.Background())
}

func (i OrgTokenDpmLimitsArgs) ToOrgTokenDpmLimitsPtrOutputWithContext(ctx context.Context) OrgTokenDpmLimitsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OrgTokenDpmLimitsOutput).ToOrgTokenDpmLimitsPtrOutputWithContext(ctx)
}

// OrgTokenDpmLimitsPtrInput is an input type that accepts OrgTokenDpmLimitsArgs, OrgTokenDpmLimitsPtr and OrgTokenDpmLimitsPtrOutput values.
// You can construct a concrete instance of `OrgTokenDpmLimitsPtrInput` via:
//
//          OrgTokenDpmLimitsArgs{...}
//
//  or:
//
//          nil
type OrgTokenDpmLimitsPtrInput interface {
	pulumi.Input

	ToOrgTokenDpmLimitsPtrOutput() OrgTokenDpmLimitsPtrOutput
	ToOrgTokenDpmLimitsPtrOutputWithContext(context.Context) OrgTokenDpmLimitsPtrOutput
}

type orgTokenDpmLimitsPtrType OrgTokenDpmLimitsArgs

func OrgTokenDpmLimitsPtr(v *OrgTokenDpmLimitsArgs) OrgTokenDpmLimitsPtrInput {
	return (*orgTokenDpmLimitsPtrType)(v)
}

func (*orgTokenDpmLimitsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**OrgTokenDpmLimits)(nil)).Elem()
}

func (i *orgTokenDpmLimitsPtrType) ToOrgTokenDpmLimitsPtrOutput() OrgTokenDpmLimitsPtrOutput {
	return i.ToOrgTokenDpmLimitsPtrOutputWithContext(context.Background())
}

func (i *orgTokenDpmLimitsPtrType) ToOrgTokenDpmLimitsPtrOutputWithContext(ctx context.Context) OrgTokenDpmLimitsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OrgTokenDpmLimitsPtrOutput)
}

type OrgTokenDpmLimitsOutput struct{ *pulumi.OutputState }

func (OrgTokenDpmLimitsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*OrgTokenDpmLimits)(nil)).Elem()
}

func (o OrgTokenDpmLimitsOutput) ToOrgTokenDpmLimitsOutput() OrgTokenDpmLimitsOutput {
	return o
}

func (o OrgTokenDpmLimitsOutput) ToOrgTokenDpmLimitsOutputWithContext(ctx context.Context) OrgTokenDpmLimitsOutput {
	return o
}

func (o OrgTokenDpmLimitsOutput) ToOrgTokenDpmLimitsPtrOutput() OrgTokenDpmLimitsPtrOutput {
	return o.ToOrgTokenDpmLimitsPtrOutputWithContext(context.Background())
}

func (o OrgTokenDpmLimitsOutput) ToOrgTokenDpmLimitsPtrOutputWithContext(ctx context.Context) OrgTokenDpmLimitsPtrOutput {
	return o.ApplyT(func(v OrgTokenDpmLimits) *OrgTokenDpmLimits {
		return &v
	}).(OrgTokenDpmLimitsPtrOutput)
}

// The datapoints per minute (dpm) limit for this token. If you exceed this limit, SignalFx sends out an alert.
func (o OrgTokenDpmLimitsOutput) DpmLimit() pulumi.IntOutput {
	return o.ApplyT(func(v OrgTokenDpmLimits) int { return v.DpmLimit }).(pulumi.IntOutput)
}

// DPM level at which SignalFx sends the notification for this token. If you don't specify a notification, SignalFx sends the generic notification.
func (o OrgTokenDpmLimitsOutput) DpmNotificationThreshold() pulumi.IntPtrOutput {
	return o.ApplyT(func(v OrgTokenDpmLimits) *int { return v.DpmNotificationThreshold }).(pulumi.IntPtrOutput)
}

type OrgTokenDpmLimitsPtrOutput struct{ *pulumi.OutputState }

func (OrgTokenDpmLimitsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**OrgTokenDpmLimits)(nil)).Elem()
}

func (o OrgTokenDpmLimitsPtrOutput) ToOrgTokenDpmLimitsPtrOutput() OrgTokenDpmLimitsPtrOutput {
	return o
}

func (o OrgTokenDpmLimitsPtrOutput) ToOrgTokenDpmLimitsPtrOutputWithContext(ctx context.Context) OrgTokenDpmLimitsPtrOutput {
	return o
}

func (o OrgTokenDpmLimitsPtrOutput) Elem() OrgTokenDpmLimitsOutput {
	return o.ApplyT(func(v *OrgTokenDpmLimits) OrgTokenDpmLimits { return *v }).(OrgTokenDpmLimitsOutput)
}

// The datapoints per minute (dpm) limit for this token. If you exceed this limit, SignalFx sends out an alert.
func (o OrgTokenDpmLimitsPtrOutput) DpmLimit() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *OrgTokenDpmLimits) *int {
		if v == nil {
			return nil
		}
		return &v.DpmLimit
	}).(pulumi.IntPtrOutput)
}

// DPM level at which SignalFx sends the notification for this token. If you don't specify a notification, SignalFx sends the generic notification.
func (o OrgTokenDpmLimitsPtrOutput) DpmNotificationThreshold() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *OrgTokenDpmLimits) *int {
		if v == nil {
			return nil
		}
		return v.DpmNotificationThreshold
	}).(pulumi.IntPtrOutput)
}

type OrgTokenHostOrUsageLimits struct {
	// Max number of Docker containers that can use this token
	ContainerLimit *int `pulumi:"containerLimit"`
	// Notification threshold for Docker containers
	ContainerNotificationThreshold *int `pulumi:"containerNotificationThreshold"`
	// Max number of custom metrics that can be sent with this token
	CustomMetricsLimit *int `pulumi:"customMetricsLimit"`
	// Notification threshold for custom metrics
	CustomMetricsNotificationThreshold *int `pulumi:"customMetricsNotificationThreshold"`
	// Max number of hi-res metrics that can be sent with this toke
	HighResMetricsLimit *int `pulumi:"highResMetricsLimit"`
	// Notification threshold for hi-res metrics
	HighResMetricsNotificationThreshold *int `pulumi:"highResMetricsNotificationThreshold"`
	// Max number of hosts that can use this token
	HostLimit *int `pulumi:"hostLimit"`
	// Notification threshold for hosts
	HostNotificationThreshold *int `pulumi:"hostNotificationThreshold"`
}

// OrgTokenHostOrUsageLimitsInput is an input type that accepts OrgTokenHostOrUsageLimitsArgs and OrgTokenHostOrUsageLimitsOutput values.
// You can construct a concrete instance of `OrgTokenHostOrUsageLimitsInput` via:
//
//          OrgTokenHostOrUsageLimitsArgs{...}
type OrgTokenHostOrUsageLimitsInput interface {
	pulumi.Input

	ToOrgTokenHostOrUsageLimitsOutput() OrgTokenHostOrUsageLimitsOutput
	ToOrgTokenHostOrUsageLimitsOutputWithContext(context.Context) OrgTokenHostOrUsageLimitsOutput
}

type OrgTokenHostOrUsageLimitsArgs struct {
	// Max number of Docker containers that can use this token
	ContainerLimit pulumi.IntPtrInput `pulumi:"containerLimit"`
	// Notification threshold for Docker containers
	ContainerNotificationThreshold pulumi.IntPtrInput `pulumi:"containerNotificationThreshold"`
	// Max number of custom metrics that can be sent with this token
	CustomMetricsLimit pulumi.IntPtrInput `pulumi:"customMetricsLimit"`
	// Notification threshold for custom metrics
	CustomMetricsNotificationThreshold pulumi.IntPtrInput `pulumi:"customMetricsNotificationThreshold"`
	// Max number of hi-res metrics that can be sent with this toke
	HighResMetricsLimit pulumi.IntPtrInput `pulumi:"highResMetricsLimit"`
	// Notification threshold for hi-res metrics
	HighResMetricsNotificationThreshold pulumi.IntPtrInput `pulumi:"highResMetricsNotificationThreshold"`
	// Max number of hosts that can use this token
	HostLimit pulumi.IntPtrInput `pulumi:"hostLimit"`
	// Notification threshold for hosts
	HostNotificationThreshold pulumi.IntPtrInput `pulumi:"hostNotificationThreshold"`
}

func (OrgTokenHostOrUsageLimitsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*OrgTokenHostOrUsageLimits)(nil)).Elem()
}

func (i OrgTokenHostOrUsageLimitsArgs) ToOrgTokenHostOrUsageLimitsOutput() OrgTokenHostOrUsageLimitsOutput {
	return i.ToOrgTokenHostOrUsageLimitsOutputWithContext(context.Background())
}

func (i OrgTokenHostOrUsageLimitsArgs) ToOrgTokenHostOrUsageLimitsOutputWithContext(ctx context.Context) OrgTokenHostOrUsageLimitsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OrgTokenHostOrUsageLimitsOutput)
}

func (i OrgTokenHostOrUsageLimitsArgs) ToOrgTokenHostOrUsageLimitsPtrOutput() OrgTokenHostOrUsageLimitsPtrOutput {
	return i.ToOrgTokenHostOrUsageLimitsPtrOutputWithContext(context.Background())
}

func (i OrgTokenHostOrUsageLimitsArgs) ToOrgTokenHostOrUsageLimitsPtrOutputWithContext(ctx context.Context) OrgTokenHostOrUsageLimitsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OrgTokenHostOrUsageLimitsOutput).ToOrgTokenHostOrUsageLimitsPtrOutputWithContext(ctx)
}

// OrgTokenHostOrUsageLimitsPtrInput is an input type that accepts OrgTokenHostOrUsageLimitsArgs, OrgTokenHostOrUsageLimitsPtr and OrgTokenHostOrUsageLimitsPtrOutput values.
// You can construct a concrete instance of `OrgTokenHostOrUsageLimitsPtrInput` via:
//
//          OrgTokenHostOrUsageLimitsArgs{...}
//
//  or:
//
//          nil
type OrgTokenHostOrUsageLimitsPtrInput interface {
	pulumi.Input

	ToOrgTokenHostOrUsageLimitsPtrOutput() OrgTokenHostOrUsageLimitsPtrOutput
	ToOrgTokenHostOrUsageLimitsPtrOutputWithContext(context.Context) OrgTokenHostOrUsageLimitsPtrOutput
}

type orgTokenHostOrUsageLimitsPtrType OrgTokenHostOrUsageLimitsArgs

func OrgTokenHostOrUsageLimitsPtr(v *OrgTokenHostOrUsageLimitsArgs) OrgTokenHostOrUsageLimitsPtrInput {
	return (*orgTokenHostOrUsageLimitsPtrType)(v)
}

func (*orgTokenHostOrUsageLimitsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**OrgTokenHostOrUsageLimits)(nil)).Elem()
}

func (i *orgTokenHostOrUsageLimitsPtrType) ToOrgTokenHostOrUsageLimitsPtrOutput() OrgTokenHostOrUsageLimitsPtrOutput {
	return i.ToOrgTokenHostOrUsageLimitsPtrOutputWithContext(context.Background())
}

func (i *orgTokenHostOrUsageLimitsPtrType) ToOrgTokenHostOrUsageLimitsPtrOutputWithContext(ctx context.Context) OrgTokenHostOrUsageLimitsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OrgTokenHostOrUsageLimitsPtrOutput)
}

type OrgTokenHostOrUsageLimitsOutput struct{ *pulumi.OutputState }

func (OrgTokenHostOrUsageLimitsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*OrgTokenHostOrUsageLimits)(nil)).Elem()
}

func (o OrgTokenHostOrUsageLimitsOutput) ToOrgTokenHostOrUsageLimitsOutput() OrgTokenHostOrUsageLimitsOutput {
	return o
}

func (o OrgTokenHostOrUsageLimitsOutput) ToOrgTokenHostOrUsageLimitsOutputWithContext(ctx context.Context) OrgTokenHostOrUsageLimitsOutput {
	return o
}

func (o OrgTokenHostOrUsageLimitsOutput) ToOrgTokenHostOrUsageLimitsPtrOutput() OrgTokenHostOrUsageLimitsPtrOutput {
	return o.ToOrgTokenHostOrUsageLimitsPtrOutputWithContext(context.Background())
}

func (o OrgTokenHostOrUsageLimitsOutput) ToOrgTokenHostOrUsageLimitsPtrOutputWithContext(ctx context.Context) OrgTokenHostOrUsageLimitsPtrOutput {
	return o.ApplyT(func(v OrgTokenHostOrUsageLimits) *OrgTokenHostOrUsageLimits {
		return &v
	}).(OrgTokenHostOrUsageLimitsPtrOutput)
}

// Max number of Docker containers that can use this token
func (o OrgTokenHostOrUsageLimitsOutput) ContainerLimit() pulumi.IntPtrOutput {
	return o.ApplyT(func(v OrgTokenHostOrUsageLimits) *int { return v.ContainerLimit }).(pulumi.IntPtrOutput)
}

// Notification threshold for Docker containers
func (o OrgTokenHostOrUsageLimitsOutput) ContainerNotificationThreshold() pulumi.IntPtrOutput {
	return o.ApplyT(func(v OrgTokenHostOrUsageLimits) *int { return v.ContainerNotificationThreshold }).(pulumi.IntPtrOutput)
}

// Max number of custom metrics that can be sent with this token
func (o OrgTokenHostOrUsageLimitsOutput) CustomMetricsLimit() pulumi.IntPtrOutput {
	return o.ApplyT(func(v OrgTokenHostOrUsageLimits) *int { return v.CustomMetricsLimit }).(pulumi.IntPtrOutput)
}

// Notification threshold for custom metrics
func (o OrgTokenHostOrUsageLimitsOutput) CustomMetricsNotificationThreshold() pulumi.IntPtrOutput {
	return o.ApplyT(func(v OrgTokenHostOrUsageLimits) *int { return v.CustomMetricsNotificationThreshold }).(pulumi.IntPtrOutput)
}

// Max number of hi-res metrics that can be sent with this toke
func (o OrgTokenHostOrUsageLimitsOutput) HighResMetricsLimit() pulumi.IntPtrOutput {
	return o.ApplyT(func(v OrgTokenHostOrUsageLimits) *int { return v.HighResMetricsLimit }).(pulumi.IntPtrOutput)
}

// Notification threshold for hi-res metrics
func (o OrgTokenHostOrUsageLimitsOutput) HighResMetricsNotificationThreshold() pulumi.IntPtrOutput {
	return o.ApplyT(func(v OrgTokenHostOrUsageLimits) *int { return v.HighResMetricsNotificationThreshold }).(pulumi.IntPtrOutput)
}

// Max number of hosts that can use this token
func (o OrgTokenHostOrUsageLimitsOutput) HostLimit() pulumi.IntPtrOutput {
	return o.ApplyT(func(v OrgTokenHostOrUsageLimits) *int { return v.HostLimit }).(pulumi.IntPtrOutput)
}

// Notification threshold for hosts
func (o OrgTokenHostOrUsageLimitsOutput) HostNotificationThreshold() pulumi.IntPtrOutput {
	return o.ApplyT(func(v OrgTokenHostOrUsageLimits) *int { return v.HostNotificationThreshold }).(pulumi.IntPtrOutput)
}

type OrgTokenHostOrUsageLimitsPtrOutput struct{ *pulumi.OutputState }

func (OrgTokenHostOrUsageLimitsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**OrgTokenHostOrUsageLimits)(nil)).Elem()
}

func (o OrgTokenHostOrUsageLimitsPtrOutput) ToOrgTokenHostOrUsageLimitsPtrOutput() OrgTokenHostOrUsageLimitsPtrOutput {
	return o
}

func (o OrgTokenHostOrUsageLimitsPtrOutput) ToOrgTokenHostOrUsageLimitsPtrOutputWithContext(ctx context.Context) OrgTokenHostOrUsageLimitsPtrOutput {
	return o
}

func (o OrgTokenHostOrUsageLimitsPtrOutput) Elem() OrgTokenHostOrUsageLimitsOutput {
	return o.ApplyT(func(v *OrgTokenHostOrUsageLimits) OrgTokenHostOrUsageLimits { return *v }).(OrgTokenHostOrUsageLimitsOutput)
}

// Max number of Docker containers that can use this token
func (o OrgTokenHostOrUsageLimitsPtrOutput) ContainerLimit() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *OrgTokenHostOrUsageLimits) *int {
		if v == nil {
			return nil
		}
		return v.ContainerLimit
	}).(pulumi.IntPtrOutput)
}

// Notification threshold for Docker containers
func (o OrgTokenHostOrUsageLimitsPtrOutput) ContainerNotificationThreshold() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *OrgTokenHostOrUsageLimits) *int {
		if v == nil {
			return nil
		}
		return v.ContainerNotificationThreshold
	}).(pulumi.IntPtrOutput)
}

// Max number of custom metrics that can be sent with this token
func (o OrgTokenHostOrUsageLimitsPtrOutput) CustomMetricsLimit() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *OrgTokenHostOrUsageLimits) *int {
		if v == nil {
			return nil
		}
		return v.CustomMetricsLimit
	}).(pulumi.IntPtrOutput)
}

// Notification threshold for custom metrics
func (o OrgTokenHostOrUsageLimitsPtrOutput) CustomMetricsNotificationThreshold() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *OrgTokenHostOrUsageLimits) *int {
		if v == nil {
			return nil
		}
		return v.CustomMetricsNotificationThreshold
	}).(pulumi.IntPtrOutput)
}

// Max number of hi-res metrics that can be sent with this toke
func (o OrgTokenHostOrUsageLimitsPtrOutput) HighResMetricsLimit() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *OrgTokenHostOrUsageLimits) *int {
		if v == nil {
			return nil
		}
		return v.HighResMetricsLimit
	}).(pulumi.IntPtrOutput)
}

// Notification threshold for hi-res metrics
func (o OrgTokenHostOrUsageLimitsPtrOutput) HighResMetricsNotificationThreshold() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *OrgTokenHostOrUsageLimits) *int {
		if v == nil {
			return nil
		}
		return v.HighResMetricsNotificationThreshold
	}).(pulumi.IntPtrOutput)
}

// Max number of hosts that can use this token
func (o OrgTokenHostOrUsageLimitsPtrOutput) HostLimit() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *OrgTokenHostOrUsageLimits) *int {
		if v == nil {
			return nil
		}
		return v.HostLimit
	}).(pulumi.IntPtrOutput)
}

// Notification threshold for hosts
func (o OrgTokenHostOrUsageLimitsPtrOutput) HostNotificationThreshold() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *OrgTokenHostOrUsageLimits) *int {
		if v == nil {
			return nil
		}
		return v.HostNotificationThreshold
	}).(pulumi.IntPtrOutput)
}

type SingleValueChartColorScale struct {
	// The color to use. Must be one of gray, blue, light_blue, navy, dark_orange, orange, dark_yellow, magenta, cerise, pink, violet, purple, gray_blue, dark_green, green, aquamarine, red, yellow, vivid_yellow, light_green, or lime_green.
	Color string `pulumi:"color"`
	// Indicates the lower threshold non-inclusive value for this range.
	Gt *float64 `pulumi:"gt"`
	// Indicates the lower threshold inclusive value for this range.
	Gte *float64 `pulumi:"gte"`
	// Indicates the upper threshold non-inculsive value for this range.
	Lt *float64 `pulumi:"lt"`
	// Indicates the upper threshold inclusive value for this range.
	Lte *float64 `pulumi:"lte"`
}

// SingleValueChartColorScaleInput is an input type that accepts SingleValueChartColorScaleArgs and SingleValueChartColorScaleOutput values.
// You can construct a concrete instance of `SingleValueChartColorScaleInput` via:
//
//          SingleValueChartColorScaleArgs{...}
type SingleValueChartColorScaleInput interface {
	pulumi.Input

	ToSingleValueChartColorScaleOutput() SingleValueChartColorScaleOutput
	ToSingleValueChartColorScaleOutputWithContext(context.Context) SingleValueChartColorScaleOutput
}

type SingleValueChartColorScaleArgs struct {
	// The color to use. Must be one of gray, blue, light_blue, navy, dark_orange, orange, dark_yellow, magenta, cerise, pink, violet, purple, gray_blue, dark_green, green, aquamarine, red, yellow, vivid_yellow, light_green, or lime_green.
	Color pulumi.StringInput `pulumi:"color"`
	// Indicates the lower threshold non-inclusive value for this range.
	Gt pulumi.Float64PtrInput `pulumi:"gt"`
	// Indicates the lower threshold inclusive value for this range.
	Gte pulumi.Float64PtrInput `pulumi:"gte"`
	// Indicates the upper threshold non-inculsive value for this range.
	Lt pulumi.Float64PtrInput `pulumi:"lt"`
	// Indicates the upper threshold inclusive value for this range.
	Lte pulumi.Float64PtrInput `pulumi:"lte"`
}

func (SingleValueChartColorScaleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SingleValueChartColorScale)(nil)).Elem()
}

func (i SingleValueChartColorScaleArgs) ToSingleValueChartColorScaleOutput() SingleValueChartColorScaleOutput {
	return i.ToSingleValueChartColorScaleOutputWithContext(context.Background())
}

func (i SingleValueChartColorScaleArgs) ToSingleValueChartColorScaleOutputWithContext(ctx context.Context) SingleValueChartColorScaleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SingleValueChartColorScaleOutput)
}

// SingleValueChartColorScaleArrayInput is an input type that accepts SingleValueChartColorScaleArray and SingleValueChartColorScaleArrayOutput values.
// You can construct a concrete instance of `SingleValueChartColorScaleArrayInput` via:
//
//          SingleValueChartColorScaleArray{ SingleValueChartColorScaleArgs{...} }
type SingleValueChartColorScaleArrayInput interface {
	pulumi.Input

	ToSingleValueChartColorScaleArrayOutput() SingleValueChartColorScaleArrayOutput
	ToSingleValueChartColorScaleArrayOutputWithContext(context.Context) SingleValueChartColorScaleArrayOutput
}

type SingleValueChartColorScaleArray []SingleValueChartColorScaleInput

func (SingleValueChartColorScaleArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SingleValueChartColorScale)(nil)).Elem()
}

func (i SingleValueChartColorScaleArray) ToSingleValueChartColorScaleArrayOutput() SingleValueChartColorScaleArrayOutput {
	return i.ToSingleValueChartColorScaleArrayOutputWithContext(context.Background())
}

func (i SingleValueChartColorScaleArray) ToSingleValueChartColorScaleArrayOutputWithContext(ctx context.Context) SingleValueChartColorScaleArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SingleValueChartColorScaleArrayOutput)
}

type SingleValueChartColorScaleOutput struct{ *pulumi.OutputState }

func (SingleValueChartColorScaleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SingleValueChartColorScale)(nil)).Elem()
}

func (o SingleValueChartColorScaleOutput) ToSingleValueChartColorScaleOutput() SingleValueChartColorScaleOutput {
	return o
}

func (o SingleValueChartColorScaleOutput) ToSingleValueChartColorScaleOutputWithContext(ctx context.Context) SingleValueChartColorScaleOutput {
	return o
}

// The color to use. Must be one of gray, blue, light_blue, navy, dark_orange, orange, dark_yellow, magenta, cerise, pink, violet, purple, gray_blue, dark_green, green, aquamarine, red, yellow, vivid_yellow, light_green, or lime_green.
func (o SingleValueChartColorScaleOutput) Color() pulumi.StringOutput {
	return o.ApplyT(func(v SingleValueChartColorScale) string { return v.Color }).(pulumi.StringOutput)
}

// Indicates the lower threshold non-inclusive value for this range.
func (o SingleValueChartColorScaleOutput) Gt() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v SingleValueChartColorScale) *float64 { return v.Gt }).(pulumi.Float64PtrOutput)
}

// Indicates the lower threshold inclusive value for this range.
func (o SingleValueChartColorScaleOutput) Gte() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v SingleValueChartColorScale) *float64 { return v.Gte }).(pulumi.Float64PtrOutput)
}

// Indicates the upper threshold non-inculsive value for this range.
func (o SingleValueChartColorScaleOutput) Lt() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v SingleValueChartColorScale) *float64 { return v.Lt }).(pulumi.Float64PtrOutput)
}

// Indicates the upper threshold inclusive value for this range.
func (o SingleValueChartColorScaleOutput) Lte() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v SingleValueChartColorScale) *float64 { return v.Lte }).(pulumi.Float64PtrOutput)
}

type SingleValueChartColorScaleArrayOutput struct{ *pulumi.OutputState }

func (SingleValueChartColorScaleArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SingleValueChartColorScale)(nil)).Elem()
}

func (o SingleValueChartColorScaleArrayOutput) ToSingleValueChartColorScaleArrayOutput() SingleValueChartColorScaleArrayOutput {
	return o
}

func (o SingleValueChartColorScaleArrayOutput) ToSingleValueChartColorScaleArrayOutputWithContext(ctx context.Context) SingleValueChartColorScaleArrayOutput {
	return o
}

func (o SingleValueChartColorScaleArrayOutput) Index(i pulumi.IntInput) SingleValueChartColorScaleOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) SingleValueChartColorScale {
		return vs[0].([]SingleValueChartColorScale)[vs[1].(int)]
	}).(SingleValueChartColorScaleOutput)
}

type SingleValueChartVizOption struct {
	// The color to use. Must be one of gray, blue, light_blue, navy, dark_orange, orange, dark_yellow, magenta, cerise, pink, violet, purple, gray_blue, dark_green, green, aquamarine, red, yellow, vivid_yellow, light_green, or lime_green.
	Color *string `pulumi:"color"`
	// Specifies an alternate value for the Plot Name column of the Data Table associated with the chart.
	DisplayName *string `pulumi:"displayName"`
	// Label used in the publish statement that displays the plot (metric time series data) you want to customize.
	Label       string  `pulumi:"label"`
	ValuePrefix *string `pulumi:"valuePrefix"`
	ValueSuffix *string `pulumi:"valueSuffix"`
	// A unit to attach to this plot. Units support automatic scaling (eg thousands of bytes will be displayed as kilobytes). Values values are `Bit, Kilobit, Megabit, Gigabit, Terabit, Petabit, Exabit, Zettabit, Yottabit, Byte, Kibibyte, Mebibyte, Gigibyte, Tebibyte, Pebibyte, Exbibyte, Zebibyte, Yobibyte, Nanosecond, Microsecond, Millisecond, Second, Minute, Hour, Day, Week`.
	// * `valuePrefix`, `valueSuffix` - (Optional) Arbitrary prefix/suffix to display with the value of this plot.
	ValueUnit *string `pulumi:"valueUnit"`
}

// SingleValueChartVizOptionInput is an input type that accepts SingleValueChartVizOptionArgs and SingleValueChartVizOptionOutput values.
// You can construct a concrete instance of `SingleValueChartVizOptionInput` via:
//
//          SingleValueChartVizOptionArgs{...}
type SingleValueChartVizOptionInput interface {
	pulumi.Input

	ToSingleValueChartVizOptionOutput() SingleValueChartVizOptionOutput
	ToSingleValueChartVizOptionOutputWithContext(context.Context) SingleValueChartVizOptionOutput
}

type SingleValueChartVizOptionArgs struct {
	// The color to use. Must be one of gray, blue, light_blue, navy, dark_orange, orange, dark_yellow, magenta, cerise, pink, violet, purple, gray_blue, dark_green, green, aquamarine, red, yellow, vivid_yellow, light_green, or lime_green.
	Color pulumi.StringPtrInput `pulumi:"color"`
	// Specifies an alternate value for the Plot Name column of the Data Table associated with the chart.
	DisplayName pulumi.StringPtrInput `pulumi:"displayName"`
	// Label used in the publish statement that displays the plot (metric time series data) you want to customize.
	Label       pulumi.StringInput    `pulumi:"label"`
	ValuePrefix pulumi.StringPtrInput `pulumi:"valuePrefix"`
	ValueSuffix pulumi.StringPtrInput `pulumi:"valueSuffix"`
	// A unit to attach to this plot. Units support automatic scaling (eg thousands of bytes will be displayed as kilobytes). Values values are `Bit, Kilobit, Megabit, Gigabit, Terabit, Petabit, Exabit, Zettabit, Yottabit, Byte, Kibibyte, Mebibyte, Gigibyte, Tebibyte, Pebibyte, Exbibyte, Zebibyte, Yobibyte, Nanosecond, Microsecond, Millisecond, Second, Minute, Hour, Day, Week`.
	// * `valuePrefix`, `valueSuffix` - (Optional) Arbitrary prefix/suffix to display with the value of this plot.
	ValueUnit pulumi.StringPtrInput `pulumi:"valueUnit"`
}

func (SingleValueChartVizOptionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SingleValueChartVizOption)(nil)).Elem()
}

func (i SingleValueChartVizOptionArgs) ToSingleValueChartVizOptionOutput() SingleValueChartVizOptionOutput {
	return i.ToSingleValueChartVizOptionOutputWithContext(context.Background())
}

func (i SingleValueChartVizOptionArgs) ToSingleValueChartVizOptionOutputWithContext(ctx context.Context) SingleValueChartVizOptionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SingleValueChartVizOptionOutput)
}

// SingleValueChartVizOptionArrayInput is an input type that accepts SingleValueChartVizOptionArray and SingleValueChartVizOptionArrayOutput values.
// You can construct a concrete instance of `SingleValueChartVizOptionArrayInput` via:
//
//          SingleValueChartVizOptionArray{ SingleValueChartVizOptionArgs{...} }
type SingleValueChartVizOptionArrayInput interface {
	pulumi.Input

	ToSingleValueChartVizOptionArrayOutput() SingleValueChartVizOptionArrayOutput
	ToSingleValueChartVizOptionArrayOutputWithContext(context.Context) SingleValueChartVizOptionArrayOutput
}

type SingleValueChartVizOptionArray []SingleValueChartVizOptionInput

func (SingleValueChartVizOptionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SingleValueChartVizOption)(nil)).Elem()
}

func (i SingleValueChartVizOptionArray) ToSingleValueChartVizOptionArrayOutput() SingleValueChartVizOptionArrayOutput {
	return i.ToSingleValueChartVizOptionArrayOutputWithContext(context.Background())
}

func (i SingleValueChartVizOptionArray) ToSingleValueChartVizOptionArrayOutputWithContext(ctx context.Context) SingleValueChartVizOptionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SingleValueChartVizOptionArrayOutput)
}

type SingleValueChartVizOptionOutput struct{ *pulumi.OutputState }

func (SingleValueChartVizOptionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SingleValueChartVizOption)(nil)).Elem()
}

func (o SingleValueChartVizOptionOutput) ToSingleValueChartVizOptionOutput() SingleValueChartVizOptionOutput {
	return o
}

func (o SingleValueChartVizOptionOutput) ToSingleValueChartVizOptionOutputWithContext(ctx context.Context) SingleValueChartVizOptionOutput {
	return o
}

// The color to use. Must be one of gray, blue, light_blue, navy, dark_orange, orange, dark_yellow, magenta, cerise, pink, violet, purple, gray_blue, dark_green, green, aquamarine, red, yellow, vivid_yellow, light_green, or lime_green.
func (o SingleValueChartVizOptionOutput) Color() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SingleValueChartVizOption) *string { return v.Color }).(pulumi.StringPtrOutput)
}

// Specifies an alternate value for the Plot Name column of the Data Table associated with the chart.
func (o SingleValueChartVizOptionOutput) DisplayName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SingleValueChartVizOption) *string { return v.DisplayName }).(pulumi.StringPtrOutput)
}

// Label used in the publish statement that displays the plot (metric time series data) you want to customize.
func (o SingleValueChartVizOptionOutput) Label() pulumi.StringOutput {
	return o.ApplyT(func(v SingleValueChartVizOption) string { return v.Label }).(pulumi.StringOutput)
}

func (o SingleValueChartVizOptionOutput) ValuePrefix() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SingleValueChartVizOption) *string { return v.ValuePrefix }).(pulumi.StringPtrOutput)
}

func (o SingleValueChartVizOptionOutput) ValueSuffix() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SingleValueChartVizOption) *string { return v.ValueSuffix }).(pulumi.StringPtrOutput)
}

// A unit to attach to this plot. Units support automatic scaling (eg thousands of bytes will be displayed as kilobytes). Values values are `Bit, Kilobit, Megabit, Gigabit, Terabit, Petabit, Exabit, Zettabit, Yottabit, Byte, Kibibyte, Mebibyte, Gigibyte, Tebibyte, Pebibyte, Exbibyte, Zebibyte, Yobibyte, Nanosecond, Microsecond, Millisecond, Second, Minute, Hour, Day, Week`.
// * `valuePrefix`, `valueSuffix` - (Optional) Arbitrary prefix/suffix to display with the value of this plot.
func (o SingleValueChartVizOptionOutput) ValueUnit() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SingleValueChartVizOption) *string { return v.ValueUnit }).(pulumi.StringPtrOutput)
}

type SingleValueChartVizOptionArrayOutput struct{ *pulumi.OutputState }

func (SingleValueChartVizOptionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SingleValueChartVizOption)(nil)).Elem()
}

func (o SingleValueChartVizOptionArrayOutput) ToSingleValueChartVizOptionArrayOutput() SingleValueChartVizOptionArrayOutput {
	return o
}

func (o SingleValueChartVizOptionArrayOutput) ToSingleValueChartVizOptionArrayOutputWithContext(ctx context.Context) SingleValueChartVizOptionArrayOutput {
	return o
}

func (o SingleValueChartVizOptionArrayOutput) Index(i pulumi.IntInput) SingleValueChartVizOptionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) SingleValueChartVizOption {
		return vs[0].([]SingleValueChartVizOption)[vs[1].(int)]
	}).(SingleValueChartVizOptionOutput)
}

type TimeChartAxisLeft struct {
	// A line to draw as a high watermark.
	HighWatermark *float64 `pulumi:"highWatermark"`
	// A label to attach to the high watermark line.
	HighWatermarkLabel *string `pulumi:"highWatermarkLabel"`
	// Label used in the publish statement that displays the event query you want to customize.
	Label *string `pulumi:"label"`
	// A line to draw as a low watermark.
	LowWatermark *float64 `pulumi:"lowWatermark"`
	// A label to attach to the low watermark line.
	LowWatermarkLabel *string `pulumi:"lowWatermarkLabel"`
	// The maximum value for the right axis.
	MaxValue *float64 `pulumi:"maxValue"`
	// The minimum value for the right axis.
	MinValue   *float64                     `pulumi:"minValue"`
	Watermarks []TimeChartAxisLeftWatermark `pulumi:"watermarks"`
}

// TimeChartAxisLeftInput is an input type that accepts TimeChartAxisLeftArgs and TimeChartAxisLeftOutput values.
// You can construct a concrete instance of `TimeChartAxisLeftInput` via:
//
//          TimeChartAxisLeftArgs{...}
type TimeChartAxisLeftInput interface {
	pulumi.Input

	ToTimeChartAxisLeftOutput() TimeChartAxisLeftOutput
	ToTimeChartAxisLeftOutputWithContext(context.Context) TimeChartAxisLeftOutput
}

type TimeChartAxisLeftArgs struct {
	// A line to draw as a high watermark.
	HighWatermark pulumi.Float64PtrInput `pulumi:"highWatermark"`
	// A label to attach to the high watermark line.
	HighWatermarkLabel pulumi.StringPtrInput `pulumi:"highWatermarkLabel"`
	// Label used in the publish statement that displays the event query you want to customize.
	Label pulumi.StringPtrInput `pulumi:"label"`
	// A line to draw as a low watermark.
	LowWatermark pulumi.Float64PtrInput `pulumi:"lowWatermark"`
	// A label to attach to the low watermark line.
	LowWatermarkLabel pulumi.StringPtrInput `pulumi:"lowWatermarkLabel"`
	// The maximum value for the right axis.
	MaxValue pulumi.Float64PtrInput `pulumi:"maxValue"`
	// The minimum value for the right axis.
	MinValue   pulumi.Float64PtrInput               `pulumi:"minValue"`
	Watermarks TimeChartAxisLeftWatermarkArrayInput `pulumi:"watermarks"`
}

func (TimeChartAxisLeftArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TimeChartAxisLeft)(nil)).Elem()
}

func (i TimeChartAxisLeftArgs) ToTimeChartAxisLeftOutput() TimeChartAxisLeftOutput {
	return i.ToTimeChartAxisLeftOutputWithContext(context.Background())
}

func (i TimeChartAxisLeftArgs) ToTimeChartAxisLeftOutputWithContext(ctx context.Context) TimeChartAxisLeftOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TimeChartAxisLeftOutput)
}

func (i TimeChartAxisLeftArgs) ToTimeChartAxisLeftPtrOutput() TimeChartAxisLeftPtrOutput {
	return i.ToTimeChartAxisLeftPtrOutputWithContext(context.Background())
}

func (i TimeChartAxisLeftArgs) ToTimeChartAxisLeftPtrOutputWithContext(ctx context.Context) TimeChartAxisLeftPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TimeChartAxisLeftOutput).ToTimeChartAxisLeftPtrOutputWithContext(ctx)
}

// TimeChartAxisLeftPtrInput is an input type that accepts TimeChartAxisLeftArgs, TimeChartAxisLeftPtr and TimeChartAxisLeftPtrOutput values.
// You can construct a concrete instance of `TimeChartAxisLeftPtrInput` via:
//
//          TimeChartAxisLeftArgs{...}
//
//  or:
//
//          nil
type TimeChartAxisLeftPtrInput interface {
	pulumi.Input

	ToTimeChartAxisLeftPtrOutput() TimeChartAxisLeftPtrOutput
	ToTimeChartAxisLeftPtrOutputWithContext(context.Context) TimeChartAxisLeftPtrOutput
}

type timeChartAxisLeftPtrType TimeChartAxisLeftArgs

func TimeChartAxisLeftPtr(v *TimeChartAxisLeftArgs) TimeChartAxisLeftPtrInput {
	return (*timeChartAxisLeftPtrType)(v)
}

func (*timeChartAxisLeftPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TimeChartAxisLeft)(nil)).Elem()
}

func (i *timeChartAxisLeftPtrType) ToTimeChartAxisLeftPtrOutput() TimeChartAxisLeftPtrOutput {
	return i.ToTimeChartAxisLeftPtrOutputWithContext(context.Background())
}

func (i *timeChartAxisLeftPtrType) ToTimeChartAxisLeftPtrOutputWithContext(ctx context.Context) TimeChartAxisLeftPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TimeChartAxisLeftPtrOutput)
}

type TimeChartAxisLeftOutput struct{ *pulumi.OutputState }

func (TimeChartAxisLeftOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TimeChartAxisLeft)(nil)).Elem()
}

func (o TimeChartAxisLeftOutput) ToTimeChartAxisLeftOutput() TimeChartAxisLeftOutput {
	return o
}

func (o TimeChartAxisLeftOutput) ToTimeChartAxisLeftOutputWithContext(ctx context.Context) TimeChartAxisLeftOutput {
	return o
}

func (o TimeChartAxisLeftOutput) ToTimeChartAxisLeftPtrOutput() TimeChartAxisLeftPtrOutput {
	return o.ToTimeChartAxisLeftPtrOutputWithContext(context.Background())
}

func (o TimeChartAxisLeftOutput) ToTimeChartAxisLeftPtrOutputWithContext(ctx context.Context) TimeChartAxisLeftPtrOutput {
	return o.ApplyT(func(v TimeChartAxisLeft) *TimeChartAxisLeft {
		return &v
	}).(TimeChartAxisLeftPtrOutput)
}

// A line to draw as a high watermark.
func (o TimeChartAxisLeftOutput) HighWatermark() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v TimeChartAxisLeft) *float64 { return v.HighWatermark }).(pulumi.Float64PtrOutput)
}

// A label to attach to the high watermark line.
func (o TimeChartAxisLeftOutput) HighWatermarkLabel() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TimeChartAxisLeft) *string { return v.HighWatermarkLabel }).(pulumi.StringPtrOutput)
}

// Label used in the publish statement that displays the event query you want to customize.
func (o TimeChartAxisLeftOutput) Label() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TimeChartAxisLeft) *string { return v.Label }).(pulumi.StringPtrOutput)
}

// A line to draw as a low watermark.
func (o TimeChartAxisLeftOutput) LowWatermark() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v TimeChartAxisLeft) *float64 { return v.LowWatermark }).(pulumi.Float64PtrOutput)
}

// A label to attach to the low watermark line.
func (o TimeChartAxisLeftOutput) LowWatermarkLabel() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TimeChartAxisLeft) *string { return v.LowWatermarkLabel }).(pulumi.StringPtrOutput)
}

// The maximum value for the right axis.
func (o TimeChartAxisLeftOutput) MaxValue() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v TimeChartAxisLeft) *float64 { return v.MaxValue }).(pulumi.Float64PtrOutput)
}

// The minimum value for the right axis.
func (o TimeChartAxisLeftOutput) MinValue() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v TimeChartAxisLeft) *float64 { return v.MinValue }).(pulumi.Float64PtrOutput)
}

func (o TimeChartAxisLeftOutput) Watermarks() TimeChartAxisLeftWatermarkArrayOutput {
	return o.ApplyT(func(v TimeChartAxisLeft) []TimeChartAxisLeftWatermark { return v.Watermarks }).(TimeChartAxisLeftWatermarkArrayOutput)
}

type TimeChartAxisLeftPtrOutput struct{ *pulumi.OutputState }

func (TimeChartAxisLeftPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TimeChartAxisLeft)(nil)).Elem()
}

func (o TimeChartAxisLeftPtrOutput) ToTimeChartAxisLeftPtrOutput() TimeChartAxisLeftPtrOutput {
	return o
}

func (o TimeChartAxisLeftPtrOutput) ToTimeChartAxisLeftPtrOutputWithContext(ctx context.Context) TimeChartAxisLeftPtrOutput {
	return o
}

func (o TimeChartAxisLeftPtrOutput) Elem() TimeChartAxisLeftOutput {
	return o.ApplyT(func(v *TimeChartAxisLeft) TimeChartAxisLeft { return *v }).(TimeChartAxisLeftOutput)
}

// A line to draw as a high watermark.
func (o TimeChartAxisLeftPtrOutput) HighWatermark() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *TimeChartAxisLeft) *float64 {
		if v == nil {
			return nil
		}
		return v.HighWatermark
	}).(pulumi.Float64PtrOutput)
}

// A label to attach to the high watermark line.
func (o TimeChartAxisLeftPtrOutput) HighWatermarkLabel() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TimeChartAxisLeft) *string {
		if v == nil {
			return nil
		}
		return v.HighWatermarkLabel
	}).(pulumi.StringPtrOutput)
}

// Label used in the publish statement that displays the event query you want to customize.
func (o TimeChartAxisLeftPtrOutput) Label() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TimeChartAxisLeft) *string {
		if v == nil {
			return nil
		}
		return v.Label
	}).(pulumi.StringPtrOutput)
}

// A line to draw as a low watermark.
func (o TimeChartAxisLeftPtrOutput) LowWatermark() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *TimeChartAxisLeft) *float64 {
		if v == nil {
			return nil
		}
		return v.LowWatermark
	}).(pulumi.Float64PtrOutput)
}

// A label to attach to the low watermark line.
func (o TimeChartAxisLeftPtrOutput) LowWatermarkLabel() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TimeChartAxisLeft) *string {
		if v == nil {
			return nil
		}
		return v.LowWatermarkLabel
	}).(pulumi.StringPtrOutput)
}

// The maximum value for the right axis.
func (o TimeChartAxisLeftPtrOutput) MaxValue() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *TimeChartAxisLeft) *float64 {
		if v == nil {
			return nil
		}
		return v.MaxValue
	}).(pulumi.Float64PtrOutput)
}

// The minimum value for the right axis.
func (o TimeChartAxisLeftPtrOutput) MinValue() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *TimeChartAxisLeft) *float64 {
		if v == nil {
			return nil
		}
		return v.MinValue
	}).(pulumi.Float64PtrOutput)
}

func (o TimeChartAxisLeftPtrOutput) Watermarks() TimeChartAxisLeftWatermarkArrayOutput {
	return o.ApplyT(func(v *TimeChartAxisLeft) []TimeChartAxisLeftWatermark {
		if v == nil {
			return nil
		}
		return v.Watermarks
	}).(TimeChartAxisLeftWatermarkArrayOutput)
}

type TimeChartAxisLeftWatermark struct {
	// Label used in the publish statement that displays the event query you want to customize.
	Label *string `pulumi:"label"`
	Value float64 `pulumi:"value"`
}

// TimeChartAxisLeftWatermarkInput is an input type that accepts TimeChartAxisLeftWatermarkArgs and TimeChartAxisLeftWatermarkOutput values.
// You can construct a concrete instance of `TimeChartAxisLeftWatermarkInput` via:
//
//          TimeChartAxisLeftWatermarkArgs{...}
type TimeChartAxisLeftWatermarkInput interface {
	pulumi.Input

	ToTimeChartAxisLeftWatermarkOutput() TimeChartAxisLeftWatermarkOutput
	ToTimeChartAxisLeftWatermarkOutputWithContext(context.Context) TimeChartAxisLeftWatermarkOutput
}

type TimeChartAxisLeftWatermarkArgs struct {
	// Label used in the publish statement that displays the event query you want to customize.
	Label pulumi.StringPtrInput `pulumi:"label"`
	Value pulumi.Float64Input   `pulumi:"value"`
}

func (TimeChartAxisLeftWatermarkArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TimeChartAxisLeftWatermark)(nil)).Elem()
}

func (i TimeChartAxisLeftWatermarkArgs) ToTimeChartAxisLeftWatermarkOutput() TimeChartAxisLeftWatermarkOutput {
	return i.ToTimeChartAxisLeftWatermarkOutputWithContext(context.Background())
}

func (i TimeChartAxisLeftWatermarkArgs) ToTimeChartAxisLeftWatermarkOutputWithContext(ctx context.Context) TimeChartAxisLeftWatermarkOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TimeChartAxisLeftWatermarkOutput)
}

// TimeChartAxisLeftWatermarkArrayInput is an input type that accepts TimeChartAxisLeftWatermarkArray and TimeChartAxisLeftWatermarkArrayOutput values.
// You can construct a concrete instance of `TimeChartAxisLeftWatermarkArrayInput` via:
//
//          TimeChartAxisLeftWatermarkArray{ TimeChartAxisLeftWatermarkArgs{...} }
type TimeChartAxisLeftWatermarkArrayInput interface {
	pulumi.Input

	ToTimeChartAxisLeftWatermarkArrayOutput() TimeChartAxisLeftWatermarkArrayOutput
	ToTimeChartAxisLeftWatermarkArrayOutputWithContext(context.Context) TimeChartAxisLeftWatermarkArrayOutput
}

type TimeChartAxisLeftWatermarkArray []TimeChartAxisLeftWatermarkInput

func (TimeChartAxisLeftWatermarkArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TimeChartAxisLeftWatermark)(nil)).Elem()
}

func (i TimeChartAxisLeftWatermarkArray) ToTimeChartAxisLeftWatermarkArrayOutput() TimeChartAxisLeftWatermarkArrayOutput {
	return i.ToTimeChartAxisLeftWatermarkArrayOutputWithContext(context.Background())
}

func (i TimeChartAxisLeftWatermarkArray) ToTimeChartAxisLeftWatermarkArrayOutputWithContext(ctx context.Context) TimeChartAxisLeftWatermarkArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TimeChartAxisLeftWatermarkArrayOutput)
}

type TimeChartAxisLeftWatermarkOutput struct{ *pulumi.OutputState }

func (TimeChartAxisLeftWatermarkOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TimeChartAxisLeftWatermark)(nil)).Elem()
}

func (o TimeChartAxisLeftWatermarkOutput) ToTimeChartAxisLeftWatermarkOutput() TimeChartAxisLeftWatermarkOutput {
	return o
}

func (o TimeChartAxisLeftWatermarkOutput) ToTimeChartAxisLeftWatermarkOutputWithContext(ctx context.Context) TimeChartAxisLeftWatermarkOutput {
	return o
}

// Label used in the publish statement that displays the event query you want to customize.
func (o TimeChartAxisLeftWatermarkOutput) Label() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TimeChartAxisLeftWatermark) *string { return v.Label }).(pulumi.StringPtrOutput)
}

func (o TimeChartAxisLeftWatermarkOutput) Value() pulumi.Float64Output {
	return o.ApplyT(func(v TimeChartAxisLeftWatermark) float64 { return v.Value }).(pulumi.Float64Output)
}

type TimeChartAxisLeftWatermarkArrayOutput struct{ *pulumi.OutputState }

func (TimeChartAxisLeftWatermarkArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TimeChartAxisLeftWatermark)(nil)).Elem()
}

func (o TimeChartAxisLeftWatermarkArrayOutput) ToTimeChartAxisLeftWatermarkArrayOutput() TimeChartAxisLeftWatermarkArrayOutput {
	return o
}

func (o TimeChartAxisLeftWatermarkArrayOutput) ToTimeChartAxisLeftWatermarkArrayOutputWithContext(ctx context.Context) TimeChartAxisLeftWatermarkArrayOutput {
	return o
}

func (o TimeChartAxisLeftWatermarkArrayOutput) Index(i pulumi.IntInput) TimeChartAxisLeftWatermarkOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) TimeChartAxisLeftWatermark {
		return vs[0].([]TimeChartAxisLeftWatermark)[vs[1].(int)]
	}).(TimeChartAxisLeftWatermarkOutput)
}

type TimeChartAxisRight struct {
	// A line to draw as a high watermark.
	HighWatermark *float64 `pulumi:"highWatermark"`
	// A label to attach to the high watermark line.
	HighWatermarkLabel *string `pulumi:"highWatermarkLabel"`
	// Label used in the publish statement that displays the event query you want to customize.
	Label *string `pulumi:"label"`
	// A line to draw as a low watermark.
	LowWatermark *float64 `pulumi:"lowWatermark"`
	// A label to attach to the low watermark line.
	LowWatermarkLabel *string `pulumi:"lowWatermarkLabel"`
	// The maximum value for the right axis.
	MaxValue *float64 `pulumi:"maxValue"`
	// The minimum value for the right axis.
	MinValue   *float64                      `pulumi:"minValue"`
	Watermarks []TimeChartAxisRightWatermark `pulumi:"watermarks"`
}

// TimeChartAxisRightInput is an input type that accepts TimeChartAxisRightArgs and TimeChartAxisRightOutput values.
// You can construct a concrete instance of `TimeChartAxisRightInput` via:
//
//          TimeChartAxisRightArgs{...}
type TimeChartAxisRightInput interface {
	pulumi.Input

	ToTimeChartAxisRightOutput() TimeChartAxisRightOutput
	ToTimeChartAxisRightOutputWithContext(context.Context) TimeChartAxisRightOutput
}

type TimeChartAxisRightArgs struct {
	// A line to draw as a high watermark.
	HighWatermark pulumi.Float64PtrInput `pulumi:"highWatermark"`
	// A label to attach to the high watermark line.
	HighWatermarkLabel pulumi.StringPtrInput `pulumi:"highWatermarkLabel"`
	// Label used in the publish statement that displays the event query you want to customize.
	Label pulumi.StringPtrInput `pulumi:"label"`
	// A line to draw as a low watermark.
	LowWatermark pulumi.Float64PtrInput `pulumi:"lowWatermark"`
	// A label to attach to the low watermark line.
	LowWatermarkLabel pulumi.StringPtrInput `pulumi:"lowWatermarkLabel"`
	// The maximum value for the right axis.
	MaxValue pulumi.Float64PtrInput `pulumi:"maxValue"`
	// The minimum value for the right axis.
	MinValue   pulumi.Float64PtrInput                `pulumi:"minValue"`
	Watermarks TimeChartAxisRightWatermarkArrayInput `pulumi:"watermarks"`
}

func (TimeChartAxisRightArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TimeChartAxisRight)(nil)).Elem()
}

func (i TimeChartAxisRightArgs) ToTimeChartAxisRightOutput() TimeChartAxisRightOutput {
	return i.ToTimeChartAxisRightOutputWithContext(context.Background())
}

func (i TimeChartAxisRightArgs) ToTimeChartAxisRightOutputWithContext(ctx context.Context) TimeChartAxisRightOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TimeChartAxisRightOutput)
}

func (i TimeChartAxisRightArgs) ToTimeChartAxisRightPtrOutput() TimeChartAxisRightPtrOutput {
	return i.ToTimeChartAxisRightPtrOutputWithContext(context.Background())
}

func (i TimeChartAxisRightArgs) ToTimeChartAxisRightPtrOutputWithContext(ctx context.Context) TimeChartAxisRightPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TimeChartAxisRightOutput).ToTimeChartAxisRightPtrOutputWithContext(ctx)
}

// TimeChartAxisRightPtrInput is an input type that accepts TimeChartAxisRightArgs, TimeChartAxisRightPtr and TimeChartAxisRightPtrOutput values.
// You can construct a concrete instance of `TimeChartAxisRightPtrInput` via:
//
//          TimeChartAxisRightArgs{...}
//
//  or:
//
//          nil
type TimeChartAxisRightPtrInput interface {
	pulumi.Input

	ToTimeChartAxisRightPtrOutput() TimeChartAxisRightPtrOutput
	ToTimeChartAxisRightPtrOutputWithContext(context.Context) TimeChartAxisRightPtrOutput
}

type timeChartAxisRightPtrType TimeChartAxisRightArgs

func TimeChartAxisRightPtr(v *TimeChartAxisRightArgs) TimeChartAxisRightPtrInput {
	return (*timeChartAxisRightPtrType)(v)
}

func (*timeChartAxisRightPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TimeChartAxisRight)(nil)).Elem()
}

func (i *timeChartAxisRightPtrType) ToTimeChartAxisRightPtrOutput() TimeChartAxisRightPtrOutput {
	return i.ToTimeChartAxisRightPtrOutputWithContext(context.Background())
}

func (i *timeChartAxisRightPtrType) ToTimeChartAxisRightPtrOutputWithContext(ctx context.Context) TimeChartAxisRightPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TimeChartAxisRightPtrOutput)
}

type TimeChartAxisRightOutput struct{ *pulumi.OutputState }

func (TimeChartAxisRightOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TimeChartAxisRight)(nil)).Elem()
}

func (o TimeChartAxisRightOutput) ToTimeChartAxisRightOutput() TimeChartAxisRightOutput {
	return o
}

func (o TimeChartAxisRightOutput) ToTimeChartAxisRightOutputWithContext(ctx context.Context) TimeChartAxisRightOutput {
	return o
}

func (o TimeChartAxisRightOutput) ToTimeChartAxisRightPtrOutput() TimeChartAxisRightPtrOutput {
	return o.ToTimeChartAxisRightPtrOutputWithContext(context.Background())
}

func (o TimeChartAxisRightOutput) ToTimeChartAxisRightPtrOutputWithContext(ctx context.Context) TimeChartAxisRightPtrOutput {
	return o.ApplyT(func(v TimeChartAxisRight) *TimeChartAxisRight {
		return &v
	}).(TimeChartAxisRightPtrOutput)
}

// A line to draw as a high watermark.
func (o TimeChartAxisRightOutput) HighWatermark() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v TimeChartAxisRight) *float64 { return v.HighWatermark }).(pulumi.Float64PtrOutput)
}

// A label to attach to the high watermark line.
func (o TimeChartAxisRightOutput) HighWatermarkLabel() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TimeChartAxisRight) *string { return v.HighWatermarkLabel }).(pulumi.StringPtrOutput)
}

// Label used in the publish statement that displays the event query you want to customize.
func (o TimeChartAxisRightOutput) Label() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TimeChartAxisRight) *string { return v.Label }).(pulumi.StringPtrOutput)
}

// A line to draw as a low watermark.
func (o TimeChartAxisRightOutput) LowWatermark() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v TimeChartAxisRight) *float64 { return v.LowWatermark }).(pulumi.Float64PtrOutput)
}

// A label to attach to the low watermark line.
func (o TimeChartAxisRightOutput) LowWatermarkLabel() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TimeChartAxisRight) *string { return v.LowWatermarkLabel }).(pulumi.StringPtrOutput)
}

// The maximum value for the right axis.
func (o TimeChartAxisRightOutput) MaxValue() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v TimeChartAxisRight) *float64 { return v.MaxValue }).(pulumi.Float64PtrOutput)
}

// The minimum value for the right axis.
func (o TimeChartAxisRightOutput) MinValue() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v TimeChartAxisRight) *float64 { return v.MinValue }).(pulumi.Float64PtrOutput)
}

func (o TimeChartAxisRightOutput) Watermarks() TimeChartAxisRightWatermarkArrayOutput {
	return o.ApplyT(func(v TimeChartAxisRight) []TimeChartAxisRightWatermark { return v.Watermarks }).(TimeChartAxisRightWatermarkArrayOutput)
}

type TimeChartAxisRightPtrOutput struct{ *pulumi.OutputState }

func (TimeChartAxisRightPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TimeChartAxisRight)(nil)).Elem()
}

func (o TimeChartAxisRightPtrOutput) ToTimeChartAxisRightPtrOutput() TimeChartAxisRightPtrOutput {
	return o
}

func (o TimeChartAxisRightPtrOutput) ToTimeChartAxisRightPtrOutputWithContext(ctx context.Context) TimeChartAxisRightPtrOutput {
	return o
}

func (o TimeChartAxisRightPtrOutput) Elem() TimeChartAxisRightOutput {
	return o.ApplyT(func(v *TimeChartAxisRight) TimeChartAxisRight { return *v }).(TimeChartAxisRightOutput)
}

// A line to draw as a high watermark.
func (o TimeChartAxisRightPtrOutput) HighWatermark() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *TimeChartAxisRight) *float64 {
		if v == nil {
			return nil
		}
		return v.HighWatermark
	}).(pulumi.Float64PtrOutput)
}

// A label to attach to the high watermark line.
func (o TimeChartAxisRightPtrOutput) HighWatermarkLabel() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TimeChartAxisRight) *string {
		if v == nil {
			return nil
		}
		return v.HighWatermarkLabel
	}).(pulumi.StringPtrOutput)
}

// Label used in the publish statement that displays the event query you want to customize.
func (o TimeChartAxisRightPtrOutput) Label() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TimeChartAxisRight) *string {
		if v == nil {
			return nil
		}
		return v.Label
	}).(pulumi.StringPtrOutput)
}

// A line to draw as a low watermark.
func (o TimeChartAxisRightPtrOutput) LowWatermark() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *TimeChartAxisRight) *float64 {
		if v == nil {
			return nil
		}
		return v.LowWatermark
	}).(pulumi.Float64PtrOutput)
}

// A label to attach to the low watermark line.
func (o TimeChartAxisRightPtrOutput) LowWatermarkLabel() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TimeChartAxisRight) *string {
		if v == nil {
			return nil
		}
		return v.LowWatermarkLabel
	}).(pulumi.StringPtrOutput)
}

// The maximum value for the right axis.
func (o TimeChartAxisRightPtrOutput) MaxValue() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *TimeChartAxisRight) *float64 {
		if v == nil {
			return nil
		}
		return v.MaxValue
	}).(pulumi.Float64PtrOutput)
}

// The minimum value for the right axis.
func (o TimeChartAxisRightPtrOutput) MinValue() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *TimeChartAxisRight) *float64 {
		if v == nil {
			return nil
		}
		return v.MinValue
	}).(pulumi.Float64PtrOutput)
}

func (o TimeChartAxisRightPtrOutput) Watermarks() TimeChartAxisRightWatermarkArrayOutput {
	return o.ApplyT(func(v *TimeChartAxisRight) []TimeChartAxisRightWatermark {
		if v == nil {
			return nil
		}
		return v.Watermarks
	}).(TimeChartAxisRightWatermarkArrayOutput)
}

type TimeChartAxisRightWatermark struct {
	// Label used in the publish statement that displays the event query you want to customize.
	Label *string `pulumi:"label"`
	Value float64 `pulumi:"value"`
}

// TimeChartAxisRightWatermarkInput is an input type that accepts TimeChartAxisRightWatermarkArgs and TimeChartAxisRightWatermarkOutput values.
// You can construct a concrete instance of `TimeChartAxisRightWatermarkInput` via:
//
//          TimeChartAxisRightWatermarkArgs{...}
type TimeChartAxisRightWatermarkInput interface {
	pulumi.Input

	ToTimeChartAxisRightWatermarkOutput() TimeChartAxisRightWatermarkOutput
	ToTimeChartAxisRightWatermarkOutputWithContext(context.Context) TimeChartAxisRightWatermarkOutput
}

type TimeChartAxisRightWatermarkArgs struct {
	// Label used in the publish statement that displays the event query you want to customize.
	Label pulumi.StringPtrInput `pulumi:"label"`
	Value pulumi.Float64Input   `pulumi:"value"`
}

func (TimeChartAxisRightWatermarkArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TimeChartAxisRightWatermark)(nil)).Elem()
}

func (i TimeChartAxisRightWatermarkArgs) ToTimeChartAxisRightWatermarkOutput() TimeChartAxisRightWatermarkOutput {
	return i.ToTimeChartAxisRightWatermarkOutputWithContext(context.Background())
}

func (i TimeChartAxisRightWatermarkArgs) ToTimeChartAxisRightWatermarkOutputWithContext(ctx context.Context) TimeChartAxisRightWatermarkOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TimeChartAxisRightWatermarkOutput)
}

// TimeChartAxisRightWatermarkArrayInput is an input type that accepts TimeChartAxisRightWatermarkArray and TimeChartAxisRightWatermarkArrayOutput values.
// You can construct a concrete instance of `TimeChartAxisRightWatermarkArrayInput` via:
//
//          TimeChartAxisRightWatermarkArray{ TimeChartAxisRightWatermarkArgs{...} }
type TimeChartAxisRightWatermarkArrayInput interface {
	pulumi.Input

	ToTimeChartAxisRightWatermarkArrayOutput() TimeChartAxisRightWatermarkArrayOutput
	ToTimeChartAxisRightWatermarkArrayOutputWithContext(context.Context) TimeChartAxisRightWatermarkArrayOutput
}

type TimeChartAxisRightWatermarkArray []TimeChartAxisRightWatermarkInput

func (TimeChartAxisRightWatermarkArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TimeChartAxisRightWatermark)(nil)).Elem()
}

func (i TimeChartAxisRightWatermarkArray) ToTimeChartAxisRightWatermarkArrayOutput() TimeChartAxisRightWatermarkArrayOutput {
	return i.ToTimeChartAxisRightWatermarkArrayOutputWithContext(context.Background())
}

func (i TimeChartAxisRightWatermarkArray) ToTimeChartAxisRightWatermarkArrayOutputWithContext(ctx context.Context) TimeChartAxisRightWatermarkArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TimeChartAxisRightWatermarkArrayOutput)
}

type TimeChartAxisRightWatermarkOutput struct{ *pulumi.OutputState }

func (TimeChartAxisRightWatermarkOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TimeChartAxisRightWatermark)(nil)).Elem()
}

func (o TimeChartAxisRightWatermarkOutput) ToTimeChartAxisRightWatermarkOutput() TimeChartAxisRightWatermarkOutput {
	return o
}

func (o TimeChartAxisRightWatermarkOutput) ToTimeChartAxisRightWatermarkOutputWithContext(ctx context.Context) TimeChartAxisRightWatermarkOutput {
	return o
}

// Label used in the publish statement that displays the event query you want to customize.
func (o TimeChartAxisRightWatermarkOutput) Label() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TimeChartAxisRightWatermark) *string { return v.Label }).(pulumi.StringPtrOutput)
}

func (o TimeChartAxisRightWatermarkOutput) Value() pulumi.Float64Output {
	return o.ApplyT(func(v TimeChartAxisRightWatermark) float64 { return v.Value }).(pulumi.Float64Output)
}

type TimeChartAxisRightWatermarkArrayOutput struct{ *pulumi.OutputState }

func (TimeChartAxisRightWatermarkArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TimeChartAxisRightWatermark)(nil)).Elem()
}

func (o TimeChartAxisRightWatermarkArrayOutput) ToTimeChartAxisRightWatermarkArrayOutput() TimeChartAxisRightWatermarkArrayOutput {
	return o
}

func (o TimeChartAxisRightWatermarkArrayOutput) ToTimeChartAxisRightWatermarkArrayOutputWithContext(ctx context.Context) TimeChartAxisRightWatermarkArrayOutput {
	return o
}

func (o TimeChartAxisRightWatermarkArrayOutput) Index(i pulumi.IntInput) TimeChartAxisRightWatermarkOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) TimeChartAxisRightWatermark {
		return vs[0].([]TimeChartAxisRightWatermark)[vs[1].(int)]
	}).(TimeChartAxisRightWatermarkOutput)
}

type TimeChartEventOption struct {
	// Color to use : gray, blue, azure, navy, brown, orange, yellow, iris, magenta, pink, purple, violet, lilac, emerald, green, aquamarine.
	Color *string `pulumi:"color"`
	// Specifies an alternate value for the Plot Name column of the Data Table associated with the chart.
	DisplayName *string `pulumi:"displayName"`
	// Label used in the publish statement that displays the event query you want to customize.
	Label string `pulumi:"label"`
}

// TimeChartEventOptionInput is an input type that accepts TimeChartEventOptionArgs and TimeChartEventOptionOutput values.
// You can construct a concrete instance of `TimeChartEventOptionInput` via:
//
//          TimeChartEventOptionArgs{...}
type TimeChartEventOptionInput interface {
	pulumi.Input

	ToTimeChartEventOptionOutput() TimeChartEventOptionOutput
	ToTimeChartEventOptionOutputWithContext(context.Context) TimeChartEventOptionOutput
}

type TimeChartEventOptionArgs struct {
	// Color to use : gray, blue, azure, navy, brown, orange, yellow, iris, magenta, pink, purple, violet, lilac, emerald, green, aquamarine.
	Color pulumi.StringPtrInput `pulumi:"color"`
	// Specifies an alternate value for the Plot Name column of the Data Table associated with the chart.
	DisplayName pulumi.StringPtrInput `pulumi:"displayName"`
	// Label used in the publish statement that displays the event query you want to customize.
	Label pulumi.StringInput `pulumi:"label"`
}

func (TimeChartEventOptionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TimeChartEventOption)(nil)).Elem()
}

func (i TimeChartEventOptionArgs) ToTimeChartEventOptionOutput() TimeChartEventOptionOutput {
	return i.ToTimeChartEventOptionOutputWithContext(context.Background())
}

func (i TimeChartEventOptionArgs) ToTimeChartEventOptionOutputWithContext(ctx context.Context) TimeChartEventOptionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TimeChartEventOptionOutput)
}

// TimeChartEventOptionArrayInput is an input type that accepts TimeChartEventOptionArray and TimeChartEventOptionArrayOutput values.
// You can construct a concrete instance of `TimeChartEventOptionArrayInput` via:
//
//          TimeChartEventOptionArray{ TimeChartEventOptionArgs{...} }
type TimeChartEventOptionArrayInput interface {
	pulumi.Input

	ToTimeChartEventOptionArrayOutput() TimeChartEventOptionArrayOutput
	ToTimeChartEventOptionArrayOutputWithContext(context.Context) TimeChartEventOptionArrayOutput
}

type TimeChartEventOptionArray []TimeChartEventOptionInput

func (TimeChartEventOptionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TimeChartEventOption)(nil)).Elem()
}

func (i TimeChartEventOptionArray) ToTimeChartEventOptionArrayOutput() TimeChartEventOptionArrayOutput {
	return i.ToTimeChartEventOptionArrayOutputWithContext(context.Background())
}

func (i TimeChartEventOptionArray) ToTimeChartEventOptionArrayOutputWithContext(ctx context.Context) TimeChartEventOptionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TimeChartEventOptionArrayOutput)
}

type TimeChartEventOptionOutput struct{ *pulumi.OutputState }

func (TimeChartEventOptionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TimeChartEventOption)(nil)).Elem()
}

func (o TimeChartEventOptionOutput) ToTimeChartEventOptionOutput() TimeChartEventOptionOutput {
	return o
}

func (o TimeChartEventOptionOutput) ToTimeChartEventOptionOutputWithContext(ctx context.Context) TimeChartEventOptionOutput {
	return o
}

// Color to use : gray, blue, azure, navy, brown, orange, yellow, iris, magenta, pink, purple, violet, lilac, emerald, green, aquamarine.
func (o TimeChartEventOptionOutput) Color() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TimeChartEventOption) *string { return v.Color }).(pulumi.StringPtrOutput)
}

// Specifies an alternate value for the Plot Name column of the Data Table associated with the chart.
func (o TimeChartEventOptionOutput) DisplayName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TimeChartEventOption) *string { return v.DisplayName }).(pulumi.StringPtrOutput)
}

// Label used in the publish statement that displays the event query you want to customize.
func (o TimeChartEventOptionOutput) Label() pulumi.StringOutput {
	return o.ApplyT(func(v TimeChartEventOption) string { return v.Label }).(pulumi.StringOutput)
}

type TimeChartEventOptionArrayOutput struct{ *pulumi.OutputState }

func (TimeChartEventOptionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TimeChartEventOption)(nil)).Elem()
}

func (o TimeChartEventOptionArrayOutput) ToTimeChartEventOptionArrayOutput() TimeChartEventOptionArrayOutput {
	return o
}

func (o TimeChartEventOptionArrayOutput) ToTimeChartEventOptionArrayOutputWithContext(ctx context.Context) TimeChartEventOptionArrayOutput {
	return o
}

func (o TimeChartEventOptionArrayOutput) Index(i pulumi.IntInput) TimeChartEventOptionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) TimeChartEventOption {
		return vs[0].([]TimeChartEventOption)[vs[1].(int)]
	}).(TimeChartEventOptionOutput)
}

type TimeChartHistogramOption struct {
	// Color to use : gray, blue, azure, navy, brown, orange, yellow, iris, magenta, pink, purple, violet, lilac, emerald, green, aquamarine, red, gold, greenyellow, chartreuse, jade
	ColorTheme *string `pulumi:"colorTheme"`
}

// TimeChartHistogramOptionInput is an input type that accepts TimeChartHistogramOptionArgs and TimeChartHistogramOptionOutput values.
// You can construct a concrete instance of `TimeChartHistogramOptionInput` via:
//
//          TimeChartHistogramOptionArgs{...}
type TimeChartHistogramOptionInput interface {
	pulumi.Input

	ToTimeChartHistogramOptionOutput() TimeChartHistogramOptionOutput
	ToTimeChartHistogramOptionOutputWithContext(context.Context) TimeChartHistogramOptionOutput
}

type TimeChartHistogramOptionArgs struct {
	// Color to use : gray, blue, azure, navy, brown, orange, yellow, iris, magenta, pink, purple, violet, lilac, emerald, green, aquamarine, red, gold, greenyellow, chartreuse, jade
	ColorTheme pulumi.StringPtrInput `pulumi:"colorTheme"`
}

func (TimeChartHistogramOptionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TimeChartHistogramOption)(nil)).Elem()
}

func (i TimeChartHistogramOptionArgs) ToTimeChartHistogramOptionOutput() TimeChartHistogramOptionOutput {
	return i.ToTimeChartHistogramOptionOutputWithContext(context.Background())
}

func (i TimeChartHistogramOptionArgs) ToTimeChartHistogramOptionOutputWithContext(ctx context.Context) TimeChartHistogramOptionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TimeChartHistogramOptionOutput)
}

// TimeChartHistogramOptionArrayInput is an input type that accepts TimeChartHistogramOptionArray and TimeChartHistogramOptionArrayOutput values.
// You can construct a concrete instance of `TimeChartHistogramOptionArrayInput` via:
//
//          TimeChartHistogramOptionArray{ TimeChartHistogramOptionArgs{...} }
type TimeChartHistogramOptionArrayInput interface {
	pulumi.Input

	ToTimeChartHistogramOptionArrayOutput() TimeChartHistogramOptionArrayOutput
	ToTimeChartHistogramOptionArrayOutputWithContext(context.Context) TimeChartHistogramOptionArrayOutput
}

type TimeChartHistogramOptionArray []TimeChartHistogramOptionInput

func (TimeChartHistogramOptionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TimeChartHistogramOption)(nil)).Elem()
}

func (i TimeChartHistogramOptionArray) ToTimeChartHistogramOptionArrayOutput() TimeChartHistogramOptionArrayOutput {
	return i.ToTimeChartHistogramOptionArrayOutputWithContext(context.Background())
}

func (i TimeChartHistogramOptionArray) ToTimeChartHistogramOptionArrayOutputWithContext(ctx context.Context) TimeChartHistogramOptionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TimeChartHistogramOptionArrayOutput)
}

type TimeChartHistogramOptionOutput struct{ *pulumi.OutputState }

func (TimeChartHistogramOptionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TimeChartHistogramOption)(nil)).Elem()
}

func (o TimeChartHistogramOptionOutput) ToTimeChartHistogramOptionOutput() TimeChartHistogramOptionOutput {
	return o
}

func (o TimeChartHistogramOptionOutput) ToTimeChartHistogramOptionOutputWithContext(ctx context.Context) TimeChartHistogramOptionOutput {
	return o
}

// Color to use : gray, blue, azure, navy, brown, orange, yellow, iris, magenta, pink, purple, violet, lilac, emerald, green, aquamarine, red, gold, greenyellow, chartreuse, jade
func (o TimeChartHistogramOptionOutput) ColorTheme() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TimeChartHistogramOption) *string { return v.ColorTheme }).(pulumi.StringPtrOutput)
}

type TimeChartHistogramOptionArrayOutput struct{ *pulumi.OutputState }

func (TimeChartHistogramOptionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TimeChartHistogramOption)(nil)).Elem()
}

func (o TimeChartHistogramOptionArrayOutput) ToTimeChartHistogramOptionArrayOutput() TimeChartHistogramOptionArrayOutput {
	return o
}

func (o TimeChartHistogramOptionArrayOutput) ToTimeChartHistogramOptionArrayOutputWithContext(ctx context.Context) TimeChartHistogramOptionArrayOutput {
	return o
}

func (o TimeChartHistogramOptionArrayOutput) Index(i pulumi.IntInput) TimeChartHistogramOptionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) TimeChartHistogramOption {
		return vs[0].([]TimeChartHistogramOption)[vs[1].(int)]
	}).(TimeChartHistogramOptionOutput)
}

type TimeChartLegendOptionsField struct {
	// True or False depending on if you want the property to be shown or hidden.
	Enabled *bool `pulumi:"enabled"`
	// The name of the property to display. Note the special values of `plotLabel` (corresponding with the API's `sfMetric`) which shows the label of the time series `publish()` and `metric` (corresponding with the API's `sf_originatingMetric`) that shows the name of the metric for the time series being displayed.
	Property string `pulumi:"property"`
}

// TimeChartLegendOptionsFieldInput is an input type that accepts TimeChartLegendOptionsFieldArgs and TimeChartLegendOptionsFieldOutput values.
// You can construct a concrete instance of `TimeChartLegendOptionsFieldInput` via:
//
//          TimeChartLegendOptionsFieldArgs{...}
type TimeChartLegendOptionsFieldInput interface {
	pulumi.Input

	ToTimeChartLegendOptionsFieldOutput() TimeChartLegendOptionsFieldOutput
	ToTimeChartLegendOptionsFieldOutputWithContext(context.Context) TimeChartLegendOptionsFieldOutput
}

type TimeChartLegendOptionsFieldArgs struct {
	// True or False depending on if you want the property to be shown or hidden.
	Enabled pulumi.BoolPtrInput `pulumi:"enabled"`
	// The name of the property to display. Note the special values of `plotLabel` (corresponding with the API's `sfMetric`) which shows the label of the time series `publish()` and `metric` (corresponding with the API's `sf_originatingMetric`) that shows the name of the metric for the time series being displayed.
	Property pulumi.StringInput `pulumi:"property"`
}

func (TimeChartLegendOptionsFieldArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TimeChartLegendOptionsField)(nil)).Elem()
}

func (i TimeChartLegendOptionsFieldArgs) ToTimeChartLegendOptionsFieldOutput() TimeChartLegendOptionsFieldOutput {
	return i.ToTimeChartLegendOptionsFieldOutputWithContext(context.Background())
}

func (i TimeChartLegendOptionsFieldArgs) ToTimeChartLegendOptionsFieldOutputWithContext(ctx context.Context) TimeChartLegendOptionsFieldOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TimeChartLegendOptionsFieldOutput)
}

// TimeChartLegendOptionsFieldArrayInput is an input type that accepts TimeChartLegendOptionsFieldArray and TimeChartLegendOptionsFieldArrayOutput values.
// You can construct a concrete instance of `TimeChartLegendOptionsFieldArrayInput` via:
//
//          TimeChartLegendOptionsFieldArray{ TimeChartLegendOptionsFieldArgs{...} }
type TimeChartLegendOptionsFieldArrayInput interface {
	pulumi.Input

	ToTimeChartLegendOptionsFieldArrayOutput() TimeChartLegendOptionsFieldArrayOutput
	ToTimeChartLegendOptionsFieldArrayOutputWithContext(context.Context) TimeChartLegendOptionsFieldArrayOutput
}

type TimeChartLegendOptionsFieldArray []TimeChartLegendOptionsFieldInput

func (TimeChartLegendOptionsFieldArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TimeChartLegendOptionsField)(nil)).Elem()
}

func (i TimeChartLegendOptionsFieldArray) ToTimeChartLegendOptionsFieldArrayOutput() TimeChartLegendOptionsFieldArrayOutput {
	return i.ToTimeChartLegendOptionsFieldArrayOutputWithContext(context.Background())
}

func (i TimeChartLegendOptionsFieldArray) ToTimeChartLegendOptionsFieldArrayOutputWithContext(ctx context.Context) TimeChartLegendOptionsFieldArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TimeChartLegendOptionsFieldArrayOutput)
}

type TimeChartLegendOptionsFieldOutput struct{ *pulumi.OutputState }

func (TimeChartLegendOptionsFieldOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TimeChartLegendOptionsField)(nil)).Elem()
}

func (o TimeChartLegendOptionsFieldOutput) ToTimeChartLegendOptionsFieldOutput() TimeChartLegendOptionsFieldOutput {
	return o
}

func (o TimeChartLegendOptionsFieldOutput) ToTimeChartLegendOptionsFieldOutputWithContext(ctx context.Context) TimeChartLegendOptionsFieldOutput {
	return o
}

// True or False depending on if you want the property to be shown or hidden.
func (o TimeChartLegendOptionsFieldOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v TimeChartLegendOptionsField) *bool { return v.Enabled }).(pulumi.BoolPtrOutput)
}

// The name of the property to display. Note the special values of `plotLabel` (corresponding with the API's `sfMetric`) which shows the label of the time series `publish()` and `metric` (corresponding with the API's `sf_originatingMetric`) that shows the name of the metric for the time series being displayed.
func (o TimeChartLegendOptionsFieldOutput) Property() pulumi.StringOutput {
	return o.ApplyT(func(v TimeChartLegendOptionsField) string { return v.Property }).(pulumi.StringOutput)
}

type TimeChartLegendOptionsFieldArrayOutput struct{ *pulumi.OutputState }

func (TimeChartLegendOptionsFieldArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TimeChartLegendOptionsField)(nil)).Elem()
}

func (o TimeChartLegendOptionsFieldArrayOutput) ToTimeChartLegendOptionsFieldArrayOutput() TimeChartLegendOptionsFieldArrayOutput {
	return o
}

func (o TimeChartLegendOptionsFieldArrayOutput) ToTimeChartLegendOptionsFieldArrayOutputWithContext(ctx context.Context) TimeChartLegendOptionsFieldArrayOutput {
	return o
}

func (o TimeChartLegendOptionsFieldArrayOutput) Index(i pulumi.IntInput) TimeChartLegendOptionsFieldOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) TimeChartLegendOptionsField {
		return vs[0].([]TimeChartLegendOptionsField)[vs[1].(int)]
	}).(TimeChartLegendOptionsFieldOutput)
}

type TimeChartVizOption struct {
	// Y-axis associated with values for this plot. Must be either `right` or `left`.
	Axis *string `pulumi:"axis"`
	// Color to use : gray, blue, azure, navy, brown, orange, yellow, iris, magenta, pink, purple, violet, lilac, emerald, green, aquamarine.
	Color *string `pulumi:"color"`
	// Specifies an alternate value for the Plot Name column of the Data Table associated with the chart.
	DisplayName *string `pulumi:"displayName"`
	// Label used in the publish statement that displays the event query you want to customize.
	Label string `pulumi:"label"`
	// The visualization style to use. Must be `"LineChart"`, `"AreaChart"`, `"ColumnChart"`, or `"Histogram"`. Chart level `plotType` by default.
	PlotType    *string `pulumi:"plotType"`
	ValuePrefix *string `pulumi:"valuePrefix"`
	ValueSuffix *string `pulumi:"valueSuffix"`
	// A unit to attach to this plot. Units support automatic scaling (eg thousands of bytes will be displayed as kilobytes). Values values are `Bit, Kilobit, Megabit, Gigabit, Terabit, Petabit, Exabit, Zettabit, Yottabit, Byte, Kibibyte, Mebibyte, Gigibyte, Tebibyte, Pebibyte, Exbibyte, Zebibyte, Yobibyte, Nanosecond, Microsecond, Millisecond, Second, Minute, Hour, Day, Week`.
	// * `valuePrefix`, `valueSuffix` - (Optional) Arbitrary prefix/suffix to display with the value of this plot.
	ValueUnit *string `pulumi:"valueUnit"`
}

// TimeChartVizOptionInput is an input type that accepts TimeChartVizOptionArgs and TimeChartVizOptionOutput values.
// You can construct a concrete instance of `TimeChartVizOptionInput` via:
//
//          TimeChartVizOptionArgs{...}
type TimeChartVizOptionInput interface {
	pulumi.Input

	ToTimeChartVizOptionOutput() TimeChartVizOptionOutput
	ToTimeChartVizOptionOutputWithContext(context.Context) TimeChartVizOptionOutput
}

type TimeChartVizOptionArgs struct {
	// Y-axis associated with values for this plot. Must be either `right` or `left`.
	Axis pulumi.StringPtrInput `pulumi:"axis"`
	// Color to use : gray, blue, azure, navy, brown, orange, yellow, iris, magenta, pink, purple, violet, lilac, emerald, green, aquamarine.
	Color pulumi.StringPtrInput `pulumi:"color"`
	// Specifies an alternate value for the Plot Name column of the Data Table associated with the chart.
	DisplayName pulumi.StringPtrInput `pulumi:"displayName"`
	// Label used in the publish statement that displays the event query you want to customize.
	Label pulumi.StringInput `pulumi:"label"`
	// The visualization style to use. Must be `"LineChart"`, `"AreaChart"`, `"ColumnChart"`, or `"Histogram"`. Chart level `plotType` by default.
	PlotType    pulumi.StringPtrInput `pulumi:"plotType"`
	ValuePrefix pulumi.StringPtrInput `pulumi:"valuePrefix"`
	ValueSuffix pulumi.StringPtrInput `pulumi:"valueSuffix"`
	// A unit to attach to this plot. Units support automatic scaling (eg thousands of bytes will be displayed as kilobytes). Values values are `Bit, Kilobit, Megabit, Gigabit, Terabit, Petabit, Exabit, Zettabit, Yottabit, Byte, Kibibyte, Mebibyte, Gigibyte, Tebibyte, Pebibyte, Exbibyte, Zebibyte, Yobibyte, Nanosecond, Microsecond, Millisecond, Second, Minute, Hour, Day, Week`.
	// * `valuePrefix`, `valueSuffix` - (Optional) Arbitrary prefix/suffix to display with the value of this plot.
	ValueUnit pulumi.StringPtrInput `pulumi:"valueUnit"`
}

func (TimeChartVizOptionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TimeChartVizOption)(nil)).Elem()
}

func (i TimeChartVizOptionArgs) ToTimeChartVizOptionOutput() TimeChartVizOptionOutput {
	return i.ToTimeChartVizOptionOutputWithContext(context.Background())
}

func (i TimeChartVizOptionArgs) ToTimeChartVizOptionOutputWithContext(ctx context.Context) TimeChartVizOptionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TimeChartVizOptionOutput)
}

// TimeChartVizOptionArrayInput is an input type that accepts TimeChartVizOptionArray and TimeChartVizOptionArrayOutput values.
// You can construct a concrete instance of `TimeChartVizOptionArrayInput` via:
//
//          TimeChartVizOptionArray{ TimeChartVizOptionArgs{...} }
type TimeChartVizOptionArrayInput interface {
	pulumi.Input

	ToTimeChartVizOptionArrayOutput() TimeChartVizOptionArrayOutput
	ToTimeChartVizOptionArrayOutputWithContext(context.Context) TimeChartVizOptionArrayOutput
}

type TimeChartVizOptionArray []TimeChartVizOptionInput

func (TimeChartVizOptionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TimeChartVizOption)(nil)).Elem()
}

func (i TimeChartVizOptionArray) ToTimeChartVizOptionArrayOutput() TimeChartVizOptionArrayOutput {
	return i.ToTimeChartVizOptionArrayOutputWithContext(context.Background())
}

func (i TimeChartVizOptionArray) ToTimeChartVizOptionArrayOutputWithContext(ctx context.Context) TimeChartVizOptionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TimeChartVizOptionArrayOutput)
}

type TimeChartVizOptionOutput struct{ *pulumi.OutputState }

func (TimeChartVizOptionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TimeChartVizOption)(nil)).Elem()
}

func (o TimeChartVizOptionOutput) ToTimeChartVizOptionOutput() TimeChartVizOptionOutput {
	return o
}

func (o TimeChartVizOptionOutput) ToTimeChartVizOptionOutputWithContext(ctx context.Context) TimeChartVizOptionOutput {
	return o
}

// Y-axis associated with values for this plot. Must be either `right` or `left`.
func (o TimeChartVizOptionOutput) Axis() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TimeChartVizOption) *string { return v.Axis }).(pulumi.StringPtrOutput)
}

// Color to use : gray, blue, azure, navy, brown, orange, yellow, iris, magenta, pink, purple, violet, lilac, emerald, green, aquamarine.
func (o TimeChartVizOptionOutput) Color() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TimeChartVizOption) *string { return v.Color }).(pulumi.StringPtrOutput)
}

// Specifies an alternate value for the Plot Name column of the Data Table associated with the chart.
func (o TimeChartVizOptionOutput) DisplayName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TimeChartVizOption) *string { return v.DisplayName }).(pulumi.StringPtrOutput)
}

// Label used in the publish statement that displays the event query you want to customize.
func (o TimeChartVizOptionOutput) Label() pulumi.StringOutput {
	return o.ApplyT(func(v TimeChartVizOption) string { return v.Label }).(pulumi.StringOutput)
}

// The visualization style to use. Must be `"LineChart"`, `"AreaChart"`, `"ColumnChart"`, or `"Histogram"`. Chart level `plotType` by default.
func (o TimeChartVizOptionOutput) PlotType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TimeChartVizOption) *string { return v.PlotType }).(pulumi.StringPtrOutput)
}

func (o TimeChartVizOptionOutput) ValuePrefix() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TimeChartVizOption) *string { return v.ValuePrefix }).(pulumi.StringPtrOutput)
}

func (o TimeChartVizOptionOutput) ValueSuffix() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TimeChartVizOption) *string { return v.ValueSuffix }).(pulumi.StringPtrOutput)
}

// A unit to attach to this plot. Units support automatic scaling (eg thousands of bytes will be displayed as kilobytes). Values values are `Bit, Kilobit, Megabit, Gigabit, Terabit, Petabit, Exabit, Zettabit, Yottabit, Byte, Kibibyte, Mebibyte, Gigibyte, Tebibyte, Pebibyte, Exbibyte, Zebibyte, Yobibyte, Nanosecond, Microsecond, Millisecond, Second, Minute, Hour, Day, Week`.
// * `valuePrefix`, `valueSuffix` - (Optional) Arbitrary prefix/suffix to display with the value of this plot.
func (o TimeChartVizOptionOutput) ValueUnit() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TimeChartVizOption) *string { return v.ValueUnit }).(pulumi.StringPtrOutput)
}

type TimeChartVizOptionArrayOutput struct{ *pulumi.OutputState }

func (TimeChartVizOptionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TimeChartVizOption)(nil)).Elem()
}

func (o TimeChartVizOptionArrayOutput) ToTimeChartVizOptionArrayOutput() TimeChartVizOptionArrayOutput {
	return o
}

func (o TimeChartVizOptionArrayOutput) ToTimeChartVizOptionArrayOutputWithContext(ctx context.Context) TimeChartVizOptionArrayOutput {
	return o
}

func (o TimeChartVizOptionArrayOutput) Index(i pulumi.IntInput) TimeChartVizOptionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) TimeChartVizOption {
		return vs[0].([]TimeChartVizOption)[vs[1].(int)]
	}).(TimeChartVizOptionOutput)
}

type WebhookIntegrationHeader struct {
	// The key of the header to send
	HeaderKey string `pulumi:"headerKey"`
	// The value of the header to send
	HeaderValue string `pulumi:"headerValue"`
}

// WebhookIntegrationHeaderInput is an input type that accepts WebhookIntegrationHeaderArgs and WebhookIntegrationHeaderOutput values.
// You can construct a concrete instance of `WebhookIntegrationHeaderInput` via:
//
//          WebhookIntegrationHeaderArgs{...}
type WebhookIntegrationHeaderInput interface {
	pulumi.Input

	ToWebhookIntegrationHeaderOutput() WebhookIntegrationHeaderOutput
	ToWebhookIntegrationHeaderOutputWithContext(context.Context) WebhookIntegrationHeaderOutput
}

type WebhookIntegrationHeaderArgs struct {
	// The key of the header to send
	HeaderKey pulumi.StringInput `pulumi:"headerKey"`
	// The value of the header to send
	HeaderValue pulumi.StringInput `pulumi:"headerValue"`
}

func (WebhookIntegrationHeaderArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*WebhookIntegrationHeader)(nil)).Elem()
}

func (i WebhookIntegrationHeaderArgs) ToWebhookIntegrationHeaderOutput() WebhookIntegrationHeaderOutput {
	return i.ToWebhookIntegrationHeaderOutputWithContext(context.Background())
}

func (i WebhookIntegrationHeaderArgs) ToWebhookIntegrationHeaderOutputWithContext(ctx context.Context) WebhookIntegrationHeaderOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WebhookIntegrationHeaderOutput)
}

// WebhookIntegrationHeaderArrayInput is an input type that accepts WebhookIntegrationHeaderArray and WebhookIntegrationHeaderArrayOutput values.
// You can construct a concrete instance of `WebhookIntegrationHeaderArrayInput` via:
//
//          WebhookIntegrationHeaderArray{ WebhookIntegrationHeaderArgs{...} }
type WebhookIntegrationHeaderArrayInput interface {
	pulumi.Input

	ToWebhookIntegrationHeaderArrayOutput() WebhookIntegrationHeaderArrayOutput
	ToWebhookIntegrationHeaderArrayOutputWithContext(context.Context) WebhookIntegrationHeaderArrayOutput
}

type WebhookIntegrationHeaderArray []WebhookIntegrationHeaderInput

func (WebhookIntegrationHeaderArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]WebhookIntegrationHeader)(nil)).Elem()
}

func (i WebhookIntegrationHeaderArray) ToWebhookIntegrationHeaderArrayOutput() WebhookIntegrationHeaderArrayOutput {
	return i.ToWebhookIntegrationHeaderArrayOutputWithContext(context.Background())
}

func (i WebhookIntegrationHeaderArray) ToWebhookIntegrationHeaderArrayOutputWithContext(ctx context.Context) WebhookIntegrationHeaderArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WebhookIntegrationHeaderArrayOutput)
}

type WebhookIntegrationHeaderOutput struct{ *pulumi.OutputState }

func (WebhookIntegrationHeaderOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*WebhookIntegrationHeader)(nil)).Elem()
}

func (o WebhookIntegrationHeaderOutput) ToWebhookIntegrationHeaderOutput() WebhookIntegrationHeaderOutput {
	return o
}

func (o WebhookIntegrationHeaderOutput) ToWebhookIntegrationHeaderOutputWithContext(ctx context.Context) WebhookIntegrationHeaderOutput {
	return o
}

// The key of the header to send
func (o WebhookIntegrationHeaderOutput) HeaderKey() pulumi.StringOutput {
	return o.ApplyT(func(v WebhookIntegrationHeader) string { return v.HeaderKey }).(pulumi.StringOutput)
}

// The value of the header to send
func (o WebhookIntegrationHeaderOutput) HeaderValue() pulumi.StringOutput {
	return o.ApplyT(func(v WebhookIntegrationHeader) string { return v.HeaderValue }).(pulumi.StringOutput)
}

type WebhookIntegrationHeaderArrayOutput struct{ *pulumi.OutputState }

func (WebhookIntegrationHeaderArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]WebhookIntegrationHeader)(nil)).Elem()
}

func (o WebhookIntegrationHeaderArrayOutput) ToWebhookIntegrationHeaderArrayOutput() WebhookIntegrationHeaderArrayOutput {
	return o
}

func (o WebhookIntegrationHeaderArrayOutput) ToWebhookIntegrationHeaderArrayOutputWithContext(ctx context.Context) WebhookIntegrationHeaderArrayOutput {
	return o
}

func (o WebhookIntegrationHeaderArrayOutput) Index(i pulumi.IntInput) WebhookIntegrationHeaderOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) WebhookIntegrationHeader {
		return vs[0].([]WebhookIntegrationHeader)[vs[1].(int)]
	}).(WebhookIntegrationHeaderOutput)
}

type GetAwsServicesService struct {
	Name string `pulumi:"name"`
}

// GetAwsServicesServiceInput is an input type that accepts GetAwsServicesServiceArgs and GetAwsServicesServiceOutput values.
// You can construct a concrete instance of `GetAwsServicesServiceInput` via:
//
//          GetAwsServicesServiceArgs{...}
type GetAwsServicesServiceInput interface {
	pulumi.Input

	ToGetAwsServicesServiceOutput() GetAwsServicesServiceOutput
	ToGetAwsServicesServiceOutputWithContext(context.Context) GetAwsServicesServiceOutput
}

type GetAwsServicesServiceArgs struct {
	Name pulumi.StringInput `pulumi:"name"`
}

func (GetAwsServicesServiceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetAwsServicesService)(nil)).Elem()
}

func (i GetAwsServicesServiceArgs) ToGetAwsServicesServiceOutput() GetAwsServicesServiceOutput {
	return i.ToGetAwsServicesServiceOutputWithContext(context.Background())
}

func (i GetAwsServicesServiceArgs) ToGetAwsServicesServiceOutputWithContext(ctx context.Context) GetAwsServicesServiceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetAwsServicesServiceOutput)
}

// GetAwsServicesServiceArrayInput is an input type that accepts GetAwsServicesServiceArray and GetAwsServicesServiceArrayOutput values.
// You can construct a concrete instance of `GetAwsServicesServiceArrayInput` via:
//
//          GetAwsServicesServiceArray{ GetAwsServicesServiceArgs{...} }
type GetAwsServicesServiceArrayInput interface {
	pulumi.Input

	ToGetAwsServicesServiceArrayOutput() GetAwsServicesServiceArrayOutput
	ToGetAwsServicesServiceArrayOutputWithContext(context.Context) GetAwsServicesServiceArrayOutput
}

type GetAwsServicesServiceArray []GetAwsServicesServiceInput

func (GetAwsServicesServiceArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetAwsServicesService)(nil)).Elem()
}

func (i GetAwsServicesServiceArray) ToGetAwsServicesServiceArrayOutput() GetAwsServicesServiceArrayOutput {
	return i.ToGetAwsServicesServiceArrayOutputWithContext(context.Background())
}

func (i GetAwsServicesServiceArray) ToGetAwsServicesServiceArrayOutputWithContext(ctx context.Context) GetAwsServicesServiceArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetAwsServicesServiceArrayOutput)
}

type GetAwsServicesServiceOutput struct{ *pulumi.OutputState }

func (GetAwsServicesServiceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetAwsServicesService)(nil)).Elem()
}

func (o GetAwsServicesServiceOutput) ToGetAwsServicesServiceOutput() GetAwsServicesServiceOutput {
	return o
}

func (o GetAwsServicesServiceOutput) ToGetAwsServicesServiceOutputWithContext(ctx context.Context) GetAwsServicesServiceOutput {
	return o
}

func (o GetAwsServicesServiceOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetAwsServicesService) string { return v.Name }).(pulumi.StringOutput)
}

type GetAwsServicesServiceArrayOutput struct{ *pulumi.OutputState }

func (GetAwsServicesServiceArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetAwsServicesService)(nil)).Elem()
}

func (o GetAwsServicesServiceArrayOutput) ToGetAwsServicesServiceArrayOutput() GetAwsServicesServiceArrayOutput {
	return o
}

func (o GetAwsServicesServiceArrayOutput) ToGetAwsServicesServiceArrayOutputWithContext(ctx context.Context) GetAwsServicesServiceArrayOutput {
	return o
}

func (o GetAwsServicesServiceArrayOutput) Index(i pulumi.IntInput) GetAwsServicesServiceOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetAwsServicesService {
		return vs[0].([]GetAwsServicesService)[vs[1].(int)]
	}).(GetAwsServicesServiceOutput)
}

type GetAzureServicesService struct {
	Name string `pulumi:"name"`
}

// GetAzureServicesServiceInput is an input type that accepts GetAzureServicesServiceArgs and GetAzureServicesServiceOutput values.
// You can construct a concrete instance of `GetAzureServicesServiceInput` via:
//
//          GetAzureServicesServiceArgs{...}
type GetAzureServicesServiceInput interface {
	pulumi.Input

	ToGetAzureServicesServiceOutput() GetAzureServicesServiceOutput
	ToGetAzureServicesServiceOutputWithContext(context.Context) GetAzureServicesServiceOutput
}

type GetAzureServicesServiceArgs struct {
	Name pulumi.StringInput `pulumi:"name"`
}

func (GetAzureServicesServiceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetAzureServicesService)(nil)).Elem()
}

func (i GetAzureServicesServiceArgs) ToGetAzureServicesServiceOutput() GetAzureServicesServiceOutput {
	return i.ToGetAzureServicesServiceOutputWithContext(context.Background())
}

func (i GetAzureServicesServiceArgs) ToGetAzureServicesServiceOutputWithContext(ctx context.Context) GetAzureServicesServiceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetAzureServicesServiceOutput)
}

// GetAzureServicesServiceArrayInput is an input type that accepts GetAzureServicesServiceArray and GetAzureServicesServiceArrayOutput values.
// You can construct a concrete instance of `GetAzureServicesServiceArrayInput` via:
//
//          GetAzureServicesServiceArray{ GetAzureServicesServiceArgs{...} }
type GetAzureServicesServiceArrayInput interface {
	pulumi.Input

	ToGetAzureServicesServiceArrayOutput() GetAzureServicesServiceArrayOutput
	ToGetAzureServicesServiceArrayOutputWithContext(context.Context) GetAzureServicesServiceArrayOutput
}

type GetAzureServicesServiceArray []GetAzureServicesServiceInput

func (GetAzureServicesServiceArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetAzureServicesService)(nil)).Elem()
}

func (i GetAzureServicesServiceArray) ToGetAzureServicesServiceArrayOutput() GetAzureServicesServiceArrayOutput {
	return i.ToGetAzureServicesServiceArrayOutputWithContext(context.Background())
}

func (i GetAzureServicesServiceArray) ToGetAzureServicesServiceArrayOutputWithContext(ctx context.Context) GetAzureServicesServiceArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetAzureServicesServiceArrayOutput)
}

type GetAzureServicesServiceOutput struct{ *pulumi.OutputState }

func (GetAzureServicesServiceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetAzureServicesService)(nil)).Elem()
}

func (o GetAzureServicesServiceOutput) ToGetAzureServicesServiceOutput() GetAzureServicesServiceOutput {
	return o
}

func (o GetAzureServicesServiceOutput) ToGetAzureServicesServiceOutputWithContext(ctx context.Context) GetAzureServicesServiceOutput {
	return o
}

func (o GetAzureServicesServiceOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetAzureServicesService) string { return v.Name }).(pulumi.StringOutput)
}

type GetAzureServicesServiceArrayOutput struct{ *pulumi.OutputState }

func (GetAzureServicesServiceArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetAzureServicesService)(nil)).Elem()
}

func (o GetAzureServicesServiceArrayOutput) ToGetAzureServicesServiceArrayOutput() GetAzureServicesServiceArrayOutput {
	return o
}

func (o GetAzureServicesServiceArrayOutput) ToGetAzureServicesServiceArrayOutputWithContext(ctx context.Context) GetAzureServicesServiceArrayOutput {
	return o
}

func (o GetAzureServicesServiceArrayOutput) Index(i pulumi.IntInput) GetAzureServicesServiceOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetAzureServicesService {
		return vs[0].([]GetAzureServicesService)[vs[1].(int)]
	}).(GetAzureServicesServiceOutput)
}

func init() {
	pulumi.RegisterOutputType(AlertMutingRuleFilterOutput{})
	pulumi.RegisterOutputType(AlertMutingRuleFilterArrayOutput{})
	pulumi.RegisterOutputType(DashboardChartOutput{})
	pulumi.RegisterOutputType(DashboardChartArrayOutput{})
	pulumi.RegisterOutputType(DashboardColumnOutput{})
	pulumi.RegisterOutputType(DashboardColumnArrayOutput{})
	pulumi.RegisterOutputType(DashboardEventOverlayOutput{})
	pulumi.RegisterOutputType(DashboardEventOverlayArrayOutput{})
	pulumi.RegisterOutputType(DashboardEventOverlaySourceOutput{})
	pulumi.RegisterOutputType(DashboardEventOverlaySourceArrayOutput{})
	pulumi.RegisterOutputType(DashboardFilterOutput{})
	pulumi.RegisterOutputType(DashboardFilterArrayOutput{})
	pulumi.RegisterOutputType(DashboardGridOutput{})
	pulumi.RegisterOutputType(DashboardGridArrayOutput{})
	pulumi.RegisterOutputType(DashboardGroupDashboardOutput{})
	pulumi.RegisterOutputType(DashboardGroupDashboardArrayOutput{})
	pulumi.RegisterOutputType(DashboardGroupDashboardFilterOverrideOutput{})
	pulumi.RegisterOutputType(DashboardGroupDashboardFilterOverrideArrayOutput{})
	pulumi.RegisterOutputType(DashboardGroupDashboardVariableOverrideOutput{})
	pulumi.RegisterOutputType(DashboardGroupDashboardVariableOverrideArrayOutput{})
	pulumi.RegisterOutputType(DashboardGroupImportQualifierOutput{})
	pulumi.RegisterOutputType(DashboardGroupImportQualifierArrayOutput{})
	pulumi.RegisterOutputType(DashboardGroupImportQualifierFilterOutput{})
	pulumi.RegisterOutputType(DashboardGroupImportQualifierFilterArrayOutput{})
	pulumi.RegisterOutputType(DashboardSelectedEventOverlayOutput{})
	pulumi.RegisterOutputType(DashboardSelectedEventOverlayArrayOutput{})
	pulumi.RegisterOutputType(DashboardSelectedEventOverlaySourceOutput{})
	pulumi.RegisterOutputType(DashboardSelectedEventOverlaySourceArrayOutput{})
	pulumi.RegisterOutputType(DashboardVariableOutput{})
	pulumi.RegisterOutputType(DashboardVariableArrayOutput{})
	pulumi.RegisterOutputType(DataLinkTargetExternalUrlOutput{})
	pulumi.RegisterOutputType(DataLinkTargetExternalUrlArrayOutput{})
	pulumi.RegisterOutputType(DataLinkTargetSignalfxDashboardOutput{})
	pulumi.RegisterOutputType(DataLinkTargetSignalfxDashboardArrayOutput{})
	pulumi.RegisterOutputType(DataLinkTargetSplunkOutput{})
	pulumi.RegisterOutputType(DataLinkTargetSplunkArrayOutput{})
	pulumi.RegisterOutputType(DetectorRuleOutput{})
	pulumi.RegisterOutputType(DetectorRuleArrayOutput{})
	pulumi.RegisterOutputType(DetectorVizOptionOutput{})
	pulumi.RegisterOutputType(DetectorVizOptionArrayOutput{})
	pulumi.RegisterOutputType(HeatmapChartColorRangeOutput{})
	pulumi.RegisterOutputType(HeatmapChartColorRangePtrOutput{})
	pulumi.RegisterOutputType(HeatmapChartColorScaleOutput{})
	pulumi.RegisterOutputType(HeatmapChartColorScaleArrayOutput{})
	pulumi.RegisterOutputType(ListChartColorScaleOutput{})
	pulumi.RegisterOutputType(ListChartColorScaleArrayOutput{})
	pulumi.RegisterOutputType(ListChartLegendOptionsFieldOutput{})
	pulumi.RegisterOutputType(ListChartLegendOptionsFieldArrayOutput{})
	pulumi.RegisterOutputType(ListChartVizOptionOutput{})
	pulumi.RegisterOutputType(ListChartVizOptionArrayOutput{})
	pulumi.RegisterOutputType(OrgTokenDpmLimitsOutput{})
	pulumi.RegisterOutputType(OrgTokenDpmLimitsPtrOutput{})
	pulumi.RegisterOutputType(OrgTokenHostOrUsageLimitsOutput{})
	pulumi.RegisterOutputType(OrgTokenHostOrUsageLimitsPtrOutput{})
	pulumi.RegisterOutputType(SingleValueChartColorScaleOutput{})
	pulumi.RegisterOutputType(SingleValueChartColorScaleArrayOutput{})
	pulumi.RegisterOutputType(SingleValueChartVizOptionOutput{})
	pulumi.RegisterOutputType(SingleValueChartVizOptionArrayOutput{})
	pulumi.RegisterOutputType(TimeChartAxisLeftOutput{})
	pulumi.RegisterOutputType(TimeChartAxisLeftPtrOutput{})
	pulumi.RegisterOutputType(TimeChartAxisLeftWatermarkOutput{})
	pulumi.RegisterOutputType(TimeChartAxisLeftWatermarkArrayOutput{})
	pulumi.RegisterOutputType(TimeChartAxisRightOutput{})
	pulumi.RegisterOutputType(TimeChartAxisRightPtrOutput{})
	pulumi.RegisterOutputType(TimeChartAxisRightWatermarkOutput{})
	pulumi.RegisterOutputType(TimeChartAxisRightWatermarkArrayOutput{})
	pulumi.RegisterOutputType(TimeChartEventOptionOutput{})
	pulumi.RegisterOutputType(TimeChartEventOptionArrayOutput{})
	pulumi.RegisterOutputType(TimeChartHistogramOptionOutput{})
	pulumi.RegisterOutputType(TimeChartHistogramOptionArrayOutput{})
	pulumi.RegisterOutputType(TimeChartLegendOptionsFieldOutput{})
	pulumi.RegisterOutputType(TimeChartLegendOptionsFieldArrayOutput{})
	pulumi.RegisterOutputType(TimeChartVizOptionOutput{})
	pulumi.RegisterOutputType(TimeChartVizOptionArrayOutput{})
	pulumi.RegisterOutputType(WebhookIntegrationHeaderOutput{})
	pulumi.RegisterOutputType(WebhookIntegrationHeaderArrayOutput{})
	pulumi.RegisterOutputType(GetAwsServicesServiceOutput{})
	pulumi.RegisterOutputType(GetAwsServicesServiceArrayOutput{})
	pulumi.RegisterOutputType(GetAzureServicesServiceOutput{})
	pulumi.RegisterOutputType(GetAzureServicesServiceArrayOutput{})
}
