// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package signalfx

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-signalfx/sdk/v7/go/signalfx/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

var _ = internal.GetEnvOrDefault

type AlertMutingRuleFilter struct {
	// Determines if this is a "not" filter. Defaults to `false`.
	Negated *bool `pulumi:"negated"`
	// The property to filter.
	Property string `pulumi:"property"`
	// The property value to filter.
	PropertyValue string `pulumi:"propertyValue"`
}

// AlertMutingRuleFilterInput is an input type that accepts AlertMutingRuleFilterArgs and AlertMutingRuleFilterOutput values.
// You can construct a concrete instance of `AlertMutingRuleFilterInput` via:
//
//	AlertMutingRuleFilterArgs{...}
type AlertMutingRuleFilterInput interface {
	pulumi.Input

	ToAlertMutingRuleFilterOutput() AlertMutingRuleFilterOutput
	ToAlertMutingRuleFilterOutputWithContext(context.Context) AlertMutingRuleFilterOutput
}

type AlertMutingRuleFilterArgs struct {
	// Determines if this is a "not" filter. Defaults to `false`.
	Negated pulumi.BoolPtrInput `pulumi:"negated"`
	// The property to filter.
	Property pulumi.StringInput `pulumi:"property"`
	// The property value to filter.
	PropertyValue pulumi.StringInput `pulumi:"propertyValue"`
}

func (AlertMutingRuleFilterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AlertMutingRuleFilter)(nil)).Elem()
}

func (i AlertMutingRuleFilterArgs) ToAlertMutingRuleFilterOutput() AlertMutingRuleFilterOutput {
	return i.ToAlertMutingRuleFilterOutputWithContext(context.Background())
}

func (i AlertMutingRuleFilterArgs) ToAlertMutingRuleFilterOutputWithContext(ctx context.Context) AlertMutingRuleFilterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertMutingRuleFilterOutput)
}

// AlertMutingRuleFilterArrayInput is an input type that accepts AlertMutingRuleFilterArray and AlertMutingRuleFilterArrayOutput values.
// You can construct a concrete instance of `AlertMutingRuleFilterArrayInput` via:
//
//	AlertMutingRuleFilterArray{ AlertMutingRuleFilterArgs{...} }
type AlertMutingRuleFilterArrayInput interface {
	pulumi.Input

	ToAlertMutingRuleFilterArrayOutput() AlertMutingRuleFilterArrayOutput
	ToAlertMutingRuleFilterArrayOutputWithContext(context.Context) AlertMutingRuleFilterArrayOutput
}

type AlertMutingRuleFilterArray []AlertMutingRuleFilterInput

func (AlertMutingRuleFilterArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AlertMutingRuleFilter)(nil)).Elem()
}

func (i AlertMutingRuleFilterArray) ToAlertMutingRuleFilterArrayOutput() AlertMutingRuleFilterArrayOutput {
	return i.ToAlertMutingRuleFilterArrayOutputWithContext(context.Background())
}

func (i AlertMutingRuleFilterArray) ToAlertMutingRuleFilterArrayOutputWithContext(ctx context.Context) AlertMutingRuleFilterArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertMutingRuleFilterArrayOutput)
}

type AlertMutingRuleFilterOutput struct{ *pulumi.OutputState }

func (AlertMutingRuleFilterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AlertMutingRuleFilter)(nil)).Elem()
}

func (o AlertMutingRuleFilterOutput) ToAlertMutingRuleFilterOutput() AlertMutingRuleFilterOutput {
	return o
}

func (o AlertMutingRuleFilterOutput) ToAlertMutingRuleFilterOutputWithContext(ctx context.Context) AlertMutingRuleFilterOutput {
	return o
}

// Determines if this is a "not" filter. Defaults to `false`.
func (o AlertMutingRuleFilterOutput) Negated() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v AlertMutingRuleFilter) *bool { return v.Negated }).(pulumi.BoolPtrOutput)
}

// The property to filter.
func (o AlertMutingRuleFilterOutput) Property() pulumi.StringOutput {
	return o.ApplyT(func(v AlertMutingRuleFilter) string { return v.Property }).(pulumi.StringOutput)
}

// The property value to filter.
func (o AlertMutingRuleFilterOutput) PropertyValue() pulumi.StringOutput {
	return o.ApplyT(func(v AlertMutingRuleFilter) string { return v.PropertyValue }).(pulumi.StringOutput)
}

type AlertMutingRuleFilterArrayOutput struct{ *pulumi.OutputState }

func (AlertMutingRuleFilterArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AlertMutingRuleFilter)(nil)).Elem()
}

func (o AlertMutingRuleFilterArrayOutput) ToAlertMutingRuleFilterArrayOutput() AlertMutingRuleFilterArrayOutput {
	return o
}

func (o AlertMutingRuleFilterArrayOutput) ToAlertMutingRuleFilterArrayOutputWithContext(ctx context.Context) AlertMutingRuleFilterArrayOutput {
	return o
}

func (o AlertMutingRuleFilterArrayOutput) Index(i pulumi.IntInput) AlertMutingRuleFilterOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) AlertMutingRuleFilter {
		return vs[0].([]AlertMutingRuleFilter)[vs[1].(int)]
	}).(AlertMutingRuleFilterOutput)
}

type AlertMutingRuleRecurrence struct {
	// The unit of the period. Can be days (d) or weeks (w).
	Unit string `pulumi:"unit"`
	// The amount of time, expressed as an integer, applicable to the unit specified.
	Value int `pulumi:"value"`
}

// AlertMutingRuleRecurrenceInput is an input type that accepts AlertMutingRuleRecurrenceArgs and AlertMutingRuleRecurrenceOutput values.
// You can construct a concrete instance of `AlertMutingRuleRecurrenceInput` via:
//
//	AlertMutingRuleRecurrenceArgs{...}
type AlertMutingRuleRecurrenceInput interface {
	pulumi.Input

	ToAlertMutingRuleRecurrenceOutput() AlertMutingRuleRecurrenceOutput
	ToAlertMutingRuleRecurrenceOutputWithContext(context.Context) AlertMutingRuleRecurrenceOutput
}

type AlertMutingRuleRecurrenceArgs struct {
	// The unit of the period. Can be days (d) or weeks (w).
	Unit pulumi.StringInput `pulumi:"unit"`
	// The amount of time, expressed as an integer, applicable to the unit specified.
	Value pulumi.IntInput `pulumi:"value"`
}

func (AlertMutingRuleRecurrenceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AlertMutingRuleRecurrence)(nil)).Elem()
}

func (i AlertMutingRuleRecurrenceArgs) ToAlertMutingRuleRecurrenceOutput() AlertMutingRuleRecurrenceOutput {
	return i.ToAlertMutingRuleRecurrenceOutputWithContext(context.Background())
}

func (i AlertMutingRuleRecurrenceArgs) ToAlertMutingRuleRecurrenceOutputWithContext(ctx context.Context) AlertMutingRuleRecurrenceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertMutingRuleRecurrenceOutput)
}

func (i AlertMutingRuleRecurrenceArgs) ToAlertMutingRuleRecurrencePtrOutput() AlertMutingRuleRecurrencePtrOutput {
	return i.ToAlertMutingRuleRecurrencePtrOutputWithContext(context.Background())
}

func (i AlertMutingRuleRecurrenceArgs) ToAlertMutingRuleRecurrencePtrOutputWithContext(ctx context.Context) AlertMutingRuleRecurrencePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertMutingRuleRecurrenceOutput).ToAlertMutingRuleRecurrencePtrOutputWithContext(ctx)
}

// AlertMutingRuleRecurrencePtrInput is an input type that accepts AlertMutingRuleRecurrenceArgs, AlertMutingRuleRecurrencePtr and AlertMutingRuleRecurrencePtrOutput values.
// You can construct a concrete instance of `AlertMutingRuleRecurrencePtrInput` via:
//
//	        AlertMutingRuleRecurrenceArgs{...}
//
//	or:
//
//	        nil
type AlertMutingRuleRecurrencePtrInput interface {
	pulumi.Input

	ToAlertMutingRuleRecurrencePtrOutput() AlertMutingRuleRecurrencePtrOutput
	ToAlertMutingRuleRecurrencePtrOutputWithContext(context.Context) AlertMutingRuleRecurrencePtrOutput
}

type alertMutingRuleRecurrencePtrType AlertMutingRuleRecurrenceArgs

func AlertMutingRuleRecurrencePtr(v *AlertMutingRuleRecurrenceArgs) AlertMutingRuleRecurrencePtrInput {
	return (*alertMutingRuleRecurrencePtrType)(v)
}

func (*alertMutingRuleRecurrencePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AlertMutingRuleRecurrence)(nil)).Elem()
}

func (i *alertMutingRuleRecurrencePtrType) ToAlertMutingRuleRecurrencePtrOutput() AlertMutingRuleRecurrencePtrOutput {
	return i.ToAlertMutingRuleRecurrencePtrOutputWithContext(context.Background())
}

func (i *alertMutingRuleRecurrencePtrType) ToAlertMutingRuleRecurrencePtrOutputWithContext(ctx context.Context) AlertMutingRuleRecurrencePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertMutingRuleRecurrencePtrOutput)
}

type AlertMutingRuleRecurrenceOutput struct{ *pulumi.OutputState }

func (AlertMutingRuleRecurrenceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AlertMutingRuleRecurrence)(nil)).Elem()
}

func (o AlertMutingRuleRecurrenceOutput) ToAlertMutingRuleRecurrenceOutput() AlertMutingRuleRecurrenceOutput {
	return o
}

func (o AlertMutingRuleRecurrenceOutput) ToAlertMutingRuleRecurrenceOutputWithContext(ctx context.Context) AlertMutingRuleRecurrenceOutput {
	return o
}

func (o AlertMutingRuleRecurrenceOutput) ToAlertMutingRuleRecurrencePtrOutput() AlertMutingRuleRecurrencePtrOutput {
	return o.ToAlertMutingRuleRecurrencePtrOutputWithContext(context.Background())
}

func (o AlertMutingRuleRecurrenceOutput) ToAlertMutingRuleRecurrencePtrOutputWithContext(ctx context.Context) AlertMutingRuleRecurrencePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v AlertMutingRuleRecurrence) *AlertMutingRuleRecurrence {
		return &v
	}).(AlertMutingRuleRecurrencePtrOutput)
}

// The unit of the period. Can be days (d) or weeks (w).
func (o AlertMutingRuleRecurrenceOutput) Unit() pulumi.StringOutput {
	return o.ApplyT(func(v AlertMutingRuleRecurrence) string { return v.Unit }).(pulumi.StringOutput)
}

// The amount of time, expressed as an integer, applicable to the unit specified.
func (o AlertMutingRuleRecurrenceOutput) Value() pulumi.IntOutput {
	return o.ApplyT(func(v AlertMutingRuleRecurrence) int { return v.Value }).(pulumi.IntOutput)
}

type AlertMutingRuleRecurrencePtrOutput struct{ *pulumi.OutputState }

func (AlertMutingRuleRecurrencePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AlertMutingRuleRecurrence)(nil)).Elem()
}

func (o AlertMutingRuleRecurrencePtrOutput) ToAlertMutingRuleRecurrencePtrOutput() AlertMutingRuleRecurrencePtrOutput {
	return o
}

func (o AlertMutingRuleRecurrencePtrOutput) ToAlertMutingRuleRecurrencePtrOutputWithContext(ctx context.Context) AlertMutingRuleRecurrencePtrOutput {
	return o
}

func (o AlertMutingRuleRecurrencePtrOutput) Elem() AlertMutingRuleRecurrenceOutput {
	return o.ApplyT(func(v *AlertMutingRuleRecurrence) AlertMutingRuleRecurrence {
		if v != nil {
			return *v
		}
		var ret AlertMutingRuleRecurrence
		return ret
	}).(AlertMutingRuleRecurrenceOutput)
}

// The unit of the period. Can be days (d) or weeks (w).
func (o AlertMutingRuleRecurrencePtrOutput) Unit() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AlertMutingRuleRecurrence) *string {
		if v == nil {
			return nil
		}
		return &v.Unit
	}).(pulumi.StringPtrOutput)
}

// The amount of time, expressed as an integer, applicable to the unit specified.
func (o AlertMutingRuleRecurrencePtrOutput) Value() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *AlertMutingRuleRecurrence) *int {
		if v == nil {
			return nil
		}
		return &v.Value
	}).(pulumi.IntPtrOutput)
}

type DashboardChart struct {
	// ID of the chart to display.
	ChartId string `pulumi:"chartId"`
	// The column to show the chart in (zero-based); this value always represents the leftmost column of the chart (between `0` and `11`).
	Column *int `pulumi:"column"`
	// How many rows the chart should take up (greater than or equal to `1`). `1` by default.
	Height *int `pulumi:"height"`
	// The row to show the chart in (zero-based); if `height > 1`, this value represents the topmost row of the chart (greater than or equal to `0`).
	Row *int `pulumi:"row"`
	// How many columns (out of a total of 12) the chart should take up (between `1` and `12`). `12` by default.
	Width *int `pulumi:"width"`
}

// DashboardChartInput is an input type that accepts DashboardChartArgs and DashboardChartOutput values.
// You can construct a concrete instance of `DashboardChartInput` via:
//
//	DashboardChartArgs{...}
type DashboardChartInput interface {
	pulumi.Input

	ToDashboardChartOutput() DashboardChartOutput
	ToDashboardChartOutputWithContext(context.Context) DashboardChartOutput
}

type DashboardChartArgs struct {
	// ID of the chart to display.
	ChartId pulumi.StringInput `pulumi:"chartId"`
	// The column to show the chart in (zero-based); this value always represents the leftmost column of the chart (between `0` and `11`).
	Column pulumi.IntPtrInput `pulumi:"column"`
	// How many rows the chart should take up (greater than or equal to `1`). `1` by default.
	Height pulumi.IntPtrInput `pulumi:"height"`
	// The row to show the chart in (zero-based); if `height > 1`, this value represents the topmost row of the chart (greater than or equal to `0`).
	Row pulumi.IntPtrInput `pulumi:"row"`
	// How many columns (out of a total of 12) the chart should take up (between `1` and `12`). `12` by default.
	Width pulumi.IntPtrInput `pulumi:"width"`
}

func (DashboardChartArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DashboardChart)(nil)).Elem()
}

func (i DashboardChartArgs) ToDashboardChartOutput() DashboardChartOutput {
	return i.ToDashboardChartOutputWithContext(context.Background())
}

func (i DashboardChartArgs) ToDashboardChartOutputWithContext(ctx context.Context) DashboardChartOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardChartOutput)
}

// DashboardChartArrayInput is an input type that accepts DashboardChartArray and DashboardChartArrayOutput values.
// You can construct a concrete instance of `DashboardChartArrayInput` via:
//
//	DashboardChartArray{ DashboardChartArgs{...} }
type DashboardChartArrayInput interface {
	pulumi.Input

	ToDashboardChartArrayOutput() DashboardChartArrayOutput
	ToDashboardChartArrayOutputWithContext(context.Context) DashboardChartArrayOutput
}

type DashboardChartArray []DashboardChartInput

func (DashboardChartArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DashboardChart)(nil)).Elem()
}

func (i DashboardChartArray) ToDashboardChartArrayOutput() DashboardChartArrayOutput {
	return i.ToDashboardChartArrayOutputWithContext(context.Background())
}

func (i DashboardChartArray) ToDashboardChartArrayOutputWithContext(ctx context.Context) DashboardChartArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardChartArrayOutput)
}

type DashboardChartOutput struct{ *pulumi.OutputState }

func (DashboardChartOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DashboardChart)(nil)).Elem()
}

func (o DashboardChartOutput) ToDashboardChartOutput() DashboardChartOutput {
	return o
}

func (o DashboardChartOutput) ToDashboardChartOutputWithContext(ctx context.Context) DashboardChartOutput {
	return o
}

// ID of the chart to display.
func (o DashboardChartOutput) ChartId() pulumi.StringOutput {
	return o.ApplyT(func(v DashboardChart) string { return v.ChartId }).(pulumi.StringOutput)
}

// The column to show the chart in (zero-based); this value always represents the leftmost column of the chart (between `0` and `11`).
func (o DashboardChartOutput) Column() pulumi.IntPtrOutput {
	return o.ApplyT(func(v DashboardChart) *int { return v.Column }).(pulumi.IntPtrOutput)
}

// How many rows the chart should take up (greater than or equal to `1`). `1` by default.
func (o DashboardChartOutput) Height() pulumi.IntPtrOutput {
	return o.ApplyT(func(v DashboardChart) *int { return v.Height }).(pulumi.IntPtrOutput)
}

// The row to show the chart in (zero-based); if `height > 1`, this value represents the topmost row of the chart (greater than or equal to `0`).
func (o DashboardChartOutput) Row() pulumi.IntPtrOutput {
	return o.ApplyT(func(v DashboardChart) *int { return v.Row }).(pulumi.IntPtrOutput)
}

// How many columns (out of a total of 12) the chart should take up (between `1` and `12`). `12` by default.
func (o DashboardChartOutput) Width() pulumi.IntPtrOutput {
	return o.ApplyT(func(v DashboardChart) *int { return v.Width }).(pulumi.IntPtrOutput)
}

type DashboardChartArrayOutput struct{ *pulumi.OutputState }

func (DashboardChartArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DashboardChart)(nil)).Elem()
}

func (o DashboardChartArrayOutput) ToDashboardChartArrayOutput() DashboardChartArrayOutput {
	return o
}

func (o DashboardChartArrayOutput) ToDashboardChartArrayOutputWithContext(ctx context.Context) DashboardChartArrayOutput {
	return o
}

func (o DashboardChartArrayOutput) Index(i pulumi.IntInput) DashboardChartOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) DashboardChart {
		return vs[0].([]DashboardChart)[vs[1].(int)]
	}).(DashboardChartOutput)
}

type DashboardColumn struct {
	// List of IDs of the charts to display.
	ChartIds []string `pulumi:"chartIds"`
	// Column number for the layout.
	Column *int `pulumi:"column"`
	// How many rows every chart should take up (greater than or equal to 1). 1 by default.
	Height *int `pulumi:"height"`
	// How many columns (out of a total of `12`) every chart should take up (between `1` and `12`). `12` by default.
	Width *int `pulumi:"width"`
}

// DashboardColumnInput is an input type that accepts DashboardColumnArgs and DashboardColumnOutput values.
// You can construct a concrete instance of `DashboardColumnInput` via:
//
//	DashboardColumnArgs{...}
type DashboardColumnInput interface {
	pulumi.Input

	ToDashboardColumnOutput() DashboardColumnOutput
	ToDashboardColumnOutputWithContext(context.Context) DashboardColumnOutput
}

type DashboardColumnArgs struct {
	// List of IDs of the charts to display.
	ChartIds pulumi.StringArrayInput `pulumi:"chartIds"`
	// Column number for the layout.
	Column pulumi.IntPtrInput `pulumi:"column"`
	// How many rows every chart should take up (greater than or equal to 1). 1 by default.
	Height pulumi.IntPtrInput `pulumi:"height"`
	// How many columns (out of a total of `12`) every chart should take up (between `1` and `12`). `12` by default.
	Width pulumi.IntPtrInput `pulumi:"width"`
}

func (DashboardColumnArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DashboardColumn)(nil)).Elem()
}

func (i DashboardColumnArgs) ToDashboardColumnOutput() DashboardColumnOutput {
	return i.ToDashboardColumnOutputWithContext(context.Background())
}

func (i DashboardColumnArgs) ToDashboardColumnOutputWithContext(ctx context.Context) DashboardColumnOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardColumnOutput)
}

// DashboardColumnArrayInput is an input type that accepts DashboardColumnArray and DashboardColumnArrayOutput values.
// You can construct a concrete instance of `DashboardColumnArrayInput` via:
//
//	DashboardColumnArray{ DashboardColumnArgs{...} }
type DashboardColumnArrayInput interface {
	pulumi.Input

	ToDashboardColumnArrayOutput() DashboardColumnArrayOutput
	ToDashboardColumnArrayOutputWithContext(context.Context) DashboardColumnArrayOutput
}

type DashboardColumnArray []DashboardColumnInput

func (DashboardColumnArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DashboardColumn)(nil)).Elem()
}

func (i DashboardColumnArray) ToDashboardColumnArrayOutput() DashboardColumnArrayOutput {
	return i.ToDashboardColumnArrayOutputWithContext(context.Background())
}

func (i DashboardColumnArray) ToDashboardColumnArrayOutputWithContext(ctx context.Context) DashboardColumnArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardColumnArrayOutput)
}

type DashboardColumnOutput struct{ *pulumi.OutputState }

func (DashboardColumnOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DashboardColumn)(nil)).Elem()
}

func (o DashboardColumnOutput) ToDashboardColumnOutput() DashboardColumnOutput {
	return o
}

func (o DashboardColumnOutput) ToDashboardColumnOutputWithContext(ctx context.Context) DashboardColumnOutput {
	return o
}

// List of IDs of the charts to display.
func (o DashboardColumnOutput) ChartIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v DashboardColumn) []string { return v.ChartIds }).(pulumi.StringArrayOutput)
}

// Column number for the layout.
func (o DashboardColumnOutput) Column() pulumi.IntPtrOutput {
	return o.ApplyT(func(v DashboardColumn) *int { return v.Column }).(pulumi.IntPtrOutput)
}

// How many rows every chart should take up (greater than or equal to 1). 1 by default.
func (o DashboardColumnOutput) Height() pulumi.IntPtrOutput {
	return o.ApplyT(func(v DashboardColumn) *int { return v.Height }).(pulumi.IntPtrOutput)
}

// How many columns (out of a total of `12`) every chart should take up (between `1` and `12`). `12` by default.
func (o DashboardColumnOutput) Width() pulumi.IntPtrOutput {
	return o.ApplyT(func(v DashboardColumn) *int { return v.Width }).(pulumi.IntPtrOutput)
}

type DashboardColumnArrayOutput struct{ *pulumi.OutputState }

func (DashboardColumnArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DashboardColumn)(nil)).Elem()
}

func (o DashboardColumnArrayOutput) ToDashboardColumnArrayOutput() DashboardColumnArrayOutput {
	return o
}

func (o DashboardColumnArrayOutput) ToDashboardColumnArrayOutputWithContext(ctx context.Context) DashboardColumnArrayOutput {
	return o
}

func (o DashboardColumnArrayOutput) Index(i pulumi.IntInput) DashboardColumnOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) DashboardColumn {
		return vs[0].([]DashboardColumn)[vs[1].(int)]
	}).(DashboardColumnOutput)
}

type DashboardEventOverlay struct {
	// Color to use : gray, blue, azure, navy, brown, orange, yellow, iris, magenta, pink, purple, violet, lilac, emerald, green, aquamarine.
	Color *string `pulumi:"color"`
	// Text shown in the dropdown when selecting this overlay from the menu.
	Label *string `pulumi:"label"`
	// Show a vertical line for the event. `false` by default.
	Line *bool `pulumi:"line"`
	// Search term used to choose the events shown in the overlay.
	Signal string `pulumi:"signal"`
	// Each element specifies a filter to use against the signal specified in the `signal`.
	Sources []DashboardEventOverlaySource `pulumi:"sources"`
	// Can be set to `eventTimeSeries` (the default) to refer to externally reported events, or `detectorEvents` to refer to events from detector triggers.
	Type *string `pulumi:"type"`
}

// DashboardEventOverlayInput is an input type that accepts DashboardEventOverlayArgs and DashboardEventOverlayOutput values.
// You can construct a concrete instance of `DashboardEventOverlayInput` via:
//
//	DashboardEventOverlayArgs{...}
type DashboardEventOverlayInput interface {
	pulumi.Input

	ToDashboardEventOverlayOutput() DashboardEventOverlayOutput
	ToDashboardEventOverlayOutputWithContext(context.Context) DashboardEventOverlayOutput
}

type DashboardEventOverlayArgs struct {
	// Color to use : gray, blue, azure, navy, brown, orange, yellow, iris, magenta, pink, purple, violet, lilac, emerald, green, aquamarine.
	Color pulumi.StringPtrInput `pulumi:"color"`
	// Text shown in the dropdown when selecting this overlay from the menu.
	Label pulumi.StringPtrInput `pulumi:"label"`
	// Show a vertical line for the event. `false` by default.
	Line pulumi.BoolPtrInput `pulumi:"line"`
	// Search term used to choose the events shown in the overlay.
	Signal pulumi.StringInput `pulumi:"signal"`
	// Each element specifies a filter to use against the signal specified in the `signal`.
	Sources DashboardEventOverlaySourceArrayInput `pulumi:"sources"`
	// Can be set to `eventTimeSeries` (the default) to refer to externally reported events, or `detectorEvents` to refer to events from detector triggers.
	Type pulumi.StringPtrInput `pulumi:"type"`
}

func (DashboardEventOverlayArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DashboardEventOverlay)(nil)).Elem()
}

func (i DashboardEventOverlayArgs) ToDashboardEventOverlayOutput() DashboardEventOverlayOutput {
	return i.ToDashboardEventOverlayOutputWithContext(context.Background())
}

func (i DashboardEventOverlayArgs) ToDashboardEventOverlayOutputWithContext(ctx context.Context) DashboardEventOverlayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardEventOverlayOutput)
}

// DashboardEventOverlayArrayInput is an input type that accepts DashboardEventOverlayArray and DashboardEventOverlayArrayOutput values.
// You can construct a concrete instance of `DashboardEventOverlayArrayInput` via:
//
//	DashboardEventOverlayArray{ DashboardEventOverlayArgs{...} }
type DashboardEventOverlayArrayInput interface {
	pulumi.Input

	ToDashboardEventOverlayArrayOutput() DashboardEventOverlayArrayOutput
	ToDashboardEventOverlayArrayOutputWithContext(context.Context) DashboardEventOverlayArrayOutput
}

type DashboardEventOverlayArray []DashboardEventOverlayInput

func (DashboardEventOverlayArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DashboardEventOverlay)(nil)).Elem()
}

func (i DashboardEventOverlayArray) ToDashboardEventOverlayArrayOutput() DashboardEventOverlayArrayOutput {
	return i.ToDashboardEventOverlayArrayOutputWithContext(context.Background())
}

func (i DashboardEventOverlayArray) ToDashboardEventOverlayArrayOutputWithContext(ctx context.Context) DashboardEventOverlayArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardEventOverlayArrayOutput)
}

type DashboardEventOverlayOutput struct{ *pulumi.OutputState }

func (DashboardEventOverlayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DashboardEventOverlay)(nil)).Elem()
}

func (o DashboardEventOverlayOutput) ToDashboardEventOverlayOutput() DashboardEventOverlayOutput {
	return o
}

func (o DashboardEventOverlayOutput) ToDashboardEventOverlayOutputWithContext(ctx context.Context) DashboardEventOverlayOutput {
	return o
}

// Color to use : gray, blue, azure, navy, brown, orange, yellow, iris, magenta, pink, purple, violet, lilac, emerald, green, aquamarine.
func (o DashboardEventOverlayOutput) Color() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DashboardEventOverlay) *string { return v.Color }).(pulumi.StringPtrOutput)
}

// Text shown in the dropdown when selecting this overlay from the menu.
func (o DashboardEventOverlayOutput) Label() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DashboardEventOverlay) *string { return v.Label }).(pulumi.StringPtrOutput)
}

// Show a vertical line for the event. `false` by default.
func (o DashboardEventOverlayOutput) Line() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v DashboardEventOverlay) *bool { return v.Line }).(pulumi.BoolPtrOutput)
}

// Search term used to choose the events shown in the overlay.
func (o DashboardEventOverlayOutput) Signal() pulumi.StringOutput {
	return o.ApplyT(func(v DashboardEventOverlay) string { return v.Signal }).(pulumi.StringOutput)
}

// Each element specifies a filter to use against the signal specified in the `signal`.
func (o DashboardEventOverlayOutput) Sources() DashboardEventOverlaySourceArrayOutput {
	return o.ApplyT(func(v DashboardEventOverlay) []DashboardEventOverlaySource { return v.Sources }).(DashboardEventOverlaySourceArrayOutput)
}

// Can be set to `eventTimeSeries` (the default) to refer to externally reported events, or `detectorEvents` to refer to events from detector triggers.
func (o DashboardEventOverlayOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DashboardEventOverlay) *string { return v.Type }).(pulumi.StringPtrOutput)
}

type DashboardEventOverlayArrayOutput struct{ *pulumi.OutputState }

func (DashboardEventOverlayArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DashboardEventOverlay)(nil)).Elem()
}

func (o DashboardEventOverlayArrayOutput) ToDashboardEventOverlayArrayOutput() DashboardEventOverlayArrayOutput {
	return o
}

func (o DashboardEventOverlayArrayOutput) ToDashboardEventOverlayArrayOutputWithContext(ctx context.Context) DashboardEventOverlayArrayOutput {
	return o
}

func (o DashboardEventOverlayArrayOutput) Index(i pulumi.IntInput) DashboardEventOverlayOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) DashboardEventOverlay {
		return vs[0].([]DashboardEventOverlay)[vs[1].(int)]
	}).(DashboardEventOverlayOutput)
}

type DashboardEventOverlaySource struct {
	// If true, only data that does not match the specified value of the specified property appear in the event overlay. Defaults to `false`.
	Negated *bool `pulumi:"negated"`
	// The name of a dimension to filter against.
	Property string `pulumi:"property"`
	// A list of values to be used with the `property`, they will be combined via `OR`.
	Values []string `pulumi:"values"`
}

// DashboardEventOverlaySourceInput is an input type that accepts DashboardEventOverlaySourceArgs and DashboardEventOverlaySourceOutput values.
// You can construct a concrete instance of `DashboardEventOverlaySourceInput` via:
//
//	DashboardEventOverlaySourceArgs{...}
type DashboardEventOverlaySourceInput interface {
	pulumi.Input

	ToDashboardEventOverlaySourceOutput() DashboardEventOverlaySourceOutput
	ToDashboardEventOverlaySourceOutputWithContext(context.Context) DashboardEventOverlaySourceOutput
}

type DashboardEventOverlaySourceArgs struct {
	// If true, only data that does not match the specified value of the specified property appear in the event overlay. Defaults to `false`.
	Negated pulumi.BoolPtrInput `pulumi:"negated"`
	// The name of a dimension to filter against.
	Property pulumi.StringInput `pulumi:"property"`
	// A list of values to be used with the `property`, they will be combined via `OR`.
	Values pulumi.StringArrayInput `pulumi:"values"`
}

func (DashboardEventOverlaySourceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DashboardEventOverlaySource)(nil)).Elem()
}

func (i DashboardEventOverlaySourceArgs) ToDashboardEventOverlaySourceOutput() DashboardEventOverlaySourceOutput {
	return i.ToDashboardEventOverlaySourceOutputWithContext(context.Background())
}

func (i DashboardEventOverlaySourceArgs) ToDashboardEventOverlaySourceOutputWithContext(ctx context.Context) DashboardEventOverlaySourceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardEventOverlaySourceOutput)
}

// DashboardEventOverlaySourceArrayInput is an input type that accepts DashboardEventOverlaySourceArray and DashboardEventOverlaySourceArrayOutput values.
// You can construct a concrete instance of `DashboardEventOverlaySourceArrayInput` via:
//
//	DashboardEventOverlaySourceArray{ DashboardEventOverlaySourceArgs{...} }
type DashboardEventOverlaySourceArrayInput interface {
	pulumi.Input

	ToDashboardEventOverlaySourceArrayOutput() DashboardEventOverlaySourceArrayOutput
	ToDashboardEventOverlaySourceArrayOutputWithContext(context.Context) DashboardEventOverlaySourceArrayOutput
}

type DashboardEventOverlaySourceArray []DashboardEventOverlaySourceInput

func (DashboardEventOverlaySourceArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DashboardEventOverlaySource)(nil)).Elem()
}

func (i DashboardEventOverlaySourceArray) ToDashboardEventOverlaySourceArrayOutput() DashboardEventOverlaySourceArrayOutput {
	return i.ToDashboardEventOverlaySourceArrayOutputWithContext(context.Background())
}

func (i DashboardEventOverlaySourceArray) ToDashboardEventOverlaySourceArrayOutputWithContext(ctx context.Context) DashboardEventOverlaySourceArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardEventOverlaySourceArrayOutput)
}

type DashboardEventOverlaySourceOutput struct{ *pulumi.OutputState }

func (DashboardEventOverlaySourceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DashboardEventOverlaySource)(nil)).Elem()
}

func (o DashboardEventOverlaySourceOutput) ToDashboardEventOverlaySourceOutput() DashboardEventOverlaySourceOutput {
	return o
}

func (o DashboardEventOverlaySourceOutput) ToDashboardEventOverlaySourceOutputWithContext(ctx context.Context) DashboardEventOverlaySourceOutput {
	return o
}

// If true, only data that does not match the specified value of the specified property appear in the event overlay. Defaults to `false`.
func (o DashboardEventOverlaySourceOutput) Negated() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v DashboardEventOverlaySource) *bool { return v.Negated }).(pulumi.BoolPtrOutput)
}

// The name of a dimension to filter against.
func (o DashboardEventOverlaySourceOutput) Property() pulumi.StringOutput {
	return o.ApplyT(func(v DashboardEventOverlaySource) string { return v.Property }).(pulumi.StringOutput)
}

// A list of values to be used with the `property`, they will be combined via `OR`.
func (o DashboardEventOverlaySourceOutput) Values() pulumi.StringArrayOutput {
	return o.ApplyT(func(v DashboardEventOverlaySource) []string { return v.Values }).(pulumi.StringArrayOutput)
}

type DashboardEventOverlaySourceArrayOutput struct{ *pulumi.OutputState }

func (DashboardEventOverlaySourceArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DashboardEventOverlaySource)(nil)).Elem()
}

func (o DashboardEventOverlaySourceArrayOutput) ToDashboardEventOverlaySourceArrayOutput() DashboardEventOverlaySourceArrayOutput {
	return o
}

func (o DashboardEventOverlaySourceArrayOutput) ToDashboardEventOverlaySourceArrayOutputWithContext(ctx context.Context) DashboardEventOverlaySourceArrayOutput {
	return o
}

func (o DashboardEventOverlaySourceArrayOutput) Index(i pulumi.IntInput) DashboardEventOverlaySourceOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) DashboardEventOverlaySource {
		return vs[0].([]DashboardEventOverlaySource)[vs[1].(int)]
	}).(DashboardEventOverlaySourceOutput)
}

type DashboardFilter struct {
	// If true, this filter will also match data that doesn't have this property at all.
	ApplyIfExist *bool `pulumi:"applyIfExist"`
	// Whether this filter should be a not filter. `false` by default.
	Negated *bool `pulumi:"negated"`
	// A metric time series dimension or property name.
	Property string `pulumi:"property"`
	// List of of strings (which will be treated as an OR filter on the property).
	Values []string `pulumi:"values"`
}

// DashboardFilterInput is an input type that accepts DashboardFilterArgs and DashboardFilterOutput values.
// You can construct a concrete instance of `DashboardFilterInput` via:
//
//	DashboardFilterArgs{...}
type DashboardFilterInput interface {
	pulumi.Input

	ToDashboardFilterOutput() DashboardFilterOutput
	ToDashboardFilterOutputWithContext(context.Context) DashboardFilterOutput
}

type DashboardFilterArgs struct {
	// If true, this filter will also match data that doesn't have this property at all.
	ApplyIfExist pulumi.BoolPtrInput `pulumi:"applyIfExist"`
	// Whether this filter should be a not filter. `false` by default.
	Negated pulumi.BoolPtrInput `pulumi:"negated"`
	// A metric time series dimension or property name.
	Property pulumi.StringInput `pulumi:"property"`
	// List of of strings (which will be treated as an OR filter on the property).
	Values pulumi.StringArrayInput `pulumi:"values"`
}

func (DashboardFilterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DashboardFilter)(nil)).Elem()
}

func (i DashboardFilterArgs) ToDashboardFilterOutput() DashboardFilterOutput {
	return i.ToDashboardFilterOutputWithContext(context.Background())
}

func (i DashboardFilterArgs) ToDashboardFilterOutputWithContext(ctx context.Context) DashboardFilterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardFilterOutput)
}

// DashboardFilterArrayInput is an input type that accepts DashboardFilterArray and DashboardFilterArrayOutput values.
// You can construct a concrete instance of `DashboardFilterArrayInput` via:
//
//	DashboardFilterArray{ DashboardFilterArgs{...} }
type DashboardFilterArrayInput interface {
	pulumi.Input

	ToDashboardFilterArrayOutput() DashboardFilterArrayOutput
	ToDashboardFilterArrayOutputWithContext(context.Context) DashboardFilterArrayOutput
}

type DashboardFilterArray []DashboardFilterInput

func (DashboardFilterArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DashboardFilter)(nil)).Elem()
}

func (i DashboardFilterArray) ToDashboardFilterArrayOutput() DashboardFilterArrayOutput {
	return i.ToDashboardFilterArrayOutputWithContext(context.Background())
}

func (i DashboardFilterArray) ToDashboardFilterArrayOutputWithContext(ctx context.Context) DashboardFilterArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardFilterArrayOutput)
}

type DashboardFilterOutput struct{ *pulumi.OutputState }

func (DashboardFilterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DashboardFilter)(nil)).Elem()
}

func (o DashboardFilterOutput) ToDashboardFilterOutput() DashboardFilterOutput {
	return o
}

func (o DashboardFilterOutput) ToDashboardFilterOutputWithContext(ctx context.Context) DashboardFilterOutput {
	return o
}

// If true, this filter will also match data that doesn't have this property at all.
func (o DashboardFilterOutput) ApplyIfExist() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v DashboardFilter) *bool { return v.ApplyIfExist }).(pulumi.BoolPtrOutput)
}

// Whether this filter should be a not filter. `false` by default.
func (o DashboardFilterOutput) Negated() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v DashboardFilter) *bool { return v.Negated }).(pulumi.BoolPtrOutput)
}

// A metric time series dimension or property name.
func (o DashboardFilterOutput) Property() pulumi.StringOutput {
	return o.ApplyT(func(v DashboardFilter) string { return v.Property }).(pulumi.StringOutput)
}

// List of of strings (which will be treated as an OR filter on the property).
func (o DashboardFilterOutput) Values() pulumi.StringArrayOutput {
	return o.ApplyT(func(v DashboardFilter) []string { return v.Values }).(pulumi.StringArrayOutput)
}

type DashboardFilterArrayOutput struct{ *pulumi.OutputState }

func (DashboardFilterArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DashboardFilter)(nil)).Elem()
}

func (o DashboardFilterArrayOutput) ToDashboardFilterArrayOutput() DashboardFilterArrayOutput {
	return o
}

func (o DashboardFilterArrayOutput) ToDashboardFilterArrayOutputWithContext(ctx context.Context) DashboardFilterArrayOutput {
	return o
}

func (o DashboardFilterArrayOutput) Index(i pulumi.IntInput) DashboardFilterOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) DashboardFilter {
		return vs[0].([]DashboardFilter)[vs[1].(int)]
	}).(DashboardFilterOutput)
}

type DashboardGrid struct {
	// List of IDs of the charts to display.
	ChartIds []string `pulumi:"chartIds"`
	// How many rows every chart should take up (greater than or equal to `1`). `1` by default.
	Height *int `pulumi:"height"`
	// How many columns (out of a total of 12) every chart should take up (between `1` and `12`). `12` by default.
	Width *int `pulumi:"width"`
}

// DashboardGridInput is an input type that accepts DashboardGridArgs and DashboardGridOutput values.
// You can construct a concrete instance of `DashboardGridInput` via:
//
//	DashboardGridArgs{...}
type DashboardGridInput interface {
	pulumi.Input

	ToDashboardGridOutput() DashboardGridOutput
	ToDashboardGridOutputWithContext(context.Context) DashboardGridOutput
}

type DashboardGridArgs struct {
	// List of IDs of the charts to display.
	ChartIds pulumi.StringArrayInput `pulumi:"chartIds"`
	// How many rows every chart should take up (greater than or equal to `1`). `1` by default.
	Height pulumi.IntPtrInput `pulumi:"height"`
	// How many columns (out of a total of 12) every chart should take up (between `1` and `12`). `12` by default.
	Width pulumi.IntPtrInput `pulumi:"width"`
}

func (DashboardGridArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DashboardGrid)(nil)).Elem()
}

func (i DashboardGridArgs) ToDashboardGridOutput() DashboardGridOutput {
	return i.ToDashboardGridOutputWithContext(context.Background())
}

func (i DashboardGridArgs) ToDashboardGridOutputWithContext(ctx context.Context) DashboardGridOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardGridOutput)
}

// DashboardGridArrayInput is an input type that accepts DashboardGridArray and DashboardGridArrayOutput values.
// You can construct a concrete instance of `DashboardGridArrayInput` via:
//
//	DashboardGridArray{ DashboardGridArgs{...} }
type DashboardGridArrayInput interface {
	pulumi.Input

	ToDashboardGridArrayOutput() DashboardGridArrayOutput
	ToDashboardGridArrayOutputWithContext(context.Context) DashboardGridArrayOutput
}

type DashboardGridArray []DashboardGridInput

func (DashboardGridArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DashboardGrid)(nil)).Elem()
}

func (i DashboardGridArray) ToDashboardGridArrayOutput() DashboardGridArrayOutput {
	return i.ToDashboardGridArrayOutputWithContext(context.Background())
}

func (i DashboardGridArray) ToDashboardGridArrayOutputWithContext(ctx context.Context) DashboardGridArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardGridArrayOutput)
}

type DashboardGridOutput struct{ *pulumi.OutputState }

func (DashboardGridOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DashboardGrid)(nil)).Elem()
}

func (o DashboardGridOutput) ToDashboardGridOutput() DashboardGridOutput {
	return o
}

func (o DashboardGridOutput) ToDashboardGridOutputWithContext(ctx context.Context) DashboardGridOutput {
	return o
}

// List of IDs of the charts to display.
func (o DashboardGridOutput) ChartIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v DashboardGrid) []string { return v.ChartIds }).(pulumi.StringArrayOutput)
}

// How many rows every chart should take up (greater than or equal to `1`). `1` by default.
func (o DashboardGridOutput) Height() pulumi.IntPtrOutput {
	return o.ApplyT(func(v DashboardGrid) *int { return v.Height }).(pulumi.IntPtrOutput)
}

// How many columns (out of a total of 12) every chart should take up (between `1` and `12`). `12` by default.
func (o DashboardGridOutput) Width() pulumi.IntPtrOutput {
	return o.ApplyT(func(v DashboardGrid) *int { return v.Width }).(pulumi.IntPtrOutput)
}

type DashboardGridArrayOutput struct{ *pulumi.OutputState }

func (DashboardGridArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DashboardGrid)(nil)).Elem()
}

func (o DashboardGridArrayOutput) ToDashboardGridArrayOutput() DashboardGridArrayOutput {
	return o
}

func (o DashboardGridArrayOutput) ToDashboardGridArrayOutputWithContext(ctx context.Context) DashboardGridArrayOutput {
	return o
}

func (o DashboardGridArrayOutput) Index(i pulumi.IntInput) DashboardGridOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) DashboardGrid {
		return vs[0].([]DashboardGrid)[vs[1].(int)]
	}).(DashboardGridOutput)
}

type DashboardGroupDashboard struct {
	// The ID of the association between the dashboard group and the dashboard
	ConfigId *string `pulumi:"configId"`
	// The dashboard id to mirror
	DashboardId string `pulumi:"dashboardId"`
	// The description that will override the original dashboards's description.
	DescriptionOverride *string `pulumi:"descriptionOverride"`
	// The description that will override the original dashboards's description.
	FilterOverrides []DashboardGroupDashboardFilterOverride `pulumi:"filterOverrides"`
	// The name that will override the original dashboards's name.
	NameOverride *string `pulumi:"nameOverride"`
	// Dashboard variable to apply to each chart in the dashboard
	VariableOverrides []DashboardGroupDashboardVariableOverride `pulumi:"variableOverrides"`
}

// DashboardGroupDashboardInput is an input type that accepts DashboardGroupDashboardArgs and DashboardGroupDashboardOutput values.
// You can construct a concrete instance of `DashboardGroupDashboardInput` via:
//
//	DashboardGroupDashboardArgs{...}
type DashboardGroupDashboardInput interface {
	pulumi.Input

	ToDashboardGroupDashboardOutput() DashboardGroupDashboardOutput
	ToDashboardGroupDashboardOutputWithContext(context.Context) DashboardGroupDashboardOutput
}

type DashboardGroupDashboardArgs struct {
	// The ID of the association between the dashboard group and the dashboard
	ConfigId pulumi.StringPtrInput `pulumi:"configId"`
	// The dashboard id to mirror
	DashboardId pulumi.StringInput `pulumi:"dashboardId"`
	// The description that will override the original dashboards's description.
	DescriptionOverride pulumi.StringPtrInput `pulumi:"descriptionOverride"`
	// The description that will override the original dashboards's description.
	FilterOverrides DashboardGroupDashboardFilterOverrideArrayInput `pulumi:"filterOverrides"`
	// The name that will override the original dashboards's name.
	NameOverride pulumi.StringPtrInput `pulumi:"nameOverride"`
	// Dashboard variable to apply to each chart in the dashboard
	VariableOverrides DashboardGroupDashboardVariableOverrideArrayInput `pulumi:"variableOverrides"`
}

func (DashboardGroupDashboardArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DashboardGroupDashboard)(nil)).Elem()
}

func (i DashboardGroupDashboardArgs) ToDashboardGroupDashboardOutput() DashboardGroupDashboardOutput {
	return i.ToDashboardGroupDashboardOutputWithContext(context.Background())
}

func (i DashboardGroupDashboardArgs) ToDashboardGroupDashboardOutputWithContext(ctx context.Context) DashboardGroupDashboardOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardGroupDashboardOutput)
}

// DashboardGroupDashboardArrayInput is an input type that accepts DashboardGroupDashboardArray and DashboardGroupDashboardArrayOutput values.
// You can construct a concrete instance of `DashboardGroupDashboardArrayInput` via:
//
//	DashboardGroupDashboardArray{ DashboardGroupDashboardArgs{...} }
type DashboardGroupDashboardArrayInput interface {
	pulumi.Input

	ToDashboardGroupDashboardArrayOutput() DashboardGroupDashboardArrayOutput
	ToDashboardGroupDashboardArrayOutputWithContext(context.Context) DashboardGroupDashboardArrayOutput
}

type DashboardGroupDashboardArray []DashboardGroupDashboardInput

func (DashboardGroupDashboardArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DashboardGroupDashboard)(nil)).Elem()
}

func (i DashboardGroupDashboardArray) ToDashboardGroupDashboardArrayOutput() DashboardGroupDashboardArrayOutput {
	return i.ToDashboardGroupDashboardArrayOutputWithContext(context.Background())
}

func (i DashboardGroupDashboardArray) ToDashboardGroupDashboardArrayOutputWithContext(ctx context.Context) DashboardGroupDashboardArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardGroupDashboardArrayOutput)
}

type DashboardGroupDashboardOutput struct{ *pulumi.OutputState }

func (DashboardGroupDashboardOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DashboardGroupDashboard)(nil)).Elem()
}

func (o DashboardGroupDashboardOutput) ToDashboardGroupDashboardOutput() DashboardGroupDashboardOutput {
	return o
}

func (o DashboardGroupDashboardOutput) ToDashboardGroupDashboardOutputWithContext(ctx context.Context) DashboardGroupDashboardOutput {
	return o
}

// The ID of the association between the dashboard group and the dashboard
func (o DashboardGroupDashboardOutput) ConfigId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DashboardGroupDashboard) *string { return v.ConfigId }).(pulumi.StringPtrOutput)
}

// The dashboard id to mirror
func (o DashboardGroupDashboardOutput) DashboardId() pulumi.StringOutput {
	return o.ApplyT(func(v DashboardGroupDashboard) string { return v.DashboardId }).(pulumi.StringOutput)
}

// The description that will override the original dashboards's description.
func (o DashboardGroupDashboardOutput) DescriptionOverride() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DashboardGroupDashboard) *string { return v.DescriptionOverride }).(pulumi.StringPtrOutput)
}

// The description that will override the original dashboards's description.
func (o DashboardGroupDashboardOutput) FilterOverrides() DashboardGroupDashboardFilterOverrideArrayOutput {
	return o.ApplyT(func(v DashboardGroupDashboard) []DashboardGroupDashboardFilterOverride { return v.FilterOverrides }).(DashboardGroupDashboardFilterOverrideArrayOutput)
}

// The name that will override the original dashboards's name.
func (o DashboardGroupDashboardOutput) NameOverride() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DashboardGroupDashboard) *string { return v.NameOverride }).(pulumi.StringPtrOutput)
}

// Dashboard variable to apply to each chart in the dashboard
func (o DashboardGroupDashboardOutput) VariableOverrides() DashboardGroupDashboardVariableOverrideArrayOutput {
	return o.ApplyT(func(v DashboardGroupDashboard) []DashboardGroupDashboardVariableOverride { return v.VariableOverrides }).(DashboardGroupDashboardVariableOverrideArrayOutput)
}

type DashboardGroupDashboardArrayOutput struct{ *pulumi.OutputState }

func (DashboardGroupDashboardArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DashboardGroupDashboard)(nil)).Elem()
}

func (o DashboardGroupDashboardArrayOutput) ToDashboardGroupDashboardArrayOutput() DashboardGroupDashboardArrayOutput {
	return o
}

func (o DashboardGroupDashboardArrayOutput) ToDashboardGroupDashboardArrayOutputWithContext(ctx context.Context) DashboardGroupDashboardArrayOutput {
	return o
}

func (o DashboardGroupDashboardArrayOutput) Index(i pulumi.IntInput) DashboardGroupDashboardOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) DashboardGroupDashboard {
		return vs[0].([]DashboardGroupDashboard)[vs[1].(int)]
	}).(DashboardGroupDashboardOutput)
}

type DashboardGroupDashboardFilterOverride struct {
	// If true, only data that does not match the specified value of the specified property appear in the event overlay. Defaults to `false`.
	Negated *bool `pulumi:"negated"`
	// A metric time series dimension or property name.
	Property string `pulumi:"property"`
	// (Optional) List of of strings (which will be treated as an OR filter on the property).
	Values []string `pulumi:"values"`
}

// DashboardGroupDashboardFilterOverrideInput is an input type that accepts DashboardGroupDashboardFilterOverrideArgs and DashboardGroupDashboardFilterOverrideOutput values.
// You can construct a concrete instance of `DashboardGroupDashboardFilterOverrideInput` via:
//
//	DashboardGroupDashboardFilterOverrideArgs{...}
type DashboardGroupDashboardFilterOverrideInput interface {
	pulumi.Input

	ToDashboardGroupDashboardFilterOverrideOutput() DashboardGroupDashboardFilterOverrideOutput
	ToDashboardGroupDashboardFilterOverrideOutputWithContext(context.Context) DashboardGroupDashboardFilterOverrideOutput
}

type DashboardGroupDashboardFilterOverrideArgs struct {
	// If true, only data that does not match the specified value of the specified property appear in the event overlay. Defaults to `false`.
	Negated pulumi.BoolPtrInput `pulumi:"negated"`
	// A metric time series dimension or property name.
	Property pulumi.StringInput `pulumi:"property"`
	// (Optional) List of of strings (which will be treated as an OR filter on the property).
	Values pulumi.StringArrayInput `pulumi:"values"`
}

func (DashboardGroupDashboardFilterOverrideArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DashboardGroupDashboardFilterOverride)(nil)).Elem()
}

func (i DashboardGroupDashboardFilterOverrideArgs) ToDashboardGroupDashboardFilterOverrideOutput() DashboardGroupDashboardFilterOverrideOutput {
	return i.ToDashboardGroupDashboardFilterOverrideOutputWithContext(context.Background())
}

func (i DashboardGroupDashboardFilterOverrideArgs) ToDashboardGroupDashboardFilterOverrideOutputWithContext(ctx context.Context) DashboardGroupDashboardFilterOverrideOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardGroupDashboardFilterOverrideOutput)
}

// DashboardGroupDashboardFilterOverrideArrayInput is an input type that accepts DashboardGroupDashboardFilterOverrideArray and DashboardGroupDashboardFilterOverrideArrayOutput values.
// You can construct a concrete instance of `DashboardGroupDashboardFilterOverrideArrayInput` via:
//
//	DashboardGroupDashboardFilterOverrideArray{ DashboardGroupDashboardFilterOverrideArgs{...} }
type DashboardGroupDashboardFilterOverrideArrayInput interface {
	pulumi.Input

	ToDashboardGroupDashboardFilterOverrideArrayOutput() DashboardGroupDashboardFilterOverrideArrayOutput
	ToDashboardGroupDashboardFilterOverrideArrayOutputWithContext(context.Context) DashboardGroupDashboardFilterOverrideArrayOutput
}

type DashboardGroupDashboardFilterOverrideArray []DashboardGroupDashboardFilterOverrideInput

func (DashboardGroupDashboardFilterOverrideArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DashboardGroupDashboardFilterOverride)(nil)).Elem()
}

func (i DashboardGroupDashboardFilterOverrideArray) ToDashboardGroupDashboardFilterOverrideArrayOutput() DashboardGroupDashboardFilterOverrideArrayOutput {
	return i.ToDashboardGroupDashboardFilterOverrideArrayOutputWithContext(context.Background())
}

func (i DashboardGroupDashboardFilterOverrideArray) ToDashboardGroupDashboardFilterOverrideArrayOutputWithContext(ctx context.Context) DashboardGroupDashboardFilterOverrideArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardGroupDashboardFilterOverrideArrayOutput)
}

type DashboardGroupDashboardFilterOverrideOutput struct{ *pulumi.OutputState }

func (DashboardGroupDashboardFilterOverrideOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DashboardGroupDashboardFilterOverride)(nil)).Elem()
}

func (o DashboardGroupDashboardFilterOverrideOutput) ToDashboardGroupDashboardFilterOverrideOutput() DashboardGroupDashboardFilterOverrideOutput {
	return o
}

func (o DashboardGroupDashboardFilterOverrideOutput) ToDashboardGroupDashboardFilterOverrideOutputWithContext(ctx context.Context) DashboardGroupDashboardFilterOverrideOutput {
	return o
}

// If true, only data that does not match the specified value of the specified property appear in the event overlay. Defaults to `false`.
func (o DashboardGroupDashboardFilterOverrideOutput) Negated() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v DashboardGroupDashboardFilterOverride) *bool { return v.Negated }).(pulumi.BoolPtrOutput)
}

// A metric time series dimension or property name.
func (o DashboardGroupDashboardFilterOverrideOutput) Property() pulumi.StringOutput {
	return o.ApplyT(func(v DashboardGroupDashboardFilterOverride) string { return v.Property }).(pulumi.StringOutput)
}

// (Optional) List of of strings (which will be treated as an OR filter on the property).
func (o DashboardGroupDashboardFilterOverrideOutput) Values() pulumi.StringArrayOutput {
	return o.ApplyT(func(v DashboardGroupDashboardFilterOverride) []string { return v.Values }).(pulumi.StringArrayOutput)
}

type DashboardGroupDashboardFilterOverrideArrayOutput struct{ *pulumi.OutputState }

func (DashboardGroupDashboardFilterOverrideArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DashboardGroupDashboardFilterOverride)(nil)).Elem()
}

func (o DashboardGroupDashboardFilterOverrideArrayOutput) ToDashboardGroupDashboardFilterOverrideArrayOutput() DashboardGroupDashboardFilterOverrideArrayOutput {
	return o
}

func (o DashboardGroupDashboardFilterOverrideArrayOutput) ToDashboardGroupDashboardFilterOverrideArrayOutputWithContext(ctx context.Context) DashboardGroupDashboardFilterOverrideArrayOutput {
	return o
}

func (o DashboardGroupDashboardFilterOverrideArrayOutput) Index(i pulumi.IntInput) DashboardGroupDashboardFilterOverrideOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) DashboardGroupDashboardFilterOverride {
		return vs[0].([]DashboardGroupDashboardFilterOverride)[vs[1].(int)]
	}).(DashboardGroupDashboardFilterOverrideOutput)
}

type DashboardGroupDashboardVariableOverride struct {
	// A metric time series dimension or property name
	Property string `pulumi:"property"`
	// List of strings (which will be treated as an OR filter on the property)
	Values []string `pulumi:"values"`
	// A list of strings of suggested values for this variable; these suggestions will receive priority when values are autosuggested for this variable
	ValuesSuggesteds []string `pulumi:"valuesSuggesteds"`
}

// DashboardGroupDashboardVariableOverrideInput is an input type that accepts DashboardGroupDashboardVariableOverrideArgs and DashboardGroupDashboardVariableOverrideOutput values.
// You can construct a concrete instance of `DashboardGroupDashboardVariableOverrideInput` via:
//
//	DashboardGroupDashboardVariableOverrideArgs{...}
type DashboardGroupDashboardVariableOverrideInput interface {
	pulumi.Input

	ToDashboardGroupDashboardVariableOverrideOutput() DashboardGroupDashboardVariableOverrideOutput
	ToDashboardGroupDashboardVariableOverrideOutputWithContext(context.Context) DashboardGroupDashboardVariableOverrideOutput
}

type DashboardGroupDashboardVariableOverrideArgs struct {
	// A metric time series dimension or property name
	Property pulumi.StringInput `pulumi:"property"`
	// List of strings (which will be treated as an OR filter on the property)
	Values pulumi.StringArrayInput `pulumi:"values"`
	// A list of strings of suggested values for this variable; these suggestions will receive priority when values are autosuggested for this variable
	ValuesSuggesteds pulumi.StringArrayInput `pulumi:"valuesSuggesteds"`
}

func (DashboardGroupDashboardVariableOverrideArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DashboardGroupDashboardVariableOverride)(nil)).Elem()
}

func (i DashboardGroupDashboardVariableOverrideArgs) ToDashboardGroupDashboardVariableOverrideOutput() DashboardGroupDashboardVariableOverrideOutput {
	return i.ToDashboardGroupDashboardVariableOverrideOutputWithContext(context.Background())
}

func (i DashboardGroupDashboardVariableOverrideArgs) ToDashboardGroupDashboardVariableOverrideOutputWithContext(ctx context.Context) DashboardGroupDashboardVariableOverrideOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardGroupDashboardVariableOverrideOutput)
}

// DashboardGroupDashboardVariableOverrideArrayInput is an input type that accepts DashboardGroupDashboardVariableOverrideArray and DashboardGroupDashboardVariableOverrideArrayOutput values.
// You can construct a concrete instance of `DashboardGroupDashboardVariableOverrideArrayInput` via:
//
//	DashboardGroupDashboardVariableOverrideArray{ DashboardGroupDashboardVariableOverrideArgs{...} }
type DashboardGroupDashboardVariableOverrideArrayInput interface {
	pulumi.Input

	ToDashboardGroupDashboardVariableOverrideArrayOutput() DashboardGroupDashboardVariableOverrideArrayOutput
	ToDashboardGroupDashboardVariableOverrideArrayOutputWithContext(context.Context) DashboardGroupDashboardVariableOverrideArrayOutput
}

type DashboardGroupDashboardVariableOverrideArray []DashboardGroupDashboardVariableOverrideInput

func (DashboardGroupDashboardVariableOverrideArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DashboardGroupDashboardVariableOverride)(nil)).Elem()
}

func (i DashboardGroupDashboardVariableOverrideArray) ToDashboardGroupDashboardVariableOverrideArrayOutput() DashboardGroupDashboardVariableOverrideArrayOutput {
	return i.ToDashboardGroupDashboardVariableOverrideArrayOutputWithContext(context.Background())
}

func (i DashboardGroupDashboardVariableOverrideArray) ToDashboardGroupDashboardVariableOverrideArrayOutputWithContext(ctx context.Context) DashboardGroupDashboardVariableOverrideArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardGroupDashboardVariableOverrideArrayOutput)
}

type DashboardGroupDashboardVariableOverrideOutput struct{ *pulumi.OutputState }

func (DashboardGroupDashboardVariableOverrideOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DashboardGroupDashboardVariableOverride)(nil)).Elem()
}

func (o DashboardGroupDashboardVariableOverrideOutput) ToDashboardGroupDashboardVariableOverrideOutput() DashboardGroupDashboardVariableOverrideOutput {
	return o
}

func (o DashboardGroupDashboardVariableOverrideOutput) ToDashboardGroupDashboardVariableOverrideOutputWithContext(ctx context.Context) DashboardGroupDashboardVariableOverrideOutput {
	return o
}

// A metric time series dimension or property name
func (o DashboardGroupDashboardVariableOverrideOutput) Property() pulumi.StringOutput {
	return o.ApplyT(func(v DashboardGroupDashboardVariableOverride) string { return v.Property }).(pulumi.StringOutput)
}

// List of strings (which will be treated as an OR filter on the property)
func (o DashboardGroupDashboardVariableOverrideOutput) Values() pulumi.StringArrayOutput {
	return o.ApplyT(func(v DashboardGroupDashboardVariableOverride) []string { return v.Values }).(pulumi.StringArrayOutput)
}

// A list of strings of suggested values for this variable; these suggestions will receive priority when values are autosuggested for this variable
func (o DashboardGroupDashboardVariableOverrideOutput) ValuesSuggesteds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v DashboardGroupDashboardVariableOverride) []string { return v.ValuesSuggesteds }).(pulumi.StringArrayOutput)
}

type DashboardGroupDashboardVariableOverrideArrayOutput struct{ *pulumi.OutputState }

func (DashboardGroupDashboardVariableOverrideArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DashboardGroupDashboardVariableOverride)(nil)).Elem()
}

func (o DashboardGroupDashboardVariableOverrideArrayOutput) ToDashboardGroupDashboardVariableOverrideArrayOutput() DashboardGroupDashboardVariableOverrideArrayOutput {
	return o
}

func (o DashboardGroupDashboardVariableOverrideArrayOutput) ToDashboardGroupDashboardVariableOverrideArrayOutputWithContext(ctx context.Context) DashboardGroupDashboardVariableOverrideArrayOutput {
	return o
}

func (o DashboardGroupDashboardVariableOverrideArrayOutput) Index(i pulumi.IntInput) DashboardGroupDashboardVariableOverrideOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) DashboardGroupDashboardVariableOverride {
		return vs[0].([]DashboardGroupDashboardVariableOverride)[vs[1].(int)]
	}).(DashboardGroupDashboardVariableOverrideOutput)
}

type DashboardGroupImportQualifier struct {
	// Filter to apply to each chart in the dashboard
	Filters []DashboardGroupImportQualifierFilter `pulumi:"filters"`
	Metric  *string                               `pulumi:"metric"`
}

// DashboardGroupImportQualifierInput is an input type that accepts DashboardGroupImportQualifierArgs and DashboardGroupImportQualifierOutput values.
// You can construct a concrete instance of `DashboardGroupImportQualifierInput` via:
//
//	DashboardGroupImportQualifierArgs{...}
type DashboardGroupImportQualifierInput interface {
	pulumi.Input

	ToDashboardGroupImportQualifierOutput() DashboardGroupImportQualifierOutput
	ToDashboardGroupImportQualifierOutputWithContext(context.Context) DashboardGroupImportQualifierOutput
}

type DashboardGroupImportQualifierArgs struct {
	// Filter to apply to each chart in the dashboard
	Filters DashboardGroupImportQualifierFilterArrayInput `pulumi:"filters"`
	Metric  pulumi.StringPtrInput                         `pulumi:"metric"`
}

func (DashboardGroupImportQualifierArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DashboardGroupImportQualifier)(nil)).Elem()
}

func (i DashboardGroupImportQualifierArgs) ToDashboardGroupImportQualifierOutput() DashboardGroupImportQualifierOutput {
	return i.ToDashboardGroupImportQualifierOutputWithContext(context.Background())
}

func (i DashboardGroupImportQualifierArgs) ToDashboardGroupImportQualifierOutputWithContext(ctx context.Context) DashboardGroupImportQualifierOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardGroupImportQualifierOutput)
}

// DashboardGroupImportQualifierArrayInput is an input type that accepts DashboardGroupImportQualifierArray and DashboardGroupImportQualifierArrayOutput values.
// You can construct a concrete instance of `DashboardGroupImportQualifierArrayInput` via:
//
//	DashboardGroupImportQualifierArray{ DashboardGroupImportQualifierArgs{...} }
type DashboardGroupImportQualifierArrayInput interface {
	pulumi.Input

	ToDashboardGroupImportQualifierArrayOutput() DashboardGroupImportQualifierArrayOutput
	ToDashboardGroupImportQualifierArrayOutputWithContext(context.Context) DashboardGroupImportQualifierArrayOutput
}

type DashboardGroupImportQualifierArray []DashboardGroupImportQualifierInput

func (DashboardGroupImportQualifierArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DashboardGroupImportQualifier)(nil)).Elem()
}

func (i DashboardGroupImportQualifierArray) ToDashboardGroupImportQualifierArrayOutput() DashboardGroupImportQualifierArrayOutput {
	return i.ToDashboardGroupImportQualifierArrayOutputWithContext(context.Background())
}

func (i DashboardGroupImportQualifierArray) ToDashboardGroupImportQualifierArrayOutputWithContext(ctx context.Context) DashboardGroupImportQualifierArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardGroupImportQualifierArrayOutput)
}

type DashboardGroupImportQualifierOutput struct{ *pulumi.OutputState }

func (DashboardGroupImportQualifierOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DashboardGroupImportQualifier)(nil)).Elem()
}

func (o DashboardGroupImportQualifierOutput) ToDashboardGroupImportQualifierOutput() DashboardGroupImportQualifierOutput {
	return o
}

func (o DashboardGroupImportQualifierOutput) ToDashboardGroupImportQualifierOutputWithContext(ctx context.Context) DashboardGroupImportQualifierOutput {
	return o
}

// Filter to apply to each chart in the dashboard
func (o DashboardGroupImportQualifierOutput) Filters() DashboardGroupImportQualifierFilterArrayOutput {
	return o.ApplyT(func(v DashboardGroupImportQualifier) []DashboardGroupImportQualifierFilter { return v.Filters }).(DashboardGroupImportQualifierFilterArrayOutput)
}

func (o DashboardGroupImportQualifierOutput) Metric() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DashboardGroupImportQualifier) *string { return v.Metric }).(pulumi.StringPtrOutput)
}

type DashboardGroupImportQualifierArrayOutput struct{ *pulumi.OutputState }

func (DashboardGroupImportQualifierArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DashboardGroupImportQualifier)(nil)).Elem()
}

func (o DashboardGroupImportQualifierArrayOutput) ToDashboardGroupImportQualifierArrayOutput() DashboardGroupImportQualifierArrayOutput {
	return o
}

func (o DashboardGroupImportQualifierArrayOutput) ToDashboardGroupImportQualifierArrayOutputWithContext(ctx context.Context) DashboardGroupImportQualifierArrayOutput {
	return o
}

func (o DashboardGroupImportQualifierArrayOutput) Index(i pulumi.IntInput) DashboardGroupImportQualifierOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) DashboardGroupImportQualifier {
		return vs[0].([]DashboardGroupImportQualifier)[vs[1].(int)]
	}).(DashboardGroupImportQualifierOutput)
}

type DashboardGroupImportQualifierFilter struct {
	// (false by default) Whether this filter should be a "not" filter
	Negated *bool `pulumi:"negated"`
	// A metric time series dimension or property name
	Property string `pulumi:"property"`
	// List of strings (which will be treated as an OR filter on the property)
	Values []string `pulumi:"values"`
}

// DashboardGroupImportQualifierFilterInput is an input type that accepts DashboardGroupImportQualifierFilterArgs and DashboardGroupImportQualifierFilterOutput values.
// You can construct a concrete instance of `DashboardGroupImportQualifierFilterInput` via:
//
//	DashboardGroupImportQualifierFilterArgs{...}
type DashboardGroupImportQualifierFilterInput interface {
	pulumi.Input

	ToDashboardGroupImportQualifierFilterOutput() DashboardGroupImportQualifierFilterOutput
	ToDashboardGroupImportQualifierFilterOutputWithContext(context.Context) DashboardGroupImportQualifierFilterOutput
}

type DashboardGroupImportQualifierFilterArgs struct {
	// (false by default) Whether this filter should be a "not" filter
	Negated pulumi.BoolPtrInput `pulumi:"negated"`
	// A metric time series dimension or property name
	Property pulumi.StringInput `pulumi:"property"`
	// List of strings (which will be treated as an OR filter on the property)
	Values pulumi.StringArrayInput `pulumi:"values"`
}

func (DashboardGroupImportQualifierFilterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DashboardGroupImportQualifierFilter)(nil)).Elem()
}

func (i DashboardGroupImportQualifierFilterArgs) ToDashboardGroupImportQualifierFilterOutput() DashboardGroupImportQualifierFilterOutput {
	return i.ToDashboardGroupImportQualifierFilterOutputWithContext(context.Background())
}

func (i DashboardGroupImportQualifierFilterArgs) ToDashboardGroupImportQualifierFilterOutputWithContext(ctx context.Context) DashboardGroupImportQualifierFilterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardGroupImportQualifierFilterOutput)
}

// DashboardGroupImportQualifierFilterArrayInput is an input type that accepts DashboardGroupImportQualifierFilterArray and DashboardGroupImportQualifierFilterArrayOutput values.
// You can construct a concrete instance of `DashboardGroupImportQualifierFilterArrayInput` via:
//
//	DashboardGroupImportQualifierFilterArray{ DashboardGroupImportQualifierFilterArgs{...} }
type DashboardGroupImportQualifierFilterArrayInput interface {
	pulumi.Input

	ToDashboardGroupImportQualifierFilterArrayOutput() DashboardGroupImportQualifierFilterArrayOutput
	ToDashboardGroupImportQualifierFilterArrayOutputWithContext(context.Context) DashboardGroupImportQualifierFilterArrayOutput
}

type DashboardGroupImportQualifierFilterArray []DashboardGroupImportQualifierFilterInput

func (DashboardGroupImportQualifierFilterArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DashboardGroupImportQualifierFilter)(nil)).Elem()
}

func (i DashboardGroupImportQualifierFilterArray) ToDashboardGroupImportQualifierFilterArrayOutput() DashboardGroupImportQualifierFilterArrayOutput {
	return i.ToDashboardGroupImportQualifierFilterArrayOutputWithContext(context.Background())
}

func (i DashboardGroupImportQualifierFilterArray) ToDashboardGroupImportQualifierFilterArrayOutputWithContext(ctx context.Context) DashboardGroupImportQualifierFilterArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardGroupImportQualifierFilterArrayOutput)
}

type DashboardGroupImportQualifierFilterOutput struct{ *pulumi.OutputState }

func (DashboardGroupImportQualifierFilterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DashboardGroupImportQualifierFilter)(nil)).Elem()
}

func (o DashboardGroupImportQualifierFilterOutput) ToDashboardGroupImportQualifierFilterOutput() DashboardGroupImportQualifierFilterOutput {
	return o
}

func (o DashboardGroupImportQualifierFilterOutput) ToDashboardGroupImportQualifierFilterOutputWithContext(ctx context.Context) DashboardGroupImportQualifierFilterOutput {
	return o
}

// (false by default) Whether this filter should be a "not" filter
func (o DashboardGroupImportQualifierFilterOutput) Negated() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v DashboardGroupImportQualifierFilter) *bool { return v.Negated }).(pulumi.BoolPtrOutput)
}

// A metric time series dimension or property name
func (o DashboardGroupImportQualifierFilterOutput) Property() pulumi.StringOutput {
	return o.ApplyT(func(v DashboardGroupImportQualifierFilter) string { return v.Property }).(pulumi.StringOutput)
}

// List of strings (which will be treated as an OR filter on the property)
func (o DashboardGroupImportQualifierFilterOutput) Values() pulumi.StringArrayOutput {
	return o.ApplyT(func(v DashboardGroupImportQualifierFilter) []string { return v.Values }).(pulumi.StringArrayOutput)
}

type DashboardGroupImportQualifierFilterArrayOutput struct{ *pulumi.OutputState }

func (DashboardGroupImportQualifierFilterArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DashboardGroupImportQualifierFilter)(nil)).Elem()
}

func (o DashboardGroupImportQualifierFilterArrayOutput) ToDashboardGroupImportQualifierFilterArrayOutput() DashboardGroupImportQualifierFilterArrayOutput {
	return o
}

func (o DashboardGroupImportQualifierFilterArrayOutput) ToDashboardGroupImportQualifierFilterArrayOutputWithContext(ctx context.Context) DashboardGroupImportQualifierFilterArrayOutput {
	return o
}

func (o DashboardGroupImportQualifierFilterArrayOutput) Index(i pulumi.IntInput) DashboardGroupImportQualifierFilterOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) DashboardGroupImportQualifierFilter {
		return vs[0].([]DashboardGroupImportQualifierFilter)[vs[1].(int)]
	}).(DashboardGroupImportQualifierFilterOutput)
}

type DashboardGroupPermission struct {
	// Action the user, team, or organization can take with the dashboard group. List of values (value can be "READ" or "WRITE").
	Actions []string `pulumi:"actions"`
	// ID of the user, team, or organization for which you're granting permissions.
	PrincipalId string `pulumi:"principalId"`
	// Clarify whether this permission configuration is for a user, a team, or an organization. Value can be one of "USER", "TEAM", or "ORG".
	PrincipalType string `pulumi:"principalType"`
}

// DashboardGroupPermissionInput is an input type that accepts DashboardGroupPermissionArgs and DashboardGroupPermissionOutput values.
// You can construct a concrete instance of `DashboardGroupPermissionInput` via:
//
//	DashboardGroupPermissionArgs{...}
type DashboardGroupPermissionInput interface {
	pulumi.Input

	ToDashboardGroupPermissionOutput() DashboardGroupPermissionOutput
	ToDashboardGroupPermissionOutputWithContext(context.Context) DashboardGroupPermissionOutput
}

type DashboardGroupPermissionArgs struct {
	// Action the user, team, or organization can take with the dashboard group. List of values (value can be "READ" or "WRITE").
	Actions pulumi.StringArrayInput `pulumi:"actions"`
	// ID of the user, team, or organization for which you're granting permissions.
	PrincipalId pulumi.StringInput `pulumi:"principalId"`
	// Clarify whether this permission configuration is for a user, a team, or an organization. Value can be one of "USER", "TEAM", or "ORG".
	PrincipalType pulumi.StringInput `pulumi:"principalType"`
}

func (DashboardGroupPermissionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DashboardGroupPermission)(nil)).Elem()
}

func (i DashboardGroupPermissionArgs) ToDashboardGroupPermissionOutput() DashboardGroupPermissionOutput {
	return i.ToDashboardGroupPermissionOutputWithContext(context.Background())
}

func (i DashboardGroupPermissionArgs) ToDashboardGroupPermissionOutputWithContext(ctx context.Context) DashboardGroupPermissionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardGroupPermissionOutput)
}

// DashboardGroupPermissionArrayInput is an input type that accepts DashboardGroupPermissionArray and DashboardGroupPermissionArrayOutput values.
// You can construct a concrete instance of `DashboardGroupPermissionArrayInput` via:
//
//	DashboardGroupPermissionArray{ DashboardGroupPermissionArgs{...} }
type DashboardGroupPermissionArrayInput interface {
	pulumi.Input

	ToDashboardGroupPermissionArrayOutput() DashboardGroupPermissionArrayOutput
	ToDashboardGroupPermissionArrayOutputWithContext(context.Context) DashboardGroupPermissionArrayOutput
}

type DashboardGroupPermissionArray []DashboardGroupPermissionInput

func (DashboardGroupPermissionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DashboardGroupPermission)(nil)).Elem()
}

func (i DashboardGroupPermissionArray) ToDashboardGroupPermissionArrayOutput() DashboardGroupPermissionArrayOutput {
	return i.ToDashboardGroupPermissionArrayOutputWithContext(context.Background())
}

func (i DashboardGroupPermissionArray) ToDashboardGroupPermissionArrayOutputWithContext(ctx context.Context) DashboardGroupPermissionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardGroupPermissionArrayOutput)
}

type DashboardGroupPermissionOutput struct{ *pulumi.OutputState }

func (DashboardGroupPermissionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DashboardGroupPermission)(nil)).Elem()
}

func (o DashboardGroupPermissionOutput) ToDashboardGroupPermissionOutput() DashboardGroupPermissionOutput {
	return o
}

func (o DashboardGroupPermissionOutput) ToDashboardGroupPermissionOutputWithContext(ctx context.Context) DashboardGroupPermissionOutput {
	return o
}

// Action the user, team, or organization can take with the dashboard group. List of values (value can be "READ" or "WRITE").
func (o DashboardGroupPermissionOutput) Actions() pulumi.StringArrayOutput {
	return o.ApplyT(func(v DashboardGroupPermission) []string { return v.Actions }).(pulumi.StringArrayOutput)
}

// ID of the user, team, or organization for which you're granting permissions.
func (o DashboardGroupPermissionOutput) PrincipalId() pulumi.StringOutput {
	return o.ApplyT(func(v DashboardGroupPermission) string { return v.PrincipalId }).(pulumi.StringOutput)
}

// Clarify whether this permission configuration is for a user, a team, or an organization. Value can be one of "USER", "TEAM", or "ORG".
func (o DashboardGroupPermissionOutput) PrincipalType() pulumi.StringOutput {
	return o.ApplyT(func(v DashboardGroupPermission) string { return v.PrincipalType }).(pulumi.StringOutput)
}

type DashboardGroupPermissionArrayOutput struct{ *pulumi.OutputState }

func (DashboardGroupPermissionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DashboardGroupPermission)(nil)).Elem()
}

func (o DashboardGroupPermissionArrayOutput) ToDashboardGroupPermissionArrayOutput() DashboardGroupPermissionArrayOutput {
	return o
}

func (o DashboardGroupPermissionArrayOutput) ToDashboardGroupPermissionArrayOutputWithContext(ctx context.Context) DashboardGroupPermissionArrayOutput {
	return o
}

func (o DashboardGroupPermissionArrayOutput) Index(i pulumi.IntInput) DashboardGroupPermissionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) DashboardGroupPermission {
		return vs[0].([]DashboardGroupPermission)[vs[1].(int)]
	}).(DashboardGroupPermissionOutput)
}

type DashboardPermissions struct {
	// List of read and write permission configurations to specify which user, team, and organization can view and/or edit your dashboard. Use the `permissions.parent` instead if you want to inherit permissions.
	Acls []DashboardPermissionsAcl `pulumi:"acls"`
	// ID of the dashboard group you want your dashboard to inherit permissions from. Use the `permissions.acl` instead if you want to specify various read and write permission configurations.
	Parent *string `pulumi:"parent"`
}

// DashboardPermissionsInput is an input type that accepts DashboardPermissionsArgs and DashboardPermissionsOutput values.
// You can construct a concrete instance of `DashboardPermissionsInput` via:
//
//	DashboardPermissionsArgs{...}
type DashboardPermissionsInput interface {
	pulumi.Input

	ToDashboardPermissionsOutput() DashboardPermissionsOutput
	ToDashboardPermissionsOutputWithContext(context.Context) DashboardPermissionsOutput
}

type DashboardPermissionsArgs struct {
	// List of read and write permission configurations to specify which user, team, and organization can view and/or edit your dashboard. Use the `permissions.parent` instead if you want to inherit permissions.
	Acls DashboardPermissionsAclArrayInput `pulumi:"acls"`
	// ID of the dashboard group you want your dashboard to inherit permissions from. Use the `permissions.acl` instead if you want to specify various read and write permission configurations.
	Parent pulumi.StringPtrInput `pulumi:"parent"`
}

func (DashboardPermissionsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DashboardPermissions)(nil)).Elem()
}

func (i DashboardPermissionsArgs) ToDashboardPermissionsOutput() DashboardPermissionsOutput {
	return i.ToDashboardPermissionsOutputWithContext(context.Background())
}

func (i DashboardPermissionsArgs) ToDashboardPermissionsOutputWithContext(ctx context.Context) DashboardPermissionsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardPermissionsOutput)
}

func (i DashboardPermissionsArgs) ToDashboardPermissionsPtrOutput() DashboardPermissionsPtrOutput {
	return i.ToDashboardPermissionsPtrOutputWithContext(context.Background())
}

func (i DashboardPermissionsArgs) ToDashboardPermissionsPtrOutputWithContext(ctx context.Context) DashboardPermissionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardPermissionsOutput).ToDashboardPermissionsPtrOutputWithContext(ctx)
}

// DashboardPermissionsPtrInput is an input type that accepts DashboardPermissionsArgs, DashboardPermissionsPtr and DashboardPermissionsPtrOutput values.
// You can construct a concrete instance of `DashboardPermissionsPtrInput` via:
//
//	        DashboardPermissionsArgs{...}
//
//	or:
//
//	        nil
type DashboardPermissionsPtrInput interface {
	pulumi.Input

	ToDashboardPermissionsPtrOutput() DashboardPermissionsPtrOutput
	ToDashboardPermissionsPtrOutputWithContext(context.Context) DashboardPermissionsPtrOutput
}

type dashboardPermissionsPtrType DashboardPermissionsArgs

func DashboardPermissionsPtr(v *DashboardPermissionsArgs) DashboardPermissionsPtrInput {
	return (*dashboardPermissionsPtrType)(v)
}

func (*dashboardPermissionsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DashboardPermissions)(nil)).Elem()
}

func (i *dashboardPermissionsPtrType) ToDashboardPermissionsPtrOutput() DashboardPermissionsPtrOutput {
	return i.ToDashboardPermissionsPtrOutputWithContext(context.Background())
}

func (i *dashboardPermissionsPtrType) ToDashboardPermissionsPtrOutputWithContext(ctx context.Context) DashboardPermissionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardPermissionsPtrOutput)
}

type DashboardPermissionsOutput struct{ *pulumi.OutputState }

func (DashboardPermissionsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DashboardPermissions)(nil)).Elem()
}

func (o DashboardPermissionsOutput) ToDashboardPermissionsOutput() DashboardPermissionsOutput {
	return o
}

func (o DashboardPermissionsOutput) ToDashboardPermissionsOutputWithContext(ctx context.Context) DashboardPermissionsOutput {
	return o
}

func (o DashboardPermissionsOutput) ToDashboardPermissionsPtrOutput() DashboardPermissionsPtrOutput {
	return o.ToDashboardPermissionsPtrOutputWithContext(context.Background())
}

func (o DashboardPermissionsOutput) ToDashboardPermissionsPtrOutputWithContext(ctx context.Context) DashboardPermissionsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DashboardPermissions) *DashboardPermissions {
		return &v
	}).(DashboardPermissionsPtrOutput)
}

// List of read and write permission configurations to specify which user, team, and organization can view and/or edit your dashboard. Use the `permissions.parent` instead if you want to inherit permissions.
func (o DashboardPermissionsOutput) Acls() DashboardPermissionsAclArrayOutput {
	return o.ApplyT(func(v DashboardPermissions) []DashboardPermissionsAcl { return v.Acls }).(DashboardPermissionsAclArrayOutput)
}

// ID of the dashboard group you want your dashboard to inherit permissions from. Use the `permissions.acl` instead if you want to specify various read and write permission configurations.
func (o DashboardPermissionsOutput) Parent() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DashboardPermissions) *string { return v.Parent }).(pulumi.StringPtrOutput)
}

type DashboardPermissionsPtrOutput struct{ *pulumi.OutputState }

func (DashboardPermissionsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DashboardPermissions)(nil)).Elem()
}

func (o DashboardPermissionsPtrOutput) ToDashboardPermissionsPtrOutput() DashboardPermissionsPtrOutput {
	return o
}

func (o DashboardPermissionsPtrOutput) ToDashboardPermissionsPtrOutputWithContext(ctx context.Context) DashboardPermissionsPtrOutput {
	return o
}

func (o DashboardPermissionsPtrOutput) Elem() DashboardPermissionsOutput {
	return o.ApplyT(func(v *DashboardPermissions) DashboardPermissions {
		if v != nil {
			return *v
		}
		var ret DashboardPermissions
		return ret
	}).(DashboardPermissionsOutput)
}

// List of read and write permission configurations to specify which user, team, and organization can view and/or edit your dashboard. Use the `permissions.parent` instead if you want to inherit permissions.
func (o DashboardPermissionsPtrOutput) Acls() DashboardPermissionsAclArrayOutput {
	return o.ApplyT(func(v *DashboardPermissions) []DashboardPermissionsAcl {
		if v == nil {
			return nil
		}
		return v.Acls
	}).(DashboardPermissionsAclArrayOutput)
}

// ID of the dashboard group you want your dashboard to inherit permissions from. Use the `permissions.acl` instead if you want to specify various read and write permission configurations.
func (o DashboardPermissionsPtrOutput) Parent() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DashboardPermissions) *string {
		if v == nil {
			return nil
		}
		return v.Parent
	}).(pulumi.StringPtrOutput)
}

type DashboardPermissionsAcl struct {
	// Action the user, team, or organization can take with the dashboard. List of values (value can be "READ" or "WRITE").
	Actions []string `pulumi:"actions"`
	// ID of the user, team, or organization for which you're granting permissions.
	PrincipalId string `pulumi:"principalId"`
	// Clarify whether this permission configuration is for a user, a team, or an organization. Value can be one of "USER", "TEAM", or "ORG".
	PrincipalType string `pulumi:"principalType"`
}

// DashboardPermissionsAclInput is an input type that accepts DashboardPermissionsAclArgs and DashboardPermissionsAclOutput values.
// You can construct a concrete instance of `DashboardPermissionsAclInput` via:
//
//	DashboardPermissionsAclArgs{...}
type DashboardPermissionsAclInput interface {
	pulumi.Input

	ToDashboardPermissionsAclOutput() DashboardPermissionsAclOutput
	ToDashboardPermissionsAclOutputWithContext(context.Context) DashboardPermissionsAclOutput
}

type DashboardPermissionsAclArgs struct {
	// Action the user, team, or organization can take with the dashboard. List of values (value can be "READ" or "WRITE").
	Actions pulumi.StringArrayInput `pulumi:"actions"`
	// ID of the user, team, or organization for which you're granting permissions.
	PrincipalId pulumi.StringInput `pulumi:"principalId"`
	// Clarify whether this permission configuration is for a user, a team, or an organization. Value can be one of "USER", "TEAM", or "ORG".
	PrincipalType pulumi.StringInput `pulumi:"principalType"`
}

func (DashboardPermissionsAclArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DashboardPermissionsAcl)(nil)).Elem()
}

func (i DashboardPermissionsAclArgs) ToDashboardPermissionsAclOutput() DashboardPermissionsAclOutput {
	return i.ToDashboardPermissionsAclOutputWithContext(context.Background())
}

func (i DashboardPermissionsAclArgs) ToDashboardPermissionsAclOutputWithContext(ctx context.Context) DashboardPermissionsAclOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardPermissionsAclOutput)
}

// DashboardPermissionsAclArrayInput is an input type that accepts DashboardPermissionsAclArray and DashboardPermissionsAclArrayOutput values.
// You can construct a concrete instance of `DashboardPermissionsAclArrayInput` via:
//
//	DashboardPermissionsAclArray{ DashboardPermissionsAclArgs{...} }
type DashboardPermissionsAclArrayInput interface {
	pulumi.Input

	ToDashboardPermissionsAclArrayOutput() DashboardPermissionsAclArrayOutput
	ToDashboardPermissionsAclArrayOutputWithContext(context.Context) DashboardPermissionsAclArrayOutput
}

type DashboardPermissionsAclArray []DashboardPermissionsAclInput

func (DashboardPermissionsAclArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DashboardPermissionsAcl)(nil)).Elem()
}

func (i DashboardPermissionsAclArray) ToDashboardPermissionsAclArrayOutput() DashboardPermissionsAclArrayOutput {
	return i.ToDashboardPermissionsAclArrayOutputWithContext(context.Background())
}

func (i DashboardPermissionsAclArray) ToDashboardPermissionsAclArrayOutputWithContext(ctx context.Context) DashboardPermissionsAclArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardPermissionsAclArrayOutput)
}

type DashboardPermissionsAclOutput struct{ *pulumi.OutputState }

func (DashboardPermissionsAclOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DashboardPermissionsAcl)(nil)).Elem()
}

func (o DashboardPermissionsAclOutput) ToDashboardPermissionsAclOutput() DashboardPermissionsAclOutput {
	return o
}

func (o DashboardPermissionsAclOutput) ToDashboardPermissionsAclOutputWithContext(ctx context.Context) DashboardPermissionsAclOutput {
	return o
}

// Action the user, team, or organization can take with the dashboard. List of values (value can be "READ" or "WRITE").
func (o DashboardPermissionsAclOutput) Actions() pulumi.StringArrayOutput {
	return o.ApplyT(func(v DashboardPermissionsAcl) []string { return v.Actions }).(pulumi.StringArrayOutput)
}

// ID of the user, team, or organization for which you're granting permissions.
func (o DashboardPermissionsAclOutput) PrincipalId() pulumi.StringOutput {
	return o.ApplyT(func(v DashboardPermissionsAcl) string { return v.PrincipalId }).(pulumi.StringOutput)
}

// Clarify whether this permission configuration is for a user, a team, or an organization. Value can be one of "USER", "TEAM", or "ORG".
func (o DashboardPermissionsAclOutput) PrincipalType() pulumi.StringOutput {
	return o.ApplyT(func(v DashboardPermissionsAcl) string { return v.PrincipalType }).(pulumi.StringOutput)
}

type DashboardPermissionsAclArrayOutput struct{ *pulumi.OutputState }

func (DashboardPermissionsAclArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DashboardPermissionsAcl)(nil)).Elem()
}

func (o DashboardPermissionsAclArrayOutput) ToDashboardPermissionsAclArrayOutput() DashboardPermissionsAclArrayOutput {
	return o
}

func (o DashboardPermissionsAclArrayOutput) ToDashboardPermissionsAclArrayOutputWithContext(ctx context.Context) DashboardPermissionsAclArrayOutput {
	return o
}

func (o DashboardPermissionsAclArrayOutput) Index(i pulumi.IntInput) DashboardPermissionsAclOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) DashboardPermissionsAcl {
		return vs[0].([]DashboardPermissionsAcl)[vs[1].(int)]
	}).(DashboardPermissionsAclOutput)
}

type DashboardSelectedEventOverlay struct {
	// Search term used to choose the events shown in the overlay.
	Signal string `pulumi:"signal"`
	// Each element specifies a filter to use against the signal specified in the `signal`.
	Sources []DashboardSelectedEventOverlaySource `pulumi:"sources"`
	// Can be set to `eventTimeSeries` (the default) to refer to externally reported events, or `detectorEvents` to refer to events from detector triggers.
	Type *string `pulumi:"type"`
}

// DashboardSelectedEventOverlayInput is an input type that accepts DashboardSelectedEventOverlayArgs and DashboardSelectedEventOverlayOutput values.
// You can construct a concrete instance of `DashboardSelectedEventOverlayInput` via:
//
//	DashboardSelectedEventOverlayArgs{...}
type DashboardSelectedEventOverlayInput interface {
	pulumi.Input

	ToDashboardSelectedEventOverlayOutput() DashboardSelectedEventOverlayOutput
	ToDashboardSelectedEventOverlayOutputWithContext(context.Context) DashboardSelectedEventOverlayOutput
}

type DashboardSelectedEventOverlayArgs struct {
	// Search term used to choose the events shown in the overlay.
	Signal pulumi.StringInput `pulumi:"signal"`
	// Each element specifies a filter to use against the signal specified in the `signal`.
	Sources DashboardSelectedEventOverlaySourceArrayInput `pulumi:"sources"`
	// Can be set to `eventTimeSeries` (the default) to refer to externally reported events, or `detectorEvents` to refer to events from detector triggers.
	Type pulumi.StringPtrInput `pulumi:"type"`
}

func (DashboardSelectedEventOverlayArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DashboardSelectedEventOverlay)(nil)).Elem()
}

func (i DashboardSelectedEventOverlayArgs) ToDashboardSelectedEventOverlayOutput() DashboardSelectedEventOverlayOutput {
	return i.ToDashboardSelectedEventOverlayOutputWithContext(context.Background())
}

func (i DashboardSelectedEventOverlayArgs) ToDashboardSelectedEventOverlayOutputWithContext(ctx context.Context) DashboardSelectedEventOverlayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardSelectedEventOverlayOutput)
}

// DashboardSelectedEventOverlayArrayInput is an input type that accepts DashboardSelectedEventOverlayArray and DashboardSelectedEventOverlayArrayOutput values.
// You can construct a concrete instance of `DashboardSelectedEventOverlayArrayInput` via:
//
//	DashboardSelectedEventOverlayArray{ DashboardSelectedEventOverlayArgs{...} }
type DashboardSelectedEventOverlayArrayInput interface {
	pulumi.Input

	ToDashboardSelectedEventOverlayArrayOutput() DashboardSelectedEventOverlayArrayOutput
	ToDashboardSelectedEventOverlayArrayOutputWithContext(context.Context) DashboardSelectedEventOverlayArrayOutput
}

type DashboardSelectedEventOverlayArray []DashboardSelectedEventOverlayInput

func (DashboardSelectedEventOverlayArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DashboardSelectedEventOverlay)(nil)).Elem()
}

func (i DashboardSelectedEventOverlayArray) ToDashboardSelectedEventOverlayArrayOutput() DashboardSelectedEventOverlayArrayOutput {
	return i.ToDashboardSelectedEventOverlayArrayOutputWithContext(context.Background())
}

func (i DashboardSelectedEventOverlayArray) ToDashboardSelectedEventOverlayArrayOutputWithContext(ctx context.Context) DashboardSelectedEventOverlayArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardSelectedEventOverlayArrayOutput)
}

type DashboardSelectedEventOverlayOutput struct{ *pulumi.OutputState }

func (DashboardSelectedEventOverlayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DashboardSelectedEventOverlay)(nil)).Elem()
}

func (o DashboardSelectedEventOverlayOutput) ToDashboardSelectedEventOverlayOutput() DashboardSelectedEventOverlayOutput {
	return o
}

func (o DashboardSelectedEventOverlayOutput) ToDashboardSelectedEventOverlayOutputWithContext(ctx context.Context) DashboardSelectedEventOverlayOutput {
	return o
}

// Search term used to choose the events shown in the overlay.
func (o DashboardSelectedEventOverlayOutput) Signal() pulumi.StringOutput {
	return o.ApplyT(func(v DashboardSelectedEventOverlay) string { return v.Signal }).(pulumi.StringOutput)
}

// Each element specifies a filter to use against the signal specified in the `signal`.
func (o DashboardSelectedEventOverlayOutput) Sources() DashboardSelectedEventOverlaySourceArrayOutput {
	return o.ApplyT(func(v DashboardSelectedEventOverlay) []DashboardSelectedEventOverlaySource { return v.Sources }).(DashboardSelectedEventOverlaySourceArrayOutput)
}

// Can be set to `eventTimeSeries` (the default) to refer to externally reported events, or `detectorEvents` to refer to events from detector triggers.
func (o DashboardSelectedEventOverlayOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DashboardSelectedEventOverlay) *string { return v.Type }).(pulumi.StringPtrOutput)
}

type DashboardSelectedEventOverlayArrayOutput struct{ *pulumi.OutputState }

func (DashboardSelectedEventOverlayArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DashboardSelectedEventOverlay)(nil)).Elem()
}

func (o DashboardSelectedEventOverlayArrayOutput) ToDashboardSelectedEventOverlayArrayOutput() DashboardSelectedEventOverlayArrayOutput {
	return o
}

func (o DashboardSelectedEventOverlayArrayOutput) ToDashboardSelectedEventOverlayArrayOutputWithContext(ctx context.Context) DashboardSelectedEventOverlayArrayOutput {
	return o
}

func (o DashboardSelectedEventOverlayArrayOutput) Index(i pulumi.IntInput) DashboardSelectedEventOverlayOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) DashboardSelectedEventOverlay {
		return vs[0].([]DashboardSelectedEventOverlay)[vs[1].(int)]
	}).(DashboardSelectedEventOverlayOutput)
}

type DashboardSelectedEventOverlaySource struct {
	// If true, only data that does not match the specified value of the specified property appear in the event overlay. Defaults to `false`.
	Negated *bool `pulumi:"negated"`
	// The name of a dimension to filter against.
	Property string `pulumi:"property"`
	// A list of values to be used with the `property`, they will be combined via `OR`.
	Values []string `pulumi:"values"`
}

// DashboardSelectedEventOverlaySourceInput is an input type that accepts DashboardSelectedEventOverlaySourceArgs and DashboardSelectedEventOverlaySourceOutput values.
// You can construct a concrete instance of `DashboardSelectedEventOverlaySourceInput` via:
//
//	DashboardSelectedEventOverlaySourceArgs{...}
type DashboardSelectedEventOverlaySourceInput interface {
	pulumi.Input

	ToDashboardSelectedEventOverlaySourceOutput() DashboardSelectedEventOverlaySourceOutput
	ToDashboardSelectedEventOverlaySourceOutputWithContext(context.Context) DashboardSelectedEventOverlaySourceOutput
}

type DashboardSelectedEventOverlaySourceArgs struct {
	// If true, only data that does not match the specified value of the specified property appear in the event overlay. Defaults to `false`.
	Negated pulumi.BoolPtrInput `pulumi:"negated"`
	// The name of a dimension to filter against.
	Property pulumi.StringInput `pulumi:"property"`
	// A list of values to be used with the `property`, they will be combined via `OR`.
	Values pulumi.StringArrayInput `pulumi:"values"`
}

func (DashboardSelectedEventOverlaySourceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DashboardSelectedEventOverlaySource)(nil)).Elem()
}

func (i DashboardSelectedEventOverlaySourceArgs) ToDashboardSelectedEventOverlaySourceOutput() DashboardSelectedEventOverlaySourceOutput {
	return i.ToDashboardSelectedEventOverlaySourceOutputWithContext(context.Background())
}

func (i DashboardSelectedEventOverlaySourceArgs) ToDashboardSelectedEventOverlaySourceOutputWithContext(ctx context.Context) DashboardSelectedEventOverlaySourceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardSelectedEventOverlaySourceOutput)
}

// DashboardSelectedEventOverlaySourceArrayInput is an input type that accepts DashboardSelectedEventOverlaySourceArray and DashboardSelectedEventOverlaySourceArrayOutput values.
// You can construct a concrete instance of `DashboardSelectedEventOverlaySourceArrayInput` via:
//
//	DashboardSelectedEventOverlaySourceArray{ DashboardSelectedEventOverlaySourceArgs{...} }
type DashboardSelectedEventOverlaySourceArrayInput interface {
	pulumi.Input

	ToDashboardSelectedEventOverlaySourceArrayOutput() DashboardSelectedEventOverlaySourceArrayOutput
	ToDashboardSelectedEventOverlaySourceArrayOutputWithContext(context.Context) DashboardSelectedEventOverlaySourceArrayOutput
}

type DashboardSelectedEventOverlaySourceArray []DashboardSelectedEventOverlaySourceInput

func (DashboardSelectedEventOverlaySourceArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DashboardSelectedEventOverlaySource)(nil)).Elem()
}

func (i DashboardSelectedEventOverlaySourceArray) ToDashboardSelectedEventOverlaySourceArrayOutput() DashboardSelectedEventOverlaySourceArrayOutput {
	return i.ToDashboardSelectedEventOverlaySourceArrayOutputWithContext(context.Background())
}

func (i DashboardSelectedEventOverlaySourceArray) ToDashboardSelectedEventOverlaySourceArrayOutputWithContext(ctx context.Context) DashboardSelectedEventOverlaySourceArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardSelectedEventOverlaySourceArrayOutput)
}

type DashboardSelectedEventOverlaySourceOutput struct{ *pulumi.OutputState }

func (DashboardSelectedEventOverlaySourceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DashboardSelectedEventOverlaySource)(nil)).Elem()
}

func (o DashboardSelectedEventOverlaySourceOutput) ToDashboardSelectedEventOverlaySourceOutput() DashboardSelectedEventOverlaySourceOutput {
	return o
}

func (o DashboardSelectedEventOverlaySourceOutput) ToDashboardSelectedEventOverlaySourceOutputWithContext(ctx context.Context) DashboardSelectedEventOverlaySourceOutput {
	return o
}

// If true, only data that does not match the specified value of the specified property appear in the event overlay. Defaults to `false`.
func (o DashboardSelectedEventOverlaySourceOutput) Negated() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v DashboardSelectedEventOverlaySource) *bool { return v.Negated }).(pulumi.BoolPtrOutput)
}

// The name of a dimension to filter against.
func (o DashboardSelectedEventOverlaySourceOutput) Property() pulumi.StringOutput {
	return o.ApplyT(func(v DashboardSelectedEventOverlaySource) string { return v.Property }).(pulumi.StringOutput)
}

// A list of values to be used with the `property`, they will be combined via `OR`.
func (o DashboardSelectedEventOverlaySourceOutput) Values() pulumi.StringArrayOutput {
	return o.ApplyT(func(v DashboardSelectedEventOverlaySource) []string { return v.Values }).(pulumi.StringArrayOutput)
}

type DashboardSelectedEventOverlaySourceArrayOutput struct{ *pulumi.OutputState }

func (DashboardSelectedEventOverlaySourceArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DashboardSelectedEventOverlaySource)(nil)).Elem()
}

func (o DashboardSelectedEventOverlaySourceArrayOutput) ToDashboardSelectedEventOverlaySourceArrayOutput() DashboardSelectedEventOverlaySourceArrayOutput {
	return o
}

func (o DashboardSelectedEventOverlaySourceArrayOutput) ToDashboardSelectedEventOverlaySourceArrayOutputWithContext(ctx context.Context) DashboardSelectedEventOverlaySourceArrayOutput {
	return o
}

func (o DashboardSelectedEventOverlaySourceArrayOutput) Index(i pulumi.IntInput) DashboardSelectedEventOverlaySourceOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) DashboardSelectedEventOverlaySource {
		return vs[0].([]DashboardSelectedEventOverlaySource)[vs[1].(int)]
	}).(DashboardSelectedEventOverlaySourceOutput)
}

type DashboardVariable struct {
	// An alias for the dashboard variable. This text will appear as the label for the dropdown field on the dashboard.
	Alias string `pulumi:"alias"`
	// If true, this variable will also match data that doesn't have this property at all.
	ApplyIfExist *bool `pulumi:"applyIfExist"`
	// Variable description.
	Description *string `pulumi:"description"`
	// A metric time series dimension or property name.
	Property string `pulumi:"property"`
	// If `true`, this variable will only apply to charts that have a filter for the property.
	ReplaceOnly *bool `pulumi:"replaceOnly"`
	// If `true`, this variable may only be set to the values listed in `valuesSuggested` and only these values will appear in autosuggestion menus. `false` by default.
	RestrictedSuggestions *bool `pulumi:"restrictedSuggestions"`
	// Determines whether a value is required for this variable (and therefore whether it will be possible to view this dashboard without this filter applied). `false` by default.
	ValueRequired *bool `pulumi:"valueRequired"`
	// List of of strings (which will be treated as an OR filter on the property).
	Values []string `pulumi:"values"`
	// A list of strings of suggested values for this variable; these suggestions will receive priority when values are autosuggested for this variable.
	ValuesSuggesteds []string `pulumi:"valuesSuggesteds"`
}

// DashboardVariableInput is an input type that accepts DashboardVariableArgs and DashboardVariableOutput values.
// You can construct a concrete instance of `DashboardVariableInput` via:
//
//	DashboardVariableArgs{...}
type DashboardVariableInput interface {
	pulumi.Input

	ToDashboardVariableOutput() DashboardVariableOutput
	ToDashboardVariableOutputWithContext(context.Context) DashboardVariableOutput
}

type DashboardVariableArgs struct {
	// An alias for the dashboard variable. This text will appear as the label for the dropdown field on the dashboard.
	Alias pulumi.StringInput `pulumi:"alias"`
	// If true, this variable will also match data that doesn't have this property at all.
	ApplyIfExist pulumi.BoolPtrInput `pulumi:"applyIfExist"`
	// Variable description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// A metric time series dimension or property name.
	Property pulumi.StringInput `pulumi:"property"`
	// If `true`, this variable will only apply to charts that have a filter for the property.
	ReplaceOnly pulumi.BoolPtrInput `pulumi:"replaceOnly"`
	// If `true`, this variable may only be set to the values listed in `valuesSuggested` and only these values will appear in autosuggestion menus. `false` by default.
	RestrictedSuggestions pulumi.BoolPtrInput `pulumi:"restrictedSuggestions"`
	// Determines whether a value is required for this variable (and therefore whether it will be possible to view this dashboard without this filter applied). `false` by default.
	ValueRequired pulumi.BoolPtrInput `pulumi:"valueRequired"`
	// List of of strings (which will be treated as an OR filter on the property).
	Values pulumi.StringArrayInput `pulumi:"values"`
	// A list of strings of suggested values for this variable; these suggestions will receive priority when values are autosuggested for this variable.
	ValuesSuggesteds pulumi.StringArrayInput `pulumi:"valuesSuggesteds"`
}

func (DashboardVariableArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DashboardVariable)(nil)).Elem()
}

func (i DashboardVariableArgs) ToDashboardVariableOutput() DashboardVariableOutput {
	return i.ToDashboardVariableOutputWithContext(context.Background())
}

func (i DashboardVariableArgs) ToDashboardVariableOutputWithContext(ctx context.Context) DashboardVariableOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardVariableOutput)
}

// DashboardVariableArrayInput is an input type that accepts DashboardVariableArray and DashboardVariableArrayOutput values.
// You can construct a concrete instance of `DashboardVariableArrayInput` via:
//
//	DashboardVariableArray{ DashboardVariableArgs{...} }
type DashboardVariableArrayInput interface {
	pulumi.Input

	ToDashboardVariableArrayOutput() DashboardVariableArrayOutput
	ToDashboardVariableArrayOutputWithContext(context.Context) DashboardVariableArrayOutput
}

type DashboardVariableArray []DashboardVariableInput

func (DashboardVariableArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DashboardVariable)(nil)).Elem()
}

func (i DashboardVariableArray) ToDashboardVariableArrayOutput() DashboardVariableArrayOutput {
	return i.ToDashboardVariableArrayOutputWithContext(context.Background())
}

func (i DashboardVariableArray) ToDashboardVariableArrayOutputWithContext(ctx context.Context) DashboardVariableArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardVariableArrayOutput)
}

type DashboardVariableOutput struct{ *pulumi.OutputState }

func (DashboardVariableOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DashboardVariable)(nil)).Elem()
}

func (o DashboardVariableOutput) ToDashboardVariableOutput() DashboardVariableOutput {
	return o
}

func (o DashboardVariableOutput) ToDashboardVariableOutputWithContext(ctx context.Context) DashboardVariableOutput {
	return o
}

// An alias for the dashboard variable. This text will appear as the label for the dropdown field on the dashboard.
func (o DashboardVariableOutput) Alias() pulumi.StringOutput {
	return o.ApplyT(func(v DashboardVariable) string { return v.Alias }).(pulumi.StringOutput)
}

// If true, this variable will also match data that doesn't have this property at all.
func (o DashboardVariableOutput) ApplyIfExist() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v DashboardVariable) *bool { return v.ApplyIfExist }).(pulumi.BoolPtrOutput)
}

// Variable description.
func (o DashboardVariableOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DashboardVariable) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// A metric time series dimension or property name.
func (o DashboardVariableOutput) Property() pulumi.StringOutput {
	return o.ApplyT(func(v DashboardVariable) string { return v.Property }).(pulumi.StringOutput)
}

// If `true`, this variable will only apply to charts that have a filter for the property.
func (o DashboardVariableOutput) ReplaceOnly() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v DashboardVariable) *bool { return v.ReplaceOnly }).(pulumi.BoolPtrOutput)
}

// If `true`, this variable may only be set to the values listed in `valuesSuggested` and only these values will appear in autosuggestion menus. `false` by default.
func (o DashboardVariableOutput) RestrictedSuggestions() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v DashboardVariable) *bool { return v.RestrictedSuggestions }).(pulumi.BoolPtrOutput)
}

// Determines whether a value is required for this variable (and therefore whether it will be possible to view this dashboard without this filter applied). `false` by default.
func (o DashboardVariableOutput) ValueRequired() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v DashboardVariable) *bool { return v.ValueRequired }).(pulumi.BoolPtrOutput)
}

// List of of strings (which will be treated as an OR filter on the property).
func (o DashboardVariableOutput) Values() pulumi.StringArrayOutput {
	return o.ApplyT(func(v DashboardVariable) []string { return v.Values }).(pulumi.StringArrayOutput)
}

// A list of strings of suggested values for this variable; these suggestions will receive priority when values are autosuggested for this variable.
func (o DashboardVariableOutput) ValuesSuggesteds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v DashboardVariable) []string { return v.ValuesSuggesteds }).(pulumi.StringArrayOutput)
}

type DashboardVariableArrayOutput struct{ *pulumi.OutputState }

func (DashboardVariableArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DashboardVariable)(nil)).Elem()
}

func (o DashboardVariableArrayOutput) ToDashboardVariableArrayOutput() DashboardVariableArrayOutput {
	return o
}

func (o DashboardVariableArrayOutput) ToDashboardVariableArrayOutputWithContext(ctx context.Context) DashboardVariableArrayOutput {
	return o
}

func (o DashboardVariableArrayOutput) Index(i pulumi.IntInput) DashboardVariableOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) DashboardVariable {
		return vs[0].([]DashboardVariable)[vs[1].(int)]
	}).(DashboardVariableOutput)
}

type DataLinkTargetAppdUrl struct {
	// User-assigned target name. Use this value to differentiate between the link targets for a data link object.
	Name string `pulumi:"name"`
	// URL string for an AppDynamics instance.
	Url string `pulumi:"url"`
}

// DataLinkTargetAppdUrlInput is an input type that accepts DataLinkTargetAppdUrlArgs and DataLinkTargetAppdUrlOutput values.
// You can construct a concrete instance of `DataLinkTargetAppdUrlInput` via:
//
//	DataLinkTargetAppdUrlArgs{...}
type DataLinkTargetAppdUrlInput interface {
	pulumi.Input

	ToDataLinkTargetAppdUrlOutput() DataLinkTargetAppdUrlOutput
	ToDataLinkTargetAppdUrlOutputWithContext(context.Context) DataLinkTargetAppdUrlOutput
}

type DataLinkTargetAppdUrlArgs struct {
	// User-assigned target name. Use this value to differentiate between the link targets for a data link object.
	Name pulumi.StringInput `pulumi:"name"`
	// URL string for an AppDynamics instance.
	Url pulumi.StringInput `pulumi:"url"`
}

func (DataLinkTargetAppdUrlArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DataLinkTargetAppdUrl)(nil)).Elem()
}

func (i DataLinkTargetAppdUrlArgs) ToDataLinkTargetAppdUrlOutput() DataLinkTargetAppdUrlOutput {
	return i.ToDataLinkTargetAppdUrlOutputWithContext(context.Background())
}

func (i DataLinkTargetAppdUrlArgs) ToDataLinkTargetAppdUrlOutputWithContext(ctx context.Context) DataLinkTargetAppdUrlOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataLinkTargetAppdUrlOutput)
}

// DataLinkTargetAppdUrlArrayInput is an input type that accepts DataLinkTargetAppdUrlArray and DataLinkTargetAppdUrlArrayOutput values.
// You can construct a concrete instance of `DataLinkTargetAppdUrlArrayInput` via:
//
//	DataLinkTargetAppdUrlArray{ DataLinkTargetAppdUrlArgs{...} }
type DataLinkTargetAppdUrlArrayInput interface {
	pulumi.Input

	ToDataLinkTargetAppdUrlArrayOutput() DataLinkTargetAppdUrlArrayOutput
	ToDataLinkTargetAppdUrlArrayOutputWithContext(context.Context) DataLinkTargetAppdUrlArrayOutput
}

type DataLinkTargetAppdUrlArray []DataLinkTargetAppdUrlInput

func (DataLinkTargetAppdUrlArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DataLinkTargetAppdUrl)(nil)).Elem()
}

func (i DataLinkTargetAppdUrlArray) ToDataLinkTargetAppdUrlArrayOutput() DataLinkTargetAppdUrlArrayOutput {
	return i.ToDataLinkTargetAppdUrlArrayOutputWithContext(context.Background())
}

func (i DataLinkTargetAppdUrlArray) ToDataLinkTargetAppdUrlArrayOutputWithContext(ctx context.Context) DataLinkTargetAppdUrlArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataLinkTargetAppdUrlArrayOutput)
}

type DataLinkTargetAppdUrlOutput struct{ *pulumi.OutputState }

func (DataLinkTargetAppdUrlOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DataLinkTargetAppdUrl)(nil)).Elem()
}

func (o DataLinkTargetAppdUrlOutput) ToDataLinkTargetAppdUrlOutput() DataLinkTargetAppdUrlOutput {
	return o
}

func (o DataLinkTargetAppdUrlOutput) ToDataLinkTargetAppdUrlOutputWithContext(ctx context.Context) DataLinkTargetAppdUrlOutput {
	return o
}

// User-assigned target name. Use this value to differentiate between the link targets for a data link object.
func (o DataLinkTargetAppdUrlOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v DataLinkTargetAppdUrl) string { return v.Name }).(pulumi.StringOutput)
}

// URL string for an AppDynamics instance.
func (o DataLinkTargetAppdUrlOutput) Url() pulumi.StringOutput {
	return o.ApplyT(func(v DataLinkTargetAppdUrl) string { return v.Url }).(pulumi.StringOutput)
}

type DataLinkTargetAppdUrlArrayOutput struct{ *pulumi.OutputState }

func (DataLinkTargetAppdUrlArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DataLinkTargetAppdUrl)(nil)).Elem()
}

func (o DataLinkTargetAppdUrlArrayOutput) ToDataLinkTargetAppdUrlArrayOutput() DataLinkTargetAppdUrlArrayOutput {
	return o
}

func (o DataLinkTargetAppdUrlArrayOutput) ToDataLinkTargetAppdUrlArrayOutputWithContext(ctx context.Context) DataLinkTargetAppdUrlArrayOutput {
	return o
}

func (o DataLinkTargetAppdUrlArrayOutput) Index(i pulumi.IntInput) DataLinkTargetAppdUrlOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) DataLinkTargetAppdUrl {
		return vs[0].([]DataLinkTargetAppdUrl)[vs[1].(int)]
	}).(DataLinkTargetAppdUrlOutput)
}

type DataLinkTargetExternalUrl struct {
	// The [minimum time window](https://dev.splunk.com/observability/docs/administration/datalinks/) for a search sent to an external site. Defaults to `6000`
	MinimumTimeWindow *string `pulumi:"minimumTimeWindow"`
	// User-assigned target name. Use this value to differentiate between the link targets for a data link object.
	Name string `pulumi:"name"`
	// Describes the relationship between Splunk Observability Cloud metadata keys and external system properties when the key names are different.
	PropertyKeyMapping map[string]string `pulumi:"propertyKeyMapping"`
	// [Designates the format](https://dev.splunk.com/observability/docs/administration/datalinks/) of `minimumTimeWindow` in the same data link target object. Must be one of `"ISO8601"`, `"EpochSeconds"` or `"Epoch"` (which is milliseconds). Defaults to `"ISO8601"`.
	TimeFormat *string `pulumi:"timeFormat"`
	// URL string for a Splunk instance or external system data link target. [See the supported template variables](https://dev.splunk.com/observability/docs/administration/datalinks/).
	Url string `pulumi:"url"`
}

// DataLinkTargetExternalUrlInput is an input type that accepts DataLinkTargetExternalUrlArgs and DataLinkTargetExternalUrlOutput values.
// You can construct a concrete instance of `DataLinkTargetExternalUrlInput` via:
//
//	DataLinkTargetExternalUrlArgs{...}
type DataLinkTargetExternalUrlInput interface {
	pulumi.Input

	ToDataLinkTargetExternalUrlOutput() DataLinkTargetExternalUrlOutput
	ToDataLinkTargetExternalUrlOutputWithContext(context.Context) DataLinkTargetExternalUrlOutput
}

type DataLinkTargetExternalUrlArgs struct {
	// The [minimum time window](https://dev.splunk.com/observability/docs/administration/datalinks/) for a search sent to an external site. Defaults to `6000`
	MinimumTimeWindow pulumi.StringPtrInput `pulumi:"minimumTimeWindow"`
	// User-assigned target name. Use this value to differentiate between the link targets for a data link object.
	Name pulumi.StringInput `pulumi:"name"`
	// Describes the relationship between Splunk Observability Cloud metadata keys and external system properties when the key names are different.
	PropertyKeyMapping pulumi.StringMapInput `pulumi:"propertyKeyMapping"`
	// [Designates the format](https://dev.splunk.com/observability/docs/administration/datalinks/) of `minimumTimeWindow` in the same data link target object. Must be one of `"ISO8601"`, `"EpochSeconds"` or `"Epoch"` (which is milliseconds). Defaults to `"ISO8601"`.
	TimeFormat pulumi.StringPtrInput `pulumi:"timeFormat"`
	// URL string for a Splunk instance or external system data link target. [See the supported template variables](https://dev.splunk.com/observability/docs/administration/datalinks/).
	Url pulumi.StringInput `pulumi:"url"`
}

func (DataLinkTargetExternalUrlArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DataLinkTargetExternalUrl)(nil)).Elem()
}

func (i DataLinkTargetExternalUrlArgs) ToDataLinkTargetExternalUrlOutput() DataLinkTargetExternalUrlOutput {
	return i.ToDataLinkTargetExternalUrlOutputWithContext(context.Background())
}

func (i DataLinkTargetExternalUrlArgs) ToDataLinkTargetExternalUrlOutputWithContext(ctx context.Context) DataLinkTargetExternalUrlOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataLinkTargetExternalUrlOutput)
}

// DataLinkTargetExternalUrlArrayInput is an input type that accepts DataLinkTargetExternalUrlArray and DataLinkTargetExternalUrlArrayOutput values.
// You can construct a concrete instance of `DataLinkTargetExternalUrlArrayInput` via:
//
//	DataLinkTargetExternalUrlArray{ DataLinkTargetExternalUrlArgs{...} }
type DataLinkTargetExternalUrlArrayInput interface {
	pulumi.Input

	ToDataLinkTargetExternalUrlArrayOutput() DataLinkTargetExternalUrlArrayOutput
	ToDataLinkTargetExternalUrlArrayOutputWithContext(context.Context) DataLinkTargetExternalUrlArrayOutput
}

type DataLinkTargetExternalUrlArray []DataLinkTargetExternalUrlInput

func (DataLinkTargetExternalUrlArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DataLinkTargetExternalUrl)(nil)).Elem()
}

func (i DataLinkTargetExternalUrlArray) ToDataLinkTargetExternalUrlArrayOutput() DataLinkTargetExternalUrlArrayOutput {
	return i.ToDataLinkTargetExternalUrlArrayOutputWithContext(context.Background())
}

func (i DataLinkTargetExternalUrlArray) ToDataLinkTargetExternalUrlArrayOutputWithContext(ctx context.Context) DataLinkTargetExternalUrlArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataLinkTargetExternalUrlArrayOutput)
}

type DataLinkTargetExternalUrlOutput struct{ *pulumi.OutputState }

func (DataLinkTargetExternalUrlOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DataLinkTargetExternalUrl)(nil)).Elem()
}

func (o DataLinkTargetExternalUrlOutput) ToDataLinkTargetExternalUrlOutput() DataLinkTargetExternalUrlOutput {
	return o
}

func (o DataLinkTargetExternalUrlOutput) ToDataLinkTargetExternalUrlOutputWithContext(ctx context.Context) DataLinkTargetExternalUrlOutput {
	return o
}

// The [minimum time window](https://dev.splunk.com/observability/docs/administration/datalinks/) for a search sent to an external site. Defaults to `6000`
func (o DataLinkTargetExternalUrlOutput) MinimumTimeWindow() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DataLinkTargetExternalUrl) *string { return v.MinimumTimeWindow }).(pulumi.StringPtrOutput)
}

// User-assigned target name. Use this value to differentiate between the link targets for a data link object.
func (o DataLinkTargetExternalUrlOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v DataLinkTargetExternalUrl) string { return v.Name }).(pulumi.StringOutput)
}

// Describes the relationship between Splunk Observability Cloud metadata keys and external system properties when the key names are different.
func (o DataLinkTargetExternalUrlOutput) PropertyKeyMapping() pulumi.StringMapOutput {
	return o.ApplyT(func(v DataLinkTargetExternalUrl) map[string]string { return v.PropertyKeyMapping }).(pulumi.StringMapOutput)
}

// [Designates the format](https://dev.splunk.com/observability/docs/administration/datalinks/) of `minimumTimeWindow` in the same data link target object. Must be one of `"ISO8601"`, `"EpochSeconds"` or `"Epoch"` (which is milliseconds). Defaults to `"ISO8601"`.
func (o DataLinkTargetExternalUrlOutput) TimeFormat() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DataLinkTargetExternalUrl) *string { return v.TimeFormat }).(pulumi.StringPtrOutput)
}

// URL string for a Splunk instance or external system data link target. [See the supported template variables](https://dev.splunk.com/observability/docs/administration/datalinks/).
func (o DataLinkTargetExternalUrlOutput) Url() pulumi.StringOutput {
	return o.ApplyT(func(v DataLinkTargetExternalUrl) string { return v.Url }).(pulumi.StringOutput)
}

type DataLinkTargetExternalUrlArrayOutput struct{ *pulumi.OutputState }

func (DataLinkTargetExternalUrlArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DataLinkTargetExternalUrl)(nil)).Elem()
}

func (o DataLinkTargetExternalUrlArrayOutput) ToDataLinkTargetExternalUrlArrayOutput() DataLinkTargetExternalUrlArrayOutput {
	return o
}

func (o DataLinkTargetExternalUrlArrayOutput) ToDataLinkTargetExternalUrlArrayOutputWithContext(ctx context.Context) DataLinkTargetExternalUrlArrayOutput {
	return o
}

func (o DataLinkTargetExternalUrlArrayOutput) Index(i pulumi.IntInput) DataLinkTargetExternalUrlOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) DataLinkTargetExternalUrl {
		return vs[0].([]DataLinkTargetExternalUrl)[vs[1].(int)]
	}).(DataLinkTargetExternalUrlOutput)
}

type DataLinkTargetSignalfxDashboard struct {
	// SignalFx-assigned ID of the dashboard link target's dashboard group
	DashboardGroupId string `pulumi:"dashboardGroupId"`
	// SignalFx-assigned ID of the dashboard link target
	DashboardId string `pulumi:"dashboardId"`
	// Flag that designates a target as the default for a data link object. `true` by default
	IsDefault *bool `pulumi:"isDefault"`
	// User-assigned target name. Use this value to differentiate between the link targets for a data link object.
	Name string `pulumi:"name"`
}

// DataLinkTargetSignalfxDashboardInput is an input type that accepts DataLinkTargetSignalfxDashboardArgs and DataLinkTargetSignalfxDashboardOutput values.
// You can construct a concrete instance of `DataLinkTargetSignalfxDashboardInput` via:
//
//	DataLinkTargetSignalfxDashboardArgs{...}
type DataLinkTargetSignalfxDashboardInput interface {
	pulumi.Input

	ToDataLinkTargetSignalfxDashboardOutput() DataLinkTargetSignalfxDashboardOutput
	ToDataLinkTargetSignalfxDashboardOutputWithContext(context.Context) DataLinkTargetSignalfxDashboardOutput
}

type DataLinkTargetSignalfxDashboardArgs struct {
	// SignalFx-assigned ID of the dashboard link target's dashboard group
	DashboardGroupId pulumi.StringInput `pulumi:"dashboardGroupId"`
	// SignalFx-assigned ID of the dashboard link target
	DashboardId pulumi.StringInput `pulumi:"dashboardId"`
	// Flag that designates a target as the default for a data link object. `true` by default
	IsDefault pulumi.BoolPtrInput `pulumi:"isDefault"`
	// User-assigned target name. Use this value to differentiate between the link targets for a data link object.
	Name pulumi.StringInput `pulumi:"name"`
}

func (DataLinkTargetSignalfxDashboardArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DataLinkTargetSignalfxDashboard)(nil)).Elem()
}

func (i DataLinkTargetSignalfxDashboardArgs) ToDataLinkTargetSignalfxDashboardOutput() DataLinkTargetSignalfxDashboardOutput {
	return i.ToDataLinkTargetSignalfxDashboardOutputWithContext(context.Background())
}

func (i DataLinkTargetSignalfxDashboardArgs) ToDataLinkTargetSignalfxDashboardOutputWithContext(ctx context.Context) DataLinkTargetSignalfxDashboardOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataLinkTargetSignalfxDashboardOutput)
}

// DataLinkTargetSignalfxDashboardArrayInput is an input type that accepts DataLinkTargetSignalfxDashboardArray and DataLinkTargetSignalfxDashboardArrayOutput values.
// You can construct a concrete instance of `DataLinkTargetSignalfxDashboardArrayInput` via:
//
//	DataLinkTargetSignalfxDashboardArray{ DataLinkTargetSignalfxDashboardArgs{...} }
type DataLinkTargetSignalfxDashboardArrayInput interface {
	pulumi.Input

	ToDataLinkTargetSignalfxDashboardArrayOutput() DataLinkTargetSignalfxDashboardArrayOutput
	ToDataLinkTargetSignalfxDashboardArrayOutputWithContext(context.Context) DataLinkTargetSignalfxDashboardArrayOutput
}

type DataLinkTargetSignalfxDashboardArray []DataLinkTargetSignalfxDashboardInput

func (DataLinkTargetSignalfxDashboardArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DataLinkTargetSignalfxDashboard)(nil)).Elem()
}

func (i DataLinkTargetSignalfxDashboardArray) ToDataLinkTargetSignalfxDashboardArrayOutput() DataLinkTargetSignalfxDashboardArrayOutput {
	return i.ToDataLinkTargetSignalfxDashboardArrayOutputWithContext(context.Background())
}

func (i DataLinkTargetSignalfxDashboardArray) ToDataLinkTargetSignalfxDashboardArrayOutputWithContext(ctx context.Context) DataLinkTargetSignalfxDashboardArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataLinkTargetSignalfxDashboardArrayOutput)
}

type DataLinkTargetSignalfxDashboardOutput struct{ *pulumi.OutputState }

func (DataLinkTargetSignalfxDashboardOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DataLinkTargetSignalfxDashboard)(nil)).Elem()
}

func (o DataLinkTargetSignalfxDashboardOutput) ToDataLinkTargetSignalfxDashboardOutput() DataLinkTargetSignalfxDashboardOutput {
	return o
}

func (o DataLinkTargetSignalfxDashboardOutput) ToDataLinkTargetSignalfxDashboardOutputWithContext(ctx context.Context) DataLinkTargetSignalfxDashboardOutput {
	return o
}

// SignalFx-assigned ID of the dashboard link target's dashboard group
func (o DataLinkTargetSignalfxDashboardOutput) DashboardGroupId() pulumi.StringOutput {
	return o.ApplyT(func(v DataLinkTargetSignalfxDashboard) string { return v.DashboardGroupId }).(pulumi.StringOutput)
}

// SignalFx-assigned ID of the dashboard link target
func (o DataLinkTargetSignalfxDashboardOutput) DashboardId() pulumi.StringOutput {
	return o.ApplyT(func(v DataLinkTargetSignalfxDashboard) string { return v.DashboardId }).(pulumi.StringOutput)
}

// Flag that designates a target as the default for a data link object. `true` by default
func (o DataLinkTargetSignalfxDashboardOutput) IsDefault() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v DataLinkTargetSignalfxDashboard) *bool { return v.IsDefault }).(pulumi.BoolPtrOutput)
}

// User-assigned target name. Use this value to differentiate between the link targets for a data link object.
func (o DataLinkTargetSignalfxDashboardOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v DataLinkTargetSignalfxDashboard) string { return v.Name }).(pulumi.StringOutput)
}

type DataLinkTargetSignalfxDashboardArrayOutput struct{ *pulumi.OutputState }

func (DataLinkTargetSignalfxDashboardArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DataLinkTargetSignalfxDashboard)(nil)).Elem()
}

func (o DataLinkTargetSignalfxDashboardArrayOutput) ToDataLinkTargetSignalfxDashboardArrayOutput() DataLinkTargetSignalfxDashboardArrayOutput {
	return o
}

func (o DataLinkTargetSignalfxDashboardArrayOutput) ToDataLinkTargetSignalfxDashboardArrayOutputWithContext(ctx context.Context) DataLinkTargetSignalfxDashboardArrayOutput {
	return o
}

func (o DataLinkTargetSignalfxDashboardArrayOutput) Index(i pulumi.IntInput) DataLinkTargetSignalfxDashboardOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) DataLinkTargetSignalfxDashboard {
		return vs[0].([]DataLinkTargetSignalfxDashboard)[vs[1].(int)]
	}).(DataLinkTargetSignalfxDashboardOutput)
}

type DataLinkTargetSplunk struct {
	// User-assigned target name. Use this value to differentiate between the link targets for a data link object.
	Name string `pulumi:"name"`
	// Describes the relationship between Splunk Observability Cloud metadata keys and external system properties when the key names are different.
	PropertyKeyMapping map[string]string `pulumi:"propertyKeyMapping"`
}

// DataLinkTargetSplunkInput is an input type that accepts DataLinkTargetSplunkArgs and DataLinkTargetSplunkOutput values.
// You can construct a concrete instance of `DataLinkTargetSplunkInput` via:
//
//	DataLinkTargetSplunkArgs{...}
type DataLinkTargetSplunkInput interface {
	pulumi.Input

	ToDataLinkTargetSplunkOutput() DataLinkTargetSplunkOutput
	ToDataLinkTargetSplunkOutputWithContext(context.Context) DataLinkTargetSplunkOutput
}

type DataLinkTargetSplunkArgs struct {
	// User-assigned target name. Use this value to differentiate between the link targets for a data link object.
	Name pulumi.StringInput `pulumi:"name"`
	// Describes the relationship between Splunk Observability Cloud metadata keys and external system properties when the key names are different.
	PropertyKeyMapping pulumi.StringMapInput `pulumi:"propertyKeyMapping"`
}

func (DataLinkTargetSplunkArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DataLinkTargetSplunk)(nil)).Elem()
}

func (i DataLinkTargetSplunkArgs) ToDataLinkTargetSplunkOutput() DataLinkTargetSplunkOutput {
	return i.ToDataLinkTargetSplunkOutputWithContext(context.Background())
}

func (i DataLinkTargetSplunkArgs) ToDataLinkTargetSplunkOutputWithContext(ctx context.Context) DataLinkTargetSplunkOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataLinkTargetSplunkOutput)
}

// DataLinkTargetSplunkArrayInput is an input type that accepts DataLinkTargetSplunkArray and DataLinkTargetSplunkArrayOutput values.
// You can construct a concrete instance of `DataLinkTargetSplunkArrayInput` via:
//
//	DataLinkTargetSplunkArray{ DataLinkTargetSplunkArgs{...} }
type DataLinkTargetSplunkArrayInput interface {
	pulumi.Input

	ToDataLinkTargetSplunkArrayOutput() DataLinkTargetSplunkArrayOutput
	ToDataLinkTargetSplunkArrayOutputWithContext(context.Context) DataLinkTargetSplunkArrayOutput
}

type DataLinkTargetSplunkArray []DataLinkTargetSplunkInput

func (DataLinkTargetSplunkArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DataLinkTargetSplunk)(nil)).Elem()
}

func (i DataLinkTargetSplunkArray) ToDataLinkTargetSplunkArrayOutput() DataLinkTargetSplunkArrayOutput {
	return i.ToDataLinkTargetSplunkArrayOutputWithContext(context.Background())
}

func (i DataLinkTargetSplunkArray) ToDataLinkTargetSplunkArrayOutputWithContext(ctx context.Context) DataLinkTargetSplunkArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataLinkTargetSplunkArrayOutput)
}

type DataLinkTargetSplunkOutput struct{ *pulumi.OutputState }

func (DataLinkTargetSplunkOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DataLinkTargetSplunk)(nil)).Elem()
}

func (o DataLinkTargetSplunkOutput) ToDataLinkTargetSplunkOutput() DataLinkTargetSplunkOutput {
	return o
}

func (o DataLinkTargetSplunkOutput) ToDataLinkTargetSplunkOutputWithContext(ctx context.Context) DataLinkTargetSplunkOutput {
	return o
}

// User-assigned target name. Use this value to differentiate between the link targets for a data link object.
func (o DataLinkTargetSplunkOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v DataLinkTargetSplunk) string { return v.Name }).(pulumi.StringOutput)
}

// Describes the relationship between Splunk Observability Cloud metadata keys and external system properties when the key names are different.
func (o DataLinkTargetSplunkOutput) PropertyKeyMapping() pulumi.StringMapOutput {
	return o.ApplyT(func(v DataLinkTargetSplunk) map[string]string { return v.PropertyKeyMapping }).(pulumi.StringMapOutput)
}

type DataLinkTargetSplunkArrayOutput struct{ *pulumi.OutputState }

func (DataLinkTargetSplunkArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DataLinkTargetSplunk)(nil)).Elem()
}

func (o DataLinkTargetSplunkArrayOutput) ToDataLinkTargetSplunkArrayOutput() DataLinkTargetSplunkArrayOutput {
	return o
}

func (o DataLinkTargetSplunkArrayOutput) ToDataLinkTargetSplunkArrayOutputWithContext(ctx context.Context) DataLinkTargetSplunkArrayOutput {
	return o
}

func (o DataLinkTargetSplunkArrayOutput) Index(i pulumi.IntInput) DataLinkTargetSplunkOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) DataLinkTargetSplunk {
		return vs[0].([]DataLinkTargetSplunk)[vs[1].(int)]
	}).(DataLinkTargetSplunkOutput)
}

type DetectorRule struct {
	// Description for the rule. Displays as the alert condition in the Alert Rules tab of the detector editor in the web UI.
	Description *string `pulumi:"description"`
	// A detect label which matches a detect label within `programText`.
	DetectLabel string `pulumi:"detectLabel"`
	// When true, notifications and events will not be generated for the detect label. `false` by default.
	Disabled *bool `pulumi:"disabled"`
	// List of strings specifying where notifications will be sent when an incident occurs. See [Create A Single Detector](https://dev.splunk.com/observability/reference/api/detectors/latest) for more info.
	Notifications []string `pulumi:"notifications"`
	// Custom notification message body when an alert is triggered. See [Set Up Detectors to Trigger Alerts](https://docs.splunk.com/observability/en/alerts-detectors-notifications/create-detectors-for-alerts.html) for more info.
	ParameterizedBody *string `pulumi:"parameterizedBody"`
	// Custom notification message subject when an alert is triggered. See [Set Up Detectors to Trigger Alerts](https://docs.splunk.com/observability/en/alerts-detectors-notifications/create-detectors-for-alerts.html) for more info.
	ParameterizedSubject *string `pulumi:"parameterizedSubject"`
	// Reminder notification in a detector rule lets you send multiple notifications for active alerts over a defined period of time. **Note:** This feature is not present in all accounts. Please contact support if you are unsure.
	ReminderNotification *DetectorRuleReminderNotification `pulumi:"reminderNotification"`
	// URL of page to consult when an alert is triggered. This can be used with custom notification messages.
	RunbookUrl *string `pulumi:"runbookUrl"`
	// The severity of the rule, must be one of: `"Critical"`, `"Major"`, `"Minor"`, `"Warning"`, `"Info"`.
	Severity string `pulumi:"severity"`
	// Plain text suggested first course of action, such as a command line to execute. This can be used with custom notification messages.
	Tip *string `pulumi:"tip"`
}

// DetectorRuleInput is an input type that accepts DetectorRuleArgs and DetectorRuleOutput values.
// You can construct a concrete instance of `DetectorRuleInput` via:
//
//	DetectorRuleArgs{...}
type DetectorRuleInput interface {
	pulumi.Input

	ToDetectorRuleOutput() DetectorRuleOutput
	ToDetectorRuleOutputWithContext(context.Context) DetectorRuleOutput
}

type DetectorRuleArgs struct {
	// Description for the rule. Displays as the alert condition in the Alert Rules tab of the detector editor in the web UI.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// A detect label which matches a detect label within `programText`.
	DetectLabel pulumi.StringInput `pulumi:"detectLabel"`
	// When true, notifications and events will not be generated for the detect label. `false` by default.
	Disabled pulumi.BoolPtrInput `pulumi:"disabled"`
	// List of strings specifying where notifications will be sent when an incident occurs. See [Create A Single Detector](https://dev.splunk.com/observability/reference/api/detectors/latest) for more info.
	Notifications pulumi.StringArrayInput `pulumi:"notifications"`
	// Custom notification message body when an alert is triggered. See [Set Up Detectors to Trigger Alerts](https://docs.splunk.com/observability/en/alerts-detectors-notifications/create-detectors-for-alerts.html) for more info.
	ParameterizedBody pulumi.StringPtrInput `pulumi:"parameterizedBody"`
	// Custom notification message subject when an alert is triggered. See [Set Up Detectors to Trigger Alerts](https://docs.splunk.com/observability/en/alerts-detectors-notifications/create-detectors-for-alerts.html) for more info.
	ParameterizedSubject pulumi.StringPtrInput `pulumi:"parameterizedSubject"`
	// Reminder notification in a detector rule lets you send multiple notifications for active alerts over a defined period of time. **Note:** This feature is not present in all accounts. Please contact support if you are unsure.
	ReminderNotification DetectorRuleReminderNotificationPtrInput `pulumi:"reminderNotification"`
	// URL of page to consult when an alert is triggered. This can be used with custom notification messages.
	RunbookUrl pulumi.StringPtrInput `pulumi:"runbookUrl"`
	// The severity of the rule, must be one of: `"Critical"`, `"Major"`, `"Minor"`, `"Warning"`, `"Info"`.
	Severity pulumi.StringInput `pulumi:"severity"`
	// Plain text suggested first course of action, such as a command line to execute. This can be used with custom notification messages.
	Tip pulumi.StringPtrInput `pulumi:"tip"`
}

func (DetectorRuleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DetectorRule)(nil)).Elem()
}

func (i DetectorRuleArgs) ToDetectorRuleOutput() DetectorRuleOutput {
	return i.ToDetectorRuleOutputWithContext(context.Background())
}

func (i DetectorRuleArgs) ToDetectorRuleOutputWithContext(ctx context.Context) DetectorRuleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DetectorRuleOutput)
}

// DetectorRuleArrayInput is an input type that accepts DetectorRuleArray and DetectorRuleArrayOutput values.
// You can construct a concrete instance of `DetectorRuleArrayInput` via:
//
//	DetectorRuleArray{ DetectorRuleArgs{...} }
type DetectorRuleArrayInput interface {
	pulumi.Input

	ToDetectorRuleArrayOutput() DetectorRuleArrayOutput
	ToDetectorRuleArrayOutputWithContext(context.Context) DetectorRuleArrayOutput
}

type DetectorRuleArray []DetectorRuleInput

func (DetectorRuleArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DetectorRule)(nil)).Elem()
}

func (i DetectorRuleArray) ToDetectorRuleArrayOutput() DetectorRuleArrayOutput {
	return i.ToDetectorRuleArrayOutputWithContext(context.Background())
}

func (i DetectorRuleArray) ToDetectorRuleArrayOutputWithContext(ctx context.Context) DetectorRuleArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DetectorRuleArrayOutput)
}

type DetectorRuleOutput struct{ *pulumi.OutputState }

func (DetectorRuleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DetectorRule)(nil)).Elem()
}

func (o DetectorRuleOutput) ToDetectorRuleOutput() DetectorRuleOutput {
	return o
}

func (o DetectorRuleOutput) ToDetectorRuleOutputWithContext(ctx context.Context) DetectorRuleOutput {
	return o
}

// Description for the rule. Displays as the alert condition in the Alert Rules tab of the detector editor in the web UI.
func (o DetectorRuleOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DetectorRule) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// A detect label which matches a detect label within `programText`.
func (o DetectorRuleOutput) DetectLabel() pulumi.StringOutput {
	return o.ApplyT(func(v DetectorRule) string { return v.DetectLabel }).(pulumi.StringOutput)
}

// When true, notifications and events will not be generated for the detect label. `false` by default.
func (o DetectorRuleOutput) Disabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v DetectorRule) *bool { return v.Disabled }).(pulumi.BoolPtrOutput)
}

// List of strings specifying where notifications will be sent when an incident occurs. See [Create A Single Detector](https://dev.splunk.com/observability/reference/api/detectors/latest) for more info.
func (o DetectorRuleOutput) Notifications() pulumi.StringArrayOutput {
	return o.ApplyT(func(v DetectorRule) []string { return v.Notifications }).(pulumi.StringArrayOutput)
}

// Custom notification message body when an alert is triggered. See [Set Up Detectors to Trigger Alerts](https://docs.splunk.com/observability/en/alerts-detectors-notifications/create-detectors-for-alerts.html) for more info.
func (o DetectorRuleOutput) ParameterizedBody() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DetectorRule) *string { return v.ParameterizedBody }).(pulumi.StringPtrOutput)
}

// Custom notification message subject when an alert is triggered. See [Set Up Detectors to Trigger Alerts](https://docs.splunk.com/observability/en/alerts-detectors-notifications/create-detectors-for-alerts.html) for more info.
func (o DetectorRuleOutput) ParameterizedSubject() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DetectorRule) *string { return v.ParameterizedSubject }).(pulumi.StringPtrOutput)
}

// Reminder notification in a detector rule lets you send multiple notifications for active alerts over a defined period of time. **Note:** This feature is not present in all accounts. Please contact support if you are unsure.
func (o DetectorRuleOutput) ReminderNotification() DetectorRuleReminderNotificationPtrOutput {
	return o.ApplyT(func(v DetectorRule) *DetectorRuleReminderNotification { return v.ReminderNotification }).(DetectorRuleReminderNotificationPtrOutput)
}

// URL of page to consult when an alert is triggered. This can be used with custom notification messages.
func (o DetectorRuleOutput) RunbookUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DetectorRule) *string { return v.RunbookUrl }).(pulumi.StringPtrOutput)
}

// The severity of the rule, must be one of: `"Critical"`, `"Major"`, `"Minor"`, `"Warning"`, `"Info"`.
func (o DetectorRuleOutput) Severity() pulumi.StringOutput {
	return o.ApplyT(func(v DetectorRule) string { return v.Severity }).(pulumi.StringOutput)
}

// Plain text suggested first course of action, such as a command line to execute. This can be used with custom notification messages.
func (o DetectorRuleOutput) Tip() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DetectorRule) *string { return v.Tip }).(pulumi.StringPtrOutput)
}

type DetectorRuleArrayOutput struct{ *pulumi.OutputState }

func (DetectorRuleArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DetectorRule)(nil)).Elem()
}

func (o DetectorRuleArrayOutput) ToDetectorRuleArrayOutput() DetectorRuleArrayOutput {
	return o
}

func (o DetectorRuleArrayOutput) ToDetectorRuleArrayOutputWithContext(ctx context.Context) DetectorRuleArrayOutput {
	return o
}

func (o DetectorRuleArrayOutput) Index(i pulumi.IntInput) DetectorRuleOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) DetectorRule {
		return vs[0].([]DetectorRule)[vs[1].(int)]
	}).(DetectorRuleOutput)
}

type DetectorRuleReminderNotification struct {
	// The interval at which you want to receive the notifications, in milliseconds.
	IntervalMs int `pulumi:"intervalMs"`
	// The duration during which repeat notifications are sent, in milliseconds.
	TimeoutMs *int `pulumi:"timeoutMs"`
	// Type of reminder notification. Currently, the only supported value is TIMEOUT.
	Type string `pulumi:"type"`
}

// DetectorRuleReminderNotificationInput is an input type that accepts DetectorRuleReminderNotificationArgs and DetectorRuleReminderNotificationOutput values.
// You can construct a concrete instance of `DetectorRuleReminderNotificationInput` via:
//
//	DetectorRuleReminderNotificationArgs{...}
type DetectorRuleReminderNotificationInput interface {
	pulumi.Input

	ToDetectorRuleReminderNotificationOutput() DetectorRuleReminderNotificationOutput
	ToDetectorRuleReminderNotificationOutputWithContext(context.Context) DetectorRuleReminderNotificationOutput
}

type DetectorRuleReminderNotificationArgs struct {
	// The interval at which you want to receive the notifications, in milliseconds.
	IntervalMs pulumi.IntInput `pulumi:"intervalMs"`
	// The duration during which repeat notifications are sent, in milliseconds.
	TimeoutMs pulumi.IntPtrInput `pulumi:"timeoutMs"`
	// Type of reminder notification. Currently, the only supported value is TIMEOUT.
	Type pulumi.StringInput `pulumi:"type"`
}

func (DetectorRuleReminderNotificationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DetectorRuleReminderNotification)(nil)).Elem()
}

func (i DetectorRuleReminderNotificationArgs) ToDetectorRuleReminderNotificationOutput() DetectorRuleReminderNotificationOutput {
	return i.ToDetectorRuleReminderNotificationOutputWithContext(context.Background())
}

func (i DetectorRuleReminderNotificationArgs) ToDetectorRuleReminderNotificationOutputWithContext(ctx context.Context) DetectorRuleReminderNotificationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DetectorRuleReminderNotificationOutput)
}

func (i DetectorRuleReminderNotificationArgs) ToDetectorRuleReminderNotificationPtrOutput() DetectorRuleReminderNotificationPtrOutput {
	return i.ToDetectorRuleReminderNotificationPtrOutputWithContext(context.Background())
}

func (i DetectorRuleReminderNotificationArgs) ToDetectorRuleReminderNotificationPtrOutputWithContext(ctx context.Context) DetectorRuleReminderNotificationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DetectorRuleReminderNotificationOutput).ToDetectorRuleReminderNotificationPtrOutputWithContext(ctx)
}

// DetectorRuleReminderNotificationPtrInput is an input type that accepts DetectorRuleReminderNotificationArgs, DetectorRuleReminderNotificationPtr and DetectorRuleReminderNotificationPtrOutput values.
// You can construct a concrete instance of `DetectorRuleReminderNotificationPtrInput` via:
//
//	        DetectorRuleReminderNotificationArgs{...}
//
//	or:
//
//	        nil
type DetectorRuleReminderNotificationPtrInput interface {
	pulumi.Input

	ToDetectorRuleReminderNotificationPtrOutput() DetectorRuleReminderNotificationPtrOutput
	ToDetectorRuleReminderNotificationPtrOutputWithContext(context.Context) DetectorRuleReminderNotificationPtrOutput
}

type detectorRuleReminderNotificationPtrType DetectorRuleReminderNotificationArgs

func DetectorRuleReminderNotificationPtr(v *DetectorRuleReminderNotificationArgs) DetectorRuleReminderNotificationPtrInput {
	return (*detectorRuleReminderNotificationPtrType)(v)
}

func (*detectorRuleReminderNotificationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DetectorRuleReminderNotification)(nil)).Elem()
}

func (i *detectorRuleReminderNotificationPtrType) ToDetectorRuleReminderNotificationPtrOutput() DetectorRuleReminderNotificationPtrOutput {
	return i.ToDetectorRuleReminderNotificationPtrOutputWithContext(context.Background())
}

func (i *detectorRuleReminderNotificationPtrType) ToDetectorRuleReminderNotificationPtrOutputWithContext(ctx context.Context) DetectorRuleReminderNotificationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DetectorRuleReminderNotificationPtrOutput)
}

type DetectorRuleReminderNotificationOutput struct{ *pulumi.OutputState }

func (DetectorRuleReminderNotificationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DetectorRuleReminderNotification)(nil)).Elem()
}

func (o DetectorRuleReminderNotificationOutput) ToDetectorRuleReminderNotificationOutput() DetectorRuleReminderNotificationOutput {
	return o
}

func (o DetectorRuleReminderNotificationOutput) ToDetectorRuleReminderNotificationOutputWithContext(ctx context.Context) DetectorRuleReminderNotificationOutput {
	return o
}

func (o DetectorRuleReminderNotificationOutput) ToDetectorRuleReminderNotificationPtrOutput() DetectorRuleReminderNotificationPtrOutput {
	return o.ToDetectorRuleReminderNotificationPtrOutputWithContext(context.Background())
}

func (o DetectorRuleReminderNotificationOutput) ToDetectorRuleReminderNotificationPtrOutputWithContext(ctx context.Context) DetectorRuleReminderNotificationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DetectorRuleReminderNotification) *DetectorRuleReminderNotification {
		return &v
	}).(DetectorRuleReminderNotificationPtrOutput)
}

// The interval at which you want to receive the notifications, in milliseconds.
func (o DetectorRuleReminderNotificationOutput) IntervalMs() pulumi.IntOutput {
	return o.ApplyT(func(v DetectorRuleReminderNotification) int { return v.IntervalMs }).(pulumi.IntOutput)
}

// The duration during which repeat notifications are sent, in milliseconds.
func (o DetectorRuleReminderNotificationOutput) TimeoutMs() pulumi.IntPtrOutput {
	return o.ApplyT(func(v DetectorRuleReminderNotification) *int { return v.TimeoutMs }).(pulumi.IntPtrOutput)
}

// Type of reminder notification. Currently, the only supported value is TIMEOUT.
func (o DetectorRuleReminderNotificationOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v DetectorRuleReminderNotification) string { return v.Type }).(pulumi.StringOutput)
}

type DetectorRuleReminderNotificationPtrOutput struct{ *pulumi.OutputState }

func (DetectorRuleReminderNotificationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DetectorRuleReminderNotification)(nil)).Elem()
}

func (o DetectorRuleReminderNotificationPtrOutput) ToDetectorRuleReminderNotificationPtrOutput() DetectorRuleReminderNotificationPtrOutput {
	return o
}

func (o DetectorRuleReminderNotificationPtrOutput) ToDetectorRuleReminderNotificationPtrOutputWithContext(ctx context.Context) DetectorRuleReminderNotificationPtrOutput {
	return o
}

func (o DetectorRuleReminderNotificationPtrOutput) Elem() DetectorRuleReminderNotificationOutput {
	return o.ApplyT(func(v *DetectorRuleReminderNotification) DetectorRuleReminderNotification {
		if v != nil {
			return *v
		}
		var ret DetectorRuleReminderNotification
		return ret
	}).(DetectorRuleReminderNotificationOutput)
}

// The interval at which you want to receive the notifications, in milliseconds.
func (o DetectorRuleReminderNotificationPtrOutput) IntervalMs() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *DetectorRuleReminderNotification) *int {
		if v == nil {
			return nil
		}
		return &v.IntervalMs
	}).(pulumi.IntPtrOutput)
}

// The duration during which repeat notifications are sent, in milliseconds.
func (o DetectorRuleReminderNotificationPtrOutput) TimeoutMs() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *DetectorRuleReminderNotification) *int {
		if v == nil {
			return nil
		}
		return v.TimeoutMs
	}).(pulumi.IntPtrOutput)
}

// Type of reminder notification. Currently, the only supported value is TIMEOUT.
func (o DetectorRuleReminderNotificationPtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DetectorRuleReminderNotification) *string {
		if v == nil {
			return nil
		}
		return &v.Type
	}).(pulumi.StringPtrOutput)
}

type DetectorVizOption struct {
	// Color to use : gray, blue, azure, navy, brown, orange, yellow, iris, magenta, pink, purple, violet, lilac, emerald, green, aquamarine.
	Color *string `pulumi:"color"`
	// Specifies an alternate value for the Plot Name column of the Data Table associated with the chart.
	DisplayName *string `pulumi:"displayName"`
	// Label used in the publish statement that displays the plot (metric time series data) you want to customize.
	Label string `pulumi:"label"`
	// , `valueSuffix` - (Optional) Arbitrary prefix/suffix to display with the value of this plot.
	//
	// **Notes**
	//
	// Use both `maxDelay` in your detector configuration and an `extrapolation` policy in your program text to reduce false positives and false negatives.
	ValuePrefix *string `pulumi:"valuePrefix"`
	// An arbitrary suffix to display with the value of this plot
	ValueSuffix *string `pulumi:"valueSuffix"`
	// A unit to attach to this plot. Units support automatic scaling (eg thousands of bytes will be displayed as kilobytes). Values values are `Bit, Kilobit, Megabit, Gigabit, Terabit, Petabit, Exabit, Zettabit, Yottabit, Byte, Kibibyte, Mebibyte, Gibibyte (note: this was previously typoed as Gigibyte), Tebibyte, Pebibyte, Exbibyte, Zebibyte, Yobibyte, Nanosecond, Microsecond, Millisecond, Second, Minute, Hour, Day, Week`.
	ValueUnit *string `pulumi:"valueUnit"`
}

// DetectorVizOptionInput is an input type that accepts DetectorVizOptionArgs and DetectorVizOptionOutput values.
// You can construct a concrete instance of `DetectorVizOptionInput` via:
//
//	DetectorVizOptionArgs{...}
type DetectorVizOptionInput interface {
	pulumi.Input

	ToDetectorVizOptionOutput() DetectorVizOptionOutput
	ToDetectorVizOptionOutputWithContext(context.Context) DetectorVizOptionOutput
}

type DetectorVizOptionArgs struct {
	// Color to use : gray, blue, azure, navy, brown, orange, yellow, iris, magenta, pink, purple, violet, lilac, emerald, green, aquamarine.
	Color pulumi.StringPtrInput `pulumi:"color"`
	// Specifies an alternate value for the Plot Name column of the Data Table associated with the chart.
	DisplayName pulumi.StringPtrInput `pulumi:"displayName"`
	// Label used in the publish statement that displays the plot (metric time series data) you want to customize.
	Label pulumi.StringInput `pulumi:"label"`
	// , `valueSuffix` - (Optional) Arbitrary prefix/suffix to display with the value of this plot.
	//
	// **Notes**
	//
	// Use both `maxDelay` in your detector configuration and an `extrapolation` policy in your program text to reduce false positives and false negatives.
	ValuePrefix pulumi.StringPtrInput `pulumi:"valuePrefix"`
	// An arbitrary suffix to display with the value of this plot
	ValueSuffix pulumi.StringPtrInput `pulumi:"valueSuffix"`
	// A unit to attach to this plot. Units support automatic scaling (eg thousands of bytes will be displayed as kilobytes). Values values are `Bit, Kilobit, Megabit, Gigabit, Terabit, Petabit, Exabit, Zettabit, Yottabit, Byte, Kibibyte, Mebibyte, Gibibyte (note: this was previously typoed as Gigibyte), Tebibyte, Pebibyte, Exbibyte, Zebibyte, Yobibyte, Nanosecond, Microsecond, Millisecond, Second, Minute, Hour, Day, Week`.
	ValueUnit pulumi.StringPtrInput `pulumi:"valueUnit"`
}

func (DetectorVizOptionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DetectorVizOption)(nil)).Elem()
}

func (i DetectorVizOptionArgs) ToDetectorVizOptionOutput() DetectorVizOptionOutput {
	return i.ToDetectorVizOptionOutputWithContext(context.Background())
}

func (i DetectorVizOptionArgs) ToDetectorVizOptionOutputWithContext(ctx context.Context) DetectorVizOptionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DetectorVizOptionOutput)
}

// DetectorVizOptionArrayInput is an input type that accepts DetectorVizOptionArray and DetectorVizOptionArrayOutput values.
// You can construct a concrete instance of `DetectorVizOptionArrayInput` via:
//
//	DetectorVizOptionArray{ DetectorVizOptionArgs{...} }
type DetectorVizOptionArrayInput interface {
	pulumi.Input

	ToDetectorVizOptionArrayOutput() DetectorVizOptionArrayOutput
	ToDetectorVizOptionArrayOutputWithContext(context.Context) DetectorVizOptionArrayOutput
}

type DetectorVizOptionArray []DetectorVizOptionInput

func (DetectorVizOptionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DetectorVizOption)(nil)).Elem()
}

func (i DetectorVizOptionArray) ToDetectorVizOptionArrayOutput() DetectorVizOptionArrayOutput {
	return i.ToDetectorVizOptionArrayOutputWithContext(context.Background())
}

func (i DetectorVizOptionArray) ToDetectorVizOptionArrayOutputWithContext(ctx context.Context) DetectorVizOptionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DetectorVizOptionArrayOutput)
}

type DetectorVizOptionOutput struct{ *pulumi.OutputState }

func (DetectorVizOptionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DetectorVizOption)(nil)).Elem()
}

func (o DetectorVizOptionOutput) ToDetectorVizOptionOutput() DetectorVizOptionOutput {
	return o
}

func (o DetectorVizOptionOutput) ToDetectorVizOptionOutputWithContext(ctx context.Context) DetectorVizOptionOutput {
	return o
}

// Color to use : gray, blue, azure, navy, brown, orange, yellow, iris, magenta, pink, purple, violet, lilac, emerald, green, aquamarine.
func (o DetectorVizOptionOutput) Color() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DetectorVizOption) *string { return v.Color }).(pulumi.StringPtrOutput)
}

// Specifies an alternate value for the Plot Name column of the Data Table associated with the chart.
func (o DetectorVizOptionOutput) DisplayName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DetectorVizOption) *string { return v.DisplayName }).(pulumi.StringPtrOutput)
}

// Label used in the publish statement that displays the plot (metric time series data) you want to customize.
func (o DetectorVizOptionOutput) Label() pulumi.StringOutput {
	return o.ApplyT(func(v DetectorVizOption) string { return v.Label }).(pulumi.StringOutput)
}

// , `valueSuffix` - (Optional) Arbitrary prefix/suffix to display with the value of this plot.
//
// **Notes**
//
// Use both `maxDelay` in your detector configuration and an `extrapolation` policy in your program text to reduce false positives and false negatives.
func (o DetectorVizOptionOutput) ValuePrefix() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DetectorVizOption) *string { return v.ValuePrefix }).(pulumi.StringPtrOutput)
}

// An arbitrary suffix to display with the value of this plot
func (o DetectorVizOptionOutput) ValueSuffix() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DetectorVizOption) *string { return v.ValueSuffix }).(pulumi.StringPtrOutput)
}

// A unit to attach to this plot. Units support automatic scaling (eg thousands of bytes will be displayed as kilobytes). Values values are `Bit, Kilobit, Megabit, Gigabit, Terabit, Petabit, Exabit, Zettabit, Yottabit, Byte, Kibibyte, Mebibyte, Gibibyte (note: this was previously typoed as Gigibyte), Tebibyte, Pebibyte, Exbibyte, Zebibyte, Yobibyte, Nanosecond, Microsecond, Millisecond, Second, Minute, Hour, Day, Week`.
func (o DetectorVizOptionOutput) ValueUnit() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DetectorVizOption) *string { return v.ValueUnit }).(pulumi.StringPtrOutput)
}

type DetectorVizOptionArrayOutput struct{ *pulumi.OutputState }

func (DetectorVizOptionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DetectorVizOption)(nil)).Elem()
}

func (o DetectorVizOptionArrayOutput) ToDetectorVizOptionArrayOutput() DetectorVizOptionArrayOutput {
	return o
}

func (o DetectorVizOptionArrayOutput) ToDetectorVizOptionArrayOutputWithContext(ctx context.Context) DetectorVizOptionArrayOutput {
	return o
}

func (o DetectorVizOptionArrayOutput) Index(i pulumi.IntInput) DetectorVizOptionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) DetectorVizOption {
		return vs[0].([]DetectorVizOption)[vs[1].(int)]
	}).(DetectorVizOptionOutput)
}

type HeatmapChartColorRange struct {
	// The color range to use. The starting hex color value for data values in a heatmap chart. Specify the value as a 6-character hexadecimal value preceded by the '#' character, for example "#ea1849" (grass green).
	Color string `pulumi:"color"`
	// The maximum value within the coloring range.
	MaxValue *float64 `pulumi:"maxValue"`
	// The minimum value within the coloring range.
	MinValue *float64 `pulumi:"minValue"`
}

// HeatmapChartColorRangeInput is an input type that accepts HeatmapChartColorRangeArgs and HeatmapChartColorRangeOutput values.
// You can construct a concrete instance of `HeatmapChartColorRangeInput` via:
//
//	HeatmapChartColorRangeArgs{...}
type HeatmapChartColorRangeInput interface {
	pulumi.Input

	ToHeatmapChartColorRangeOutput() HeatmapChartColorRangeOutput
	ToHeatmapChartColorRangeOutputWithContext(context.Context) HeatmapChartColorRangeOutput
}

type HeatmapChartColorRangeArgs struct {
	// The color range to use. The starting hex color value for data values in a heatmap chart. Specify the value as a 6-character hexadecimal value preceded by the '#' character, for example "#ea1849" (grass green).
	Color pulumi.StringInput `pulumi:"color"`
	// The maximum value within the coloring range.
	MaxValue pulumi.Float64PtrInput `pulumi:"maxValue"`
	// The minimum value within the coloring range.
	MinValue pulumi.Float64PtrInput `pulumi:"minValue"`
}

func (HeatmapChartColorRangeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*HeatmapChartColorRange)(nil)).Elem()
}

func (i HeatmapChartColorRangeArgs) ToHeatmapChartColorRangeOutput() HeatmapChartColorRangeOutput {
	return i.ToHeatmapChartColorRangeOutputWithContext(context.Background())
}

func (i HeatmapChartColorRangeArgs) ToHeatmapChartColorRangeOutputWithContext(ctx context.Context) HeatmapChartColorRangeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HeatmapChartColorRangeOutput)
}

func (i HeatmapChartColorRangeArgs) ToHeatmapChartColorRangePtrOutput() HeatmapChartColorRangePtrOutput {
	return i.ToHeatmapChartColorRangePtrOutputWithContext(context.Background())
}

func (i HeatmapChartColorRangeArgs) ToHeatmapChartColorRangePtrOutputWithContext(ctx context.Context) HeatmapChartColorRangePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HeatmapChartColorRangeOutput).ToHeatmapChartColorRangePtrOutputWithContext(ctx)
}

// HeatmapChartColorRangePtrInput is an input type that accepts HeatmapChartColorRangeArgs, HeatmapChartColorRangePtr and HeatmapChartColorRangePtrOutput values.
// You can construct a concrete instance of `HeatmapChartColorRangePtrInput` via:
//
//	        HeatmapChartColorRangeArgs{...}
//
//	or:
//
//	        nil
type HeatmapChartColorRangePtrInput interface {
	pulumi.Input

	ToHeatmapChartColorRangePtrOutput() HeatmapChartColorRangePtrOutput
	ToHeatmapChartColorRangePtrOutputWithContext(context.Context) HeatmapChartColorRangePtrOutput
}

type heatmapChartColorRangePtrType HeatmapChartColorRangeArgs

func HeatmapChartColorRangePtr(v *HeatmapChartColorRangeArgs) HeatmapChartColorRangePtrInput {
	return (*heatmapChartColorRangePtrType)(v)
}

func (*heatmapChartColorRangePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**HeatmapChartColorRange)(nil)).Elem()
}

func (i *heatmapChartColorRangePtrType) ToHeatmapChartColorRangePtrOutput() HeatmapChartColorRangePtrOutput {
	return i.ToHeatmapChartColorRangePtrOutputWithContext(context.Background())
}

func (i *heatmapChartColorRangePtrType) ToHeatmapChartColorRangePtrOutputWithContext(ctx context.Context) HeatmapChartColorRangePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HeatmapChartColorRangePtrOutput)
}

type HeatmapChartColorRangeOutput struct{ *pulumi.OutputState }

func (HeatmapChartColorRangeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*HeatmapChartColorRange)(nil)).Elem()
}

func (o HeatmapChartColorRangeOutput) ToHeatmapChartColorRangeOutput() HeatmapChartColorRangeOutput {
	return o
}

func (o HeatmapChartColorRangeOutput) ToHeatmapChartColorRangeOutputWithContext(ctx context.Context) HeatmapChartColorRangeOutput {
	return o
}

func (o HeatmapChartColorRangeOutput) ToHeatmapChartColorRangePtrOutput() HeatmapChartColorRangePtrOutput {
	return o.ToHeatmapChartColorRangePtrOutputWithContext(context.Background())
}

func (o HeatmapChartColorRangeOutput) ToHeatmapChartColorRangePtrOutputWithContext(ctx context.Context) HeatmapChartColorRangePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v HeatmapChartColorRange) *HeatmapChartColorRange {
		return &v
	}).(HeatmapChartColorRangePtrOutput)
}

// The color range to use. The starting hex color value for data values in a heatmap chart. Specify the value as a 6-character hexadecimal value preceded by the '#' character, for example "#ea1849" (grass green).
func (o HeatmapChartColorRangeOutput) Color() pulumi.StringOutput {
	return o.ApplyT(func(v HeatmapChartColorRange) string { return v.Color }).(pulumi.StringOutput)
}

// The maximum value within the coloring range.
func (o HeatmapChartColorRangeOutput) MaxValue() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v HeatmapChartColorRange) *float64 { return v.MaxValue }).(pulumi.Float64PtrOutput)
}

// The minimum value within the coloring range.
func (o HeatmapChartColorRangeOutput) MinValue() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v HeatmapChartColorRange) *float64 { return v.MinValue }).(pulumi.Float64PtrOutput)
}

type HeatmapChartColorRangePtrOutput struct{ *pulumi.OutputState }

func (HeatmapChartColorRangePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**HeatmapChartColorRange)(nil)).Elem()
}

func (o HeatmapChartColorRangePtrOutput) ToHeatmapChartColorRangePtrOutput() HeatmapChartColorRangePtrOutput {
	return o
}

func (o HeatmapChartColorRangePtrOutput) ToHeatmapChartColorRangePtrOutputWithContext(ctx context.Context) HeatmapChartColorRangePtrOutput {
	return o
}

func (o HeatmapChartColorRangePtrOutput) Elem() HeatmapChartColorRangeOutput {
	return o.ApplyT(func(v *HeatmapChartColorRange) HeatmapChartColorRange {
		if v != nil {
			return *v
		}
		var ret HeatmapChartColorRange
		return ret
	}).(HeatmapChartColorRangeOutput)
}

// The color range to use. The starting hex color value for data values in a heatmap chart. Specify the value as a 6-character hexadecimal value preceded by the '#' character, for example "#ea1849" (grass green).
func (o HeatmapChartColorRangePtrOutput) Color() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *HeatmapChartColorRange) *string {
		if v == nil {
			return nil
		}
		return &v.Color
	}).(pulumi.StringPtrOutput)
}

// The maximum value within the coloring range.
func (o HeatmapChartColorRangePtrOutput) MaxValue() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *HeatmapChartColorRange) *float64 {
		if v == nil {
			return nil
		}
		return v.MaxValue
	}).(pulumi.Float64PtrOutput)
}

// The minimum value within the coloring range.
func (o HeatmapChartColorRangePtrOutput) MinValue() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *HeatmapChartColorRange) *float64 {
		if v == nil {
			return nil
		}
		return v.MinValue
	}).(pulumi.Float64PtrOutput)
}

type HeatmapChartColorScale struct {
	// The color range to use. Hex values are not supported here. Must be one of gray, blue, light_blue, navy, dark_orange, orange, dark_yellow, magenta, cerise, pink, violet, purple, gray_blue, dark_green, green, aquamarine, red, yellow, vivid_yellow, light_green, or lime_green.
	Color string `pulumi:"color"`
	// Indicates the lower threshold non-inclusive value for this range.
	Gt *float64 `pulumi:"gt"`
	// Indicates the lower threshold inclusive value for this range.
	Gte *float64 `pulumi:"gte"`
	// Indicates the upper threshold non-inclusive value for this range.
	Lt *float64 `pulumi:"lt"`
	// Indicates the upper threshold inclusive value for this range.
	Lte *float64 `pulumi:"lte"`
}

// HeatmapChartColorScaleInput is an input type that accepts HeatmapChartColorScaleArgs and HeatmapChartColorScaleOutput values.
// You can construct a concrete instance of `HeatmapChartColorScaleInput` via:
//
//	HeatmapChartColorScaleArgs{...}
type HeatmapChartColorScaleInput interface {
	pulumi.Input

	ToHeatmapChartColorScaleOutput() HeatmapChartColorScaleOutput
	ToHeatmapChartColorScaleOutputWithContext(context.Context) HeatmapChartColorScaleOutput
}

type HeatmapChartColorScaleArgs struct {
	// The color range to use. Hex values are not supported here. Must be one of gray, blue, light_blue, navy, dark_orange, orange, dark_yellow, magenta, cerise, pink, violet, purple, gray_blue, dark_green, green, aquamarine, red, yellow, vivid_yellow, light_green, or lime_green.
	Color pulumi.StringInput `pulumi:"color"`
	// Indicates the lower threshold non-inclusive value for this range.
	Gt pulumi.Float64PtrInput `pulumi:"gt"`
	// Indicates the lower threshold inclusive value for this range.
	Gte pulumi.Float64PtrInput `pulumi:"gte"`
	// Indicates the upper threshold non-inclusive value for this range.
	Lt pulumi.Float64PtrInput `pulumi:"lt"`
	// Indicates the upper threshold inclusive value for this range.
	Lte pulumi.Float64PtrInput `pulumi:"lte"`
}

func (HeatmapChartColorScaleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*HeatmapChartColorScale)(nil)).Elem()
}

func (i HeatmapChartColorScaleArgs) ToHeatmapChartColorScaleOutput() HeatmapChartColorScaleOutput {
	return i.ToHeatmapChartColorScaleOutputWithContext(context.Background())
}

func (i HeatmapChartColorScaleArgs) ToHeatmapChartColorScaleOutputWithContext(ctx context.Context) HeatmapChartColorScaleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HeatmapChartColorScaleOutput)
}

// HeatmapChartColorScaleArrayInput is an input type that accepts HeatmapChartColorScaleArray and HeatmapChartColorScaleArrayOutput values.
// You can construct a concrete instance of `HeatmapChartColorScaleArrayInput` via:
//
//	HeatmapChartColorScaleArray{ HeatmapChartColorScaleArgs{...} }
type HeatmapChartColorScaleArrayInput interface {
	pulumi.Input

	ToHeatmapChartColorScaleArrayOutput() HeatmapChartColorScaleArrayOutput
	ToHeatmapChartColorScaleArrayOutputWithContext(context.Context) HeatmapChartColorScaleArrayOutput
}

type HeatmapChartColorScaleArray []HeatmapChartColorScaleInput

func (HeatmapChartColorScaleArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]HeatmapChartColorScale)(nil)).Elem()
}

func (i HeatmapChartColorScaleArray) ToHeatmapChartColorScaleArrayOutput() HeatmapChartColorScaleArrayOutput {
	return i.ToHeatmapChartColorScaleArrayOutputWithContext(context.Background())
}

func (i HeatmapChartColorScaleArray) ToHeatmapChartColorScaleArrayOutputWithContext(ctx context.Context) HeatmapChartColorScaleArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HeatmapChartColorScaleArrayOutput)
}

type HeatmapChartColorScaleOutput struct{ *pulumi.OutputState }

func (HeatmapChartColorScaleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*HeatmapChartColorScale)(nil)).Elem()
}

func (o HeatmapChartColorScaleOutput) ToHeatmapChartColorScaleOutput() HeatmapChartColorScaleOutput {
	return o
}

func (o HeatmapChartColorScaleOutput) ToHeatmapChartColorScaleOutputWithContext(ctx context.Context) HeatmapChartColorScaleOutput {
	return o
}

// The color range to use. Hex values are not supported here. Must be one of gray, blue, light_blue, navy, dark_orange, orange, dark_yellow, magenta, cerise, pink, violet, purple, gray_blue, dark_green, green, aquamarine, red, yellow, vivid_yellow, light_green, or lime_green.
func (o HeatmapChartColorScaleOutput) Color() pulumi.StringOutput {
	return o.ApplyT(func(v HeatmapChartColorScale) string { return v.Color }).(pulumi.StringOutput)
}

// Indicates the lower threshold non-inclusive value for this range.
func (o HeatmapChartColorScaleOutput) Gt() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v HeatmapChartColorScale) *float64 { return v.Gt }).(pulumi.Float64PtrOutput)
}

// Indicates the lower threshold inclusive value for this range.
func (o HeatmapChartColorScaleOutput) Gte() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v HeatmapChartColorScale) *float64 { return v.Gte }).(pulumi.Float64PtrOutput)
}

// Indicates the upper threshold non-inclusive value for this range.
func (o HeatmapChartColorScaleOutput) Lt() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v HeatmapChartColorScale) *float64 { return v.Lt }).(pulumi.Float64PtrOutput)
}

// Indicates the upper threshold inclusive value for this range.
func (o HeatmapChartColorScaleOutput) Lte() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v HeatmapChartColorScale) *float64 { return v.Lte }).(pulumi.Float64PtrOutput)
}

type HeatmapChartColorScaleArrayOutput struct{ *pulumi.OutputState }

func (HeatmapChartColorScaleArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]HeatmapChartColorScale)(nil)).Elem()
}

func (o HeatmapChartColorScaleArrayOutput) ToHeatmapChartColorScaleArrayOutput() HeatmapChartColorScaleArrayOutput {
	return o
}

func (o HeatmapChartColorScaleArrayOutput) ToHeatmapChartColorScaleArrayOutputWithContext(ctx context.Context) HeatmapChartColorScaleArrayOutput {
	return o
}

func (o HeatmapChartColorScaleArrayOutput) Index(i pulumi.IntInput) HeatmapChartColorScaleOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) HeatmapChartColorScale {
		return vs[0].([]HeatmapChartColorScale)[vs[1].(int)]
	}).(HeatmapChartColorScaleOutput)
}

type ListChartColorScale struct {
	// The color to use. Must be one of gray, blue, light_blue, navy, dark_orange, orange, dark_yellow, magenta, cerise, pink, violet, purple, gray_blue, dark_green, green, aquamarine, red, yellow, vivid_yellow, light_green, or lime_green.
	Color string `pulumi:"color"`
	// Indicates the lower threshold non-inclusive value for this range.
	Gt *float64 `pulumi:"gt"`
	// Indicates the lower threshold inclusive value for this range.
	Gte *float64 `pulumi:"gte"`
	// Indicates the upper threshold non-inculsive value for this range.
	Lt *float64 `pulumi:"lt"`
	// Indicates the upper threshold inclusive value for this range.
	Lte *float64 `pulumi:"lte"`
}

// ListChartColorScaleInput is an input type that accepts ListChartColorScaleArgs and ListChartColorScaleOutput values.
// You can construct a concrete instance of `ListChartColorScaleInput` via:
//
//	ListChartColorScaleArgs{...}
type ListChartColorScaleInput interface {
	pulumi.Input

	ToListChartColorScaleOutput() ListChartColorScaleOutput
	ToListChartColorScaleOutputWithContext(context.Context) ListChartColorScaleOutput
}

type ListChartColorScaleArgs struct {
	// The color to use. Must be one of gray, blue, light_blue, navy, dark_orange, orange, dark_yellow, magenta, cerise, pink, violet, purple, gray_blue, dark_green, green, aquamarine, red, yellow, vivid_yellow, light_green, or lime_green.
	Color pulumi.StringInput `pulumi:"color"`
	// Indicates the lower threshold non-inclusive value for this range.
	Gt pulumi.Float64PtrInput `pulumi:"gt"`
	// Indicates the lower threshold inclusive value for this range.
	Gte pulumi.Float64PtrInput `pulumi:"gte"`
	// Indicates the upper threshold non-inculsive value for this range.
	Lt pulumi.Float64PtrInput `pulumi:"lt"`
	// Indicates the upper threshold inclusive value for this range.
	Lte pulumi.Float64PtrInput `pulumi:"lte"`
}

func (ListChartColorScaleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ListChartColorScale)(nil)).Elem()
}

func (i ListChartColorScaleArgs) ToListChartColorScaleOutput() ListChartColorScaleOutput {
	return i.ToListChartColorScaleOutputWithContext(context.Background())
}

func (i ListChartColorScaleArgs) ToListChartColorScaleOutputWithContext(ctx context.Context) ListChartColorScaleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ListChartColorScaleOutput)
}

// ListChartColorScaleArrayInput is an input type that accepts ListChartColorScaleArray and ListChartColorScaleArrayOutput values.
// You can construct a concrete instance of `ListChartColorScaleArrayInput` via:
//
//	ListChartColorScaleArray{ ListChartColorScaleArgs{...} }
type ListChartColorScaleArrayInput interface {
	pulumi.Input

	ToListChartColorScaleArrayOutput() ListChartColorScaleArrayOutput
	ToListChartColorScaleArrayOutputWithContext(context.Context) ListChartColorScaleArrayOutput
}

type ListChartColorScaleArray []ListChartColorScaleInput

func (ListChartColorScaleArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ListChartColorScale)(nil)).Elem()
}

func (i ListChartColorScaleArray) ToListChartColorScaleArrayOutput() ListChartColorScaleArrayOutput {
	return i.ToListChartColorScaleArrayOutputWithContext(context.Background())
}

func (i ListChartColorScaleArray) ToListChartColorScaleArrayOutputWithContext(ctx context.Context) ListChartColorScaleArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ListChartColorScaleArrayOutput)
}

type ListChartColorScaleOutput struct{ *pulumi.OutputState }

func (ListChartColorScaleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ListChartColorScale)(nil)).Elem()
}

func (o ListChartColorScaleOutput) ToListChartColorScaleOutput() ListChartColorScaleOutput {
	return o
}

func (o ListChartColorScaleOutput) ToListChartColorScaleOutputWithContext(ctx context.Context) ListChartColorScaleOutput {
	return o
}

// The color to use. Must be one of gray, blue, light_blue, navy, dark_orange, orange, dark_yellow, magenta, cerise, pink, violet, purple, gray_blue, dark_green, green, aquamarine, red, yellow, vivid_yellow, light_green, or lime_green.
func (o ListChartColorScaleOutput) Color() pulumi.StringOutput {
	return o.ApplyT(func(v ListChartColorScale) string { return v.Color }).(pulumi.StringOutput)
}

// Indicates the lower threshold non-inclusive value for this range.
func (o ListChartColorScaleOutput) Gt() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v ListChartColorScale) *float64 { return v.Gt }).(pulumi.Float64PtrOutput)
}

// Indicates the lower threshold inclusive value for this range.
func (o ListChartColorScaleOutput) Gte() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v ListChartColorScale) *float64 { return v.Gte }).(pulumi.Float64PtrOutput)
}

// Indicates the upper threshold non-inculsive value for this range.
func (o ListChartColorScaleOutput) Lt() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v ListChartColorScale) *float64 { return v.Lt }).(pulumi.Float64PtrOutput)
}

// Indicates the upper threshold inclusive value for this range.
func (o ListChartColorScaleOutput) Lte() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v ListChartColorScale) *float64 { return v.Lte }).(pulumi.Float64PtrOutput)
}

type ListChartColorScaleArrayOutput struct{ *pulumi.OutputState }

func (ListChartColorScaleArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ListChartColorScale)(nil)).Elem()
}

func (o ListChartColorScaleArrayOutput) ToListChartColorScaleArrayOutput() ListChartColorScaleArrayOutput {
	return o
}

func (o ListChartColorScaleArrayOutput) ToListChartColorScaleArrayOutputWithContext(ctx context.Context) ListChartColorScaleArrayOutput {
	return o
}

func (o ListChartColorScaleArrayOutput) Index(i pulumi.IntInput) ListChartColorScaleOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ListChartColorScale {
		return vs[0].([]ListChartColorScale)[vs[1].(int)]
	}).(ListChartColorScaleOutput)
}

type ListChartLegendOptionsField struct {
	// True or False depending on if you want the property to be shown or hidden.
	Enabled *bool `pulumi:"enabled"`
	// The name of the property to display. Note the special values of `sfMetric` (corresponding with the API's `Plot Name`) which shows the label of the time series `publish()` and `sf_originatingMetric` (corresponding with the API's `metric (sf metric)`) that shows the [name of the metric](https://dev.splunk.com/observability/docs/signalflow/functions/data_function/) for the time series being displayed.
	Property string `pulumi:"property"`
}

// ListChartLegendOptionsFieldInput is an input type that accepts ListChartLegendOptionsFieldArgs and ListChartLegendOptionsFieldOutput values.
// You can construct a concrete instance of `ListChartLegendOptionsFieldInput` via:
//
//	ListChartLegendOptionsFieldArgs{...}
type ListChartLegendOptionsFieldInput interface {
	pulumi.Input

	ToListChartLegendOptionsFieldOutput() ListChartLegendOptionsFieldOutput
	ToListChartLegendOptionsFieldOutputWithContext(context.Context) ListChartLegendOptionsFieldOutput
}

type ListChartLegendOptionsFieldArgs struct {
	// True or False depending on if you want the property to be shown or hidden.
	Enabled pulumi.BoolPtrInput `pulumi:"enabled"`
	// The name of the property to display. Note the special values of `sfMetric` (corresponding with the API's `Plot Name`) which shows the label of the time series `publish()` and `sf_originatingMetric` (corresponding with the API's `metric (sf metric)`) that shows the [name of the metric](https://dev.splunk.com/observability/docs/signalflow/functions/data_function/) for the time series being displayed.
	Property pulumi.StringInput `pulumi:"property"`
}

func (ListChartLegendOptionsFieldArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ListChartLegendOptionsField)(nil)).Elem()
}

func (i ListChartLegendOptionsFieldArgs) ToListChartLegendOptionsFieldOutput() ListChartLegendOptionsFieldOutput {
	return i.ToListChartLegendOptionsFieldOutputWithContext(context.Background())
}

func (i ListChartLegendOptionsFieldArgs) ToListChartLegendOptionsFieldOutputWithContext(ctx context.Context) ListChartLegendOptionsFieldOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ListChartLegendOptionsFieldOutput)
}

// ListChartLegendOptionsFieldArrayInput is an input type that accepts ListChartLegendOptionsFieldArray and ListChartLegendOptionsFieldArrayOutput values.
// You can construct a concrete instance of `ListChartLegendOptionsFieldArrayInput` via:
//
//	ListChartLegendOptionsFieldArray{ ListChartLegendOptionsFieldArgs{...} }
type ListChartLegendOptionsFieldArrayInput interface {
	pulumi.Input

	ToListChartLegendOptionsFieldArrayOutput() ListChartLegendOptionsFieldArrayOutput
	ToListChartLegendOptionsFieldArrayOutputWithContext(context.Context) ListChartLegendOptionsFieldArrayOutput
}

type ListChartLegendOptionsFieldArray []ListChartLegendOptionsFieldInput

func (ListChartLegendOptionsFieldArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ListChartLegendOptionsField)(nil)).Elem()
}

func (i ListChartLegendOptionsFieldArray) ToListChartLegendOptionsFieldArrayOutput() ListChartLegendOptionsFieldArrayOutput {
	return i.ToListChartLegendOptionsFieldArrayOutputWithContext(context.Background())
}

func (i ListChartLegendOptionsFieldArray) ToListChartLegendOptionsFieldArrayOutputWithContext(ctx context.Context) ListChartLegendOptionsFieldArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ListChartLegendOptionsFieldArrayOutput)
}

type ListChartLegendOptionsFieldOutput struct{ *pulumi.OutputState }

func (ListChartLegendOptionsFieldOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ListChartLegendOptionsField)(nil)).Elem()
}

func (o ListChartLegendOptionsFieldOutput) ToListChartLegendOptionsFieldOutput() ListChartLegendOptionsFieldOutput {
	return o
}

func (o ListChartLegendOptionsFieldOutput) ToListChartLegendOptionsFieldOutputWithContext(ctx context.Context) ListChartLegendOptionsFieldOutput {
	return o
}

// True or False depending on if you want the property to be shown or hidden.
func (o ListChartLegendOptionsFieldOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ListChartLegendOptionsField) *bool { return v.Enabled }).(pulumi.BoolPtrOutput)
}

// The name of the property to display. Note the special values of `sfMetric` (corresponding with the API's `Plot Name`) which shows the label of the time series `publish()` and `sf_originatingMetric` (corresponding with the API's `metric (sf metric)`) that shows the [name of the metric](https://dev.splunk.com/observability/docs/signalflow/functions/data_function/) for the time series being displayed.
func (o ListChartLegendOptionsFieldOutput) Property() pulumi.StringOutput {
	return o.ApplyT(func(v ListChartLegendOptionsField) string { return v.Property }).(pulumi.StringOutput)
}

type ListChartLegendOptionsFieldArrayOutput struct{ *pulumi.OutputState }

func (ListChartLegendOptionsFieldArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ListChartLegendOptionsField)(nil)).Elem()
}

func (o ListChartLegendOptionsFieldArrayOutput) ToListChartLegendOptionsFieldArrayOutput() ListChartLegendOptionsFieldArrayOutput {
	return o
}

func (o ListChartLegendOptionsFieldArrayOutput) ToListChartLegendOptionsFieldArrayOutputWithContext(ctx context.Context) ListChartLegendOptionsFieldArrayOutput {
	return o
}

func (o ListChartLegendOptionsFieldArrayOutput) Index(i pulumi.IntInput) ListChartLegendOptionsFieldOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ListChartLegendOptionsField {
		return vs[0].([]ListChartLegendOptionsField)[vs[1].(int)]
	}).(ListChartLegendOptionsFieldOutput)
}

type ListChartVizOption struct {
	// The color to use. Must be one of gray, blue, light_blue, navy, dark_orange, orange, dark_yellow, magenta, cerise, pink, violet, purple, gray_blue, dark_green, green, aquamarine, red, yellow, vivid_yellow, light_green, or lime_green.
	Color *string `pulumi:"color"`
	// Specifies an alternate value for the Plot Name column of the Data Table associated with the chart.
	DisplayName *string `pulumi:"displayName"`
	// Label used in the publish statement that displays the plot (metric time series data) you want to customize.
	Label string `pulumi:"label"`
	// , `valueSuffix` - (Optional) Arbitrary prefix/suffix to display with the value of this plot.
	ValuePrefix *string `pulumi:"valuePrefix"`
	// An arbitrary suffix to display with the value of this plot
	ValueSuffix *string `pulumi:"valueSuffix"`
	// A unit to attach to this plot. Units support automatic scaling (eg thousands of bytes will be displayed as kilobytes). Values values are `Bit, Kilobit, Megabit, Gigabit, Terabit, Petabit, Exabit, Zettabit, Yottabit, Byte, Kibibyte, Mebibyte, Gibibyte (note: this was previously typoed as Gigibyte), Tebibyte, Pebibyte, Exbibyte, Zebibyte, Yobibyte, Nanosecond, Microsecond, Millisecond, Second, Minute, Hour, Day, Week`.
	ValueUnit *string `pulumi:"valueUnit"`
}

// ListChartVizOptionInput is an input type that accepts ListChartVizOptionArgs and ListChartVizOptionOutput values.
// You can construct a concrete instance of `ListChartVizOptionInput` via:
//
//	ListChartVizOptionArgs{...}
type ListChartVizOptionInput interface {
	pulumi.Input

	ToListChartVizOptionOutput() ListChartVizOptionOutput
	ToListChartVizOptionOutputWithContext(context.Context) ListChartVizOptionOutput
}

type ListChartVizOptionArgs struct {
	// The color to use. Must be one of gray, blue, light_blue, navy, dark_orange, orange, dark_yellow, magenta, cerise, pink, violet, purple, gray_blue, dark_green, green, aquamarine, red, yellow, vivid_yellow, light_green, or lime_green.
	Color pulumi.StringPtrInput `pulumi:"color"`
	// Specifies an alternate value for the Plot Name column of the Data Table associated with the chart.
	DisplayName pulumi.StringPtrInput `pulumi:"displayName"`
	// Label used in the publish statement that displays the plot (metric time series data) you want to customize.
	Label pulumi.StringInput `pulumi:"label"`
	// , `valueSuffix` - (Optional) Arbitrary prefix/suffix to display with the value of this plot.
	ValuePrefix pulumi.StringPtrInput `pulumi:"valuePrefix"`
	// An arbitrary suffix to display with the value of this plot
	ValueSuffix pulumi.StringPtrInput `pulumi:"valueSuffix"`
	// A unit to attach to this plot. Units support automatic scaling (eg thousands of bytes will be displayed as kilobytes). Values values are `Bit, Kilobit, Megabit, Gigabit, Terabit, Petabit, Exabit, Zettabit, Yottabit, Byte, Kibibyte, Mebibyte, Gibibyte (note: this was previously typoed as Gigibyte), Tebibyte, Pebibyte, Exbibyte, Zebibyte, Yobibyte, Nanosecond, Microsecond, Millisecond, Second, Minute, Hour, Day, Week`.
	ValueUnit pulumi.StringPtrInput `pulumi:"valueUnit"`
}

func (ListChartVizOptionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ListChartVizOption)(nil)).Elem()
}

func (i ListChartVizOptionArgs) ToListChartVizOptionOutput() ListChartVizOptionOutput {
	return i.ToListChartVizOptionOutputWithContext(context.Background())
}

func (i ListChartVizOptionArgs) ToListChartVizOptionOutputWithContext(ctx context.Context) ListChartVizOptionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ListChartVizOptionOutput)
}

// ListChartVizOptionArrayInput is an input type that accepts ListChartVizOptionArray and ListChartVizOptionArrayOutput values.
// You can construct a concrete instance of `ListChartVizOptionArrayInput` via:
//
//	ListChartVizOptionArray{ ListChartVizOptionArgs{...} }
type ListChartVizOptionArrayInput interface {
	pulumi.Input

	ToListChartVizOptionArrayOutput() ListChartVizOptionArrayOutput
	ToListChartVizOptionArrayOutputWithContext(context.Context) ListChartVizOptionArrayOutput
}

type ListChartVizOptionArray []ListChartVizOptionInput

func (ListChartVizOptionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ListChartVizOption)(nil)).Elem()
}

func (i ListChartVizOptionArray) ToListChartVizOptionArrayOutput() ListChartVizOptionArrayOutput {
	return i.ToListChartVizOptionArrayOutputWithContext(context.Background())
}

func (i ListChartVizOptionArray) ToListChartVizOptionArrayOutputWithContext(ctx context.Context) ListChartVizOptionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ListChartVizOptionArrayOutput)
}

type ListChartVizOptionOutput struct{ *pulumi.OutputState }

func (ListChartVizOptionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ListChartVizOption)(nil)).Elem()
}

func (o ListChartVizOptionOutput) ToListChartVizOptionOutput() ListChartVizOptionOutput {
	return o
}

func (o ListChartVizOptionOutput) ToListChartVizOptionOutputWithContext(ctx context.Context) ListChartVizOptionOutput {
	return o
}

// The color to use. Must be one of gray, blue, light_blue, navy, dark_orange, orange, dark_yellow, magenta, cerise, pink, violet, purple, gray_blue, dark_green, green, aquamarine, red, yellow, vivid_yellow, light_green, or lime_green.
func (o ListChartVizOptionOutput) Color() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ListChartVizOption) *string { return v.Color }).(pulumi.StringPtrOutput)
}

// Specifies an alternate value for the Plot Name column of the Data Table associated with the chart.
func (o ListChartVizOptionOutput) DisplayName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ListChartVizOption) *string { return v.DisplayName }).(pulumi.StringPtrOutput)
}

// Label used in the publish statement that displays the plot (metric time series data) you want to customize.
func (o ListChartVizOptionOutput) Label() pulumi.StringOutput {
	return o.ApplyT(func(v ListChartVizOption) string { return v.Label }).(pulumi.StringOutput)
}

// , `valueSuffix` - (Optional) Arbitrary prefix/suffix to display with the value of this plot.
func (o ListChartVizOptionOutput) ValuePrefix() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ListChartVizOption) *string { return v.ValuePrefix }).(pulumi.StringPtrOutput)
}

// An arbitrary suffix to display with the value of this plot
func (o ListChartVizOptionOutput) ValueSuffix() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ListChartVizOption) *string { return v.ValueSuffix }).(pulumi.StringPtrOutput)
}

// A unit to attach to this plot. Units support automatic scaling (eg thousands of bytes will be displayed as kilobytes). Values values are `Bit, Kilobit, Megabit, Gigabit, Terabit, Petabit, Exabit, Zettabit, Yottabit, Byte, Kibibyte, Mebibyte, Gibibyte (note: this was previously typoed as Gigibyte), Tebibyte, Pebibyte, Exbibyte, Zebibyte, Yobibyte, Nanosecond, Microsecond, Millisecond, Second, Minute, Hour, Day, Week`.
func (o ListChartVizOptionOutput) ValueUnit() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ListChartVizOption) *string { return v.ValueUnit }).(pulumi.StringPtrOutput)
}

type ListChartVizOptionArrayOutput struct{ *pulumi.OutputState }

func (ListChartVizOptionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ListChartVizOption)(nil)).Elem()
}

func (o ListChartVizOptionArrayOutput) ToListChartVizOptionArrayOutput() ListChartVizOptionArrayOutput {
	return o
}

func (o ListChartVizOptionArrayOutput) ToListChartVizOptionArrayOutputWithContext(ctx context.Context) ListChartVizOptionArrayOutput {
	return o
}

func (o ListChartVizOptionArrayOutput) Index(i pulumi.IntInput) ListChartVizOptionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ListChartVizOption {
		return vs[0].([]ListChartVizOption)[vs[1].(int)]
	}).(ListChartVizOptionOutput)
}

type MetricRulesetAggregationRule struct {
	// Aggregator object
	Aggregators []MetricRulesetAggregationRuleAggregator `pulumi:"aggregators"`
	// Information about an aggregation rule
	Description *string `pulumi:"description"`
	// When false, this rule will not generate aggregated MTSs
	Enabled bool `pulumi:"enabled"`
	// Matcher object
	Matchers []MetricRulesetAggregationRuleMatcher `pulumi:"matchers"`
	// name of the aggregation rule
	Name *string `pulumi:"name"`
}

// MetricRulesetAggregationRuleInput is an input type that accepts MetricRulesetAggregationRuleArgs and MetricRulesetAggregationRuleOutput values.
// You can construct a concrete instance of `MetricRulesetAggregationRuleInput` via:
//
//	MetricRulesetAggregationRuleArgs{...}
type MetricRulesetAggregationRuleInput interface {
	pulumi.Input

	ToMetricRulesetAggregationRuleOutput() MetricRulesetAggregationRuleOutput
	ToMetricRulesetAggregationRuleOutputWithContext(context.Context) MetricRulesetAggregationRuleOutput
}

type MetricRulesetAggregationRuleArgs struct {
	// Aggregator object
	Aggregators MetricRulesetAggregationRuleAggregatorArrayInput `pulumi:"aggregators"`
	// Information about an aggregation rule
	Description pulumi.StringPtrInput `pulumi:"description"`
	// When false, this rule will not generate aggregated MTSs
	Enabled pulumi.BoolInput `pulumi:"enabled"`
	// Matcher object
	Matchers MetricRulesetAggregationRuleMatcherArrayInput `pulumi:"matchers"`
	// name of the aggregation rule
	Name pulumi.StringPtrInput `pulumi:"name"`
}

func (MetricRulesetAggregationRuleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MetricRulesetAggregationRule)(nil)).Elem()
}

func (i MetricRulesetAggregationRuleArgs) ToMetricRulesetAggregationRuleOutput() MetricRulesetAggregationRuleOutput {
	return i.ToMetricRulesetAggregationRuleOutputWithContext(context.Background())
}

func (i MetricRulesetAggregationRuleArgs) ToMetricRulesetAggregationRuleOutputWithContext(ctx context.Context) MetricRulesetAggregationRuleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MetricRulesetAggregationRuleOutput)
}

// MetricRulesetAggregationRuleArrayInput is an input type that accepts MetricRulesetAggregationRuleArray and MetricRulesetAggregationRuleArrayOutput values.
// You can construct a concrete instance of `MetricRulesetAggregationRuleArrayInput` via:
//
//	MetricRulesetAggregationRuleArray{ MetricRulesetAggregationRuleArgs{...} }
type MetricRulesetAggregationRuleArrayInput interface {
	pulumi.Input

	ToMetricRulesetAggregationRuleArrayOutput() MetricRulesetAggregationRuleArrayOutput
	ToMetricRulesetAggregationRuleArrayOutputWithContext(context.Context) MetricRulesetAggregationRuleArrayOutput
}

type MetricRulesetAggregationRuleArray []MetricRulesetAggregationRuleInput

func (MetricRulesetAggregationRuleArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]MetricRulesetAggregationRule)(nil)).Elem()
}

func (i MetricRulesetAggregationRuleArray) ToMetricRulesetAggregationRuleArrayOutput() MetricRulesetAggregationRuleArrayOutput {
	return i.ToMetricRulesetAggregationRuleArrayOutputWithContext(context.Background())
}

func (i MetricRulesetAggregationRuleArray) ToMetricRulesetAggregationRuleArrayOutputWithContext(ctx context.Context) MetricRulesetAggregationRuleArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MetricRulesetAggregationRuleArrayOutput)
}

type MetricRulesetAggregationRuleOutput struct{ *pulumi.OutputState }

func (MetricRulesetAggregationRuleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MetricRulesetAggregationRule)(nil)).Elem()
}

func (o MetricRulesetAggregationRuleOutput) ToMetricRulesetAggregationRuleOutput() MetricRulesetAggregationRuleOutput {
	return o
}

func (o MetricRulesetAggregationRuleOutput) ToMetricRulesetAggregationRuleOutputWithContext(ctx context.Context) MetricRulesetAggregationRuleOutput {
	return o
}

// Aggregator object
func (o MetricRulesetAggregationRuleOutput) Aggregators() MetricRulesetAggregationRuleAggregatorArrayOutput {
	return o.ApplyT(func(v MetricRulesetAggregationRule) []MetricRulesetAggregationRuleAggregator { return v.Aggregators }).(MetricRulesetAggregationRuleAggregatorArrayOutput)
}

// Information about an aggregation rule
func (o MetricRulesetAggregationRuleOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MetricRulesetAggregationRule) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// When false, this rule will not generate aggregated MTSs
func (o MetricRulesetAggregationRuleOutput) Enabled() pulumi.BoolOutput {
	return o.ApplyT(func(v MetricRulesetAggregationRule) bool { return v.Enabled }).(pulumi.BoolOutput)
}

// Matcher object
func (o MetricRulesetAggregationRuleOutput) Matchers() MetricRulesetAggregationRuleMatcherArrayOutput {
	return o.ApplyT(func(v MetricRulesetAggregationRule) []MetricRulesetAggregationRuleMatcher { return v.Matchers }).(MetricRulesetAggregationRuleMatcherArrayOutput)
}

// name of the aggregation rule
func (o MetricRulesetAggregationRuleOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MetricRulesetAggregationRule) *string { return v.Name }).(pulumi.StringPtrOutput)
}

type MetricRulesetAggregationRuleArrayOutput struct{ *pulumi.OutputState }

func (MetricRulesetAggregationRuleArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]MetricRulesetAggregationRule)(nil)).Elem()
}

func (o MetricRulesetAggregationRuleArrayOutput) ToMetricRulesetAggregationRuleArrayOutput() MetricRulesetAggregationRuleArrayOutput {
	return o
}

func (o MetricRulesetAggregationRuleArrayOutput) ToMetricRulesetAggregationRuleArrayOutputWithContext(ctx context.Context) MetricRulesetAggregationRuleArrayOutput {
	return o
}

func (o MetricRulesetAggregationRuleArrayOutput) Index(i pulumi.IntInput) MetricRulesetAggregationRuleOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) MetricRulesetAggregationRule {
		return vs[0].([]MetricRulesetAggregationRule)[vs[1].(int)]
	}).(MetricRulesetAggregationRuleOutput)
}

type MetricRulesetAggregationRuleAggregator struct {
	// List of dimensions to either be kept or dropped in the new aggregated MTSs
	Dimensions []string `pulumi:"dimensions"`
	// when true, the specified dimensions will be dropped from the aggregated MTSs
	DropDimensions bool `pulumi:"dropDimensions"`
	// name of the new aggregated metric
	OutputName string `pulumi:"outputName"`
	// Type of aggregator. Must always be "rollup"
	Type string `pulumi:"type"`
}

// MetricRulesetAggregationRuleAggregatorInput is an input type that accepts MetricRulesetAggregationRuleAggregatorArgs and MetricRulesetAggregationRuleAggregatorOutput values.
// You can construct a concrete instance of `MetricRulesetAggregationRuleAggregatorInput` via:
//
//	MetricRulesetAggregationRuleAggregatorArgs{...}
type MetricRulesetAggregationRuleAggregatorInput interface {
	pulumi.Input

	ToMetricRulesetAggregationRuleAggregatorOutput() MetricRulesetAggregationRuleAggregatorOutput
	ToMetricRulesetAggregationRuleAggregatorOutputWithContext(context.Context) MetricRulesetAggregationRuleAggregatorOutput
}

type MetricRulesetAggregationRuleAggregatorArgs struct {
	// List of dimensions to either be kept or dropped in the new aggregated MTSs
	Dimensions pulumi.StringArrayInput `pulumi:"dimensions"`
	// when true, the specified dimensions will be dropped from the aggregated MTSs
	DropDimensions pulumi.BoolInput `pulumi:"dropDimensions"`
	// name of the new aggregated metric
	OutputName pulumi.StringInput `pulumi:"outputName"`
	// Type of aggregator. Must always be "rollup"
	Type pulumi.StringInput `pulumi:"type"`
}

func (MetricRulesetAggregationRuleAggregatorArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MetricRulesetAggregationRuleAggregator)(nil)).Elem()
}

func (i MetricRulesetAggregationRuleAggregatorArgs) ToMetricRulesetAggregationRuleAggregatorOutput() MetricRulesetAggregationRuleAggregatorOutput {
	return i.ToMetricRulesetAggregationRuleAggregatorOutputWithContext(context.Background())
}

func (i MetricRulesetAggregationRuleAggregatorArgs) ToMetricRulesetAggregationRuleAggregatorOutputWithContext(ctx context.Context) MetricRulesetAggregationRuleAggregatorOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MetricRulesetAggregationRuleAggregatorOutput)
}

// MetricRulesetAggregationRuleAggregatorArrayInput is an input type that accepts MetricRulesetAggregationRuleAggregatorArray and MetricRulesetAggregationRuleAggregatorArrayOutput values.
// You can construct a concrete instance of `MetricRulesetAggregationRuleAggregatorArrayInput` via:
//
//	MetricRulesetAggregationRuleAggregatorArray{ MetricRulesetAggregationRuleAggregatorArgs{...} }
type MetricRulesetAggregationRuleAggregatorArrayInput interface {
	pulumi.Input

	ToMetricRulesetAggregationRuleAggregatorArrayOutput() MetricRulesetAggregationRuleAggregatorArrayOutput
	ToMetricRulesetAggregationRuleAggregatorArrayOutputWithContext(context.Context) MetricRulesetAggregationRuleAggregatorArrayOutput
}

type MetricRulesetAggregationRuleAggregatorArray []MetricRulesetAggregationRuleAggregatorInput

func (MetricRulesetAggregationRuleAggregatorArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]MetricRulesetAggregationRuleAggregator)(nil)).Elem()
}

func (i MetricRulesetAggregationRuleAggregatorArray) ToMetricRulesetAggregationRuleAggregatorArrayOutput() MetricRulesetAggregationRuleAggregatorArrayOutput {
	return i.ToMetricRulesetAggregationRuleAggregatorArrayOutputWithContext(context.Background())
}

func (i MetricRulesetAggregationRuleAggregatorArray) ToMetricRulesetAggregationRuleAggregatorArrayOutputWithContext(ctx context.Context) MetricRulesetAggregationRuleAggregatorArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MetricRulesetAggregationRuleAggregatorArrayOutput)
}

type MetricRulesetAggregationRuleAggregatorOutput struct{ *pulumi.OutputState }

func (MetricRulesetAggregationRuleAggregatorOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MetricRulesetAggregationRuleAggregator)(nil)).Elem()
}

func (o MetricRulesetAggregationRuleAggregatorOutput) ToMetricRulesetAggregationRuleAggregatorOutput() MetricRulesetAggregationRuleAggregatorOutput {
	return o
}

func (o MetricRulesetAggregationRuleAggregatorOutput) ToMetricRulesetAggregationRuleAggregatorOutputWithContext(ctx context.Context) MetricRulesetAggregationRuleAggregatorOutput {
	return o
}

// List of dimensions to either be kept or dropped in the new aggregated MTSs
func (o MetricRulesetAggregationRuleAggregatorOutput) Dimensions() pulumi.StringArrayOutput {
	return o.ApplyT(func(v MetricRulesetAggregationRuleAggregator) []string { return v.Dimensions }).(pulumi.StringArrayOutput)
}

// when true, the specified dimensions will be dropped from the aggregated MTSs
func (o MetricRulesetAggregationRuleAggregatorOutput) DropDimensions() pulumi.BoolOutput {
	return o.ApplyT(func(v MetricRulesetAggregationRuleAggregator) bool { return v.DropDimensions }).(pulumi.BoolOutput)
}

// name of the new aggregated metric
func (o MetricRulesetAggregationRuleAggregatorOutput) OutputName() pulumi.StringOutput {
	return o.ApplyT(func(v MetricRulesetAggregationRuleAggregator) string { return v.OutputName }).(pulumi.StringOutput)
}

// Type of aggregator. Must always be "rollup"
func (o MetricRulesetAggregationRuleAggregatorOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v MetricRulesetAggregationRuleAggregator) string { return v.Type }).(pulumi.StringOutput)
}

type MetricRulesetAggregationRuleAggregatorArrayOutput struct{ *pulumi.OutputState }

func (MetricRulesetAggregationRuleAggregatorArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]MetricRulesetAggregationRuleAggregator)(nil)).Elem()
}

func (o MetricRulesetAggregationRuleAggregatorArrayOutput) ToMetricRulesetAggregationRuleAggregatorArrayOutput() MetricRulesetAggregationRuleAggregatorArrayOutput {
	return o
}

func (o MetricRulesetAggregationRuleAggregatorArrayOutput) ToMetricRulesetAggregationRuleAggregatorArrayOutputWithContext(ctx context.Context) MetricRulesetAggregationRuleAggregatorArrayOutput {
	return o
}

func (o MetricRulesetAggregationRuleAggregatorArrayOutput) Index(i pulumi.IntInput) MetricRulesetAggregationRuleAggregatorOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) MetricRulesetAggregationRuleAggregator {
		return vs[0].([]MetricRulesetAggregationRuleAggregator)[vs[1].(int)]
	}).(MetricRulesetAggregationRuleAggregatorOutput)
}

type MetricRulesetAggregationRuleMatcher struct {
	// List of filters to filter the set of input MTSs
	Filters []MetricRulesetAggregationRuleMatcherFilter `pulumi:"filters"`
	// Type of matcher. Must always be "dimension"
	Type string `pulumi:"type"`
}

// MetricRulesetAggregationRuleMatcherInput is an input type that accepts MetricRulesetAggregationRuleMatcherArgs and MetricRulesetAggregationRuleMatcherOutput values.
// You can construct a concrete instance of `MetricRulesetAggregationRuleMatcherInput` via:
//
//	MetricRulesetAggregationRuleMatcherArgs{...}
type MetricRulesetAggregationRuleMatcherInput interface {
	pulumi.Input

	ToMetricRulesetAggregationRuleMatcherOutput() MetricRulesetAggregationRuleMatcherOutput
	ToMetricRulesetAggregationRuleMatcherOutputWithContext(context.Context) MetricRulesetAggregationRuleMatcherOutput
}

type MetricRulesetAggregationRuleMatcherArgs struct {
	// List of filters to filter the set of input MTSs
	Filters MetricRulesetAggregationRuleMatcherFilterArrayInput `pulumi:"filters"`
	// Type of matcher. Must always be "dimension"
	Type pulumi.StringInput `pulumi:"type"`
}

func (MetricRulesetAggregationRuleMatcherArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MetricRulesetAggregationRuleMatcher)(nil)).Elem()
}

func (i MetricRulesetAggregationRuleMatcherArgs) ToMetricRulesetAggregationRuleMatcherOutput() MetricRulesetAggregationRuleMatcherOutput {
	return i.ToMetricRulesetAggregationRuleMatcherOutputWithContext(context.Background())
}

func (i MetricRulesetAggregationRuleMatcherArgs) ToMetricRulesetAggregationRuleMatcherOutputWithContext(ctx context.Context) MetricRulesetAggregationRuleMatcherOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MetricRulesetAggregationRuleMatcherOutput)
}

// MetricRulesetAggregationRuleMatcherArrayInput is an input type that accepts MetricRulesetAggregationRuleMatcherArray and MetricRulesetAggregationRuleMatcherArrayOutput values.
// You can construct a concrete instance of `MetricRulesetAggregationRuleMatcherArrayInput` via:
//
//	MetricRulesetAggregationRuleMatcherArray{ MetricRulesetAggregationRuleMatcherArgs{...} }
type MetricRulesetAggregationRuleMatcherArrayInput interface {
	pulumi.Input

	ToMetricRulesetAggregationRuleMatcherArrayOutput() MetricRulesetAggregationRuleMatcherArrayOutput
	ToMetricRulesetAggregationRuleMatcherArrayOutputWithContext(context.Context) MetricRulesetAggregationRuleMatcherArrayOutput
}

type MetricRulesetAggregationRuleMatcherArray []MetricRulesetAggregationRuleMatcherInput

func (MetricRulesetAggregationRuleMatcherArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]MetricRulesetAggregationRuleMatcher)(nil)).Elem()
}

func (i MetricRulesetAggregationRuleMatcherArray) ToMetricRulesetAggregationRuleMatcherArrayOutput() MetricRulesetAggregationRuleMatcherArrayOutput {
	return i.ToMetricRulesetAggregationRuleMatcherArrayOutputWithContext(context.Background())
}

func (i MetricRulesetAggregationRuleMatcherArray) ToMetricRulesetAggregationRuleMatcherArrayOutputWithContext(ctx context.Context) MetricRulesetAggregationRuleMatcherArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MetricRulesetAggregationRuleMatcherArrayOutput)
}

type MetricRulesetAggregationRuleMatcherOutput struct{ *pulumi.OutputState }

func (MetricRulesetAggregationRuleMatcherOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MetricRulesetAggregationRuleMatcher)(nil)).Elem()
}

func (o MetricRulesetAggregationRuleMatcherOutput) ToMetricRulesetAggregationRuleMatcherOutput() MetricRulesetAggregationRuleMatcherOutput {
	return o
}

func (o MetricRulesetAggregationRuleMatcherOutput) ToMetricRulesetAggregationRuleMatcherOutputWithContext(ctx context.Context) MetricRulesetAggregationRuleMatcherOutput {
	return o
}

// List of filters to filter the set of input MTSs
func (o MetricRulesetAggregationRuleMatcherOutput) Filters() MetricRulesetAggregationRuleMatcherFilterArrayOutput {
	return o.ApplyT(func(v MetricRulesetAggregationRuleMatcher) []MetricRulesetAggregationRuleMatcherFilter {
		return v.Filters
	}).(MetricRulesetAggregationRuleMatcherFilterArrayOutput)
}

// Type of matcher. Must always be "dimension"
func (o MetricRulesetAggregationRuleMatcherOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v MetricRulesetAggregationRuleMatcher) string { return v.Type }).(pulumi.StringOutput)
}

type MetricRulesetAggregationRuleMatcherArrayOutput struct{ *pulumi.OutputState }

func (MetricRulesetAggregationRuleMatcherArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]MetricRulesetAggregationRuleMatcher)(nil)).Elem()
}

func (o MetricRulesetAggregationRuleMatcherArrayOutput) ToMetricRulesetAggregationRuleMatcherArrayOutput() MetricRulesetAggregationRuleMatcherArrayOutput {
	return o
}

func (o MetricRulesetAggregationRuleMatcherArrayOutput) ToMetricRulesetAggregationRuleMatcherArrayOutputWithContext(ctx context.Context) MetricRulesetAggregationRuleMatcherArrayOutput {
	return o
}

func (o MetricRulesetAggregationRuleMatcherArrayOutput) Index(i pulumi.IntInput) MetricRulesetAggregationRuleMatcherOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) MetricRulesetAggregationRuleMatcher {
		return vs[0].([]MetricRulesetAggregationRuleMatcher)[vs[1].(int)]
	}).(MetricRulesetAggregationRuleMatcherOutput)
}

type MetricRulesetAggregationRuleMatcherFilter struct {
	// When true, this filter will match all values not matching the property_values
	Not bool `pulumi:"not"`
	// Name of the dimension
	Property string `pulumi:"property"`
	// Value of the dimension
	PropertyValues []string `pulumi:"propertyValues"`
}

// MetricRulesetAggregationRuleMatcherFilterInput is an input type that accepts MetricRulesetAggregationRuleMatcherFilterArgs and MetricRulesetAggregationRuleMatcherFilterOutput values.
// You can construct a concrete instance of `MetricRulesetAggregationRuleMatcherFilterInput` via:
//
//	MetricRulesetAggregationRuleMatcherFilterArgs{...}
type MetricRulesetAggregationRuleMatcherFilterInput interface {
	pulumi.Input

	ToMetricRulesetAggregationRuleMatcherFilterOutput() MetricRulesetAggregationRuleMatcherFilterOutput
	ToMetricRulesetAggregationRuleMatcherFilterOutputWithContext(context.Context) MetricRulesetAggregationRuleMatcherFilterOutput
}

type MetricRulesetAggregationRuleMatcherFilterArgs struct {
	// When true, this filter will match all values not matching the property_values
	Not pulumi.BoolInput `pulumi:"not"`
	// Name of the dimension
	Property pulumi.StringInput `pulumi:"property"`
	// Value of the dimension
	PropertyValues pulumi.StringArrayInput `pulumi:"propertyValues"`
}

func (MetricRulesetAggregationRuleMatcherFilterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MetricRulesetAggregationRuleMatcherFilter)(nil)).Elem()
}

func (i MetricRulesetAggregationRuleMatcherFilterArgs) ToMetricRulesetAggregationRuleMatcherFilterOutput() MetricRulesetAggregationRuleMatcherFilterOutput {
	return i.ToMetricRulesetAggregationRuleMatcherFilterOutputWithContext(context.Background())
}

func (i MetricRulesetAggregationRuleMatcherFilterArgs) ToMetricRulesetAggregationRuleMatcherFilterOutputWithContext(ctx context.Context) MetricRulesetAggregationRuleMatcherFilterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MetricRulesetAggregationRuleMatcherFilterOutput)
}

// MetricRulesetAggregationRuleMatcherFilterArrayInput is an input type that accepts MetricRulesetAggregationRuleMatcherFilterArray and MetricRulesetAggregationRuleMatcherFilterArrayOutput values.
// You can construct a concrete instance of `MetricRulesetAggregationRuleMatcherFilterArrayInput` via:
//
//	MetricRulesetAggregationRuleMatcherFilterArray{ MetricRulesetAggregationRuleMatcherFilterArgs{...} }
type MetricRulesetAggregationRuleMatcherFilterArrayInput interface {
	pulumi.Input

	ToMetricRulesetAggregationRuleMatcherFilterArrayOutput() MetricRulesetAggregationRuleMatcherFilterArrayOutput
	ToMetricRulesetAggregationRuleMatcherFilterArrayOutputWithContext(context.Context) MetricRulesetAggregationRuleMatcherFilterArrayOutput
}

type MetricRulesetAggregationRuleMatcherFilterArray []MetricRulesetAggregationRuleMatcherFilterInput

func (MetricRulesetAggregationRuleMatcherFilterArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]MetricRulesetAggregationRuleMatcherFilter)(nil)).Elem()
}

func (i MetricRulesetAggregationRuleMatcherFilterArray) ToMetricRulesetAggregationRuleMatcherFilterArrayOutput() MetricRulesetAggregationRuleMatcherFilterArrayOutput {
	return i.ToMetricRulesetAggregationRuleMatcherFilterArrayOutputWithContext(context.Background())
}

func (i MetricRulesetAggregationRuleMatcherFilterArray) ToMetricRulesetAggregationRuleMatcherFilterArrayOutputWithContext(ctx context.Context) MetricRulesetAggregationRuleMatcherFilterArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MetricRulesetAggregationRuleMatcherFilterArrayOutput)
}

type MetricRulesetAggregationRuleMatcherFilterOutput struct{ *pulumi.OutputState }

func (MetricRulesetAggregationRuleMatcherFilterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MetricRulesetAggregationRuleMatcherFilter)(nil)).Elem()
}

func (o MetricRulesetAggregationRuleMatcherFilterOutput) ToMetricRulesetAggregationRuleMatcherFilterOutput() MetricRulesetAggregationRuleMatcherFilterOutput {
	return o
}

func (o MetricRulesetAggregationRuleMatcherFilterOutput) ToMetricRulesetAggregationRuleMatcherFilterOutputWithContext(ctx context.Context) MetricRulesetAggregationRuleMatcherFilterOutput {
	return o
}

// When true, this filter will match all values not matching the property_values
func (o MetricRulesetAggregationRuleMatcherFilterOutput) Not() pulumi.BoolOutput {
	return o.ApplyT(func(v MetricRulesetAggregationRuleMatcherFilter) bool { return v.Not }).(pulumi.BoolOutput)
}

// Name of the dimension
func (o MetricRulesetAggregationRuleMatcherFilterOutput) Property() pulumi.StringOutput {
	return o.ApplyT(func(v MetricRulesetAggregationRuleMatcherFilter) string { return v.Property }).(pulumi.StringOutput)
}

// Value of the dimension
func (o MetricRulesetAggregationRuleMatcherFilterOutput) PropertyValues() pulumi.StringArrayOutput {
	return o.ApplyT(func(v MetricRulesetAggregationRuleMatcherFilter) []string { return v.PropertyValues }).(pulumi.StringArrayOutput)
}

type MetricRulesetAggregationRuleMatcherFilterArrayOutput struct{ *pulumi.OutputState }

func (MetricRulesetAggregationRuleMatcherFilterArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]MetricRulesetAggregationRuleMatcherFilter)(nil)).Elem()
}

func (o MetricRulesetAggregationRuleMatcherFilterArrayOutput) ToMetricRulesetAggregationRuleMatcherFilterArrayOutput() MetricRulesetAggregationRuleMatcherFilterArrayOutput {
	return o
}

func (o MetricRulesetAggregationRuleMatcherFilterArrayOutput) ToMetricRulesetAggregationRuleMatcherFilterArrayOutputWithContext(ctx context.Context) MetricRulesetAggregationRuleMatcherFilterArrayOutput {
	return o
}

func (o MetricRulesetAggregationRuleMatcherFilterArrayOutput) Index(i pulumi.IntInput) MetricRulesetAggregationRuleMatcherFilterOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) MetricRulesetAggregationRuleMatcherFilter {
		return vs[0].([]MetricRulesetAggregationRuleMatcherFilter)[vs[1].(int)]
	}).(MetricRulesetAggregationRuleMatcherFilterOutput)
}

type MetricRulesetExceptionRule struct {
	// Information about an exception rule
	Description *string `pulumi:"description"`
	// When false, this rule will not route matched data to real-time
	Enabled bool `pulumi:"enabled"`
	// Matcher object
	Matchers []MetricRulesetExceptionRuleMatcher `pulumi:"matchers"`
	// name of the exception rule
	Name *string `pulumi:"name"`
	// Properties of a restoration job
	Restorations []MetricRulesetExceptionRuleRestoration `pulumi:"restorations"`
}

// MetricRulesetExceptionRuleInput is an input type that accepts MetricRulesetExceptionRuleArgs and MetricRulesetExceptionRuleOutput values.
// You can construct a concrete instance of `MetricRulesetExceptionRuleInput` via:
//
//	MetricRulesetExceptionRuleArgs{...}
type MetricRulesetExceptionRuleInput interface {
	pulumi.Input

	ToMetricRulesetExceptionRuleOutput() MetricRulesetExceptionRuleOutput
	ToMetricRulesetExceptionRuleOutputWithContext(context.Context) MetricRulesetExceptionRuleOutput
}

type MetricRulesetExceptionRuleArgs struct {
	// Information about an exception rule
	Description pulumi.StringPtrInput `pulumi:"description"`
	// When false, this rule will not route matched data to real-time
	Enabled pulumi.BoolInput `pulumi:"enabled"`
	// Matcher object
	Matchers MetricRulesetExceptionRuleMatcherArrayInput `pulumi:"matchers"`
	// name of the exception rule
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Properties of a restoration job
	Restorations MetricRulesetExceptionRuleRestorationArrayInput `pulumi:"restorations"`
}

func (MetricRulesetExceptionRuleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MetricRulesetExceptionRule)(nil)).Elem()
}

func (i MetricRulesetExceptionRuleArgs) ToMetricRulesetExceptionRuleOutput() MetricRulesetExceptionRuleOutput {
	return i.ToMetricRulesetExceptionRuleOutputWithContext(context.Background())
}

func (i MetricRulesetExceptionRuleArgs) ToMetricRulesetExceptionRuleOutputWithContext(ctx context.Context) MetricRulesetExceptionRuleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MetricRulesetExceptionRuleOutput)
}

// MetricRulesetExceptionRuleArrayInput is an input type that accepts MetricRulesetExceptionRuleArray and MetricRulesetExceptionRuleArrayOutput values.
// You can construct a concrete instance of `MetricRulesetExceptionRuleArrayInput` via:
//
//	MetricRulesetExceptionRuleArray{ MetricRulesetExceptionRuleArgs{...} }
type MetricRulesetExceptionRuleArrayInput interface {
	pulumi.Input

	ToMetricRulesetExceptionRuleArrayOutput() MetricRulesetExceptionRuleArrayOutput
	ToMetricRulesetExceptionRuleArrayOutputWithContext(context.Context) MetricRulesetExceptionRuleArrayOutput
}

type MetricRulesetExceptionRuleArray []MetricRulesetExceptionRuleInput

func (MetricRulesetExceptionRuleArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]MetricRulesetExceptionRule)(nil)).Elem()
}

func (i MetricRulesetExceptionRuleArray) ToMetricRulesetExceptionRuleArrayOutput() MetricRulesetExceptionRuleArrayOutput {
	return i.ToMetricRulesetExceptionRuleArrayOutputWithContext(context.Background())
}

func (i MetricRulesetExceptionRuleArray) ToMetricRulesetExceptionRuleArrayOutputWithContext(ctx context.Context) MetricRulesetExceptionRuleArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MetricRulesetExceptionRuleArrayOutput)
}

type MetricRulesetExceptionRuleOutput struct{ *pulumi.OutputState }

func (MetricRulesetExceptionRuleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MetricRulesetExceptionRule)(nil)).Elem()
}

func (o MetricRulesetExceptionRuleOutput) ToMetricRulesetExceptionRuleOutput() MetricRulesetExceptionRuleOutput {
	return o
}

func (o MetricRulesetExceptionRuleOutput) ToMetricRulesetExceptionRuleOutputWithContext(ctx context.Context) MetricRulesetExceptionRuleOutput {
	return o
}

// Information about an exception rule
func (o MetricRulesetExceptionRuleOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MetricRulesetExceptionRule) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// When false, this rule will not route matched data to real-time
func (o MetricRulesetExceptionRuleOutput) Enabled() pulumi.BoolOutput {
	return o.ApplyT(func(v MetricRulesetExceptionRule) bool { return v.Enabled }).(pulumi.BoolOutput)
}

// Matcher object
func (o MetricRulesetExceptionRuleOutput) Matchers() MetricRulesetExceptionRuleMatcherArrayOutput {
	return o.ApplyT(func(v MetricRulesetExceptionRule) []MetricRulesetExceptionRuleMatcher { return v.Matchers }).(MetricRulesetExceptionRuleMatcherArrayOutput)
}

// name of the exception rule
func (o MetricRulesetExceptionRuleOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MetricRulesetExceptionRule) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Properties of a restoration job
func (o MetricRulesetExceptionRuleOutput) Restorations() MetricRulesetExceptionRuleRestorationArrayOutput {
	return o.ApplyT(func(v MetricRulesetExceptionRule) []MetricRulesetExceptionRuleRestoration { return v.Restorations }).(MetricRulesetExceptionRuleRestorationArrayOutput)
}

type MetricRulesetExceptionRuleArrayOutput struct{ *pulumi.OutputState }

func (MetricRulesetExceptionRuleArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]MetricRulesetExceptionRule)(nil)).Elem()
}

func (o MetricRulesetExceptionRuleArrayOutput) ToMetricRulesetExceptionRuleArrayOutput() MetricRulesetExceptionRuleArrayOutput {
	return o
}

func (o MetricRulesetExceptionRuleArrayOutput) ToMetricRulesetExceptionRuleArrayOutputWithContext(ctx context.Context) MetricRulesetExceptionRuleArrayOutput {
	return o
}

func (o MetricRulesetExceptionRuleArrayOutput) Index(i pulumi.IntInput) MetricRulesetExceptionRuleOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) MetricRulesetExceptionRule {
		return vs[0].([]MetricRulesetExceptionRule)[vs[1].(int)]
	}).(MetricRulesetExceptionRuleOutput)
}

type MetricRulesetExceptionRuleMatcher struct {
	// List of filters to filter the set of input MTSs
	Filters []MetricRulesetExceptionRuleMatcherFilter `pulumi:"filters"`
	// Type of matcher. Must always be "dimension"
	Type string `pulumi:"type"`
}

// MetricRulesetExceptionRuleMatcherInput is an input type that accepts MetricRulesetExceptionRuleMatcherArgs and MetricRulesetExceptionRuleMatcherOutput values.
// You can construct a concrete instance of `MetricRulesetExceptionRuleMatcherInput` via:
//
//	MetricRulesetExceptionRuleMatcherArgs{...}
type MetricRulesetExceptionRuleMatcherInput interface {
	pulumi.Input

	ToMetricRulesetExceptionRuleMatcherOutput() MetricRulesetExceptionRuleMatcherOutput
	ToMetricRulesetExceptionRuleMatcherOutputWithContext(context.Context) MetricRulesetExceptionRuleMatcherOutput
}

type MetricRulesetExceptionRuleMatcherArgs struct {
	// List of filters to filter the set of input MTSs
	Filters MetricRulesetExceptionRuleMatcherFilterArrayInput `pulumi:"filters"`
	// Type of matcher. Must always be "dimension"
	Type pulumi.StringInput `pulumi:"type"`
}

func (MetricRulesetExceptionRuleMatcherArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MetricRulesetExceptionRuleMatcher)(nil)).Elem()
}

func (i MetricRulesetExceptionRuleMatcherArgs) ToMetricRulesetExceptionRuleMatcherOutput() MetricRulesetExceptionRuleMatcherOutput {
	return i.ToMetricRulesetExceptionRuleMatcherOutputWithContext(context.Background())
}

func (i MetricRulesetExceptionRuleMatcherArgs) ToMetricRulesetExceptionRuleMatcherOutputWithContext(ctx context.Context) MetricRulesetExceptionRuleMatcherOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MetricRulesetExceptionRuleMatcherOutput)
}

// MetricRulesetExceptionRuleMatcherArrayInput is an input type that accepts MetricRulesetExceptionRuleMatcherArray and MetricRulesetExceptionRuleMatcherArrayOutput values.
// You can construct a concrete instance of `MetricRulesetExceptionRuleMatcherArrayInput` via:
//
//	MetricRulesetExceptionRuleMatcherArray{ MetricRulesetExceptionRuleMatcherArgs{...} }
type MetricRulesetExceptionRuleMatcherArrayInput interface {
	pulumi.Input

	ToMetricRulesetExceptionRuleMatcherArrayOutput() MetricRulesetExceptionRuleMatcherArrayOutput
	ToMetricRulesetExceptionRuleMatcherArrayOutputWithContext(context.Context) MetricRulesetExceptionRuleMatcherArrayOutput
}

type MetricRulesetExceptionRuleMatcherArray []MetricRulesetExceptionRuleMatcherInput

func (MetricRulesetExceptionRuleMatcherArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]MetricRulesetExceptionRuleMatcher)(nil)).Elem()
}

func (i MetricRulesetExceptionRuleMatcherArray) ToMetricRulesetExceptionRuleMatcherArrayOutput() MetricRulesetExceptionRuleMatcherArrayOutput {
	return i.ToMetricRulesetExceptionRuleMatcherArrayOutputWithContext(context.Background())
}

func (i MetricRulesetExceptionRuleMatcherArray) ToMetricRulesetExceptionRuleMatcherArrayOutputWithContext(ctx context.Context) MetricRulesetExceptionRuleMatcherArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MetricRulesetExceptionRuleMatcherArrayOutput)
}

type MetricRulesetExceptionRuleMatcherOutput struct{ *pulumi.OutputState }

func (MetricRulesetExceptionRuleMatcherOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MetricRulesetExceptionRuleMatcher)(nil)).Elem()
}

func (o MetricRulesetExceptionRuleMatcherOutput) ToMetricRulesetExceptionRuleMatcherOutput() MetricRulesetExceptionRuleMatcherOutput {
	return o
}

func (o MetricRulesetExceptionRuleMatcherOutput) ToMetricRulesetExceptionRuleMatcherOutputWithContext(ctx context.Context) MetricRulesetExceptionRuleMatcherOutput {
	return o
}

// List of filters to filter the set of input MTSs
func (o MetricRulesetExceptionRuleMatcherOutput) Filters() MetricRulesetExceptionRuleMatcherFilterArrayOutput {
	return o.ApplyT(func(v MetricRulesetExceptionRuleMatcher) []MetricRulesetExceptionRuleMatcherFilter { return v.Filters }).(MetricRulesetExceptionRuleMatcherFilterArrayOutput)
}

// Type of matcher. Must always be "dimension"
func (o MetricRulesetExceptionRuleMatcherOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v MetricRulesetExceptionRuleMatcher) string { return v.Type }).(pulumi.StringOutput)
}

type MetricRulesetExceptionRuleMatcherArrayOutput struct{ *pulumi.OutputState }

func (MetricRulesetExceptionRuleMatcherArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]MetricRulesetExceptionRuleMatcher)(nil)).Elem()
}

func (o MetricRulesetExceptionRuleMatcherArrayOutput) ToMetricRulesetExceptionRuleMatcherArrayOutput() MetricRulesetExceptionRuleMatcherArrayOutput {
	return o
}

func (o MetricRulesetExceptionRuleMatcherArrayOutput) ToMetricRulesetExceptionRuleMatcherArrayOutputWithContext(ctx context.Context) MetricRulesetExceptionRuleMatcherArrayOutput {
	return o
}

func (o MetricRulesetExceptionRuleMatcherArrayOutput) Index(i pulumi.IntInput) MetricRulesetExceptionRuleMatcherOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) MetricRulesetExceptionRuleMatcher {
		return vs[0].([]MetricRulesetExceptionRuleMatcher)[vs[1].(int)]
	}).(MetricRulesetExceptionRuleMatcherOutput)
}

type MetricRulesetExceptionRuleMatcherFilter struct {
	// When true, this filter will match all values not matching the property_values
	Not bool `pulumi:"not"`
	// Name of the dimension
	Property string `pulumi:"property"`
	// Value of the dimension
	PropertyValues []string `pulumi:"propertyValues"`
}

// MetricRulesetExceptionRuleMatcherFilterInput is an input type that accepts MetricRulesetExceptionRuleMatcherFilterArgs and MetricRulesetExceptionRuleMatcherFilterOutput values.
// You can construct a concrete instance of `MetricRulesetExceptionRuleMatcherFilterInput` via:
//
//	MetricRulesetExceptionRuleMatcherFilterArgs{...}
type MetricRulesetExceptionRuleMatcherFilterInput interface {
	pulumi.Input

	ToMetricRulesetExceptionRuleMatcherFilterOutput() MetricRulesetExceptionRuleMatcherFilterOutput
	ToMetricRulesetExceptionRuleMatcherFilterOutputWithContext(context.Context) MetricRulesetExceptionRuleMatcherFilterOutput
}

type MetricRulesetExceptionRuleMatcherFilterArgs struct {
	// When true, this filter will match all values not matching the property_values
	Not pulumi.BoolInput `pulumi:"not"`
	// Name of the dimension
	Property pulumi.StringInput `pulumi:"property"`
	// Value of the dimension
	PropertyValues pulumi.StringArrayInput `pulumi:"propertyValues"`
}

func (MetricRulesetExceptionRuleMatcherFilterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MetricRulesetExceptionRuleMatcherFilter)(nil)).Elem()
}

func (i MetricRulesetExceptionRuleMatcherFilterArgs) ToMetricRulesetExceptionRuleMatcherFilterOutput() MetricRulesetExceptionRuleMatcherFilterOutput {
	return i.ToMetricRulesetExceptionRuleMatcherFilterOutputWithContext(context.Background())
}

func (i MetricRulesetExceptionRuleMatcherFilterArgs) ToMetricRulesetExceptionRuleMatcherFilterOutputWithContext(ctx context.Context) MetricRulesetExceptionRuleMatcherFilterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MetricRulesetExceptionRuleMatcherFilterOutput)
}

// MetricRulesetExceptionRuleMatcherFilterArrayInput is an input type that accepts MetricRulesetExceptionRuleMatcherFilterArray and MetricRulesetExceptionRuleMatcherFilterArrayOutput values.
// You can construct a concrete instance of `MetricRulesetExceptionRuleMatcherFilterArrayInput` via:
//
//	MetricRulesetExceptionRuleMatcherFilterArray{ MetricRulesetExceptionRuleMatcherFilterArgs{...} }
type MetricRulesetExceptionRuleMatcherFilterArrayInput interface {
	pulumi.Input

	ToMetricRulesetExceptionRuleMatcherFilterArrayOutput() MetricRulesetExceptionRuleMatcherFilterArrayOutput
	ToMetricRulesetExceptionRuleMatcherFilterArrayOutputWithContext(context.Context) MetricRulesetExceptionRuleMatcherFilterArrayOutput
}

type MetricRulesetExceptionRuleMatcherFilterArray []MetricRulesetExceptionRuleMatcherFilterInput

func (MetricRulesetExceptionRuleMatcherFilterArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]MetricRulesetExceptionRuleMatcherFilter)(nil)).Elem()
}

func (i MetricRulesetExceptionRuleMatcherFilterArray) ToMetricRulesetExceptionRuleMatcherFilterArrayOutput() MetricRulesetExceptionRuleMatcherFilterArrayOutput {
	return i.ToMetricRulesetExceptionRuleMatcherFilterArrayOutputWithContext(context.Background())
}

func (i MetricRulesetExceptionRuleMatcherFilterArray) ToMetricRulesetExceptionRuleMatcherFilterArrayOutputWithContext(ctx context.Context) MetricRulesetExceptionRuleMatcherFilterArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MetricRulesetExceptionRuleMatcherFilterArrayOutput)
}

type MetricRulesetExceptionRuleMatcherFilterOutput struct{ *pulumi.OutputState }

func (MetricRulesetExceptionRuleMatcherFilterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MetricRulesetExceptionRuleMatcherFilter)(nil)).Elem()
}

func (o MetricRulesetExceptionRuleMatcherFilterOutput) ToMetricRulesetExceptionRuleMatcherFilterOutput() MetricRulesetExceptionRuleMatcherFilterOutput {
	return o
}

func (o MetricRulesetExceptionRuleMatcherFilterOutput) ToMetricRulesetExceptionRuleMatcherFilterOutputWithContext(ctx context.Context) MetricRulesetExceptionRuleMatcherFilterOutput {
	return o
}

// When true, this filter will match all values not matching the property_values
func (o MetricRulesetExceptionRuleMatcherFilterOutput) Not() pulumi.BoolOutput {
	return o.ApplyT(func(v MetricRulesetExceptionRuleMatcherFilter) bool { return v.Not }).(pulumi.BoolOutput)
}

// Name of the dimension
func (o MetricRulesetExceptionRuleMatcherFilterOutput) Property() pulumi.StringOutput {
	return o.ApplyT(func(v MetricRulesetExceptionRuleMatcherFilter) string { return v.Property }).(pulumi.StringOutput)
}

// Value of the dimension
func (o MetricRulesetExceptionRuleMatcherFilterOutput) PropertyValues() pulumi.StringArrayOutput {
	return o.ApplyT(func(v MetricRulesetExceptionRuleMatcherFilter) []string { return v.PropertyValues }).(pulumi.StringArrayOutput)
}

type MetricRulesetExceptionRuleMatcherFilterArrayOutput struct{ *pulumi.OutputState }

func (MetricRulesetExceptionRuleMatcherFilterArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]MetricRulesetExceptionRuleMatcherFilter)(nil)).Elem()
}

func (o MetricRulesetExceptionRuleMatcherFilterArrayOutput) ToMetricRulesetExceptionRuleMatcherFilterArrayOutput() MetricRulesetExceptionRuleMatcherFilterArrayOutput {
	return o
}

func (o MetricRulesetExceptionRuleMatcherFilterArrayOutput) ToMetricRulesetExceptionRuleMatcherFilterArrayOutputWithContext(ctx context.Context) MetricRulesetExceptionRuleMatcherFilterArrayOutput {
	return o
}

func (o MetricRulesetExceptionRuleMatcherFilterArrayOutput) Index(i pulumi.IntInput) MetricRulesetExceptionRuleMatcherFilterOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) MetricRulesetExceptionRuleMatcherFilter {
		return vs[0].([]MetricRulesetExceptionRuleMatcherFilter)[vs[1].(int)]
	}).(MetricRulesetExceptionRuleMatcherFilterOutput)
}

type MetricRulesetExceptionRuleRestoration struct {
	// ID of the restoration job.
	RestorationId *string `pulumi:"restorationId"`
	// Time from which the restoration job will restore archived data, in the form of *nix time in milliseconds
	StartTime string `pulumi:"startTime"`
	// Time to which the restoration job will restore archived data, in the form of *nix time in milliseconds
	StopTime *string `pulumi:"stopTime"`
}

// MetricRulesetExceptionRuleRestorationInput is an input type that accepts MetricRulesetExceptionRuleRestorationArgs and MetricRulesetExceptionRuleRestorationOutput values.
// You can construct a concrete instance of `MetricRulesetExceptionRuleRestorationInput` via:
//
//	MetricRulesetExceptionRuleRestorationArgs{...}
type MetricRulesetExceptionRuleRestorationInput interface {
	pulumi.Input

	ToMetricRulesetExceptionRuleRestorationOutput() MetricRulesetExceptionRuleRestorationOutput
	ToMetricRulesetExceptionRuleRestorationOutputWithContext(context.Context) MetricRulesetExceptionRuleRestorationOutput
}

type MetricRulesetExceptionRuleRestorationArgs struct {
	// ID of the restoration job.
	RestorationId pulumi.StringPtrInput `pulumi:"restorationId"`
	// Time from which the restoration job will restore archived data, in the form of *nix time in milliseconds
	StartTime pulumi.StringInput `pulumi:"startTime"`
	// Time to which the restoration job will restore archived data, in the form of *nix time in milliseconds
	StopTime pulumi.StringPtrInput `pulumi:"stopTime"`
}

func (MetricRulesetExceptionRuleRestorationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MetricRulesetExceptionRuleRestoration)(nil)).Elem()
}

func (i MetricRulesetExceptionRuleRestorationArgs) ToMetricRulesetExceptionRuleRestorationOutput() MetricRulesetExceptionRuleRestorationOutput {
	return i.ToMetricRulesetExceptionRuleRestorationOutputWithContext(context.Background())
}

func (i MetricRulesetExceptionRuleRestorationArgs) ToMetricRulesetExceptionRuleRestorationOutputWithContext(ctx context.Context) MetricRulesetExceptionRuleRestorationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MetricRulesetExceptionRuleRestorationOutput)
}

// MetricRulesetExceptionRuleRestorationArrayInput is an input type that accepts MetricRulesetExceptionRuleRestorationArray and MetricRulesetExceptionRuleRestorationArrayOutput values.
// You can construct a concrete instance of `MetricRulesetExceptionRuleRestorationArrayInput` via:
//
//	MetricRulesetExceptionRuleRestorationArray{ MetricRulesetExceptionRuleRestorationArgs{...} }
type MetricRulesetExceptionRuleRestorationArrayInput interface {
	pulumi.Input

	ToMetricRulesetExceptionRuleRestorationArrayOutput() MetricRulesetExceptionRuleRestorationArrayOutput
	ToMetricRulesetExceptionRuleRestorationArrayOutputWithContext(context.Context) MetricRulesetExceptionRuleRestorationArrayOutput
}

type MetricRulesetExceptionRuleRestorationArray []MetricRulesetExceptionRuleRestorationInput

func (MetricRulesetExceptionRuleRestorationArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]MetricRulesetExceptionRuleRestoration)(nil)).Elem()
}

func (i MetricRulesetExceptionRuleRestorationArray) ToMetricRulesetExceptionRuleRestorationArrayOutput() MetricRulesetExceptionRuleRestorationArrayOutput {
	return i.ToMetricRulesetExceptionRuleRestorationArrayOutputWithContext(context.Background())
}

func (i MetricRulesetExceptionRuleRestorationArray) ToMetricRulesetExceptionRuleRestorationArrayOutputWithContext(ctx context.Context) MetricRulesetExceptionRuleRestorationArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MetricRulesetExceptionRuleRestorationArrayOutput)
}

type MetricRulesetExceptionRuleRestorationOutput struct{ *pulumi.OutputState }

func (MetricRulesetExceptionRuleRestorationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MetricRulesetExceptionRuleRestoration)(nil)).Elem()
}

func (o MetricRulesetExceptionRuleRestorationOutput) ToMetricRulesetExceptionRuleRestorationOutput() MetricRulesetExceptionRuleRestorationOutput {
	return o
}

func (o MetricRulesetExceptionRuleRestorationOutput) ToMetricRulesetExceptionRuleRestorationOutputWithContext(ctx context.Context) MetricRulesetExceptionRuleRestorationOutput {
	return o
}

// ID of the restoration job.
func (o MetricRulesetExceptionRuleRestorationOutput) RestorationId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MetricRulesetExceptionRuleRestoration) *string { return v.RestorationId }).(pulumi.StringPtrOutput)
}

// Time from which the restoration job will restore archived data, in the form of *nix time in milliseconds
func (o MetricRulesetExceptionRuleRestorationOutput) StartTime() pulumi.StringOutput {
	return o.ApplyT(func(v MetricRulesetExceptionRuleRestoration) string { return v.StartTime }).(pulumi.StringOutput)
}

// Time to which the restoration job will restore archived data, in the form of *nix time in milliseconds
func (o MetricRulesetExceptionRuleRestorationOutput) StopTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MetricRulesetExceptionRuleRestoration) *string { return v.StopTime }).(pulumi.StringPtrOutput)
}

type MetricRulesetExceptionRuleRestorationArrayOutput struct{ *pulumi.OutputState }

func (MetricRulesetExceptionRuleRestorationArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]MetricRulesetExceptionRuleRestoration)(nil)).Elem()
}

func (o MetricRulesetExceptionRuleRestorationArrayOutput) ToMetricRulesetExceptionRuleRestorationArrayOutput() MetricRulesetExceptionRuleRestorationArrayOutput {
	return o
}

func (o MetricRulesetExceptionRuleRestorationArrayOutput) ToMetricRulesetExceptionRuleRestorationArrayOutputWithContext(ctx context.Context) MetricRulesetExceptionRuleRestorationArrayOutput {
	return o
}

func (o MetricRulesetExceptionRuleRestorationArrayOutput) Index(i pulumi.IntInput) MetricRulesetExceptionRuleRestorationOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) MetricRulesetExceptionRuleRestoration {
		return vs[0].([]MetricRulesetExceptionRuleRestoration)[vs[1].(int)]
	}).(MetricRulesetExceptionRuleRestorationOutput)
}

type MetricRulesetRoutingRule struct {
	// end destination of the input metric. Must be `RealTime`, `Archived`, or `Drop`
	Destination string `pulumi:"destination"`
}

// MetricRulesetRoutingRuleInput is an input type that accepts MetricRulesetRoutingRuleArgs and MetricRulesetRoutingRuleOutput values.
// You can construct a concrete instance of `MetricRulesetRoutingRuleInput` via:
//
//	MetricRulesetRoutingRuleArgs{...}
type MetricRulesetRoutingRuleInput interface {
	pulumi.Input

	ToMetricRulesetRoutingRuleOutput() MetricRulesetRoutingRuleOutput
	ToMetricRulesetRoutingRuleOutputWithContext(context.Context) MetricRulesetRoutingRuleOutput
}

type MetricRulesetRoutingRuleArgs struct {
	// end destination of the input metric. Must be `RealTime`, `Archived`, or `Drop`
	Destination pulumi.StringInput `pulumi:"destination"`
}

func (MetricRulesetRoutingRuleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MetricRulesetRoutingRule)(nil)).Elem()
}

func (i MetricRulesetRoutingRuleArgs) ToMetricRulesetRoutingRuleOutput() MetricRulesetRoutingRuleOutput {
	return i.ToMetricRulesetRoutingRuleOutputWithContext(context.Background())
}

func (i MetricRulesetRoutingRuleArgs) ToMetricRulesetRoutingRuleOutputWithContext(ctx context.Context) MetricRulesetRoutingRuleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MetricRulesetRoutingRuleOutput)
}

// MetricRulesetRoutingRuleArrayInput is an input type that accepts MetricRulesetRoutingRuleArray and MetricRulesetRoutingRuleArrayOutput values.
// You can construct a concrete instance of `MetricRulesetRoutingRuleArrayInput` via:
//
//	MetricRulesetRoutingRuleArray{ MetricRulesetRoutingRuleArgs{...} }
type MetricRulesetRoutingRuleArrayInput interface {
	pulumi.Input

	ToMetricRulesetRoutingRuleArrayOutput() MetricRulesetRoutingRuleArrayOutput
	ToMetricRulesetRoutingRuleArrayOutputWithContext(context.Context) MetricRulesetRoutingRuleArrayOutput
}

type MetricRulesetRoutingRuleArray []MetricRulesetRoutingRuleInput

func (MetricRulesetRoutingRuleArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]MetricRulesetRoutingRule)(nil)).Elem()
}

func (i MetricRulesetRoutingRuleArray) ToMetricRulesetRoutingRuleArrayOutput() MetricRulesetRoutingRuleArrayOutput {
	return i.ToMetricRulesetRoutingRuleArrayOutputWithContext(context.Background())
}

func (i MetricRulesetRoutingRuleArray) ToMetricRulesetRoutingRuleArrayOutputWithContext(ctx context.Context) MetricRulesetRoutingRuleArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MetricRulesetRoutingRuleArrayOutput)
}

type MetricRulesetRoutingRuleOutput struct{ *pulumi.OutputState }

func (MetricRulesetRoutingRuleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MetricRulesetRoutingRule)(nil)).Elem()
}

func (o MetricRulesetRoutingRuleOutput) ToMetricRulesetRoutingRuleOutput() MetricRulesetRoutingRuleOutput {
	return o
}

func (o MetricRulesetRoutingRuleOutput) ToMetricRulesetRoutingRuleOutputWithContext(ctx context.Context) MetricRulesetRoutingRuleOutput {
	return o
}

// end destination of the input metric. Must be `RealTime`, `Archived`, or `Drop`
func (o MetricRulesetRoutingRuleOutput) Destination() pulumi.StringOutput {
	return o.ApplyT(func(v MetricRulesetRoutingRule) string { return v.Destination }).(pulumi.StringOutput)
}

type MetricRulesetRoutingRuleArrayOutput struct{ *pulumi.OutputState }

func (MetricRulesetRoutingRuleArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]MetricRulesetRoutingRule)(nil)).Elem()
}

func (o MetricRulesetRoutingRuleArrayOutput) ToMetricRulesetRoutingRuleArrayOutput() MetricRulesetRoutingRuleArrayOutput {
	return o
}

func (o MetricRulesetRoutingRuleArrayOutput) ToMetricRulesetRoutingRuleArrayOutputWithContext(ctx context.Context) MetricRulesetRoutingRuleArrayOutput {
	return o
}

func (o MetricRulesetRoutingRuleArrayOutput) Index(i pulumi.IntInput) MetricRulesetRoutingRuleOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) MetricRulesetRoutingRule {
		return vs[0].([]MetricRulesetRoutingRule)[vs[1].(int)]
	}).(MetricRulesetRoutingRuleOutput)
}

type OrgTokenDpmLimits struct {
	// The datapoints per minute (dpm) limit for this token. If you exceed this limit, Splunk Observability Cloud sends out an alert.
	DpmLimit int `pulumi:"dpmLimit"`
	// DPM level at which Splunk Observability Cloud sends the notification for this token. If you don't specify a notification, Splunk Observability Cloud sends the generic notification.
	DpmNotificationThreshold *int `pulumi:"dpmNotificationThreshold"`
}

// OrgTokenDpmLimitsInput is an input type that accepts OrgTokenDpmLimitsArgs and OrgTokenDpmLimitsOutput values.
// You can construct a concrete instance of `OrgTokenDpmLimitsInput` via:
//
//	OrgTokenDpmLimitsArgs{...}
type OrgTokenDpmLimitsInput interface {
	pulumi.Input

	ToOrgTokenDpmLimitsOutput() OrgTokenDpmLimitsOutput
	ToOrgTokenDpmLimitsOutputWithContext(context.Context) OrgTokenDpmLimitsOutput
}

type OrgTokenDpmLimitsArgs struct {
	// The datapoints per minute (dpm) limit for this token. If you exceed this limit, Splunk Observability Cloud sends out an alert.
	DpmLimit pulumi.IntInput `pulumi:"dpmLimit"`
	// DPM level at which Splunk Observability Cloud sends the notification for this token. If you don't specify a notification, Splunk Observability Cloud sends the generic notification.
	DpmNotificationThreshold pulumi.IntPtrInput `pulumi:"dpmNotificationThreshold"`
}

func (OrgTokenDpmLimitsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*OrgTokenDpmLimits)(nil)).Elem()
}

func (i OrgTokenDpmLimitsArgs) ToOrgTokenDpmLimitsOutput() OrgTokenDpmLimitsOutput {
	return i.ToOrgTokenDpmLimitsOutputWithContext(context.Background())
}

func (i OrgTokenDpmLimitsArgs) ToOrgTokenDpmLimitsOutputWithContext(ctx context.Context) OrgTokenDpmLimitsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OrgTokenDpmLimitsOutput)
}

func (i OrgTokenDpmLimitsArgs) ToOrgTokenDpmLimitsPtrOutput() OrgTokenDpmLimitsPtrOutput {
	return i.ToOrgTokenDpmLimitsPtrOutputWithContext(context.Background())
}

func (i OrgTokenDpmLimitsArgs) ToOrgTokenDpmLimitsPtrOutputWithContext(ctx context.Context) OrgTokenDpmLimitsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OrgTokenDpmLimitsOutput).ToOrgTokenDpmLimitsPtrOutputWithContext(ctx)
}

// OrgTokenDpmLimitsPtrInput is an input type that accepts OrgTokenDpmLimitsArgs, OrgTokenDpmLimitsPtr and OrgTokenDpmLimitsPtrOutput values.
// You can construct a concrete instance of `OrgTokenDpmLimitsPtrInput` via:
//
//	        OrgTokenDpmLimitsArgs{...}
//
//	or:
//
//	        nil
type OrgTokenDpmLimitsPtrInput interface {
	pulumi.Input

	ToOrgTokenDpmLimitsPtrOutput() OrgTokenDpmLimitsPtrOutput
	ToOrgTokenDpmLimitsPtrOutputWithContext(context.Context) OrgTokenDpmLimitsPtrOutput
}

type orgTokenDpmLimitsPtrType OrgTokenDpmLimitsArgs

func OrgTokenDpmLimitsPtr(v *OrgTokenDpmLimitsArgs) OrgTokenDpmLimitsPtrInput {
	return (*orgTokenDpmLimitsPtrType)(v)
}

func (*orgTokenDpmLimitsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**OrgTokenDpmLimits)(nil)).Elem()
}

func (i *orgTokenDpmLimitsPtrType) ToOrgTokenDpmLimitsPtrOutput() OrgTokenDpmLimitsPtrOutput {
	return i.ToOrgTokenDpmLimitsPtrOutputWithContext(context.Background())
}

func (i *orgTokenDpmLimitsPtrType) ToOrgTokenDpmLimitsPtrOutputWithContext(ctx context.Context) OrgTokenDpmLimitsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OrgTokenDpmLimitsPtrOutput)
}

type OrgTokenDpmLimitsOutput struct{ *pulumi.OutputState }

func (OrgTokenDpmLimitsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*OrgTokenDpmLimits)(nil)).Elem()
}

func (o OrgTokenDpmLimitsOutput) ToOrgTokenDpmLimitsOutput() OrgTokenDpmLimitsOutput {
	return o
}

func (o OrgTokenDpmLimitsOutput) ToOrgTokenDpmLimitsOutputWithContext(ctx context.Context) OrgTokenDpmLimitsOutput {
	return o
}

func (o OrgTokenDpmLimitsOutput) ToOrgTokenDpmLimitsPtrOutput() OrgTokenDpmLimitsPtrOutput {
	return o.ToOrgTokenDpmLimitsPtrOutputWithContext(context.Background())
}

func (o OrgTokenDpmLimitsOutput) ToOrgTokenDpmLimitsPtrOutputWithContext(ctx context.Context) OrgTokenDpmLimitsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v OrgTokenDpmLimits) *OrgTokenDpmLimits {
		return &v
	}).(OrgTokenDpmLimitsPtrOutput)
}

// The datapoints per minute (dpm) limit for this token. If you exceed this limit, Splunk Observability Cloud sends out an alert.
func (o OrgTokenDpmLimitsOutput) DpmLimit() pulumi.IntOutput {
	return o.ApplyT(func(v OrgTokenDpmLimits) int { return v.DpmLimit }).(pulumi.IntOutput)
}

// DPM level at which Splunk Observability Cloud sends the notification for this token. If you don't specify a notification, Splunk Observability Cloud sends the generic notification.
func (o OrgTokenDpmLimitsOutput) DpmNotificationThreshold() pulumi.IntPtrOutput {
	return o.ApplyT(func(v OrgTokenDpmLimits) *int { return v.DpmNotificationThreshold }).(pulumi.IntPtrOutput)
}

type OrgTokenDpmLimitsPtrOutput struct{ *pulumi.OutputState }

func (OrgTokenDpmLimitsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**OrgTokenDpmLimits)(nil)).Elem()
}

func (o OrgTokenDpmLimitsPtrOutput) ToOrgTokenDpmLimitsPtrOutput() OrgTokenDpmLimitsPtrOutput {
	return o
}

func (o OrgTokenDpmLimitsPtrOutput) ToOrgTokenDpmLimitsPtrOutputWithContext(ctx context.Context) OrgTokenDpmLimitsPtrOutput {
	return o
}

func (o OrgTokenDpmLimitsPtrOutput) Elem() OrgTokenDpmLimitsOutput {
	return o.ApplyT(func(v *OrgTokenDpmLimits) OrgTokenDpmLimits {
		if v != nil {
			return *v
		}
		var ret OrgTokenDpmLimits
		return ret
	}).(OrgTokenDpmLimitsOutput)
}

// The datapoints per minute (dpm) limit for this token. If you exceed this limit, Splunk Observability Cloud sends out an alert.
func (o OrgTokenDpmLimitsPtrOutput) DpmLimit() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *OrgTokenDpmLimits) *int {
		if v == nil {
			return nil
		}
		return &v.DpmLimit
	}).(pulumi.IntPtrOutput)
}

// DPM level at which Splunk Observability Cloud sends the notification for this token. If you don't specify a notification, Splunk Observability Cloud sends the generic notification.
func (o OrgTokenDpmLimitsPtrOutput) DpmNotificationThreshold() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *OrgTokenDpmLimits) *int {
		if v == nil {
			return nil
		}
		return v.DpmNotificationThreshold
	}).(pulumi.IntPtrOutput)
}

type OrgTokenHostOrUsageLimits struct {
	// Max number of Docker containers that can use this token
	ContainerLimit *int `pulumi:"containerLimit"`
	// Notification threshold for Docker containers
	ContainerNotificationThreshold *int `pulumi:"containerNotificationThreshold"`
	// Max number of custom metrics that can be sent with this token
	CustomMetricsLimit *int `pulumi:"customMetricsLimit"`
	// Notification threshold for custom metrics
	CustomMetricsNotificationThreshold *int `pulumi:"customMetricsNotificationThreshold"`
	// Max number of hi-res metrics that can be sent with this toke
	HighResMetricsLimit *int `pulumi:"highResMetricsLimit"`
	// Notification threshold for hi-res metrics
	HighResMetricsNotificationThreshold *int `pulumi:"highResMetricsNotificationThreshold"`
	// Max number of hosts that can use this token
	HostLimit *int `pulumi:"hostLimit"`
	// Notification threshold for hosts
	HostNotificationThreshold *int `pulumi:"hostNotificationThreshold"`
}

// OrgTokenHostOrUsageLimitsInput is an input type that accepts OrgTokenHostOrUsageLimitsArgs and OrgTokenHostOrUsageLimitsOutput values.
// You can construct a concrete instance of `OrgTokenHostOrUsageLimitsInput` via:
//
//	OrgTokenHostOrUsageLimitsArgs{...}
type OrgTokenHostOrUsageLimitsInput interface {
	pulumi.Input

	ToOrgTokenHostOrUsageLimitsOutput() OrgTokenHostOrUsageLimitsOutput
	ToOrgTokenHostOrUsageLimitsOutputWithContext(context.Context) OrgTokenHostOrUsageLimitsOutput
}

type OrgTokenHostOrUsageLimitsArgs struct {
	// Max number of Docker containers that can use this token
	ContainerLimit pulumi.IntPtrInput `pulumi:"containerLimit"`
	// Notification threshold for Docker containers
	ContainerNotificationThreshold pulumi.IntPtrInput `pulumi:"containerNotificationThreshold"`
	// Max number of custom metrics that can be sent with this token
	CustomMetricsLimit pulumi.IntPtrInput `pulumi:"customMetricsLimit"`
	// Notification threshold for custom metrics
	CustomMetricsNotificationThreshold pulumi.IntPtrInput `pulumi:"customMetricsNotificationThreshold"`
	// Max number of hi-res metrics that can be sent with this toke
	HighResMetricsLimit pulumi.IntPtrInput `pulumi:"highResMetricsLimit"`
	// Notification threshold for hi-res metrics
	HighResMetricsNotificationThreshold pulumi.IntPtrInput `pulumi:"highResMetricsNotificationThreshold"`
	// Max number of hosts that can use this token
	HostLimit pulumi.IntPtrInput `pulumi:"hostLimit"`
	// Notification threshold for hosts
	HostNotificationThreshold pulumi.IntPtrInput `pulumi:"hostNotificationThreshold"`
}

func (OrgTokenHostOrUsageLimitsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*OrgTokenHostOrUsageLimits)(nil)).Elem()
}

func (i OrgTokenHostOrUsageLimitsArgs) ToOrgTokenHostOrUsageLimitsOutput() OrgTokenHostOrUsageLimitsOutput {
	return i.ToOrgTokenHostOrUsageLimitsOutputWithContext(context.Background())
}

func (i OrgTokenHostOrUsageLimitsArgs) ToOrgTokenHostOrUsageLimitsOutputWithContext(ctx context.Context) OrgTokenHostOrUsageLimitsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OrgTokenHostOrUsageLimitsOutput)
}

func (i OrgTokenHostOrUsageLimitsArgs) ToOrgTokenHostOrUsageLimitsPtrOutput() OrgTokenHostOrUsageLimitsPtrOutput {
	return i.ToOrgTokenHostOrUsageLimitsPtrOutputWithContext(context.Background())
}

func (i OrgTokenHostOrUsageLimitsArgs) ToOrgTokenHostOrUsageLimitsPtrOutputWithContext(ctx context.Context) OrgTokenHostOrUsageLimitsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OrgTokenHostOrUsageLimitsOutput).ToOrgTokenHostOrUsageLimitsPtrOutputWithContext(ctx)
}

// OrgTokenHostOrUsageLimitsPtrInput is an input type that accepts OrgTokenHostOrUsageLimitsArgs, OrgTokenHostOrUsageLimitsPtr and OrgTokenHostOrUsageLimitsPtrOutput values.
// You can construct a concrete instance of `OrgTokenHostOrUsageLimitsPtrInput` via:
//
//	        OrgTokenHostOrUsageLimitsArgs{...}
//
//	or:
//
//	        nil
type OrgTokenHostOrUsageLimitsPtrInput interface {
	pulumi.Input

	ToOrgTokenHostOrUsageLimitsPtrOutput() OrgTokenHostOrUsageLimitsPtrOutput
	ToOrgTokenHostOrUsageLimitsPtrOutputWithContext(context.Context) OrgTokenHostOrUsageLimitsPtrOutput
}

type orgTokenHostOrUsageLimitsPtrType OrgTokenHostOrUsageLimitsArgs

func OrgTokenHostOrUsageLimitsPtr(v *OrgTokenHostOrUsageLimitsArgs) OrgTokenHostOrUsageLimitsPtrInput {
	return (*orgTokenHostOrUsageLimitsPtrType)(v)
}

func (*orgTokenHostOrUsageLimitsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**OrgTokenHostOrUsageLimits)(nil)).Elem()
}

func (i *orgTokenHostOrUsageLimitsPtrType) ToOrgTokenHostOrUsageLimitsPtrOutput() OrgTokenHostOrUsageLimitsPtrOutput {
	return i.ToOrgTokenHostOrUsageLimitsPtrOutputWithContext(context.Background())
}

func (i *orgTokenHostOrUsageLimitsPtrType) ToOrgTokenHostOrUsageLimitsPtrOutputWithContext(ctx context.Context) OrgTokenHostOrUsageLimitsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OrgTokenHostOrUsageLimitsPtrOutput)
}

type OrgTokenHostOrUsageLimitsOutput struct{ *pulumi.OutputState }

func (OrgTokenHostOrUsageLimitsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*OrgTokenHostOrUsageLimits)(nil)).Elem()
}

func (o OrgTokenHostOrUsageLimitsOutput) ToOrgTokenHostOrUsageLimitsOutput() OrgTokenHostOrUsageLimitsOutput {
	return o
}

func (o OrgTokenHostOrUsageLimitsOutput) ToOrgTokenHostOrUsageLimitsOutputWithContext(ctx context.Context) OrgTokenHostOrUsageLimitsOutput {
	return o
}

func (o OrgTokenHostOrUsageLimitsOutput) ToOrgTokenHostOrUsageLimitsPtrOutput() OrgTokenHostOrUsageLimitsPtrOutput {
	return o.ToOrgTokenHostOrUsageLimitsPtrOutputWithContext(context.Background())
}

func (o OrgTokenHostOrUsageLimitsOutput) ToOrgTokenHostOrUsageLimitsPtrOutputWithContext(ctx context.Context) OrgTokenHostOrUsageLimitsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v OrgTokenHostOrUsageLimits) *OrgTokenHostOrUsageLimits {
		return &v
	}).(OrgTokenHostOrUsageLimitsPtrOutput)
}

// Max number of Docker containers that can use this token
func (o OrgTokenHostOrUsageLimitsOutput) ContainerLimit() pulumi.IntPtrOutput {
	return o.ApplyT(func(v OrgTokenHostOrUsageLimits) *int { return v.ContainerLimit }).(pulumi.IntPtrOutput)
}

// Notification threshold for Docker containers
func (o OrgTokenHostOrUsageLimitsOutput) ContainerNotificationThreshold() pulumi.IntPtrOutput {
	return o.ApplyT(func(v OrgTokenHostOrUsageLimits) *int { return v.ContainerNotificationThreshold }).(pulumi.IntPtrOutput)
}

// Max number of custom metrics that can be sent with this token
func (o OrgTokenHostOrUsageLimitsOutput) CustomMetricsLimit() pulumi.IntPtrOutput {
	return o.ApplyT(func(v OrgTokenHostOrUsageLimits) *int { return v.CustomMetricsLimit }).(pulumi.IntPtrOutput)
}

// Notification threshold for custom metrics
func (o OrgTokenHostOrUsageLimitsOutput) CustomMetricsNotificationThreshold() pulumi.IntPtrOutput {
	return o.ApplyT(func(v OrgTokenHostOrUsageLimits) *int { return v.CustomMetricsNotificationThreshold }).(pulumi.IntPtrOutput)
}

// Max number of hi-res metrics that can be sent with this toke
func (o OrgTokenHostOrUsageLimitsOutput) HighResMetricsLimit() pulumi.IntPtrOutput {
	return o.ApplyT(func(v OrgTokenHostOrUsageLimits) *int { return v.HighResMetricsLimit }).(pulumi.IntPtrOutput)
}

// Notification threshold for hi-res metrics
func (o OrgTokenHostOrUsageLimitsOutput) HighResMetricsNotificationThreshold() pulumi.IntPtrOutput {
	return o.ApplyT(func(v OrgTokenHostOrUsageLimits) *int { return v.HighResMetricsNotificationThreshold }).(pulumi.IntPtrOutput)
}

// Max number of hosts that can use this token
func (o OrgTokenHostOrUsageLimitsOutput) HostLimit() pulumi.IntPtrOutput {
	return o.ApplyT(func(v OrgTokenHostOrUsageLimits) *int { return v.HostLimit }).(pulumi.IntPtrOutput)
}

// Notification threshold for hosts
func (o OrgTokenHostOrUsageLimitsOutput) HostNotificationThreshold() pulumi.IntPtrOutput {
	return o.ApplyT(func(v OrgTokenHostOrUsageLimits) *int { return v.HostNotificationThreshold }).(pulumi.IntPtrOutput)
}

type OrgTokenHostOrUsageLimitsPtrOutput struct{ *pulumi.OutputState }

func (OrgTokenHostOrUsageLimitsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**OrgTokenHostOrUsageLimits)(nil)).Elem()
}

func (o OrgTokenHostOrUsageLimitsPtrOutput) ToOrgTokenHostOrUsageLimitsPtrOutput() OrgTokenHostOrUsageLimitsPtrOutput {
	return o
}

func (o OrgTokenHostOrUsageLimitsPtrOutput) ToOrgTokenHostOrUsageLimitsPtrOutputWithContext(ctx context.Context) OrgTokenHostOrUsageLimitsPtrOutput {
	return o
}

func (o OrgTokenHostOrUsageLimitsPtrOutput) Elem() OrgTokenHostOrUsageLimitsOutput {
	return o.ApplyT(func(v *OrgTokenHostOrUsageLimits) OrgTokenHostOrUsageLimits {
		if v != nil {
			return *v
		}
		var ret OrgTokenHostOrUsageLimits
		return ret
	}).(OrgTokenHostOrUsageLimitsOutput)
}

// Max number of Docker containers that can use this token
func (o OrgTokenHostOrUsageLimitsPtrOutput) ContainerLimit() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *OrgTokenHostOrUsageLimits) *int {
		if v == nil {
			return nil
		}
		return v.ContainerLimit
	}).(pulumi.IntPtrOutput)
}

// Notification threshold for Docker containers
func (o OrgTokenHostOrUsageLimitsPtrOutput) ContainerNotificationThreshold() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *OrgTokenHostOrUsageLimits) *int {
		if v == nil {
			return nil
		}
		return v.ContainerNotificationThreshold
	}).(pulumi.IntPtrOutput)
}

// Max number of custom metrics that can be sent with this token
func (o OrgTokenHostOrUsageLimitsPtrOutput) CustomMetricsLimit() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *OrgTokenHostOrUsageLimits) *int {
		if v == nil {
			return nil
		}
		return v.CustomMetricsLimit
	}).(pulumi.IntPtrOutput)
}

// Notification threshold for custom metrics
func (o OrgTokenHostOrUsageLimitsPtrOutput) CustomMetricsNotificationThreshold() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *OrgTokenHostOrUsageLimits) *int {
		if v == nil {
			return nil
		}
		return v.CustomMetricsNotificationThreshold
	}).(pulumi.IntPtrOutput)
}

// Max number of hi-res metrics that can be sent with this toke
func (o OrgTokenHostOrUsageLimitsPtrOutput) HighResMetricsLimit() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *OrgTokenHostOrUsageLimits) *int {
		if v == nil {
			return nil
		}
		return v.HighResMetricsLimit
	}).(pulumi.IntPtrOutput)
}

// Notification threshold for hi-res metrics
func (o OrgTokenHostOrUsageLimitsPtrOutput) HighResMetricsNotificationThreshold() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *OrgTokenHostOrUsageLimits) *int {
		if v == nil {
			return nil
		}
		return v.HighResMetricsNotificationThreshold
	}).(pulumi.IntPtrOutput)
}

// Max number of hosts that can use this token
func (o OrgTokenHostOrUsageLimitsPtrOutput) HostLimit() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *OrgTokenHostOrUsageLimits) *int {
		if v == nil {
			return nil
		}
		return v.HostLimit
	}).(pulumi.IntPtrOutput)
}

// Notification threshold for hosts
func (o OrgTokenHostOrUsageLimitsPtrOutput) HostNotificationThreshold() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *OrgTokenHostOrUsageLimits) *int {
		if v == nil {
			return nil
		}
		return v.HostNotificationThreshold
	}).(pulumi.IntPtrOutput)
}

type SingleValueChartColorScale struct {
	// The color to use. Must be one of gray, blue, light_blue, navy, dark_orange, orange, dark_yellow, magenta, cerise, pink, violet, purple, gray_blue, dark_green, green, aquamarine, red, yellow, vivid_yellow, light_green, or lime_green.
	Color string `pulumi:"color"`
	// Indicates the lower threshold non-inclusive value for this range.
	Gt *float64 `pulumi:"gt"`
	// Indicates the lower threshold inclusive value for this range.
	Gte *float64 `pulumi:"gte"`
	// Indicates the upper threshold non-inculsive value for this range.
	Lt *float64 `pulumi:"lt"`
	// Indicates the upper threshold inclusive value for this range.
	Lte *float64 `pulumi:"lte"`
}

// SingleValueChartColorScaleInput is an input type that accepts SingleValueChartColorScaleArgs and SingleValueChartColorScaleOutput values.
// You can construct a concrete instance of `SingleValueChartColorScaleInput` via:
//
//	SingleValueChartColorScaleArgs{...}
type SingleValueChartColorScaleInput interface {
	pulumi.Input

	ToSingleValueChartColorScaleOutput() SingleValueChartColorScaleOutput
	ToSingleValueChartColorScaleOutputWithContext(context.Context) SingleValueChartColorScaleOutput
}

type SingleValueChartColorScaleArgs struct {
	// The color to use. Must be one of gray, blue, light_blue, navy, dark_orange, orange, dark_yellow, magenta, cerise, pink, violet, purple, gray_blue, dark_green, green, aquamarine, red, yellow, vivid_yellow, light_green, or lime_green.
	Color pulumi.StringInput `pulumi:"color"`
	// Indicates the lower threshold non-inclusive value for this range.
	Gt pulumi.Float64PtrInput `pulumi:"gt"`
	// Indicates the lower threshold inclusive value for this range.
	Gte pulumi.Float64PtrInput `pulumi:"gte"`
	// Indicates the upper threshold non-inculsive value for this range.
	Lt pulumi.Float64PtrInput `pulumi:"lt"`
	// Indicates the upper threshold inclusive value for this range.
	Lte pulumi.Float64PtrInput `pulumi:"lte"`
}

func (SingleValueChartColorScaleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SingleValueChartColorScale)(nil)).Elem()
}

func (i SingleValueChartColorScaleArgs) ToSingleValueChartColorScaleOutput() SingleValueChartColorScaleOutput {
	return i.ToSingleValueChartColorScaleOutputWithContext(context.Background())
}

func (i SingleValueChartColorScaleArgs) ToSingleValueChartColorScaleOutputWithContext(ctx context.Context) SingleValueChartColorScaleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SingleValueChartColorScaleOutput)
}

// SingleValueChartColorScaleArrayInput is an input type that accepts SingleValueChartColorScaleArray and SingleValueChartColorScaleArrayOutput values.
// You can construct a concrete instance of `SingleValueChartColorScaleArrayInput` via:
//
//	SingleValueChartColorScaleArray{ SingleValueChartColorScaleArgs{...} }
type SingleValueChartColorScaleArrayInput interface {
	pulumi.Input

	ToSingleValueChartColorScaleArrayOutput() SingleValueChartColorScaleArrayOutput
	ToSingleValueChartColorScaleArrayOutputWithContext(context.Context) SingleValueChartColorScaleArrayOutput
}

type SingleValueChartColorScaleArray []SingleValueChartColorScaleInput

func (SingleValueChartColorScaleArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SingleValueChartColorScale)(nil)).Elem()
}

func (i SingleValueChartColorScaleArray) ToSingleValueChartColorScaleArrayOutput() SingleValueChartColorScaleArrayOutput {
	return i.ToSingleValueChartColorScaleArrayOutputWithContext(context.Background())
}

func (i SingleValueChartColorScaleArray) ToSingleValueChartColorScaleArrayOutputWithContext(ctx context.Context) SingleValueChartColorScaleArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SingleValueChartColorScaleArrayOutput)
}

type SingleValueChartColorScaleOutput struct{ *pulumi.OutputState }

func (SingleValueChartColorScaleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SingleValueChartColorScale)(nil)).Elem()
}

func (o SingleValueChartColorScaleOutput) ToSingleValueChartColorScaleOutput() SingleValueChartColorScaleOutput {
	return o
}

func (o SingleValueChartColorScaleOutput) ToSingleValueChartColorScaleOutputWithContext(ctx context.Context) SingleValueChartColorScaleOutput {
	return o
}

// The color to use. Must be one of gray, blue, light_blue, navy, dark_orange, orange, dark_yellow, magenta, cerise, pink, violet, purple, gray_blue, dark_green, green, aquamarine, red, yellow, vivid_yellow, light_green, or lime_green.
func (o SingleValueChartColorScaleOutput) Color() pulumi.StringOutput {
	return o.ApplyT(func(v SingleValueChartColorScale) string { return v.Color }).(pulumi.StringOutput)
}

// Indicates the lower threshold non-inclusive value for this range.
func (o SingleValueChartColorScaleOutput) Gt() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v SingleValueChartColorScale) *float64 { return v.Gt }).(pulumi.Float64PtrOutput)
}

// Indicates the lower threshold inclusive value for this range.
func (o SingleValueChartColorScaleOutput) Gte() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v SingleValueChartColorScale) *float64 { return v.Gte }).(pulumi.Float64PtrOutput)
}

// Indicates the upper threshold non-inculsive value for this range.
func (o SingleValueChartColorScaleOutput) Lt() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v SingleValueChartColorScale) *float64 { return v.Lt }).(pulumi.Float64PtrOutput)
}

// Indicates the upper threshold inclusive value for this range.
func (o SingleValueChartColorScaleOutput) Lte() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v SingleValueChartColorScale) *float64 { return v.Lte }).(pulumi.Float64PtrOutput)
}

type SingleValueChartColorScaleArrayOutput struct{ *pulumi.OutputState }

func (SingleValueChartColorScaleArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SingleValueChartColorScale)(nil)).Elem()
}

func (o SingleValueChartColorScaleArrayOutput) ToSingleValueChartColorScaleArrayOutput() SingleValueChartColorScaleArrayOutput {
	return o
}

func (o SingleValueChartColorScaleArrayOutput) ToSingleValueChartColorScaleArrayOutputWithContext(ctx context.Context) SingleValueChartColorScaleArrayOutput {
	return o
}

func (o SingleValueChartColorScaleArrayOutput) Index(i pulumi.IntInput) SingleValueChartColorScaleOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) SingleValueChartColorScale {
		return vs[0].([]SingleValueChartColorScale)[vs[1].(int)]
	}).(SingleValueChartColorScaleOutput)
}

type SingleValueChartVizOption struct {
	// The color to use. Must be one of gray, blue, light_blue, navy, dark_orange, orange, dark_yellow, magenta, cerise, pink, violet, purple, gray_blue, dark_green, green, aquamarine, red, yellow, vivid_yellow, light_green, or lime_green.
	Color *string `pulumi:"color"`
	// Specifies an alternate value for the Plot Name column of the Data Table associated with the chart.
	DisplayName *string `pulumi:"displayName"`
	// Label used in the publish statement that displays the plot (metric time series data) you want to customize.
	Label string `pulumi:"label"`
	// , `valueSuffix` - (Optional) Arbitrary prefix/suffix to display with the value of this plot.
	ValuePrefix *string `pulumi:"valuePrefix"`
	// An arbitrary suffix to display with the value of this plot
	ValueSuffix *string `pulumi:"valueSuffix"`
	// A unit to attach to this plot. Units support automatic scaling (eg thousands of bytes will be displayed as kilobytes). Values values are `Bit, Kilobit, Megabit, Gigabit, Terabit, Petabit, Exabit, Zettabit, Yottabit, Byte, Kibibyte, Mebibyte, Gibibyte (note: this was previously typoed as Gigibyte), Tebibyte, Pebibyte, Exbibyte, Zebibyte, Yobibyte, Nanosecond, Microsecond, Millisecond, Second, Minute, Hour, Day, Week`.
	ValueUnit *string `pulumi:"valueUnit"`
}

// SingleValueChartVizOptionInput is an input type that accepts SingleValueChartVizOptionArgs and SingleValueChartVizOptionOutput values.
// You can construct a concrete instance of `SingleValueChartVizOptionInput` via:
//
//	SingleValueChartVizOptionArgs{...}
type SingleValueChartVizOptionInput interface {
	pulumi.Input

	ToSingleValueChartVizOptionOutput() SingleValueChartVizOptionOutput
	ToSingleValueChartVizOptionOutputWithContext(context.Context) SingleValueChartVizOptionOutput
}

type SingleValueChartVizOptionArgs struct {
	// The color to use. Must be one of gray, blue, light_blue, navy, dark_orange, orange, dark_yellow, magenta, cerise, pink, violet, purple, gray_blue, dark_green, green, aquamarine, red, yellow, vivid_yellow, light_green, or lime_green.
	Color pulumi.StringPtrInput `pulumi:"color"`
	// Specifies an alternate value for the Plot Name column of the Data Table associated with the chart.
	DisplayName pulumi.StringPtrInput `pulumi:"displayName"`
	// Label used in the publish statement that displays the plot (metric time series data) you want to customize.
	Label pulumi.StringInput `pulumi:"label"`
	// , `valueSuffix` - (Optional) Arbitrary prefix/suffix to display with the value of this plot.
	ValuePrefix pulumi.StringPtrInput `pulumi:"valuePrefix"`
	// An arbitrary suffix to display with the value of this plot
	ValueSuffix pulumi.StringPtrInput `pulumi:"valueSuffix"`
	// A unit to attach to this plot. Units support automatic scaling (eg thousands of bytes will be displayed as kilobytes). Values values are `Bit, Kilobit, Megabit, Gigabit, Terabit, Petabit, Exabit, Zettabit, Yottabit, Byte, Kibibyte, Mebibyte, Gibibyte (note: this was previously typoed as Gigibyte), Tebibyte, Pebibyte, Exbibyte, Zebibyte, Yobibyte, Nanosecond, Microsecond, Millisecond, Second, Minute, Hour, Day, Week`.
	ValueUnit pulumi.StringPtrInput `pulumi:"valueUnit"`
}

func (SingleValueChartVizOptionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SingleValueChartVizOption)(nil)).Elem()
}

func (i SingleValueChartVizOptionArgs) ToSingleValueChartVizOptionOutput() SingleValueChartVizOptionOutput {
	return i.ToSingleValueChartVizOptionOutputWithContext(context.Background())
}

func (i SingleValueChartVizOptionArgs) ToSingleValueChartVizOptionOutputWithContext(ctx context.Context) SingleValueChartVizOptionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SingleValueChartVizOptionOutput)
}

// SingleValueChartVizOptionArrayInput is an input type that accepts SingleValueChartVizOptionArray and SingleValueChartVizOptionArrayOutput values.
// You can construct a concrete instance of `SingleValueChartVizOptionArrayInput` via:
//
//	SingleValueChartVizOptionArray{ SingleValueChartVizOptionArgs{...} }
type SingleValueChartVizOptionArrayInput interface {
	pulumi.Input

	ToSingleValueChartVizOptionArrayOutput() SingleValueChartVizOptionArrayOutput
	ToSingleValueChartVizOptionArrayOutputWithContext(context.Context) SingleValueChartVizOptionArrayOutput
}

type SingleValueChartVizOptionArray []SingleValueChartVizOptionInput

func (SingleValueChartVizOptionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SingleValueChartVizOption)(nil)).Elem()
}

func (i SingleValueChartVizOptionArray) ToSingleValueChartVizOptionArrayOutput() SingleValueChartVizOptionArrayOutput {
	return i.ToSingleValueChartVizOptionArrayOutputWithContext(context.Background())
}

func (i SingleValueChartVizOptionArray) ToSingleValueChartVizOptionArrayOutputWithContext(ctx context.Context) SingleValueChartVizOptionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SingleValueChartVizOptionArrayOutput)
}

type SingleValueChartVizOptionOutput struct{ *pulumi.OutputState }

func (SingleValueChartVizOptionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SingleValueChartVizOption)(nil)).Elem()
}

func (o SingleValueChartVizOptionOutput) ToSingleValueChartVizOptionOutput() SingleValueChartVizOptionOutput {
	return o
}

func (o SingleValueChartVizOptionOutput) ToSingleValueChartVizOptionOutputWithContext(ctx context.Context) SingleValueChartVizOptionOutput {
	return o
}

// The color to use. Must be one of gray, blue, light_blue, navy, dark_orange, orange, dark_yellow, magenta, cerise, pink, violet, purple, gray_blue, dark_green, green, aquamarine, red, yellow, vivid_yellow, light_green, or lime_green.
func (o SingleValueChartVizOptionOutput) Color() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SingleValueChartVizOption) *string { return v.Color }).(pulumi.StringPtrOutput)
}

// Specifies an alternate value for the Plot Name column of the Data Table associated with the chart.
func (o SingleValueChartVizOptionOutput) DisplayName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SingleValueChartVizOption) *string { return v.DisplayName }).(pulumi.StringPtrOutput)
}

// Label used in the publish statement that displays the plot (metric time series data) you want to customize.
func (o SingleValueChartVizOptionOutput) Label() pulumi.StringOutput {
	return o.ApplyT(func(v SingleValueChartVizOption) string { return v.Label }).(pulumi.StringOutput)
}

// , `valueSuffix` - (Optional) Arbitrary prefix/suffix to display with the value of this plot.
func (o SingleValueChartVizOptionOutput) ValuePrefix() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SingleValueChartVizOption) *string { return v.ValuePrefix }).(pulumi.StringPtrOutput)
}

// An arbitrary suffix to display with the value of this plot
func (o SingleValueChartVizOptionOutput) ValueSuffix() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SingleValueChartVizOption) *string { return v.ValueSuffix }).(pulumi.StringPtrOutput)
}

// A unit to attach to this plot. Units support automatic scaling (eg thousands of bytes will be displayed as kilobytes). Values values are `Bit, Kilobit, Megabit, Gigabit, Terabit, Petabit, Exabit, Zettabit, Yottabit, Byte, Kibibyte, Mebibyte, Gibibyte (note: this was previously typoed as Gigibyte), Tebibyte, Pebibyte, Exbibyte, Zebibyte, Yobibyte, Nanosecond, Microsecond, Millisecond, Second, Minute, Hour, Day, Week`.
func (o SingleValueChartVizOptionOutput) ValueUnit() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SingleValueChartVizOption) *string { return v.ValueUnit }).(pulumi.StringPtrOutput)
}

type SingleValueChartVizOptionArrayOutput struct{ *pulumi.OutputState }

func (SingleValueChartVizOptionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SingleValueChartVizOption)(nil)).Elem()
}

func (o SingleValueChartVizOptionArrayOutput) ToSingleValueChartVizOptionArrayOutput() SingleValueChartVizOptionArrayOutput {
	return o
}

func (o SingleValueChartVizOptionArrayOutput) ToSingleValueChartVizOptionArrayOutputWithContext(ctx context.Context) SingleValueChartVizOptionArrayOutput {
	return o
}

func (o SingleValueChartVizOptionArrayOutput) Index(i pulumi.IntInput) SingleValueChartVizOptionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) SingleValueChartVizOption {
		return vs[0].([]SingleValueChartVizOption)[vs[1].(int)]
	}).(SingleValueChartVizOptionOutput)
}

type SloInputType struct {
	// Label used in `"programText"` that refers to the data block which contains the stream of successful events
	GoodEventsLabel *string `pulumi:"goodEventsLabel"`
	// SignalFlow program and arguments text strings that define the streams used as successful event count and total event count
	ProgramText string `pulumi:"programText"`
	// Label used in `"programText"` that refers to the data block which contains the stream of total events
	TotalEventsLabel *string `pulumi:"totalEventsLabel"`
}

// SloInputTypeInput is an input type that accepts SloInputTypeArgs and SloInputTypeOutput values.
// You can construct a concrete instance of `SloInputTypeInput` via:
//
//	SloInputTypeArgs{...}
type SloInputTypeInput interface {
	pulumi.Input

	ToSloInputTypeOutput() SloInputTypeOutput
	ToSloInputTypeOutputWithContext(context.Context) SloInputTypeOutput
}

type SloInputTypeArgs struct {
	// Label used in `"programText"` that refers to the data block which contains the stream of successful events
	GoodEventsLabel pulumi.StringPtrInput `pulumi:"goodEventsLabel"`
	// SignalFlow program and arguments text strings that define the streams used as successful event count and total event count
	ProgramText pulumi.StringInput `pulumi:"programText"`
	// Label used in `"programText"` that refers to the data block which contains the stream of total events
	TotalEventsLabel pulumi.StringPtrInput `pulumi:"totalEventsLabel"`
}

func (SloInputTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SloInputType)(nil)).Elem()
}

func (i SloInputTypeArgs) ToSloInputTypeOutput() SloInputTypeOutput {
	return i.ToSloInputTypeOutputWithContext(context.Background())
}

func (i SloInputTypeArgs) ToSloInputTypeOutputWithContext(ctx context.Context) SloInputTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SloInputTypeOutput)
}

func (i SloInputTypeArgs) ToSloInputTypePtrOutput() SloInputTypePtrOutput {
	return i.ToSloInputTypePtrOutputWithContext(context.Background())
}

func (i SloInputTypeArgs) ToSloInputTypePtrOutputWithContext(ctx context.Context) SloInputTypePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SloInputTypeOutput).ToSloInputTypePtrOutputWithContext(ctx)
}

// SloInputTypePtrInput is an input type that accepts SloInputTypeArgs, SloInputTypePtr and SloInputTypePtrOutput values.
// You can construct a concrete instance of `SloInputTypePtrInput` via:
//
//	        SloInputTypeArgs{...}
//
//	or:
//
//	        nil
type SloInputTypePtrInput interface {
	pulumi.Input

	ToSloInputTypePtrOutput() SloInputTypePtrOutput
	ToSloInputTypePtrOutputWithContext(context.Context) SloInputTypePtrOutput
}

type sloInputTypePtrType SloInputTypeArgs

func SloInputTypePtr(v *SloInputTypeArgs) SloInputTypePtrInput {
	return (*sloInputTypePtrType)(v)
}

func (*sloInputTypePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SloInputType)(nil)).Elem()
}

func (i *sloInputTypePtrType) ToSloInputTypePtrOutput() SloInputTypePtrOutput {
	return i.ToSloInputTypePtrOutputWithContext(context.Background())
}

func (i *sloInputTypePtrType) ToSloInputTypePtrOutputWithContext(ctx context.Context) SloInputTypePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SloInputTypePtrOutput)
}

type SloInputTypeOutput struct{ *pulumi.OutputState }

func (SloInputTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SloInputType)(nil)).Elem()
}

func (o SloInputTypeOutput) ToSloInputTypeOutput() SloInputTypeOutput {
	return o
}

func (o SloInputTypeOutput) ToSloInputTypeOutputWithContext(ctx context.Context) SloInputTypeOutput {
	return o
}

func (o SloInputTypeOutput) ToSloInputTypePtrOutput() SloInputTypePtrOutput {
	return o.ToSloInputTypePtrOutputWithContext(context.Background())
}

func (o SloInputTypeOutput) ToSloInputTypePtrOutputWithContext(ctx context.Context) SloInputTypePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v SloInputType) *SloInputType {
		return &v
	}).(SloInputTypePtrOutput)
}

// Label used in `"programText"` that refers to the data block which contains the stream of successful events
func (o SloInputTypeOutput) GoodEventsLabel() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SloInputType) *string { return v.GoodEventsLabel }).(pulumi.StringPtrOutput)
}

// SignalFlow program and arguments text strings that define the streams used as successful event count and total event count
func (o SloInputTypeOutput) ProgramText() pulumi.StringOutput {
	return o.ApplyT(func(v SloInputType) string { return v.ProgramText }).(pulumi.StringOutput)
}

// Label used in `"programText"` that refers to the data block which contains the stream of total events
func (o SloInputTypeOutput) TotalEventsLabel() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SloInputType) *string { return v.TotalEventsLabel }).(pulumi.StringPtrOutput)
}

type SloInputTypePtrOutput struct{ *pulumi.OutputState }

func (SloInputTypePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SloInputType)(nil)).Elem()
}

func (o SloInputTypePtrOutput) ToSloInputTypePtrOutput() SloInputTypePtrOutput {
	return o
}

func (o SloInputTypePtrOutput) ToSloInputTypePtrOutputWithContext(ctx context.Context) SloInputTypePtrOutput {
	return o
}

func (o SloInputTypePtrOutput) Elem() SloInputTypeOutput {
	return o.ApplyT(func(v *SloInputType) SloInputType {
		if v != nil {
			return *v
		}
		var ret SloInputType
		return ret
	}).(SloInputTypeOutput)
}

// Label used in `"programText"` that refers to the data block which contains the stream of successful events
func (o SloInputTypePtrOutput) GoodEventsLabel() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SloInputType) *string {
		if v == nil {
			return nil
		}
		return v.GoodEventsLabel
	}).(pulumi.StringPtrOutput)
}

// SignalFlow program and arguments text strings that define the streams used as successful event count and total event count
func (o SloInputTypePtrOutput) ProgramText() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SloInputType) *string {
		if v == nil {
			return nil
		}
		return &v.ProgramText
	}).(pulumi.StringPtrOutput)
}

// Label used in `"programText"` that refers to the data block which contains the stream of total events
func (o SloInputTypePtrOutput) TotalEventsLabel() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SloInputType) *string {
		if v == nil {
			return nil
		}
		return v.TotalEventsLabel
	}).(pulumi.StringPtrOutput)
}

type SloTarget struct {
	// List of alert rules you want to set for this SLO target. An SLO alert rule of type BREACH is always required.
	AlertRules []SloTargetAlertRule `pulumi:"alertRules"`
	// Compliance period of this SLO. This value must be within the range of 1d (1 days) to 30d (30 days), inclusive.
	CompliancePeriod *string `pulumi:"compliancePeriod"`
	// It can be used to change the cycle start time. For example, you can specify sunday as the start of the week (instead of the default monday)
	CycleStart *string `pulumi:"cycleStart"`
	// The cycle type of the calendar window, e.g. week, month.
	CycleType *string `pulumi:"cycleType"`
	// Target value in the form of a percentage
	Slo float64 `pulumi:"slo"`
	// SLO target type can be the following type: `"RollingWindow"`, `"CalendarWindow"`
	Type string `pulumi:"type"`
}

// SloTargetInput is an input type that accepts SloTargetArgs and SloTargetOutput values.
// You can construct a concrete instance of `SloTargetInput` via:
//
//	SloTargetArgs{...}
type SloTargetInput interface {
	pulumi.Input

	ToSloTargetOutput() SloTargetOutput
	ToSloTargetOutputWithContext(context.Context) SloTargetOutput
}

type SloTargetArgs struct {
	// List of alert rules you want to set for this SLO target. An SLO alert rule of type BREACH is always required.
	AlertRules SloTargetAlertRuleArrayInput `pulumi:"alertRules"`
	// Compliance period of this SLO. This value must be within the range of 1d (1 days) to 30d (30 days), inclusive.
	CompliancePeriod pulumi.StringPtrInput `pulumi:"compliancePeriod"`
	// It can be used to change the cycle start time. For example, you can specify sunday as the start of the week (instead of the default monday)
	CycleStart pulumi.StringPtrInput `pulumi:"cycleStart"`
	// The cycle type of the calendar window, e.g. week, month.
	CycleType pulumi.StringPtrInput `pulumi:"cycleType"`
	// Target value in the form of a percentage
	Slo pulumi.Float64Input `pulumi:"slo"`
	// SLO target type can be the following type: `"RollingWindow"`, `"CalendarWindow"`
	Type pulumi.StringInput `pulumi:"type"`
}

func (SloTargetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SloTarget)(nil)).Elem()
}

func (i SloTargetArgs) ToSloTargetOutput() SloTargetOutput {
	return i.ToSloTargetOutputWithContext(context.Background())
}

func (i SloTargetArgs) ToSloTargetOutputWithContext(ctx context.Context) SloTargetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SloTargetOutput)
}

func (i SloTargetArgs) ToSloTargetPtrOutput() SloTargetPtrOutput {
	return i.ToSloTargetPtrOutputWithContext(context.Background())
}

func (i SloTargetArgs) ToSloTargetPtrOutputWithContext(ctx context.Context) SloTargetPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SloTargetOutput).ToSloTargetPtrOutputWithContext(ctx)
}

// SloTargetPtrInput is an input type that accepts SloTargetArgs, SloTargetPtr and SloTargetPtrOutput values.
// You can construct a concrete instance of `SloTargetPtrInput` via:
//
//	        SloTargetArgs{...}
//
//	or:
//
//	        nil
type SloTargetPtrInput interface {
	pulumi.Input

	ToSloTargetPtrOutput() SloTargetPtrOutput
	ToSloTargetPtrOutputWithContext(context.Context) SloTargetPtrOutput
}

type sloTargetPtrType SloTargetArgs

func SloTargetPtr(v *SloTargetArgs) SloTargetPtrInput {
	return (*sloTargetPtrType)(v)
}

func (*sloTargetPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SloTarget)(nil)).Elem()
}

func (i *sloTargetPtrType) ToSloTargetPtrOutput() SloTargetPtrOutput {
	return i.ToSloTargetPtrOutputWithContext(context.Background())
}

func (i *sloTargetPtrType) ToSloTargetPtrOutputWithContext(ctx context.Context) SloTargetPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SloTargetPtrOutput)
}

type SloTargetOutput struct{ *pulumi.OutputState }

func (SloTargetOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SloTarget)(nil)).Elem()
}

func (o SloTargetOutput) ToSloTargetOutput() SloTargetOutput {
	return o
}

func (o SloTargetOutput) ToSloTargetOutputWithContext(ctx context.Context) SloTargetOutput {
	return o
}

func (o SloTargetOutput) ToSloTargetPtrOutput() SloTargetPtrOutput {
	return o.ToSloTargetPtrOutputWithContext(context.Background())
}

func (o SloTargetOutput) ToSloTargetPtrOutputWithContext(ctx context.Context) SloTargetPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v SloTarget) *SloTarget {
		return &v
	}).(SloTargetPtrOutput)
}

// List of alert rules you want to set for this SLO target. An SLO alert rule of type BREACH is always required.
func (o SloTargetOutput) AlertRules() SloTargetAlertRuleArrayOutput {
	return o.ApplyT(func(v SloTarget) []SloTargetAlertRule { return v.AlertRules }).(SloTargetAlertRuleArrayOutput)
}

// Compliance period of this SLO. This value must be within the range of 1d (1 days) to 30d (30 days), inclusive.
func (o SloTargetOutput) CompliancePeriod() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SloTarget) *string { return v.CompliancePeriod }).(pulumi.StringPtrOutput)
}

// It can be used to change the cycle start time. For example, you can specify sunday as the start of the week (instead of the default monday)
func (o SloTargetOutput) CycleStart() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SloTarget) *string { return v.CycleStart }).(pulumi.StringPtrOutput)
}

// The cycle type of the calendar window, e.g. week, month.
func (o SloTargetOutput) CycleType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SloTarget) *string { return v.CycleType }).(pulumi.StringPtrOutput)
}

// Target value in the form of a percentage
func (o SloTargetOutput) Slo() pulumi.Float64Output {
	return o.ApplyT(func(v SloTarget) float64 { return v.Slo }).(pulumi.Float64Output)
}

// SLO target type can be the following type: `"RollingWindow"`, `"CalendarWindow"`
func (o SloTargetOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v SloTarget) string { return v.Type }).(pulumi.StringOutput)
}

type SloTargetPtrOutput struct{ *pulumi.OutputState }

func (SloTargetPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SloTarget)(nil)).Elem()
}

func (o SloTargetPtrOutput) ToSloTargetPtrOutput() SloTargetPtrOutput {
	return o
}

func (o SloTargetPtrOutput) ToSloTargetPtrOutputWithContext(ctx context.Context) SloTargetPtrOutput {
	return o
}

func (o SloTargetPtrOutput) Elem() SloTargetOutput {
	return o.ApplyT(func(v *SloTarget) SloTarget {
		if v != nil {
			return *v
		}
		var ret SloTarget
		return ret
	}).(SloTargetOutput)
}

// List of alert rules you want to set for this SLO target. An SLO alert rule of type BREACH is always required.
func (o SloTargetPtrOutput) AlertRules() SloTargetAlertRuleArrayOutput {
	return o.ApplyT(func(v *SloTarget) []SloTargetAlertRule {
		if v == nil {
			return nil
		}
		return v.AlertRules
	}).(SloTargetAlertRuleArrayOutput)
}

// Compliance period of this SLO. This value must be within the range of 1d (1 days) to 30d (30 days), inclusive.
func (o SloTargetPtrOutput) CompliancePeriod() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SloTarget) *string {
		if v == nil {
			return nil
		}
		return v.CompliancePeriod
	}).(pulumi.StringPtrOutput)
}

// It can be used to change the cycle start time. For example, you can specify sunday as the start of the week (instead of the default monday)
func (o SloTargetPtrOutput) CycleStart() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SloTarget) *string {
		if v == nil {
			return nil
		}
		return v.CycleStart
	}).(pulumi.StringPtrOutput)
}

// The cycle type of the calendar window, e.g. week, month.
func (o SloTargetPtrOutput) CycleType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SloTarget) *string {
		if v == nil {
			return nil
		}
		return v.CycleType
	}).(pulumi.StringPtrOutput)
}

// Target value in the form of a percentage
func (o SloTargetPtrOutput) Slo() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *SloTarget) *float64 {
		if v == nil {
			return nil
		}
		return &v.Slo
	}).(pulumi.Float64PtrOutput)
}

// SLO target type can be the following type: `"RollingWindow"`, `"CalendarWindow"`
func (o SloTargetPtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SloTarget) *string {
		if v == nil {
			return nil
		}
		return &v.Type
	}).(pulumi.StringPtrOutput)
}

type SloTargetAlertRule struct {
	// Set of rules used for alerting.
	Rules []SloTargetAlertRuleRule `pulumi:"rules"`
	// SLO alert rule can be one of the following types: BREACH, ERROR_BUDGET_LEFT, BURN_RATE. Within an SLO object, you can only specify one SLO alertRule per type. For example, you can't specify two alertRule of type BREACH. See [SLO alerts](https://docs.splunk.com/observability/en/alerts-detectors-notifications/slo/burn-rate-alerts.html) for more info.
	Type string `pulumi:"type"`
}

// SloTargetAlertRuleInput is an input type that accepts SloTargetAlertRuleArgs and SloTargetAlertRuleOutput values.
// You can construct a concrete instance of `SloTargetAlertRuleInput` via:
//
//	SloTargetAlertRuleArgs{...}
type SloTargetAlertRuleInput interface {
	pulumi.Input

	ToSloTargetAlertRuleOutput() SloTargetAlertRuleOutput
	ToSloTargetAlertRuleOutputWithContext(context.Context) SloTargetAlertRuleOutput
}

type SloTargetAlertRuleArgs struct {
	// Set of rules used for alerting.
	Rules SloTargetAlertRuleRuleArrayInput `pulumi:"rules"`
	// SLO alert rule can be one of the following types: BREACH, ERROR_BUDGET_LEFT, BURN_RATE. Within an SLO object, you can only specify one SLO alertRule per type. For example, you can't specify two alertRule of type BREACH. See [SLO alerts](https://docs.splunk.com/observability/en/alerts-detectors-notifications/slo/burn-rate-alerts.html) for more info.
	Type pulumi.StringInput `pulumi:"type"`
}

func (SloTargetAlertRuleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SloTargetAlertRule)(nil)).Elem()
}

func (i SloTargetAlertRuleArgs) ToSloTargetAlertRuleOutput() SloTargetAlertRuleOutput {
	return i.ToSloTargetAlertRuleOutputWithContext(context.Background())
}

func (i SloTargetAlertRuleArgs) ToSloTargetAlertRuleOutputWithContext(ctx context.Context) SloTargetAlertRuleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SloTargetAlertRuleOutput)
}

// SloTargetAlertRuleArrayInput is an input type that accepts SloTargetAlertRuleArray and SloTargetAlertRuleArrayOutput values.
// You can construct a concrete instance of `SloTargetAlertRuleArrayInput` via:
//
//	SloTargetAlertRuleArray{ SloTargetAlertRuleArgs{...} }
type SloTargetAlertRuleArrayInput interface {
	pulumi.Input

	ToSloTargetAlertRuleArrayOutput() SloTargetAlertRuleArrayOutput
	ToSloTargetAlertRuleArrayOutputWithContext(context.Context) SloTargetAlertRuleArrayOutput
}

type SloTargetAlertRuleArray []SloTargetAlertRuleInput

func (SloTargetAlertRuleArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SloTargetAlertRule)(nil)).Elem()
}

func (i SloTargetAlertRuleArray) ToSloTargetAlertRuleArrayOutput() SloTargetAlertRuleArrayOutput {
	return i.ToSloTargetAlertRuleArrayOutputWithContext(context.Background())
}

func (i SloTargetAlertRuleArray) ToSloTargetAlertRuleArrayOutputWithContext(ctx context.Context) SloTargetAlertRuleArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SloTargetAlertRuleArrayOutput)
}

type SloTargetAlertRuleOutput struct{ *pulumi.OutputState }

func (SloTargetAlertRuleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SloTargetAlertRule)(nil)).Elem()
}

func (o SloTargetAlertRuleOutput) ToSloTargetAlertRuleOutput() SloTargetAlertRuleOutput {
	return o
}

func (o SloTargetAlertRuleOutput) ToSloTargetAlertRuleOutputWithContext(ctx context.Context) SloTargetAlertRuleOutput {
	return o
}

// Set of rules used for alerting.
func (o SloTargetAlertRuleOutput) Rules() SloTargetAlertRuleRuleArrayOutput {
	return o.ApplyT(func(v SloTargetAlertRule) []SloTargetAlertRuleRule { return v.Rules }).(SloTargetAlertRuleRuleArrayOutput)
}

// SLO alert rule can be one of the following types: BREACH, ERROR_BUDGET_LEFT, BURN_RATE. Within an SLO object, you can only specify one SLO alertRule per type. For example, you can't specify two alertRule of type BREACH. See [SLO alerts](https://docs.splunk.com/observability/en/alerts-detectors-notifications/slo/burn-rate-alerts.html) for more info.
func (o SloTargetAlertRuleOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v SloTargetAlertRule) string { return v.Type }).(pulumi.StringOutput)
}

type SloTargetAlertRuleArrayOutput struct{ *pulumi.OutputState }

func (SloTargetAlertRuleArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SloTargetAlertRule)(nil)).Elem()
}

func (o SloTargetAlertRuleArrayOutput) ToSloTargetAlertRuleArrayOutput() SloTargetAlertRuleArrayOutput {
	return o
}

func (o SloTargetAlertRuleArrayOutput) ToSloTargetAlertRuleArrayOutputWithContext(ctx context.Context) SloTargetAlertRuleArrayOutput {
	return o
}

func (o SloTargetAlertRuleArrayOutput) Index(i pulumi.IntInput) SloTargetAlertRuleOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) SloTargetAlertRule {
		return vs[0].([]SloTargetAlertRule)[vs[1].(int)]
	}).(SloTargetAlertRuleOutput)
}

type SloTargetAlertRuleRule struct {
	// Description for the rule. Displays as the alert condition in the Alert Rules tab of the detector editor in the web UI.
	Description *string `pulumi:"description"`
	// When true, notifications and events will not be generated for the detect label. `false` by default.
	Disabled *bool `pulumi:"disabled"`
	// List of strings specifying where notifications will be sent when an incident occurs. See [Create SLO](https://dev.splunk.com/observability/reference/api/slo/latest#endpoint-create-new-slo) for more info.
	Notifications []string `pulumi:"notifications"`
	// Custom notification message body when an alert is triggered. See [Alert message](https://docs.splunk.com/observability/en/alerts-detectors-notifications/create-detectors-for-alerts.html#alert-messages) for more info.
	ParameterizedBody *string `pulumi:"parameterizedBody"`
	// Custom notification message subject when an alert is triggered. See [Alert message](https://docs.splunk.com/observability/en/alerts-detectors-notifications/create-detectors-for-alerts.html#alert-messages) for more info.
	ParameterizedSubject *string `pulumi:"parameterizedSubject"`
	// Parameters for the SLO alert rule. Each SLO alert rule type accepts different parameters. If not specified, default parameters are used.
	Parameters *SloTargetAlertRuleRuleParameters `pulumi:"parameters"`
	// Reminder notification in a detector rule lets you send multiple notifications for active alerts over a defined period of time.
	ReminderNotification *SloTargetAlertRuleRuleReminderNotification `pulumi:"reminderNotification"`
	// URL of page to consult when an alert is triggered. This can be used with custom notification messages.
	RunbookUrl *string `pulumi:"runbookUrl"`
	// The severity of the rule, must be one of: `"Critical"`, `"Major"`, `"Minor"`, `"Warning"`, `"Info"`.
	Severity string `pulumi:"severity"`
	// Plain text suggested first course of action, such as a command line to execute. This can be used with custom notification messages.
	Tip *string `pulumi:"tip"`
}

// SloTargetAlertRuleRuleInput is an input type that accepts SloTargetAlertRuleRuleArgs and SloTargetAlertRuleRuleOutput values.
// You can construct a concrete instance of `SloTargetAlertRuleRuleInput` via:
//
//	SloTargetAlertRuleRuleArgs{...}
type SloTargetAlertRuleRuleInput interface {
	pulumi.Input

	ToSloTargetAlertRuleRuleOutput() SloTargetAlertRuleRuleOutput
	ToSloTargetAlertRuleRuleOutputWithContext(context.Context) SloTargetAlertRuleRuleOutput
}

type SloTargetAlertRuleRuleArgs struct {
	// Description for the rule. Displays as the alert condition in the Alert Rules tab of the detector editor in the web UI.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// When true, notifications and events will not be generated for the detect label. `false` by default.
	Disabled pulumi.BoolPtrInput `pulumi:"disabled"`
	// List of strings specifying where notifications will be sent when an incident occurs. See [Create SLO](https://dev.splunk.com/observability/reference/api/slo/latest#endpoint-create-new-slo) for more info.
	Notifications pulumi.StringArrayInput `pulumi:"notifications"`
	// Custom notification message body when an alert is triggered. See [Alert message](https://docs.splunk.com/observability/en/alerts-detectors-notifications/create-detectors-for-alerts.html#alert-messages) for more info.
	ParameterizedBody pulumi.StringPtrInput `pulumi:"parameterizedBody"`
	// Custom notification message subject when an alert is triggered. See [Alert message](https://docs.splunk.com/observability/en/alerts-detectors-notifications/create-detectors-for-alerts.html#alert-messages) for more info.
	ParameterizedSubject pulumi.StringPtrInput `pulumi:"parameterizedSubject"`
	// Parameters for the SLO alert rule. Each SLO alert rule type accepts different parameters. If not specified, default parameters are used.
	Parameters SloTargetAlertRuleRuleParametersPtrInput `pulumi:"parameters"`
	// Reminder notification in a detector rule lets you send multiple notifications for active alerts over a defined period of time.
	ReminderNotification SloTargetAlertRuleRuleReminderNotificationPtrInput `pulumi:"reminderNotification"`
	// URL of page to consult when an alert is triggered. This can be used with custom notification messages.
	RunbookUrl pulumi.StringPtrInput `pulumi:"runbookUrl"`
	// The severity of the rule, must be one of: `"Critical"`, `"Major"`, `"Minor"`, `"Warning"`, `"Info"`.
	Severity pulumi.StringInput `pulumi:"severity"`
	// Plain text suggested first course of action, such as a command line to execute. This can be used with custom notification messages.
	Tip pulumi.StringPtrInput `pulumi:"tip"`
}

func (SloTargetAlertRuleRuleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SloTargetAlertRuleRule)(nil)).Elem()
}

func (i SloTargetAlertRuleRuleArgs) ToSloTargetAlertRuleRuleOutput() SloTargetAlertRuleRuleOutput {
	return i.ToSloTargetAlertRuleRuleOutputWithContext(context.Background())
}

func (i SloTargetAlertRuleRuleArgs) ToSloTargetAlertRuleRuleOutputWithContext(ctx context.Context) SloTargetAlertRuleRuleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SloTargetAlertRuleRuleOutput)
}

// SloTargetAlertRuleRuleArrayInput is an input type that accepts SloTargetAlertRuleRuleArray and SloTargetAlertRuleRuleArrayOutput values.
// You can construct a concrete instance of `SloTargetAlertRuleRuleArrayInput` via:
//
//	SloTargetAlertRuleRuleArray{ SloTargetAlertRuleRuleArgs{...} }
type SloTargetAlertRuleRuleArrayInput interface {
	pulumi.Input

	ToSloTargetAlertRuleRuleArrayOutput() SloTargetAlertRuleRuleArrayOutput
	ToSloTargetAlertRuleRuleArrayOutputWithContext(context.Context) SloTargetAlertRuleRuleArrayOutput
}

type SloTargetAlertRuleRuleArray []SloTargetAlertRuleRuleInput

func (SloTargetAlertRuleRuleArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SloTargetAlertRuleRule)(nil)).Elem()
}

func (i SloTargetAlertRuleRuleArray) ToSloTargetAlertRuleRuleArrayOutput() SloTargetAlertRuleRuleArrayOutput {
	return i.ToSloTargetAlertRuleRuleArrayOutputWithContext(context.Background())
}

func (i SloTargetAlertRuleRuleArray) ToSloTargetAlertRuleRuleArrayOutputWithContext(ctx context.Context) SloTargetAlertRuleRuleArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SloTargetAlertRuleRuleArrayOutput)
}

type SloTargetAlertRuleRuleOutput struct{ *pulumi.OutputState }

func (SloTargetAlertRuleRuleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SloTargetAlertRuleRule)(nil)).Elem()
}

func (o SloTargetAlertRuleRuleOutput) ToSloTargetAlertRuleRuleOutput() SloTargetAlertRuleRuleOutput {
	return o
}

func (o SloTargetAlertRuleRuleOutput) ToSloTargetAlertRuleRuleOutputWithContext(ctx context.Context) SloTargetAlertRuleRuleOutput {
	return o
}

// Description for the rule. Displays as the alert condition in the Alert Rules tab of the detector editor in the web UI.
func (o SloTargetAlertRuleRuleOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SloTargetAlertRuleRule) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// When true, notifications and events will not be generated for the detect label. `false` by default.
func (o SloTargetAlertRuleRuleOutput) Disabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v SloTargetAlertRuleRule) *bool { return v.Disabled }).(pulumi.BoolPtrOutput)
}

// List of strings specifying where notifications will be sent when an incident occurs. See [Create SLO](https://dev.splunk.com/observability/reference/api/slo/latest#endpoint-create-new-slo) for more info.
func (o SloTargetAlertRuleRuleOutput) Notifications() pulumi.StringArrayOutput {
	return o.ApplyT(func(v SloTargetAlertRuleRule) []string { return v.Notifications }).(pulumi.StringArrayOutput)
}

// Custom notification message body when an alert is triggered. See [Alert message](https://docs.splunk.com/observability/en/alerts-detectors-notifications/create-detectors-for-alerts.html#alert-messages) for more info.
func (o SloTargetAlertRuleRuleOutput) ParameterizedBody() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SloTargetAlertRuleRule) *string { return v.ParameterizedBody }).(pulumi.StringPtrOutput)
}

// Custom notification message subject when an alert is triggered. See [Alert message](https://docs.splunk.com/observability/en/alerts-detectors-notifications/create-detectors-for-alerts.html#alert-messages) for more info.
func (o SloTargetAlertRuleRuleOutput) ParameterizedSubject() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SloTargetAlertRuleRule) *string { return v.ParameterizedSubject }).(pulumi.StringPtrOutput)
}

// Parameters for the SLO alert rule. Each SLO alert rule type accepts different parameters. If not specified, default parameters are used.
func (o SloTargetAlertRuleRuleOutput) Parameters() SloTargetAlertRuleRuleParametersPtrOutput {
	return o.ApplyT(func(v SloTargetAlertRuleRule) *SloTargetAlertRuleRuleParameters { return v.Parameters }).(SloTargetAlertRuleRuleParametersPtrOutput)
}

// Reminder notification in a detector rule lets you send multiple notifications for active alerts over a defined period of time.
func (o SloTargetAlertRuleRuleOutput) ReminderNotification() SloTargetAlertRuleRuleReminderNotificationPtrOutput {
	return o.ApplyT(func(v SloTargetAlertRuleRule) *SloTargetAlertRuleRuleReminderNotification {
		return v.ReminderNotification
	}).(SloTargetAlertRuleRuleReminderNotificationPtrOutput)
}

// URL of page to consult when an alert is triggered. This can be used with custom notification messages.
func (o SloTargetAlertRuleRuleOutput) RunbookUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SloTargetAlertRuleRule) *string { return v.RunbookUrl }).(pulumi.StringPtrOutput)
}

// The severity of the rule, must be one of: `"Critical"`, `"Major"`, `"Minor"`, `"Warning"`, `"Info"`.
func (o SloTargetAlertRuleRuleOutput) Severity() pulumi.StringOutput {
	return o.ApplyT(func(v SloTargetAlertRuleRule) string { return v.Severity }).(pulumi.StringOutput)
}

// Plain text suggested first course of action, such as a command line to execute. This can be used with custom notification messages.
func (o SloTargetAlertRuleRuleOutput) Tip() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SloTargetAlertRuleRule) *string { return v.Tip }).(pulumi.StringPtrOutput)
}

type SloTargetAlertRuleRuleArrayOutput struct{ *pulumi.OutputState }

func (SloTargetAlertRuleRuleArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SloTargetAlertRuleRule)(nil)).Elem()
}

func (o SloTargetAlertRuleRuleArrayOutput) ToSloTargetAlertRuleRuleArrayOutput() SloTargetAlertRuleRuleArrayOutput {
	return o
}

func (o SloTargetAlertRuleRuleArrayOutput) ToSloTargetAlertRuleRuleArrayOutputWithContext(ctx context.Context) SloTargetAlertRuleRuleArrayOutput {
	return o
}

func (o SloTargetAlertRuleRuleArrayOutput) Index(i pulumi.IntInput) SloTargetAlertRuleRuleOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) SloTargetAlertRuleRule {
		return vs[0].([]SloTargetAlertRuleRule)[vs[1].(int)]
	}).(SloTargetAlertRuleRuleOutput)
}

type SloTargetAlertRuleRuleParameters struct {
	// Burn rate threshold 1 used in burn rate alert calculation. This value must be between 0 and 100/(100-SLO target). Note: `"BURN_RATE"` alert rules use the `"burnRateThreshold1"` parameter. See [SLO alerts](https://docs.splunk.com/observability/en/alerts-detectors-notifications/slo/burn-rate-alerts.html) for more info.
	BurnRateThreshold1 *float64 `pulumi:"burnRateThreshold1"`
	// Burn rate threshold 2 used in burn rate alert calculation. This value must be between 0 and 100/(100-SLO target). Note: `"BURN_RATE"` alert rules use the `"burnRateThreshold2"` parameter. See [SLO alerts](https://docs.splunk.com/observability/en/alerts-detectors-notifications/slo/burn-rate-alerts.html) for more info.
	BurnRateThreshold2 *float64 `pulumi:"burnRateThreshold2"`
	// Duration that indicates how long the alert condition is met before the alert is triggered. The value must be positive and smaller than the compliance period of the SLO target. Note: `"BREACH"` and `"ERROR_BUDGET_LEFT"` alert rules use the fireLasting parameter. Default: `"5m"`
	FireLasting *string `pulumi:"fireLasting"`
	// Long window 1 used in burn rate alert calculation. This value must be longer than `"shortWindow1"` and shorter than 90 days. Note: `"BURN_RATE"` alert rules use the `"longWindow1"` parameter. See [SLO alerts](https://docs.splunk.com/observability/en/alerts-detectors-notifications/slo/burn-rate-alerts.html) for more info.
	LongWindow1 *string `pulumi:"longWindow1"`
	// Long window 2 used in burn rate alert calculation. This value must be longer than `"shortWindow2"` and shorter than 90 days. Note: `"BURN_RATE"` alert rules use the `"longWindow2"` parameter. See [SLO alerts](https://docs.splunk.com/observability/en/alerts-detectors-notifications/slo/burn-rate-alerts.html) for more info.
	LongWindow2 *string `pulumi:"longWindow2"`
	// Error budget must be equal to or smaller than this percentage for the alert to be triggered. Note: `"ERROR_BUDGET_LEFT"` alert rules use the `"percentErrorBudgetLeft"` parameter. Default: `100`
	PercentErrorBudgetLeft *float64 `pulumi:"percentErrorBudgetLeft"`
	// Percentage of the `"fireLasting"` duration that the alert condition is met before the alert is triggered. Note: `"BREACH"` and `"ERROR_BUDGET_LEFT"` alert rules use the `"percentOfLasting"` parameter. Default: `100`
	PercentOfLasting *float64 `pulumi:"percentOfLasting"`
	// Short window 1 used in burn rate alert calculation. This value must be longer than 1/30 of `"longWindow1"`. Note: `"BURN_RATE"` alert rules use the `"shortWindow1"` parameter. See [SLO alerts](https://docs.splunk.com/observability/en/alerts-detectors-notifications/slo/burn-rate-alerts.html) for more info.
	ShortWindow1 *string `pulumi:"shortWindow1"`
	// Short window 2 used in burn rate alert calculation. This value must be longer than 1/30 of `"longWindow2"`. Note: `"BURN_RATE"` alert rules use the `"shortWindow2"` parameter. See [SLO alerts](https://docs.splunk.com/observability/en/alerts-detectors-notifications/slo/burn-rate-alerts.html) for more info.
	ShortWindow2 *string `pulumi:"shortWindow2"`
}

// SloTargetAlertRuleRuleParametersInput is an input type that accepts SloTargetAlertRuleRuleParametersArgs and SloTargetAlertRuleRuleParametersOutput values.
// You can construct a concrete instance of `SloTargetAlertRuleRuleParametersInput` via:
//
//	SloTargetAlertRuleRuleParametersArgs{...}
type SloTargetAlertRuleRuleParametersInput interface {
	pulumi.Input

	ToSloTargetAlertRuleRuleParametersOutput() SloTargetAlertRuleRuleParametersOutput
	ToSloTargetAlertRuleRuleParametersOutputWithContext(context.Context) SloTargetAlertRuleRuleParametersOutput
}

type SloTargetAlertRuleRuleParametersArgs struct {
	// Burn rate threshold 1 used in burn rate alert calculation. This value must be between 0 and 100/(100-SLO target). Note: `"BURN_RATE"` alert rules use the `"burnRateThreshold1"` parameter. See [SLO alerts](https://docs.splunk.com/observability/en/alerts-detectors-notifications/slo/burn-rate-alerts.html) for more info.
	BurnRateThreshold1 pulumi.Float64PtrInput `pulumi:"burnRateThreshold1"`
	// Burn rate threshold 2 used in burn rate alert calculation. This value must be between 0 and 100/(100-SLO target). Note: `"BURN_RATE"` alert rules use the `"burnRateThreshold2"` parameter. See [SLO alerts](https://docs.splunk.com/observability/en/alerts-detectors-notifications/slo/burn-rate-alerts.html) for more info.
	BurnRateThreshold2 pulumi.Float64PtrInput `pulumi:"burnRateThreshold2"`
	// Duration that indicates how long the alert condition is met before the alert is triggered. The value must be positive and smaller than the compliance period of the SLO target. Note: `"BREACH"` and `"ERROR_BUDGET_LEFT"` alert rules use the fireLasting parameter. Default: `"5m"`
	FireLasting pulumi.StringPtrInput `pulumi:"fireLasting"`
	// Long window 1 used in burn rate alert calculation. This value must be longer than `"shortWindow1"` and shorter than 90 days. Note: `"BURN_RATE"` alert rules use the `"longWindow1"` parameter. See [SLO alerts](https://docs.splunk.com/observability/en/alerts-detectors-notifications/slo/burn-rate-alerts.html) for more info.
	LongWindow1 pulumi.StringPtrInput `pulumi:"longWindow1"`
	// Long window 2 used in burn rate alert calculation. This value must be longer than `"shortWindow2"` and shorter than 90 days. Note: `"BURN_RATE"` alert rules use the `"longWindow2"` parameter. See [SLO alerts](https://docs.splunk.com/observability/en/alerts-detectors-notifications/slo/burn-rate-alerts.html) for more info.
	LongWindow2 pulumi.StringPtrInput `pulumi:"longWindow2"`
	// Error budget must be equal to or smaller than this percentage for the alert to be triggered. Note: `"ERROR_BUDGET_LEFT"` alert rules use the `"percentErrorBudgetLeft"` parameter. Default: `100`
	PercentErrorBudgetLeft pulumi.Float64PtrInput `pulumi:"percentErrorBudgetLeft"`
	// Percentage of the `"fireLasting"` duration that the alert condition is met before the alert is triggered. Note: `"BREACH"` and `"ERROR_BUDGET_LEFT"` alert rules use the `"percentOfLasting"` parameter. Default: `100`
	PercentOfLasting pulumi.Float64PtrInput `pulumi:"percentOfLasting"`
	// Short window 1 used in burn rate alert calculation. This value must be longer than 1/30 of `"longWindow1"`. Note: `"BURN_RATE"` alert rules use the `"shortWindow1"` parameter. See [SLO alerts](https://docs.splunk.com/observability/en/alerts-detectors-notifications/slo/burn-rate-alerts.html) for more info.
	ShortWindow1 pulumi.StringPtrInput `pulumi:"shortWindow1"`
	// Short window 2 used in burn rate alert calculation. This value must be longer than 1/30 of `"longWindow2"`. Note: `"BURN_RATE"` alert rules use the `"shortWindow2"` parameter. See [SLO alerts](https://docs.splunk.com/observability/en/alerts-detectors-notifications/slo/burn-rate-alerts.html) for more info.
	ShortWindow2 pulumi.StringPtrInput `pulumi:"shortWindow2"`
}

func (SloTargetAlertRuleRuleParametersArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SloTargetAlertRuleRuleParameters)(nil)).Elem()
}

func (i SloTargetAlertRuleRuleParametersArgs) ToSloTargetAlertRuleRuleParametersOutput() SloTargetAlertRuleRuleParametersOutput {
	return i.ToSloTargetAlertRuleRuleParametersOutputWithContext(context.Background())
}

func (i SloTargetAlertRuleRuleParametersArgs) ToSloTargetAlertRuleRuleParametersOutputWithContext(ctx context.Context) SloTargetAlertRuleRuleParametersOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SloTargetAlertRuleRuleParametersOutput)
}

func (i SloTargetAlertRuleRuleParametersArgs) ToSloTargetAlertRuleRuleParametersPtrOutput() SloTargetAlertRuleRuleParametersPtrOutput {
	return i.ToSloTargetAlertRuleRuleParametersPtrOutputWithContext(context.Background())
}

func (i SloTargetAlertRuleRuleParametersArgs) ToSloTargetAlertRuleRuleParametersPtrOutputWithContext(ctx context.Context) SloTargetAlertRuleRuleParametersPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SloTargetAlertRuleRuleParametersOutput).ToSloTargetAlertRuleRuleParametersPtrOutputWithContext(ctx)
}

// SloTargetAlertRuleRuleParametersPtrInput is an input type that accepts SloTargetAlertRuleRuleParametersArgs, SloTargetAlertRuleRuleParametersPtr and SloTargetAlertRuleRuleParametersPtrOutput values.
// You can construct a concrete instance of `SloTargetAlertRuleRuleParametersPtrInput` via:
//
//	        SloTargetAlertRuleRuleParametersArgs{...}
//
//	or:
//
//	        nil
type SloTargetAlertRuleRuleParametersPtrInput interface {
	pulumi.Input

	ToSloTargetAlertRuleRuleParametersPtrOutput() SloTargetAlertRuleRuleParametersPtrOutput
	ToSloTargetAlertRuleRuleParametersPtrOutputWithContext(context.Context) SloTargetAlertRuleRuleParametersPtrOutput
}

type sloTargetAlertRuleRuleParametersPtrType SloTargetAlertRuleRuleParametersArgs

func SloTargetAlertRuleRuleParametersPtr(v *SloTargetAlertRuleRuleParametersArgs) SloTargetAlertRuleRuleParametersPtrInput {
	return (*sloTargetAlertRuleRuleParametersPtrType)(v)
}

func (*sloTargetAlertRuleRuleParametersPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SloTargetAlertRuleRuleParameters)(nil)).Elem()
}

func (i *sloTargetAlertRuleRuleParametersPtrType) ToSloTargetAlertRuleRuleParametersPtrOutput() SloTargetAlertRuleRuleParametersPtrOutput {
	return i.ToSloTargetAlertRuleRuleParametersPtrOutputWithContext(context.Background())
}

func (i *sloTargetAlertRuleRuleParametersPtrType) ToSloTargetAlertRuleRuleParametersPtrOutputWithContext(ctx context.Context) SloTargetAlertRuleRuleParametersPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SloTargetAlertRuleRuleParametersPtrOutput)
}

type SloTargetAlertRuleRuleParametersOutput struct{ *pulumi.OutputState }

func (SloTargetAlertRuleRuleParametersOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SloTargetAlertRuleRuleParameters)(nil)).Elem()
}

func (o SloTargetAlertRuleRuleParametersOutput) ToSloTargetAlertRuleRuleParametersOutput() SloTargetAlertRuleRuleParametersOutput {
	return o
}

func (o SloTargetAlertRuleRuleParametersOutput) ToSloTargetAlertRuleRuleParametersOutputWithContext(ctx context.Context) SloTargetAlertRuleRuleParametersOutput {
	return o
}

func (o SloTargetAlertRuleRuleParametersOutput) ToSloTargetAlertRuleRuleParametersPtrOutput() SloTargetAlertRuleRuleParametersPtrOutput {
	return o.ToSloTargetAlertRuleRuleParametersPtrOutputWithContext(context.Background())
}

func (o SloTargetAlertRuleRuleParametersOutput) ToSloTargetAlertRuleRuleParametersPtrOutputWithContext(ctx context.Context) SloTargetAlertRuleRuleParametersPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v SloTargetAlertRuleRuleParameters) *SloTargetAlertRuleRuleParameters {
		return &v
	}).(SloTargetAlertRuleRuleParametersPtrOutput)
}

// Burn rate threshold 1 used in burn rate alert calculation. This value must be between 0 and 100/(100-SLO target). Note: `"BURN_RATE"` alert rules use the `"burnRateThreshold1"` parameter. See [SLO alerts](https://docs.splunk.com/observability/en/alerts-detectors-notifications/slo/burn-rate-alerts.html) for more info.
func (o SloTargetAlertRuleRuleParametersOutput) BurnRateThreshold1() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v SloTargetAlertRuleRuleParameters) *float64 { return v.BurnRateThreshold1 }).(pulumi.Float64PtrOutput)
}

// Burn rate threshold 2 used in burn rate alert calculation. This value must be between 0 and 100/(100-SLO target). Note: `"BURN_RATE"` alert rules use the `"burnRateThreshold2"` parameter. See [SLO alerts](https://docs.splunk.com/observability/en/alerts-detectors-notifications/slo/burn-rate-alerts.html) for more info.
func (o SloTargetAlertRuleRuleParametersOutput) BurnRateThreshold2() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v SloTargetAlertRuleRuleParameters) *float64 { return v.BurnRateThreshold2 }).(pulumi.Float64PtrOutput)
}

// Duration that indicates how long the alert condition is met before the alert is triggered. The value must be positive and smaller than the compliance period of the SLO target. Note: `"BREACH"` and `"ERROR_BUDGET_LEFT"` alert rules use the fireLasting parameter. Default: `"5m"`
func (o SloTargetAlertRuleRuleParametersOutput) FireLasting() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SloTargetAlertRuleRuleParameters) *string { return v.FireLasting }).(pulumi.StringPtrOutput)
}

// Long window 1 used in burn rate alert calculation. This value must be longer than `"shortWindow1"` and shorter than 90 days. Note: `"BURN_RATE"` alert rules use the `"longWindow1"` parameter. See [SLO alerts](https://docs.splunk.com/observability/en/alerts-detectors-notifications/slo/burn-rate-alerts.html) for more info.
func (o SloTargetAlertRuleRuleParametersOutput) LongWindow1() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SloTargetAlertRuleRuleParameters) *string { return v.LongWindow1 }).(pulumi.StringPtrOutput)
}

// Long window 2 used in burn rate alert calculation. This value must be longer than `"shortWindow2"` and shorter than 90 days. Note: `"BURN_RATE"` alert rules use the `"longWindow2"` parameter. See [SLO alerts](https://docs.splunk.com/observability/en/alerts-detectors-notifications/slo/burn-rate-alerts.html) for more info.
func (o SloTargetAlertRuleRuleParametersOutput) LongWindow2() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SloTargetAlertRuleRuleParameters) *string { return v.LongWindow2 }).(pulumi.StringPtrOutput)
}

// Error budget must be equal to or smaller than this percentage for the alert to be triggered. Note: `"ERROR_BUDGET_LEFT"` alert rules use the `"percentErrorBudgetLeft"` parameter. Default: `100`
func (o SloTargetAlertRuleRuleParametersOutput) PercentErrorBudgetLeft() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v SloTargetAlertRuleRuleParameters) *float64 { return v.PercentErrorBudgetLeft }).(pulumi.Float64PtrOutput)
}

// Percentage of the `"fireLasting"` duration that the alert condition is met before the alert is triggered. Note: `"BREACH"` and `"ERROR_BUDGET_LEFT"` alert rules use the `"percentOfLasting"` parameter. Default: `100`
func (o SloTargetAlertRuleRuleParametersOutput) PercentOfLasting() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v SloTargetAlertRuleRuleParameters) *float64 { return v.PercentOfLasting }).(pulumi.Float64PtrOutput)
}

// Short window 1 used in burn rate alert calculation. This value must be longer than 1/30 of `"longWindow1"`. Note: `"BURN_RATE"` alert rules use the `"shortWindow1"` parameter. See [SLO alerts](https://docs.splunk.com/observability/en/alerts-detectors-notifications/slo/burn-rate-alerts.html) for more info.
func (o SloTargetAlertRuleRuleParametersOutput) ShortWindow1() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SloTargetAlertRuleRuleParameters) *string { return v.ShortWindow1 }).(pulumi.StringPtrOutput)
}

// Short window 2 used in burn rate alert calculation. This value must be longer than 1/30 of `"longWindow2"`. Note: `"BURN_RATE"` alert rules use the `"shortWindow2"` parameter. See [SLO alerts](https://docs.splunk.com/observability/en/alerts-detectors-notifications/slo/burn-rate-alerts.html) for more info.
func (o SloTargetAlertRuleRuleParametersOutput) ShortWindow2() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SloTargetAlertRuleRuleParameters) *string { return v.ShortWindow2 }).(pulumi.StringPtrOutput)
}

type SloTargetAlertRuleRuleParametersPtrOutput struct{ *pulumi.OutputState }

func (SloTargetAlertRuleRuleParametersPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SloTargetAlertRuleRuleParameters)(nil)).Elem()
}

func (o SloTargetAlertRuleRuleParametersPtrOutput) ToSloTargetAlertRuleRuleParametersPtrOutput() SloTargetAlertRuleRuleParametersPtrOutput {
	return o
}

func (o SloTargetAlertRuleRuleParametersPtrOutput) ToSloTargetAlertRuleRuleParametersPtrOutputWithContext(ctx context.Context) SloTargetAlertRuleRuleParametersPtrOutput {
	return o
}

func (o SloTargetAlertRuleRuleParametersPtrOutput) Elem() SloTargetAlertRuleRuleParametersOutput {
	return o.ApplyT(func(v *SloTargetAlertRuleRuleParameters) SloTargetAlertRuleRuleParameters {
		if v != nil {
			return *v
		}
		var ret SloTargetAlertRuleRuleParameters
		return ret
	}).(SloTargetAlertRuleRuleParametersOutput)
}

// Burn rate threshold 1 used in burn rate alert calculation. This value must be between 0 and 100/(100-SLO target). Note: `"BURN_RATE"` alert rules use the `"burnRateThreshold1"` parameter. See [SLO alerts](https://docs.splunk.com/observability/en/alerts-detectors-notifications/slo/burn-rate-alerts.html) for more info.
func (o SloTargetAlertRuleRuleParametersPtrOutput) BurnRateThreshold1() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *SloTargetAlertRuleRuleParameters) *float64 {
		if v == nil {
			return nil
		}
		return v.BurnRateThreshold1
	}).(pulumi.Float64PtrOutput)
}

// Burn rate threshold 2 used in burn rate alert calculation. This value must be between 0 and 100/(100-SLO target). Note: `"BURN_RATE"` alert rules use the `"burnRateThreshold2"` parameter. See [SLO alerts](https://docs.splunk.com/observability/en/alerts-detectors-notifications/slo/burn-rate-alerts.html) for more info.
func (o SloTargetAlertRuleRuleParametersPtrOutput) BurnRateThreshold2() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *SloTargetAlertRuleRuleParameters) *float64 {
		if v == nil {
			return nil
		}
		return v.BurnRateThreshold2
	}).(pulumi.Float64PtrOutput)
}

// Duration that indicates how long the alert condition is met before the alert is triggered. The value must be positive and smaller than the compliance period of the SLO target. Note: `"BREACH"` and `"ERROR_BUDGET_LEFT"` alert rules use the fireLasting parameter. Default: `"5m"`
func (o SloTargetAlertRuleRuleParametersPtrOutput) FireLasting() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SloTargetAlertRuleRuleParameters) *string {
		if v == nil {
			return nil
		}
		return v.FireLasting
	}).(pulumi.StringPtrOutput)
}

// Long window 1 used in burn rate alert calculation. This value must be longer than `"shortWindow1"` and shorter than 90 days. Note: `"BURN_RATE"` alert rules use the `"longWindow1"` parameter. See [SLO alerts](https://docs.splunk.com/observability/en/alerts-detectors-notifications/slo/burn-rate-alerts.html) for more info.
func (o SloTargetAlertRuleRuleParametersPtrOutput) LongWindow1() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SloTargetAlertRuleRuleParameters) *string {
		if v == nil {
			return nil
		}
		return v.LongWindow1
	}).(pulumi.StringPtrOutput)
}

// Long window 2 used in burn rate alert calculation. This value must be longer than `"shortWindow2"` and shorter than 90 days. Note: `"BURN_RATE"` alert rules use the `"longWindow2"` parameter. See [SLO alerts](https://docs.splunk.com/observability/en/alerts-detectors-notifications/slo/burn-rate-alerts.html) for more info.
func (o SloTargetAlertRuleRuleParametersPtrOutput) LongWindow2() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SloTargetAlertRuleRuleParameters) *string {
		if v == nil {
			return nil
		}
		return v.LongWindow2
	}).(pulumi.StringPtrOutput)
}

// Error budget must be equal to or smaller than this percentage for the alert to be triggered. Note: `"ERROR_BUDGET_LEFT"` alert rules use the `"percentErrorBudgetLeft"` parameter. Default: `100`
func (o SloTargetAlertRuleRuleParametersPtrOutput) PercentErrorBudgetLeft() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *SloTargetAlertRuleRuleParameters) *float64 {
		if v == nil {
			return nil
		}
		return v.PercentErrorBudgetLeft
	}).(pulumi.Float64PtrOutput)
}

// Percentage of the `"fireLasting"` duration that the alert condition is met before the alert is triggered. Note: `"BREACH"` and `"ERROR_BUDGET_LEFT"` alert rules use the `"percentOfLasting"` parameter. Default: `100`
func (o SloTargetAlertRuleRuleParametersPtrOutput) PercentOfLasting() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *SloTargetAlertRuleRuleParameters) *float64 {
		if v == nil {
			return nil
		}
		return v.PercentOfLasting
	}).(pulumi.Float64PtrOutput)
}

// Short window 1 used in burn rate alert calculation. This value must be longer than 1/30 of `"longWindow1"`. Note: `"BURN_RATE"` alert rules use the `"shortWindow1"` parameter. See [SLO alerts](https://docs.splunk.com/observability/en/alerts-detectors-notifications/slo/burn-rate-alerts.html) for more info.
func (o SloTargetAlertRuleRuleParametersPtrOutput) ShortWindow1() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SloTargetAlertRuleRuleParameters) *string {
		if v == nil {
			return nil
		}
		return v.ShortWindow1
	}).(pulumi.StringPtrOutput)
}

// Short window 2 used in burn rate alert calculation. This value must be longer than 1/30 of `"longWindow2"`. Note: `"BURN_RATE"` alert rules use the `"shortWindow2"` parameter. See [SLO alerts](https://docs.splunk.com/observability/en/alerts-detectors-notifications/slo/burn-rate-alerts.html) for more info.
func (o SloTargetAlertRuleRuleParametersPtrOutput) ShortWindow2() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SloTargetAlertRuleRuleParameters) *string {
		if v == nil {
			return nil
		}
		return v.ShortWindow2
	}).(pulumi.StringPtrOutput)
}

type SloTargetAlertRuleRuleReminderNotification struct {
	// The interval at which you want to receive the notifications, in milliseconds.
	IntervalMs int `pulumi:"intervalMs"`
	// The duration during which repeat notifications are sent, in milliseconds.
	TimeoutMs *int `pulumi:"timeoutMs"`
	// Type of the SLO. Currently just: `"RequestBased"` is supported.
	Type string `pulumi:"type"`
}

// SloTargetAlertRuleRuleReminderNotificationInput is an input type that accepts SloTargetAlertRuleRuleReminderNotificationArgs and SloTargetAlertRuleRuleReminderNotificationOutput values.
// You can construct a concrete instance of `SloTargetAlertRuleRuleReminderNotificationInput` via:
//
//	SloTargetAlertRuleRuleReminderNotificationArgs{...}
type SloTargetAlertRuleRuleReminderNotificationInput interface {
	pulumi.Input

	ToSloTargetAlertRuleRuleReminderNotificationOutput() SloTargetAlertRuleRuleReminderNotificationOutput
	ToSloTargetAlertRuleRuleReminderNotificationOutputWithContext(context.Context) SloTargetAlertRuleRuleReminderNotificationOutput
}

type SloTargetAlertRuleRuleReminderNotificationArgs struct {
	// The interval at which you want to receive the notifications, in milliseconds.
	IntervalMs pulumi.IntInput `pulumi:"intervalMs"`
	// The duration during which repeat notifications are sent, in milliseconds.
	TimeoutMs pulumi.IntPtrInput `pulumi:"timeoutMs"`
	// Type of the SLO. Currently just: `"RequestBased"` is supported.
	Type pulumi.StringInput `pulumi:"type"`
}

func (SloTargetAlertRuleRuleReminderNotificationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SloTargetAlertRuleRuleReminderNotification)(nil)).Elem()
}

func (i SloTargetAlertRuleRuleReminderNotificationArgs) ToSloTargetAlertRuleRuleReminderNotificationOutput() SloTargetAlertRuleRuleReminderNotificationOutput {
	return i.ToSloTargetAlertRuleRuleReminderNotificationOutputWithContext(context.Background())
}

func (i SloTargetAlertRuleRuleReminderNotificationArgs) ToSloTargetAlertRuleRuleReminderNotificationOutputWithContext(ctx context.Context) SloTargetAlertRuleRuleReminderNotificationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SloTargetAlertRuleRuleReminderNotificationOutput)
}

func (i SloTargetAlertRuleRuleReminderNotificationArgs) ToSloTargetAlertRuleRuleReminderNotificationPtrOutput() SloTargetAlertRuleRuleReminderNotificationPtrOutput {
	return i.ToSloTargetAlertRuleRuleReminderNotificationPtrOutputWithContext(context.Background())
}

func (i SloTargetAlertRuleRuleReminderNotificationArgs) ToSloTargetAlertRuleRuleReminderNotificationPtrOutputWithContext(ctx context.Context) SloTargetAlertRuleRuleReminderNotificationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SloTargetAlertRuleRuleReminderNotificationOutput).ToSloTargetAlertRuleRuleReminderNotificationPtrOutputWithContext(ctx)
}

// SloTargetAlertRuleRuleReminderNotificationPtrInput is an input type that accepts SloTargetAlertRuleRuleReminderNotificationArgs, SloTargetAlertRuleRuleReminderNotificationPtr and SloTargetAlertRuleRuleReminderNotificationPtrOutput values.
// You can construct a concrete instance of `SloTargetAlertRuleRuleReminderNotificationPtrInput` via:
//
//	        SloTargetAlertRuleRuleReminderNotificationArgs{...}
//
//	or:
//
//	        nil
type SloTargetAlertRuleRuleReminderNotificationPtrInput interface {
	pulumi.Input

	ToSloTargetAlertRuleRuleReminderNotificationPtrOutput() SloTargetAlertRuleRuleReminderNotificationPtrOutput
	ToSloTargetAlertRuleRuleReminderNotificationPtrOutputWithContext(context.Context) SloTargetAlertRuleRuleReminderNotificationPtrOutput
}

type sloTargetAlertRuleRuleReminderNotificationPtrType SloTargetAlertRuleRuleReminderNotificationArgs

func SloTargetAlertRuleRuleReminderNotificationPtr(v *SloTargetAlertRuleRuleReminderNotificationArgs) SloTargetAlertRuleRuleReminderNotificationPtrInput {
	return (*sloTargetAlertRuleRuleReminderNotificationPtrType)(v)
}

func (*sloTargetAlertRuleRuleReminderNotificationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SloTargetAlertRuleRuleReminderNotification)(nil)).Elem()
}

func (i *sloTargetAlertRuleRuleReminderNotificationPtrType) ToSloTargetAlertRuleRuleReminderNotificationPtrOutput() SloTargetAlertRuleRuleReminderNotificationPtrOutput {
	return i.ToSloTargetAlertRuleRuleReminderNotificationPtrOutputWithContext(context.Background())
}

func (i *sloTargetAlertRuleRuleReminderNotificationPtrType) ToSloTargetAlertRuleRuleReminderNotificationPtrOutputWithContext(ctx context.Context) SloTargetAlertRuleRuleReminderNotificationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SloTargetAlertRuleRuleReminderNotificationPtrOutput)
}

type SloTargetAlertRuleRuleReminderNotificationOutput struct{ *pulumi.OutputState }

func (SloTargetAlertRuleRuleReminderNotificationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SloTargetAlertRuleRuleReminderNotification)(nil)).Elem()
}

func (o SloTargetAlertRuleRuleReminderNotificationOutput) ToSloTargetAlertRuleRuleReminderNotificationOutput() SloTargetAlertRuleRuleReminderNotificationOutput {
	return o
}

func (o SloTargetAlertRuleRuleReminderNotificationOutput) ToSloTargetAlertRuleRuleReminderNotificationOutputWithContext(ctx context.Context) SloTargetAlertRuleRuleReminderNotificationOutput {
	return o
}

func (o SloTargetAlertRuleRuleReminderNotificationOutput) ToSloTargetAlertRuleRuleReminderNotificationPtrOutput() SloTargetAlertRuleRuleReminderNotificationPtrOutput {
	return o.ToSloTargetAlertRuleRuleReminderNotificationPtrOutputWithContext(context.Background())
}

func (o SloTargetAlertRuleRuleReminderNotificationOutput) ToSloTargetAlertRuleRuleReminderNotificationPtrOutputWithContext(ctx context.Context) SloTargetAlertRuleRuleReminderNotificationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v SloTargetAlertRuleRuleReminderNotification) *SloTargetAlertRuleRuleReminderNotification {
		return &v
	}).(SloTargetAlertRuleRuleReminderNotificationPtrOutput)
}

// The interval at which you want to receive the notifications, in milliseconds.
func (o SloTargetAlertRuleRuleReminderNotificationOutput) IntervalMs() pulumi.IntOutput {
	return o.ApplyT(func(v SloTargetAlertRuleRuleReminderNotification) int { return v.IntervalMs }).(pulumi.IntOutput)
}

// The duration during which repeat notifications are sent, in milliseconds.
func (o SloTargetAlertRuleRuleReminderNotificationOutput) TimeoutMs() pulumi.IntPtrOutput {
	return o.ApplyT(func(v SloTargetAlertRuleRuleReminderNotification) *int { return v.TimeoutMs }).(pulumi.IntPtrOutput)
}

// Type of the SLO. Currently just: `"RequestBased"` is supported.
func (o SloTargetAlertRuleRuleReminderNotificationOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v SloTargetAlertRuleRuleReminderNotification) string { return v.Type }).(pulumi.StringOutput)
}

type SloTargetAlertRuleRuleReminderNotificationPtrOutput struct{ *pulumi.OutputState }

func (SloTargetAlertRuleRuleReminderNotificationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SloTargetAlertRuleRuleReminderNotification)(nil)).Elem()
}

func (o SloTargetAlertRuleRuleReminderNotificationPtrOutput) ToSloTargetAlertRuleRuleReminderNotificationPtrOutput() SloTargetAlertRuleRuleReminderNotificationPtrOutput {
	return o
}

func (o SloTargetAlertRuleRuleReminderNotificationPtrOutput) ToSloTargetAlertRuleRuleReminderNotificationPtrOutputWithContext(ctx context.Context) SloTargetAlertRuleRuleReminderNotificationPtrOutput {
	return o
}

func (o SloTargetAlertRuleRuleReminderNotificationPtrOutput) Elem() SloTargetAlertRuleRuleReminderNotificationOutput {
	return o.ApplyT(func(v *SloTargetAlertRuleRuleReminderNotification) SloTargetAlertRuleRuleReminderNotification {
		if v != nil {
			return *v
		}
		var ret SloTargetAlertRuleRuleReminderNotification
		return ret
	}).(SloTargetAlertRuleRuleReminderNotificationOutput)
}

// The interval at which you want to receive the notifications, in milliseconds.
func (o SloTargetAlertRuleRuleReminderNotificationPtrOutput) IntervalMs() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *SloTargetAlertRuleRuleReminderNotification) *int {
		if v == nil {
			return nil
		}
		return &v.IntervalMs
	}).(pulumi.IntPtrOutput)
}

// The duration during which repeat notifications are sent, in milliseconds.
func (o SloTargetAlertRuleRuleReminderNotificationPtrOutput) TimeoutMs() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *SloTargetAlertRuleRuleReminderNotification) *int {
		if v == nil {
			return nil
		}
		return v.TimeoutMs
	}).(pulumi.IntPtrOutput)
}

// Type of the SLO. Currently just: `"RequestBased"` is supported.
func (o SloTargetAlertRuleRuleReminderNotificationPtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SloTargetAlertRuleRuleReminderNotification) *string {
		if v == nil {
			return nil
		}
		return &v.Type
	}).(pulumi.StringPtrOutput)
}

type TableChartVizOption struct {
	// Color to use
	Color *string `pulumi:"color"`
	// Specifies an alternate value for the Plot Name column of the Data Table associated with the chart.
	DisplayName *string `pulumi:"displayName"`
	// The label used in the publish statement that displays the plot (metric time series data) you want to customize
	Label string `pulumi:"label"`
	// An arbitrary prefix to display with the value of this plot
	ValuePrefix *string `pulumi:"valuePrefix"`
	// An arbitrary suffix to display with the value of this plot
	ValueSuffix *string `pulumi:"valueSuffix"`
	// A unit to attach to this plot. Units support automatic scaling (eg thousands of bytes will be displayed as kilobytes)
	ValueUnit *string `pulumi:"valueUnit"`
}

// TableChartVizOptionInput is an input type that accepts TableChartVizOptionArgs and TableChartVizOptionOutput values.
// You can construct a concrete instance of `TableChartVizOptionInput` via:
//
//	TableChartVizOptionArgs{...}
type TableChartVizOptionInput interface {
	pulumi.Input

	ToTableChartVizOptionOutput() TableChartVizOptionOutput
	ToTableChartVizOptionOutputWithContext(context.Context) TableChartVizOptionOutput
}

type TableChartVizOptionArgs struct {
	// Color to use
	Color pulumi.StringPtrInput `pulumi:"color"`
	// Specifies an alternate value for the Plot Name column of the Data Table associated with the chart.
	DisplayName pulumi.StringPtrInput `pulumi:"displayName"`
	// The label used in the publish statement that displays the plot (metric time series data) you want to customize
	Label pulumi.StringInput `pulumi:"label"`
	// An arbitrary prefix to display with the value of this plot
	ValuePrefix pulumi.StringPtrInput `pulumi:"valuePrefix"`
	// An arbitrary suffix to display with the value of this plot
	ValueSuffix pulumi.StringPtrInput `pulumi:"valueSuffix"`
	// A unit to attach to this plot. Units support automatic scaling (eg thousands of bytes will be displayed as kilobytes)
	ValueUnit pulumi.StringPtrInput `pulumi:"valueUnit"`
}

func (TableChartVizOptionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TableChartVizOption)(nil)).Elem()
}

func (i TableChartVizOptionArgs) ToTableChartVizOptionOutput() TableChartVizOptionOutput {
	return i.ToTableChartVizOptionOutputWithContext(context.Background())
}

func (i TableChartVizOptionArgs) ToTableChartVizOptionOutputWithContext(ctx context.Context) TableChartVizOptionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TableChartVizOptionOutput)
}

// TableChartVizOptionArrayInput is an input type that accepts TableChartVizOptionArray and TableChartVizOptionArrayOutput values.
// You can construct a concrete instance of `TableChartVizOptionArrayInput` via:
//
//	TableChartVizOptionArray{ TableChartVizOptionArgs{...} }
type TableChartVizOptionArrayInput interface {
	pulumi.Input

	ToTableChartVizOptionArrayOutput() TableChartVizOptionArrayOutput
	ToTableChartVizOptionArrayOutputWithContext(context.Context) TableChartVizOptionArrayOutput
}

type TableChartVizOptionArray []TableChartVizOptionInput

func (TableChartVizOptionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TableChartVizOption)(nil)).Elem()
}

func (i TableChartVizOptionArray) ToTableChartVizOptionArrayOutput() TableChartVizOptionArrayOutput {
	return i.ToTableChartVizOptionArrayOutputWithContext(context.Background())
}

func (i TableChartVizOptionArray) ToTableChartVizOptionArrayOutputWithContext(ctx context.Context) TableChartVizOptionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TableChartVizOptionArrayOutput)
}

type TableChartVizOptionOutput struct{ *pulumi.OutputState }

func (TableChartVizOptionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TableChartVizOption)(nil)).Elem()
}

func (o TableChartVizOptionOutput) ToTableChartVizOptionOutput() TableChartVizOptionOutput {
	return o
}

func (o TableChartVizOptionOutput) ToTableChartVizOptionOutputWithContext(ctx context.Context) TableChartVizOptionOutput {
	return o
}

// Color to use
func (o TableChartVizOptionOutput) Color() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TableChartVizOption) *string { return v.Color }).(pulumi.StringPtrOutput)
}

// Specifies an alternate value for the Plot Name column of the Data Table associated with the chart.
func (o TableChartVizOptionOutput) DisplayName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TableChartVizOption) *string { return v.DisplayName }).(pulumi.StringPtrOutput)
}

// The label used in the publish statement that displays the plot (metric time series data) you want to customize
func (o TableChartVizOptionOutput) Label() pulumi.StringOutput {
	return o.ApplyT(func(v TableChartVizOption) string { return v.Label }).(pulumi.StringOutput)
}

// An arbitrary prefix to display with the value of this plot
func (o TableChartVizOptionOutput) ValuePrefix() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TableChartVizOption) *string { return v.ValuePrefix }).(pulumi.StringPtrOutput)
}

// An arbitrary suffix to display with the value of this plot
func (o TableChartVizOptionOutput) ValueSuffix() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TableChartVizOption) *string { return v.ValueSuffix }).(pulumi.StringPtrOutput)
}

// A unit to attach to this plot. Units support automatic scaling (eg thousands of bytes will be displayed as kilobytes)
func (o TableChartVizOptionOutput) ValueUnit() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TableChartVizOption) *string { return v.ValueUnit }).(pulumi.StringPtrOutput)
}

type TableChartVizOptionArrayOutput struct{ *pulumi.OutputState }

func (TableChartVizOptionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TableChartVizOption)(nil)).Elem()
}

func (o TableChartVizOptionArrayOutput) ToTableChartVizOptionArrayOutput() TableChartVizOptionArrayOutput {
	return o
}

func (o TableChartVizOptionArrayOutput) ToTableChartVizOptionArrayOutputWithContext(ctx context.Context) TableChartVizOptionArrayOutput {
	return o
}

func (o TableChartVizOptionArrayOutput) Index(i pulumi.IntInput) TableChartVizOptionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) TableChartVizOption {
		return vs[0].([]TableChartVizOption)[vs[1].(int)]
	}).(TableChartVizOptionOutput)
}

type TimeChartAxisLeft struct {
	// A line to draw as a high watermark.
	HighWatermark *float64 `pulumi:"highWatermark"`
	// A label to attach to the high watermark line.
	HighWatermarkLabel *string `pulumi:"highWatermarkLabel"`
	// Label of the left axis.
	Label *string `pulumi:"label"`
	// A line to draw as a low watermark.
	LowWatermark *float64 `pulumi:"lowWatermark"`
	// A label to attach to the low watermark line.
	LowWatermarkLabel *string `pulumi:"lowWatermarkLabel"`
	// The maximum value for the left axis.
	MaxValue *float64 `pulumi:"maxValue"`
	// The minimum value for the left axis.
	MinValue   *float64                     `pulumi:"minValue"`
	Watermarks []TimeChartAxisLeftWatermark `pulumi:"watermarks"`
}

// TimeChartAxisLeftInput is an input type that accepts TimeChartAxisLeftArgs and TimeChartAxisLeftOutput values.
// You can construct a concrete instance of `TimeChartAxisLeftInput` via:
//
//	TimeChartAxisLeftArgs{...}
type TimeChartAxisLeftInput interface {
	pulumi.Input

	ToTimeChartAxisLeftOutput() TimeChartAxisLeftOutput
	ToTimeChartAxisLeftOutputWithContext(context.Context) TimeChartAxisLeftOutput
}

type TimeChartAxisLeftArgs struct {
	// A line to draw as a high watermark.
	HighWatermark pulumi.Float64PtrInput `pulumi:"highWatermark"`
	// A label to attach to the high watermark line.
	HighWatermarkLabel pulumi.StringPtrInput `pulumi:"highWatermarkLabel"`
	// Label of the left axis.
	Label pulumi.StringPtrInput `pulumi:"label"`
	// A line to draw as a low watermark.
	LowWatermark pulumi.Float64PtrInput `pulumi:"lowWatermark"`
	// A label to attach to the low watermark line.
	LowWatermarkLabel pulumi.StringPtrInput `pulumi:"lowWatermarkLabel"`
	// The maximum value for the left axis.
	MaxValue pulumi.Float64PtrInput `pulumi:"maxValue"`
	// The minimum value for the left axis.
	MinValue   pulumi.Float64PtrInput               `pulumi:"minValue"`
	Watermarks TimeChartAxisLeftWatermarkArrayInput `pulumi:"watermarks"`
}

func (TimeChartAxisLeftArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TimeChartAxisLeft)(nil)).Elem()
}

func (i TimeChartAxisLeftArgs) ToTimeChartAxisLeftOutput() TimeChartAxisLeftOutput {
	return i.ToTimeChartAxisLeftOutputWithContext(context.Background())
}

func (i TimeChartAxisLeftArgs) ToTimeChartAxisLeftOutputWithContext(ctx context.Context) TimeChartAxisLeftOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TimeChartAxisLeftOutput)
}

func (i TimeChartAxisLeftArgs) ToTimeChartAxisLeftPtrOutput() TimeChartAxisLeftPtrOutput {
	return i.ToTimeChartAxisLeftPtrOutputWithContext(context.Background())
}

func (i TimeChartAxisLeftArgs) ToTimeChartAxisLeftPtrOutputWithContext(ctx context.Context) TimeChartAxisLeftPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TimeChartAxisLeftOutput).ToTimeChartAxisLeftPtrOutputWithContext(ctx)
}

// TimeChartAxisLeftPtrInput is an input type that accepts TimeChartAxisLeftArgs, TimeChartAxisLeftPtr and TimeChartAxisLeftPtrOutput values.
// You can construct a concrete instance of `TimeChartAxisLeftPtrInput` via:
//
//	        TimeChartAxisLeftArgs{...}
//
//	or:
//
//	        nil
type TimeChartAxisLeftPtrInput interface {
	pulumi.Input

	ToTimeChartAxisLeftPtrOutput() TimeChartAxisLeftPtrOutput
	ToTimeChartAxisLeftPtrOutputWithContext(context.Context) TimeChartAxisLeftPtrOutput
}

type timeChartAxisLeftPtrType TimeChartAxisLeftArgs

func TimeChartAxisLeftPtr(v *TimeChartAxisLeftArgs) TimeChartAxisLeftPtrInput {
	return (*timeChartAxisLeftPtrType)(v)
}

func (*timeChartAxisLeftPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TimeChartAxisLeft)(nil)).Elem()
}

func (i *timeChartAxisLeftPtrType) ToTimeChartAxisLeftPtrOutput() TimeChartAxisLeftPtrOutput {
	return i.ToTimeChartAxisLeftPtrOutputWithContext(context.Background())
}

func (i *timeChartAxisLeftPtrType) ToTimeChartAxisLeftPtrOutputWithContext(ctx context.Context) TimeChartAxisLeftPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TimeChartAxisLeftPtrOutput)
}

type TimeChartAxisLeftOutput struct{ *pulumi.OutputState }

func (TimeChartAxisLeftOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TimeChartAxisLeft)(nil)).Elem()
}

func (o TimeChartAxisLeftOutput) ToTimeChartAxisLeftOutput() TimeChartAxisLeftOutput {
	return o
}

func (o TimeChartAxisLeftOutput) ToTimeChartAxisLeftOutputWithContext(ctx context.Context) TimeChartAxisLeftOutput {
	return o
}

func (o TimeChartAxisLeftOutput) ToTimeChartAxisLeftPtrOutput() TimeChartAxisLeftPtrOutput {
	return o.ToTimeChartAxisLeftPtrOutputWithContext(context.Background())
}

func (o TimeChartAxisLeftOutput) ToTimeChartAxisLeftPtrOutputWithContext(ctx context.Context) TimeChartAxisLeftPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TimeChartAxisLeft) *TimeChartAxisLeft {
		return &v
	}).(TimeChartAxisLeftPtrOutput)
}

// A line to draw as a high watermark.
func (o TimeChartAxisLeftOutput) HighWatermark() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v TimeChartAxisLeft) *float64 { return v.HighWatermark }).(pulumi.Float64PtrOutput)
}

// A label to attach to the high watermark line.
func (o TimeChartAxisLeftOutput) HighWatermarkLabel() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TimeChartAxisLeft) *string { return v.HighWatermarkLabel }).(pulumi.StringPtrOutput)
}

// Label of the left axis.
func (o TimeChartAxisLeftOutput) Label() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TimeChartAxisLeft) *string { return v.Label }).(pulumi.StringPtrOutput)
}

// A line to draw as a low watermark.
func (o TimeChartAxisLeftOutput) LowWatermark() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v TimeChartAxisLeft) *float64 { return v.LowWatermark }).(pulumi.Float64PtrOutput)
}

// A label to attach to the low watermark line.
func (o TimeChartAxisLeftOutput) LowWatermarkLabel() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TimeChartAxisLeft) *string { return v.LowWatermarkLabel }).(pulumi.StringPtrOutput)
}

// The maximum value for the left axis.
func (o TimeChartAxisLeftOutput) MaxValue() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v TimeChartAxisLeft) *float64 { return v.MaxValue }).(pulumi.Float64PtrOutput)
}

// The minimum value for the left axis.
func (o TimeChartAxisLeftOutput) MinValue() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v TimeChartAxisLeft) *float64 { return v.MinValue }).(pulumi.Float64PtrOutput)
}

func (o TimeChartAxisLeftOutput) Watermarks() TimeChartAxisLeftWatermarkArrayOutput {
	return o.ApplyT(func(v TimeChartAxisLeft) []TimeChartAxisLeftWatermark { return v.Watermarks }).(TimeChartAxisLeftWatermarkArrayOutput)
}

type TimeChartAxisLeftPtrOutput struct{ *pulumi.OutputState }

func (TimeChartAxisLeftPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TimeChartAxisLeft)(nil)).Elem()
}

func (o TimeChartAxisLeftPtrOutput) ToTimeChartAxisLeftPtrOutput() TimeChartAxisLeftPtrOutput {
	return o
}

func (o TimeChartAxisLeftPtrOutput) ToTimeChartAxisLeftPtrOutputWithContext(ctx context.Context) TimeChartAxisLeftPtrOutput {
	return o
}

func (o TimeChartAxisLeftPtrOutput) Elem() TimeChartAxisLeftOutput {
	return o.ApplyT(func(v *TimeChartAxisLeft) TimeChartAxisLeft {
		if v != nil {
			return *v
		}
		var ret TimeChartAxisLeft
		return ret
	}).(TimeChartAxisLeftOutput)
}

// A line to draw as a high watermark.
func (o TimeChartAxisLeftPtrOutput) HighWatermark() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *TimeChartAxisLeft) *float64 {
		if v == nil {
			return nil
		}
		return v.HighWatermark
	}).(pulumi.Float64PtrOutput)
}

// A label to attach to the high watermark line.
func (o TimeChartAxisLeftPtrOutput) HighWatermarkLabel() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TimeChartAxisLeft) *string {
		if v == nil {
			return nil
		}
		return v.HighWatermarkLabel
	}).(pulumi.StringPtrOutput)
}

// Label of the left axis.
func (o TimeChartAxisLeftPtrOutput) Label() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TimeChartAxisLeft) *string {
		if v == nil {
			return nil
		}
		return v.Label
	}).(pulumi.StringPtrOutput)
}

// A line to draw as a low watermark.
func (o TimeChartAxisLeftPtrOutput) LowWatermark() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *TimeChartAxisLeft) *float64 {
		if v == nil {
			return nil
		}
		return v.LowWatermark
	}).(pulumi.Float64PtrOutput)
}

// A label to attach to the low watermark line.
func (o TimeChartAxisLeftPtrOutput) LowWatermarkLabel() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TimeChartAxisLeft) *string {
		if v == nil {
			return nil
		}
		return v.LowWatermarkLabel
	}).(pulumi.StringPtrOutput)
}

// The maximum value for the left axis.
func (o TimeChartAxisLeftPtrOutput) MaxValue() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *TimeChartAxisLeft) *float64 {
		if v == nil {
			return nil
		}
		return v.MaxValue
	}).(pulumi.Float64PtrOutput)
}

// The minimum value for the left axis.
func (o TimeChartAxisLeftPtrOutput) MinValue() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *TimeChartAxisLeft) *float64 {
		if v == nil {
			return nil
		}
		return v.MinValue
	}).(pulumi.Float64PtrOutput)
}

func (o TimeChartAxisLeftPtrOutput) Watermarks() TimeChartAxisLeftWatermarkArrayOutput {
	return o.ApplyT(func(v *TimeChartAxisLeft) []TimeChartAxisLeftWatermark {
		if v == nil {
			return nil
		}
		return v.Watermarks
	}).(TimeChartAxisLeftWatermarkArrayOutput)
}

type TimeChartAxisLeftWatermark struct {
	// Label to display associated with the watermark line
	Label *string `pulumi:"label"`
	// Axis value where the watermark line will be displayed
	Value float64 `pulumi:"value"`
}

// TimeChartAxisLeftWatermarkInput is an input type that accepts TimeChartAxisLeftWatermarkArgs and TimeChartAxisLeftWatermarkOutput values.
// You can construct a concrete instance of `TimeChartAxisLeftWatermarkInput` via:
//
//	TimeChartAxisLeftWatermarkArgs{...}
type TimeChartAxisLeftWatermarkInput interface {
	pulumi.Input

	ToTimeChartAxisLeftWatermarkOutput() TimeChartAxisLeftWatermarkOutput
	ToTimeChartAxisLeftWatermarkOutputWithContext(context.Context) TimeChartAxisLeftWatermarkOutput
}

type TimeChartAxisLeftWatermarkArgs struct {
	// Label to display associated with the watermark line
	Label pulumi.StringPtrInput `pulumi:"label"`
	// Axis value where the watermark line will be displayed
	Value pulumi.Float64Input `pulumi:"value"`
}

func (TimeChartAxisLeftWatermarkArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TimeChartAxisLeftWatermark)(nil)).Elem()
}

func (i TimeChartAxisLeftWatermarkArgs) ToTimeChartAxisLeftWatermarkOutput() TimeChartAxisLeftWatermarkOutput {
	return i.ToTimeChartAxisLeftWatermarkOutputWithContext(context.Background())
}

func (i TimeChartAxisLeftWatermarkArgs) ToTimeChartAxisLeftWatermarkOutputWithContext(ctx context.Context) TimeChartAxisLeftWatermarkOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TimeChartAxisLeftWatermarkOutput)
}

// TimeChartAxisLeftWatermarkArrayInput is an input type that accepts TimeChartAxisLeftWatermarkArray and TimeChartAxisLeftWatermarkArrayOutput values.
// You can construct a concrete instance of `TimeChartAxisLeftWatermarkArrayInput` via:
//
//	TimeChartAxisLeftWatermarkArray{ TimeChartAxisLeftWatermarkArgs{...} }
type TimeChartAxisLeftWatermarkArrayInput interface {
	pulumi.Input

	ToTimeChartAxisLeftWatermarkArrayOutput() TimeChartAxisLeftWatermarkArrayOutput
	ToTimeChartAxisLeftWatermarkArrayOutputWithContext(context.Context) TimeChartAxisLeftWatermarkArrayOutput
}

type TimeChartAxisLeftWatermarkArray []TimeChartAxisLeftWatermarkInput

func (TimeChartAxisLeftWatermarkArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TimeChartAxisLeftWatermark)(nil)).Elem()
}

func (i TimeChartAxisLeftWatermarkArray) ToTimeChartAxisLeftWatermarkArrayOutput() TimeChartAxisLeftWatermarkArrayOutput {
	return i.ToTimeChartAxisLeftWatermarkArrayOutputWithContext(context.Background())
}

func (i TimeChartAxisLeftWatermarkArray) ToTimeChartAxisLeftWatermarkArrayOutputWithContext(ctx context.Context) TimeChartAxisLeftWatermarkArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TimeChartAxisLeftWatermarkArrayOutput)
}

type TimeChartAxisLeftWatermarkOutput struct{ *pulumi.OutputState }

func (TimeChartAxisLeftWatermarkOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TimeChartAxisLeftWatermark)(nil)).Elem()
}

func (o TimeChartAxisLeftWatermarkOutput) ToTimeChartAxisLeftWatermarkOutput() TimeChartAxisLeftWatermarkOutput {
	return o
}

func (o TimeChartAxisLeftWatermarkOutput) ToTimeChartAxisLeftWatermarkOutputWithContext(ctx context.Context) TimeChartAxisLeftWatermarkOutput {
	return o
}

// Label to display associated with the watermark line
func (o TimeChartAxisLeftWatermarkOutput) Label() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TimeChartAxisLeftWatermark) *string { return v.Label }).(pulumi.StringPtrOutput)
}

// Axis value where the watermark line will be displayed
func (o TimeChartAxisLeftWatermarkOutput) Value() pulumi.Float64Output {
	return o.ApplyT(func(v TimeChartAxisLeftWatermark) float64 { return v.Value }).(pulumi.Float64Output)
}

type TimeChartAxisLeftWatermarkArrayOutput struct{ *pulumi.OutputState }

func (TimeChartAxisLeftWatermarkArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TimeChartAxisLeftWatermark)(nil)).Elem()
}

func (o TimeChartAxisLeftWatermarkArrayOutput) ToTimeChartAxisLeftWatermarkArrayOutput() TimeChartAxisLeftWatermarkArrayOutput {
	return o
}

func (o TimeChartAxisLeftWatermarkArrayOutput) ToTimeChartAxisLeftWatermarkArrayOutputWithContext(ctx context.Context) TimeChartAxisLeftWatermarkArrayOutput {
	return o
}

func (o TimeChartAxisLeftWatermarkArrayOutput) Index(i pulumi.IntInput) TimeChartAxisLeftWatermarkOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) TimeChartAxisLeftWatermark {
		return vs[0].([]TimeChartAxisLeftWatermark)[vs[1].(int)]
	}).(TimeChartAxisLeftWatermarkOutput)
}

type TimeChartAxisRight struct {
	// A line to draw as a high watermark.
	HighWatermark *float64 `pulumi:"highWatermark"`
	// A label to attach to the high watermark line.
	HighWatermarkLabel *string `pulumi:"highWatermarkLabel"`
	// Label of the right axis.
	Label *string `pulumi:"label"`
	// A line to draw as a low watermark.
	LowWatermark *float64 `pulumi:"lowWatermark"`
	// A label to attach to the low watermark line.
	LowWatermarkLabel *string `pulumi:"lowWatermarkLabel"`
	// The maximum value for the right axis.
	MaxValue *float64 `pulumi:"maxValue"`
	// The minimum value for the right axis.
	MinValue   *float64                      `pulumi:"minValue"`
	Watermarks []TimeChartAxisRightWatermark `pulumi:"watermarks"`
}

// TimeChartAxisRightInput is an input type that accepts TimeChartAxisRightArgs and TimeChartAxisRightOutput values.
// You can construct a concrete instance of `TimeChartAxisRightInput` via:
//
//	TimeChartAxisRightArgs{...}
type TimeChartAxisRightInput interface {
	pulumi.Input

	ToTimeChartAxisRightOutput() TimeChartAxisRightOutput
	ToTimeChartAxisRightOutputWithContext(context.Context) TimeChartAxisRightOutput
}

type TimeChartAxisRightArgs struct {
	// A line to draw as a high watermark.
	HighWatermark pulumi.Float64PtrInput `pulumi:"highWatermark"`
	// A label to attach to the high watermark line.
	HighWatermarkLabel pulumi.StringPtrInput `pulumi:"highWatermarkLabel"`
	// Label of the right axis.
	Label pulumi.StringPtrInput `pulumi:"label"`
	// A line to draw as a low watermark.
	LowWatermark pulumi.Float64PtrInput `pulumi:"lowWatermark"`
	// A label to attach to the low watermark line.
	LowWatermarkLabel pulumi.StringPtrInput `pulumi:"lowWatermarkLabel"`
	// The maximum value for the right axis.
	MaxValue pulumi.Float64PtrInput `pulumi:"maxValue"`
	// The minimum value for the right axis.
	MinValue   pulumi.Float64PtrInput                `pulumi:"minValue"`
	Watermarks TimeChartAxisRightWatermarkArrayInput `pulumi:"watermarks"`
}

func (TimeChartAxisRightArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TimeChartAxisRight)(nil)).Elem()
}

func (i TimeChartAxisRightArgs) ToTimeChartAxisRightOutput() TimeChartAxisRightOutput {
	return i.ToTimeChartAxisRightOutputWithContext(context.Background())
}

func (i TimeChartAxisRightArgs) ToTimeChartAxisRightOutputWithContext(ctx context.Context) TimeChartAxisRightOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TimeChartAxisRightOutput)
}

func (i TimeChartAxisRightArgs) ToTimeChartAxisRightPtrOutput() TimeChartAxisRightPtrOutput {
	return i.ToTimeChartAxisRightPtrOutputWithContext(context.Background())
}

func (i TimeChartAxisRightArgs) ToTimeChartAxisRightPtrOutputWithContext(ctx context.Context) TimeChartAxisRightPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TimeChartAxisRightOutput).ToTimeChartAxisRightPtrOutputWithContext(ctx)
}

// TimeChartAxisRightPtrInput is an input type that accepts TimeChartAxisRightArgs, TimeChartAxisRightPtr and TimeChartAxisRightPtrOutput values.
// You can construct a concrete instance of `TimeChartAxisRightPtrInput` via:
//
//	        TimeChartAxisRightArgs{...}
//
//	or:
//
//	        nil
type TimeChartAxisRightPtrInput interface {
	pulumi.Input

	ToTimeChartAxisRightPtrOutput() TimeChartAxisRightPtrOutput
	ToTimeChartAxisRightPtrOutputWithContext(context.Context) TimeChartAxisRightPtrOutput
}

type timeChartAxisRightPtrType TimeChartAxisRightArgs

func TimeChartAxisRightPtr(v *TimeChartAxisRightArgs) TimeChartAxisRightPtrInput {
	return (*timeChartAxisRightPtrType)(v)
}

func (*timeChartAxisRightPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TimeChartAxisRight)(nil)).Elem()
}

func (i *timeChartAxisRightPtrType) ToTimeChartAxisRightPtrOutput() TimeChartAxisRightPtrOutput {
	return i.ToTimeChartAxisRightPtrOutputWithContext(context.Background())
}

func (i *timeChartAxisRightPtrType) ToTimeChartAxisRightPtrOutputWithContext(ctx context.Context) TimeChartAxisRightPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TimeChartAxisRightPtrOutput)
}

type TimeChartAxisRightOutput struct{ *pulumi.OutputState }

func (TimeChartAxisRightOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TimeChartAxisRight)(nil)).Elem()
}

func (o TimeChartAxisRightOutput) ToTimeChartAxisRightOutput() TimeChartAxisRightOutput {
	return o
}

func (o TimeChartAxisRightOutput) ToTimeChartAxisRightOutputWithContext(ctx context.Context) TimeChartAxisRightOutput {
	return o
}

func (o TimeChartAxisRightOutput) ToTimeChartAxisRightPtrOutput() TimeChartAxisRightPtrOutput {
	return o.ToTimeChartAxisRightPtrOutputWithContext(context.Background())
}

func (o TimeChartAxisRightOutput) ToTimeChartAxisRightPtrOutputWithContext(ctx context.Context) TimeChartAxisRightPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TimeChartAxisRight) *TimeChartAxisRight {
		return &v
	}).(TimeChartAxisRightPtrOutput)
}

// A line to draw as a high watermark.
func (o TimeChartAxisRightOutput) HighWatermark() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v TimeChartAxisRight) *float64 { return v.HighWatermark }).(pulumi.Float64PtrOutput)
}

// A label to attach to the high watermark line.
func (o TimeChartAxisRightOutput) HighWatermarkLabel() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TimeChartAxisRight) *string { return v.HighWatermarkLabel }).(pulumi.StringPtrOutput)
}

// Label of the right axis.
func (o TimeChartAxisRightOutput) Label() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TimeChartAxisRight) *string { return v.Label }).(pulumi.StringPtrOutput)
}

// A line to draw as a low watermark.
func (o TimeChartAxisRightOutput) LowWatermark() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v TimeChartAxisRight) *float64 { return v.LowWatermark }).(pulumi.Float64PtrOutput)
}

// A label to attach to the low watermark line.
func (o TimeChartAxisRightOutput) LowWatermarkLabel() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TimeChartAxisRight) *string { return v.LowWatermarkLabel }).(pulumi.StringPtrOutput)
}

// The maximum value for the right axis.
func (o TimeChartAxisRightOutput) MaxValue() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v TimeChartAxisRight) *float64 { return v.MaxValue }).(pulumi.Float64PtrOutput)
}

// The minimum value for the right axis.
func (o TimeChartAxisRightOutput) MinValue() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v TimeChartAxisRight) *float64 { return v.MinValue }).(pulumi.Float64PtrOutput)
}

func (o TimeChartAxisRightOutput) Watermarks() TimeChartAxisRightWatermarkArrayOutput {
	return o.ApplyT(func(v TimeChartAxisRight) []TimeChartAxisRightWatermark { return v.Watermarks }).(TimeChartAxisRightWatermarkArrayOutput)
}

type TimeChartAxisRightPtrOutput struct{ *pulumi.OutputState }

func (TimeChartAxisRightPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TimeChartAxisRight)(nil)).Elem()
}

func (o TimeChartAxisRightPtrOutput) ToTimeChartAxisRightPtrOutput() TimeChartAxisRightPtrOutput {
	return o
}

func (o TimeChartAxisRightPtrOutput) ToTimeChartAxisRightPtrOutputWithContext(ctx context.Context) TimeChartAxisRightPtrOutput {
	return o
}

func (o TimeChartAxisRightPtrOutput) Elem() TimeChartAxisRightOutput {
	return o.ApplyT(func(v *TimeChartAxisRight) TimeChartAxisRight {
		if v != nil {
			return *v
		}
		var ret TimeChartAxisRight
		return ret
	}).(TimeChartAxisRightOutput)
}

// A line to draw as a high watermark.
func (o TimeChartAxisRightPtrOutput) HighWatermark() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *TimeChartAxisRight) *float64 {
		if v == nil {
			return nil
		}
		return v.HighWatermark
	}).(pulumi.Float64PtrOutput)
}

// A label to attach to the high watermark line.
func (o TimeChartAxisRightPtrOutput) HighWatermarkLabel() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TimeChartAxisRight) *string {
		if v == nil {
			return nil
		}
		return v.HighWatermarkLabel
	}).(pulumi.StringPtrOutput)
}

// Label of the right axis.
func (o TimeChartAxisRightPtrOutput) Label() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TimeChartAxisRight) *string {
		if v == nil {
			return nil
		}
		return v.Label
	}).(pulumi.StringPtrOutput)
}

// A line to draw as a low watermark.
func (o TimeChartAxisRightPtrOutput) LowWatermark() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *TimeChartAxisRight) *float64 {
		if v == nil {
			return nil
		}
		return v.LowWatermark
	}).(pulumi.Float64PtrOutput)
}

// A label to attach to the low watermark line.
func (o TimeChartAxisRightPtrOutput) LowWatermarkLabel() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TimeChartAxisRight) *string {
		if v == nil {
			return nil
		}
		return v.LowWatermarkLabel
	}).(pulumi.StringPtrOutput)
}

// The maximum value for the right axis.
func (o TimeChartAxisRightPtrOutput) MaxValue() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *TimeChartAxisRight) *float64 {
		if v == nil {
			return nil
		}
		return v.MaxValue
	}).(pulumi.Float64PtrOutput)
}

// The minimum value for the right axis.
func (o TimeChartAxisRightPtrOutput) MinValue() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *TimeChartAxisRight) *float64 {
		if v == nil {
			return nil
		}
		return v.MinValue
	}).(pulumi.Float64PtrOutput)
}

func (o TimeChartAxisRightPtrOutput) Watermarks() TimeChartAxisRightWatermarkArrayOutput {
	return o.ApplyT(func(v *TimeChartAxisRight) []TimeChartAxisRightWatermark {
		if v == nil {
			return nil
		}
		return v.Watermarks
	}).(TimeChartAxisRightWatermarkArrayOutput)
}

type TimeChartAxisRightWatermark struct {
	// Label to display associated with the watermark line
	Label *string `pulumi:"label"`
	// Axis value where the watermark line will be displayed
	Value float64 `pulumi:"value"`
}

// TimeChartAxisRightWatermarkInput is an input type that accepts TimeChartAxisRightWatermarkArgs and TimeChartAxisRightWatermarkOutput values.
// You can construct a concrete instance of `TimeChartAxisRightWatermarkInput` via:
//
//	TimeChartAxisRightWatermarkArgs{...}
type TimeChartAxisRightWatermarkInput interface {
	pulumi.Input

	ToTimeChartAxisRightWatermarkOutput() TimeChartAxisRightWatermarkOutput
	ToTimeChartAxisRightWatermarkOutputWithContext(context.Context) TimeChartAxisRightWatermarkOutput
}

type TimeChartAxisRightWatermarkArgs struct {
	// Label to display associated with the watermark line
	Label pulumi.StringPtrInput `pulumi:"label"`
	// Axis value where the watermark line will be displayed
	Value pulumi.Float64Input `pulumi:"value"`
}

func (TimeChartAxisRightWatermarkArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TimeChartAxisRightWatermark)(nil)).Elem()
}

func (i TimeChartAxisRightWatermarkArgs) ToTimeChartAxisRightWatermarkOutput() TimeChartAxisRightWatermarkOutput {
	return i.ToTimeChartAxisRightWatermarkOutputWithContext(context.Background())
}

func (i TimeChartAxisRightWatermarkArgs) ToTimeChartAxisRightWatermarkOutputWithContext(ctx context.Context) TimeChartAxisRightWatermarkOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TimeChartAxisRightWatermarkOutput)
}

// TimeChartAxisRightWatermarkArrayInput is an input type that accepts TimeChartAxisRightWatermarkArray and TimeChartAxisRightWatermarkArrayOutput values.
// You can construct a concrete instance of `TimeChartAxisRightWatermarkArrayInput` via:
//
//	TimeChartAxisRightWatermarkArray{ TimeChartAxisRightWatermarkArgs{...} }
type TimeChartAxisRightWatermarkArrayInput interface {
	pulumi.Input

	ToTimeChartAxisRightWatermarkArrayOutput() TimeChartAxisRightWatermarkArrayOutput
	ToTimeChartAxisRightWatermarkArrayOutputWithContext(context.Context) TimeChartAxisRightWatermarkArrayOutput
}

type TimeChartAxisRightWatermarkArray []TimeChartAxisRightWatermarkInput

func (TimeChartAxisRightWatermarkArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TimeChartAxisRightWatermark)(nil)).Elem()
}

func (i TimeChartAxisRightWatermarkArray) ToTimeChartAxisRightWatermarkArrayOutput() TimeChartAxisRightWatermarkArrayOutput {
	return i.ToTimeChartAxisRightWatermarkArrayOutputWithContext(context.Background())
}

func (i TimeChartAxisRightWatermarkArray) ToTimeChartAxisRightWatermarkArrayOutputWithContext(ctx context.Context) TimeChartAxisRightWatermarkArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TimeChartAxisRightWatermarkArrayOutput)
}

type TimeChartAxisRightWatermarkOutput struct{ *pulumi.OutputState }

func (TimeChartAxisRightWatermarkOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TimeChartAxisRightWatermark)(nil)).Elem()
}

func (o TimeChartAxisRightWatermarkOutput) ToTimeChartAxisRightWatermarkOutput() TimeChartAxisRightWatermarkOutput {
	return o
}

func (o TimeChartAxisRightWatermarkOutput) ToTimeChartAxisRightWatermarkOutputWithContext(ctx context.Context) TimeChartAxisRightWatermarkOutput {
	return o
}

// Label to display associated with the watermark line
func (o TimeChartAxisRightWatermarkOutput) Label() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TimeChartAxisRightWatermark) *string { return v.Label }).(pulumi.StringPtrOutput)
}

// Axis value where the watermark line will be displayed
func (o TimeChartAxisRightWatermarkOutput) Value() pulumi.Float64Output {
	return o.ApplyT(func(v TimeChartAxisRightWatermark) float64 { return v.Value }).(pulumi.Float64Output)
}

type TimeChartAxisRightWatermarkArrayOutput struct{ *pulumi.OutputState }

func (TimeChartAxisRightWatermarkArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TimeChartAxisRightWatermark)(nil)).Elem()
}

func (o TimeChartAxisRightWatermarkArrayOutput) ToTimeChartAxisRightWatermarkArrayOutput() TimeChartAxisRightWatermarkArrayOutput {
	return o
}

func (o TimeChartAxisRightWatermarkArrayOutput) ToTimeChartAxisRightWatermarkArrayOutputWithContext(ctx context.Context) TimeChartAxisRightWatermarkArrayOutput {
	return o
}

func (o TimeChartAxisRightWatermarkArrayOutput) Index(i pulumi.IntInput) TimeChartAxisRightWatermarkOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) TimeChartAxisRightWatermark {
		return vs[0].([]TimeChartAxisRightWatermark)[vs[1].(int)]
	}).(TimeChartAxisRightWatermarkOutput)
}

type TimeChartEventOption struct {
	// Color to use : gray, blue, azure, navy, brown, orange, yellow, iris, magenta, pink, purple, violet, lilac, emerald, green, aquamarine.
	Color *string `pulumi:"color"`
	// Specifies an alternate value for the Plot Name column of the Data Table associated with the chart.
	DisplayName *string `pulumi:"displayName"`
	// Label used in the publish statement that displays the event query you want to customize.
	Label string `pulumi:"label"`
}

// TimeChartEventOptionInput is an input type that accepts TimeChartEventOptionArgs and TimeChartEventOptionOutput values.
// You can construct a concrete instance of `TimeChartEventOptionInput` via:
//
//	TimeChartEventOptionArgs{...}
type TimeChartEventOptionInput interface {
	pulumi.Input

	ToTimeChartEventOptionOutput() TimeChartEventOptionOutput
	ToTimeChartEventOptionOutputWithContext(context.Context) TimeChartEventOptionOutput
}

type TimeChartEventOptionArgs struct {
	// Color to use : gray, blue, azure, navy, brown, orange, yellow, iris, magenta, pink, purple, violet, lilac, emerald, green, aquamarine.
	Color pulumi.StringPtrInput `pulumi:"color"`
	// Specifies an alternate value for the Plot Name column of the Data Table associated with the chart.
	DisplayName pulumi.StringPtrInput `pulumi:"displayName"`
	// Label used in the publish statement that displays the event query you want to customize.
	Label pulumi.StringInput `pulumi:"label"`
}

func (TimeChartEventOptionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TimeChartEventOption)(nil)).Elem()
}

func (i TimeChartEventOptionArgs) ToTimeChartEventOptionOutput() TimeChartEventOptionOutput {
	return i.ToTimeChartEventOptionOutputWithContext(context.Background())
}

func (i TimeChartEventOptionArgs) ToTimeChartEventOptionOutputWithContext(ctx context.Context) TimeChartEventOptionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TimeChartEventOptionOutput)
}

// TimeChartEventOptionArrayInput is an input type that accepts TimeChartEventOptionArray and TimeChartEventOptionArrayOutput values.
// You can construct a concrete instance of `TimeChartEventOptionArrayInput` via:
//
//	TimeChartEventOptionArray{ TimeChartEventOptionArgs{...} }
type TimeChartEventOptionArrayInput interface {
	pulumi.Input

	ToTimeChartEventOptionArrayOutput() TimeChartEventOptionArrayOutput
	ToTimeChartEventOptionArrayOutputWithContext(context.Context) TimeChartEventOptionArrayOutput
}

type TimeChartEventOptionArray []TimeChartEventOptionInput

func (TimeChartEventOptionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TimeChartEventOption)(nil)).Elem()
}

func (i TimeChartEventOptionArray) ToTimeChartEventOptionArrayOutput() TimeChartEventOptionArrayOutput {
	return i.ToTimeChartEventOptionArrayOutputWithContext(context.Background())
}

func (i TimeChartEventOptionArray) ToTimeChartEventOptionArrayOutputWithContext(ctx context.Context) TimeChartEventOptionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TimeChartEventOptionArrayOutput)
}

type TimeChartEventOptionOutput struct{ *pulumi.OutputState }

func (TimeChartEventOptionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TimeChartEventOption)(nil)).Elem()
}

func (o TimeChartEventOptionOutput) ToTimeChartEventOptionOutput() TimeChartEventOptionOutput {
	return o
}

func (o TimeChartEventOptionOutput) ToTimeChartEventOptionOutputWithContext(ctx context.Context) TimeChartEventOptionOutput {
	return o
}

// Color to use : gray, blue, azure, navy, brown, orange, yellow, iris, magenta, pink, purple, violet, lilac, emerald, green, aquamarine.
func (o TimeChartEventOptionOutput) Color() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TimeChartEventOption) *string { return v.Color }).(pulumi.StringPtrOutput)
}

// Specifies an alternate value for the Plot Name column of the Data Table associated with the chart.
func (o TimeChartEventOptionOutput) DisplayName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TimeChartEventOption) *string { return v.DisplayName }).(pulumi.StringPtrOutput)
}

// Label used in the publish statement that displays the event query you want to customize.
func (o TimeChartEventOptionOutput) Label() pulumi.StringOutput {
	return o.ApplyT(func(v TimeChartEventOption) string { return v.Label }).(pulumi.StringOutput)
}

type TimeChartEventOptionArrayOutput struct{ *pulumi.OutputState }

func (TimeChartEventOptionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TimeChartEventOption)(nil)).Elem()
}

func (o TimeChartEventOptionArrayOutput) ToTimeChartEventOptionArrayOutput() TimeChartEventOptionArrayOutput {
	return o
}

func (o TimeChartEventOptionArrayOutput) ToTimeChartEventOptionArrayOutputWithContext(ctx context.Context) TimeChartEventOptionArrayOutput {
	return o
}

func (o TimeChartEventOptionArrayOutput) Index(i pulumi.IntInput) TimeChartEventOptionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) TimeChartEventOption {
		return vs[0].([]TimeChartEventOption)[vs[1].(int)]
	}).(TimeChartEventOptionOutput)
}

type TimeChartHistogramOption struct {
	// Color to use : gray, blue, azure, navy, brown, orange, yellow, iris, magenta, pink, purple, violet, lilac, emerald, green, aquamarine, red, gold, greenyellow, chartreuse, jade
	ColorTheme *string `pulumi:"colorTheme"`
}

// TimeChartHistogramOptionInput is an input type that accepts TimeChartHistogramOptionArgs and TimeChartHistogramOptionOutput values.
// You can construct a concrete instance of `TimeChartHistogramOptionInput` via:
//
//	TimeChartHistogramOptionArgs{...}
type TimeChartHistogramOptionInput interface {
	pulumi.Input

	ToTimeChartHistogramOptionOutput() TimeChartHistogramOptionOutput
	ToTimeChartHistogramOptionOutputWithContext(context.Context) TimeChartHistogramOptionOutput
}

type TimeChartHistogramOptionArgs struct {
	// Color to use : gray, blue, azure, navy, brown, orange, yellow, iris, magenta, pink, purple, violet, lilac, emerald, green, aquamarine, red, gold, greenyellow, chartreuse, jade
	ColorTheme pulumi.StringPtrInput `pulumi:"colorTheme"`
}

func (TimeChartHistogramOptionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TimeChartHistogramOption)(nil)).Elem()
}

func (i TimeChartHistogramOptionArgs) ToTimeChartHistogramOptionOutput() TimeChartHistogramOptionOutput {
	return i.ToTimeChartHistogramOptionOutputWithContext(context.Background())
}

func (i TimeChartHistogramOptionArgs) ToTimeChartHistogramOptionOutputWithContext(ctx context.Context) TimeChartHistogramOptionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TimeChartHistogramOptionOutput)
}

// TimeChartHistogramOptionArrayInput is an input type that accepts TimeChartHistogramOptionArray and TimeChartHistogramOptionArrayOutput values.
// You can construct a concrete instance of `TimeChartHistogramOptionArrayInput` via:
//
//	TimeChartHistogramOptionArray{ TimeChartHistogramOptionArgs{...} }
type TimeChartHistogramOptionArrayInput interface {
	pulumi.Input

	ToTimeChartHistogramOptionArrayOutput() TimeChartHistogramOptionArrayOutput
	ToTimeChartHistogramOptionArrayOutputWithContext(context.Context) TimeChartHistogramOptionArrayOutput
}

type TimeChartHistogramOptionArray []TimeChartHistogramOptionInput

func (TimeChartHistogramOptionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TimeChartHistogramOption)(nil)).Elem()
}

func (i TimeChartHistogramOptionArray) ToTimeChartHistogramOptionArrayOutput() TimeChartHistogramOptionArrayOutput {
	return i.ToTimeChartHistogramOptionArrayOutputWithContext(context.Background())
}

func (i TimeChartHistogramOptionArray) ToTimeChartHistogramOptionArrayOutputWithContext(ctx context.Context) TimeChartHistogramOptionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TimeChartHistogramOptionArrayOutput)
}

type TimeChartHistogramOptionOutput struct{ *pulumi.OutputState }

func (TimeChartHistogramOptionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TimeChartHistogramOption)(nil)).Elem()
}

func (o TimeChartHistogramOptionOutput) ToTimeChartHistogramOptionOutput() TimeChartHistogramOptionOutput {
	return o
}

func (o TimeChartHistogramOptionOutput) ToTimeChartHistogramOptionOutputWithContext(ctx context.Context) TimeChartHistogramOptionOutput {
	return o
}

// Color to use : gray, blue, azure, navy, brown, orange, yellow, iris, magenta, pink, purple, violet, lilac, emerald, green, aquamarine, red, gold, greenyellow, chartreuse, jade
func (o TimeChartHistogramOptionOutput) ColorTheme() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TimeChartHistogramOption) *string { return v.ColorTheme }).(pulumi.StringPtrOutput)
}

type TimeChartHistogramOptionArrayOutput struct{ *pulumi.OutputState }

func (TimeChartHistogramOptionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TimeChartHistogramOption)(nil)).Elem()
}

func (o TimeChartHistogramOptionArrayOutput) ToTimeChartHistogramOptionArrayOutput() TimeChartHistogramOptionArrayOutput {
	return o
}

func (o TimeChartHistogramOptionArrayOutput) ToTimeChartHistogramOptionArrayOutputWithContext(ctx context.Context) TimeChartHistogramOptionArrayOutput {
	return o
}

func (o TimeChartHistogramOptionArrayOutput) Index(i pulumi.IntInput) TimeChartHistogramOptionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) TimeChartHistogramOption {
		return vs[0].([]TimeChartHistogramOption)[vs[1].(int)]
	}).(TimeChartHistogramOptionOutput)
}

type TimeChartLegendOptionsField struct {
	// True or False depending on if you want the property to be shown or hidden.
	Enabled *bool `pulumi:"enabled"`
	// The name of the property to display. Note the special values of `plotLabel` (corresponding with the API's `sfMetric`) which shows the label of the time series `publish()` and `metric` (corresponding with the API's `sf_originatingMetric`) that shows the name of the metric for the time series being displayed.
	Property string `pulumi:"property"`
}

// TimeChartLegendOptionsFieldInput is an input type that accepts TimeChartLegendOptionsFieldArgs and TimeChartLegendOptionsFieldOutput values.
// You can construct a concrete instance of `TimeChartLegendOptionsFieldInput` via:
//
//	TimeChartLegendOptionsFieldArgs{...}
type TimeChartLegendOptionsFieldInput interface {
	pulumi.Input

	ToTimeChartLegendOptionsFieldOutput() TimeChartLegendOptionsFieldOutput
	ToTimeChartLegendOptionsFieldOutputWithContext(context.Context) TimeChartLegendOptionsFieldOutput
}

type TimeChartLegendOptionsFieldArgs struct {
	// True or False depending on if you want the property to be shown or hidden.
	Enabled pulumi.BoolPtrInput `pulumi:"enabled"`
	// The name of the property to display. Note the special values of `plotLabel` (corresponding with the API's `sfMetric`) which shows the label of the time series `publish()` and `metric` (corresponding with the API's `sf_originatingMetric`) that shows the name of the metric for the time series being displayed.
	Property pulumi.StringInput `pulumi:"property"`
}

func (TimeChartLegendOptionsFieldArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TimeChartLegendOptionsField)(nil)).Elem()
}

func (i TimeChartLegendOptionsFieldArgs) ToTimeChartLegendOptionsFieldOutput() TimeChartLegendOptionsFieldOutput {
	return i.ToTimeChartLegendOptionsFieldOutputWithContext(context.Background())
}

func (i TimeChartLegendOptionsFieldArgs) ToTimeChartLegendOptionsFieldOutputWithContext(ctx context.Context) TimeChartLegendOptionsFieldOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TimeChartLegendOptionsFieldOutput)
}

// TimeChartLegendOptionsFieldArrayInput is an input type that accepts TimeChartLegendOptionsFieldArray and TimeChartLegendOptionsFieldArrayOutput values.
// You can construct a concrete instance of `TimeChartLegendOptionsFieldArrayInput` via:
//
//	TimeChartLegendOptionsFieldArray{ TimeChartLegendOptionsFieldArgs{...} }
type TimeChartLegendOptionsFieldArrayInput interface {
	pulumi.Input

	ToTimeChartLegendOptionsFieldArrayOutput() TimeChartLegendOptionsFieldArrayOutput
	ToTimeChartLegendOptionsFieldArrayOutputWithContext(context.Context) TimeChartLegendOptionsFieldArrayOutput
}

type TimeChartLegendOptionsFieldArray []TimeChartLegendOptionsFieldInput

func (TimeChartLegendOptionsFieldArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TimeChartLegendOptionsField)(nil)).Elem()
}

func (i TimeChartLegendOptionsFieldArray) ToTimeChartLegendOptionsFieldArrayOutput() TimeChartLegendOptionsFieldArrayOutput {
	return i.ToTimeChartLegendOptionsFieldArrayOutputWithContext(context.Background())
}

func (i TimeChartLegendOptionsFieldArray) ToTimeChartLegendOptionsFieldArrayOutputWithContext(ctx context.Context) TimeChartLegendOptionsFieldArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TimeChartLegendOptionsFieldArrayOutput)
}

type TimeChartLegendOptionsFieldOutput struct{ *pulumi.OutputState }

func (TimeChartLegendOptionsFieldOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TimeChartLegendOptionsField)(nil)).Elem()
}

func (o TimeChartLegendOptionsFieldOutput) ToTimeChartLegendOptionsFieldOutput() TimeChartLegendOptionsFieldOutput {
	return o
}

func (o TimeChartLegendOptionsFieldOutput) ToTimeChartLegendOptionsFieldOutputWithContext(ctx context.Context) TimeChartLegendOptionsFieldOutput {
	return o
}

// True or False depending on if you want the property to be shown or hidden.
func (o TimeChartLegendOptionsFieldOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v TimeChartLegendOptionsField) *bool { return v.Enabled }).(pulumi.BoolPtrOutput)
}

// The name of the property to display. Note the special values of `plotLabel` (corresponding with the API's `sfMetric`) which shows the label of the time series `publish()` and `metric` (corresponding with the API's `sf_originatingMetric`) that shows the name of the metric for the time series being displayed.
func (o TimeChartLegendOptionsFieldOutput) Property() pulumi.StringOutput {
	return o.ApplyT(func(v TimeChartLegendOptionsField) string { return v.Property }).(pulumi.StringOutput)
}

type TimeChartLegendOptionsFieldArrayOutput struct{ *pulumi.OutputState }

func (TimeChartLegendOptionsFieldArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TimeChartLegendOptionsField)(nil)).Elem()
}

func (o TimeChartLegendOptionsFieldArrayOutput) ToTimeChartLegendOptionsFieldArrayOutput() TimeChartLegendOptionsFieldArrayOutput {
	return o
}

func (o TimeChartLegendOptionsFieldArrayOutput) ToTimeChartLegendOptionsFieldArrayOutputWithContext(ctx context.Context) TimeChartLegendOptionsFieldArrayOutput {
	return o
}

func (o TimeChartLegendOptionsFieldArrayOutput) Index(i pulumi.IntInput) TimeChartLegendOptionsFieldOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) TimeChartLegendOptionsField {
		return vs[0].([]TimeChartLegendOptionsField)[vs[1].(int)]
	}).(TimeChartLegendOptionsFieldOutput)
}

type TimeChartVizOption struct {
	// Y-axis associated with values for this plot. Must be either `right` or `left`.
	Axis *string `pulumi:"axis"`
	// Color to use : gray, blue, azure, navy, brown, orange, yellow, iris, magenta, pink, purple, violet, lilac, emerald, green, aquamarine.
	Color *string `pulumi:"color"`
	// Specifies an alternate value for the Plot Name column of the Data Table associated with the chart.
	DisplayName *string `pulumi:"displayName"`
	// Label used in the publish statement that displays the plot (metric time series data) you want to customize.
	Label string `pulumi:"label"`
	// The visualization style to use. Must be `"LineChart"`, `"AreaChart"`, `"ColumnChart"`, or `"Histogram"`. Chart level `plotType` by default.
	PlotType *string `pulumi:"plotType"`
	// , `valueSuffix` - (Optional) Arbitrary prefix/suffix to display with the value of this plot.
	ValuePrefix *string `pulumi:"valuePrefix"`
	// An arbitrary suffix to display with the value of this plot
	ValueSuffix *string `pulumi:"valueSuffix"`
	// A unit to attach to this plot. Units support automatic scaling (eg thousands of bytes will be displayed as kilobytes). Values values are `Bit, Kilobit, Megabit, Gigabit, Terabit, Petabit, Exabit, Zettabit, Yottabit, Byte, Kibibyte, Mebibyte, Gibibyte (note: this was previously typoed as Gigibyte), Tebibyte, Pebibyte, Exbibyte, Zebibyte, Yobibyte, Nanosecond, Microsecond, Millisecond, Second, Minute, Hour, Day, Week`.
	ValueUnit *string `pulumi:"valueUnit"`
}

// TimeChartVizOptionInput is an input type that accepts TimeChartVizOptionArgs and TimeChartVizOptionOutput values.
// You can construct a concrete instance of `TimeChartVizOptionInput` via:
//
//	TimeChartVizOptionArgs{...}
type TimeChartVizOptionInput interface {
	pulumi.Input

	ToTimeChartVizOptionOutput() TimeChartVizOptionOutput
	ToTimeChartVizOptionOutputWithContext(context.Context) TimeChartVizOptionOutput
}

type TimeChartVizOptionArgs struct {
	// Y-axis associated with values for this plot. Must be either `right` or `left`.
	Axis pulumi.StringPtrInput `pulumi:"axis"`
	// Color to use : gray, blue, azure, navy, brown, orange, yellow, iris, magenta, pink, purple, violet, lilac, emerald, green, aquamarine.
	Color pulumi.StringPtrInput `pulumi:"color"`
	// Specifies an alternate value for the Plot Name column of the Data Table associated with the chart.
	DisplayName pulumi.StringPtrInput `pulumi:"displayName"`
	// Label used in the publish statement that displays the plot (metric time series data) you want to customize.
	Label pulumi.StringInput `pulumi:"label"`
	// The visualization style to use. Must be `"LineChart"`, `"AreaChart"`, `"ColumnChart"`, or `"Histogram"`. Chart level `plotType` by default.
	PlotType pulumi.StringPtrInput `pulumi:"plotType"`
	// , `valueSuffix` - (Optional) Arbitrary prefix/suffix to display with the value of this plot.
	ValuePrefix pulumi.StringPtrInput `pulumi:"valuePrefix"`
	// An arbitrary suffix to display with the value of this plot
	ValueSuffix pulumi.StringPtrInput `pulumi:"valueSuffix"`
	// A unit to attach to this plot. Units support automatic scaling (eg thousands of bytes will be displayed as kilobytes). Values values are `Bit, Kilobit, Megabit, Gigabit, Terabit, Petabit, Exabit, Zettabit, Yottabit, Byte, Kibibyte, Mebibyte, Gibibyte (note: this was previously typoed as Gigibyte), Tebibyte, Pebibyte, Exbibyte, Zebibyte, Yobibyte, Nanosecond, Microsecond, Millisecond, Second, Minute, Hour, Day, Week`.
	ValueUnit pulumi.StringPtrInput `pulumi:"valueUnit"`
}

func (TimeChartVizOptionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TimeChartVizOption)(nil)).Elem()
}

func (i TimeChartVizOptionArgs) ToTimeChartVizOptionOutput() TimeChartVizOptionOutput {
	return i.ToTimeChartVizOptionOutputWithContext(context.Background())
}

func (i TimeChartVizOptionArgs) ToTimeChartVizOptionOutputWithContext(ctx context.Context) TimeChartVizOptionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TimeChartVizOptionOutput)
}

// TimeChartVizOptionArrayInput is an input type that accepts TimeChartVizOptionArray and TimeChartVizOptionArrayOutput values.
// You can construct a concrete instance of `TimeChartVizOptionArrayInput` via:
//
//	TimeChartVizOptionArray{ TimeChartVizOptionArgs{...} }
type TimeChartVizOptionArrayInput interface {
	pulumi.Input

	ToTimeChartVizOptionArrayOutput() TimeChartVizOptionArrayOutput
	ToTimeChartVizOptionArrayOutputWithContext(context.Context) TimeChartVizOptionArrayOutput
}

type TimeChartVizOptionArray []TimeChartVizOptionInput

func (TimeChartVizOptionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TimeChartVizOption)(nil)).Elem()
}

func (i TimeChartVizOptionArray) ToTimeChartVizOptionArrayOutput() TimeChartVizOptionArrayOutput {
	return i.ToTimeChartVizOptionArrayOutputWithContext(context.Background())
}

func (i TimeChartVizOptionArray) ToTimeChartVizOptionArrayOutputWithContext(ctx context.Context) TimeChartVizOptionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TimeChartVizOptionArrayOutput)
}

type TimeChartVizOptionOutput struct{ *pulumi.OutputState }

func (TimeChartVizOptionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TimeChartVizOption)(nil)).Elem()
}

func (o TimeChartVizOptionOutput) ToTimeChartVizOptionOutput() TimeChartVizOptionOutput {
	return o
}

func (o TimeChartVizOptionOutput) ToTimeChartVizOptionOutputWithContext(ctx context.Context) TimeChartVizOptionOutput {
	return o
}

// Y-axis associated with values for this plot. Must be either `right` or `left`.
func (o TimeChartVizOptionOutput) Axis() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TimeChartVizOption) *string { return v.Axis }).(pulumi.StringPtrOutput)
}

// Color to use : gray, blue, azure, navy, brown, orange, yellow, iris, magenta, pink, purple, violet, lilac, emerald, green, aquamarine.
func (o TimeChartVizOptionOutput) Color() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TimeChartVizOption) *string { return v.Color }).(pulumi.StringPtrOutput)
}

// Specifies an alternate value for the Plot Name column of the Data Table associated with the chart.
func (o TimeChartVizOptionOutput) DisplayName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TimeChartVizOption) *string { return v.DisplayName }).(pulumi.StringPtrOutput)
}

// Label used in the publish statement that displays the plot (metric time series data) you want to customize.
func (o TimeChartVizOptionOutput) Label() pulumi.StringOutput {
	return o.ApplyT(func(v TimeChartVizOption) string { return v.Label }).(pulumi.StringOutput)
}

// The visualization style to use. Must be `"LineChart"`, `"AreaChart"`, `"ColumnChart"`, or `"Histogram"`. Chart level `plotType` by default.
func (o TimeChartVizOptionOutput) PlotType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TimeChartVizOption) *string { return v.PlotType }).(pulumi.StringPtrOutput)
}

// , `valueSuffix` - (Optional) Arbitrary prefix/suffix to display with the value of this plot.
func (o TimeChartVizOptionOutput) ValuePrefix() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TimeChartVizOption) *string { return v.ValuePrefix }).(pulumi.StringPtrOutput)
}

// An arbitrary suffix to display with the value of this plot
func (o TimeChartVizOptionOutput) ValueSuffix() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TimeChartVizOption) *string { return v.ValueSuffix }).(pulumi.StringPtrOutput)
}

// A unit to attach to this plot. Units support automatic scaling (eg thousands of bytes will be displayed as kilobytes). Values values are `Bit, Kilobit, Megabit, Gigabit, Terabit, Petabit, Exabit, Zettabit, Yottabit, Byte, Kibibyte, Mebibyte, Gibibyte (note: this was previously typoed as Gigibyte), Tebibyte, Pebibyte, Exbibyte, Zebibyte, Yobibyte, Nanosecond, Microsecond, Millisecond, Second, Minute, Hour, Day, Week`.
func (o TimeChartVizOptionOutput) ValueUnit() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TimeChartVizOption) *string { return v.ValueUnit }).(pulumi.StringPtrOutput)
}

type TimeChartVizOptionArrayOutput struct{ *pulumi.OutputState }

func (TimeChartVizOptionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TimeChartVizOption)(nil)).Elem()
}

func (o TimeChartVizOptionArrayOutput) ToTimeChartVizOptionArrayOutput() TimeChartVizOptionArrayOutput {
	return o
}

func (o TimeChartVizOptionArrayOutput) ToTimeChartVizOptionArrayOutputWithContext(ctx context.Context) TimeChartVizOptionArrayOutput {
	return o
}

func (o TimeChartVizOptionArrayOutput) Index(i pulumi.IntInput) TimeChartVizOptionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) TimeChartVizOption {
		return vs[0].([]TimeChartVizOption)[vs[1].(int)]
	}).(TimeChartVizOptionOutput)
}

type WebhookIntegrationHeader struct {
	// The key of the header to send
	HeaderKey string `pulumi:"headerKey"`
	// The value of the header to send
	HeaderValue string `pulumi:"headerValue"`
}

// WebhookIntegrationHeaderInput is an input type that accepts WebhookIntegrationHeaderArgs and WebhookIntegrationHeaderOutput values.
// You can construct a concrete instance of `WebhookIntegrationHeaderInput` via:
//
//	WebhookIntegrationHeaderArgs{...}
type WebhookIntegrationHeaderInput interface {
	pulumi.Input

	ToWebhookIntegrationHeaderOutput() WebhookIntegrationHeaderOutput
	ToWebhookIntegrationHeaderOutputWithContext(context.Context) WebhookIntegrationHeaderOutput
}

type WebhookIntegrationHeaderArgs struct {
	// The key of the header to send
	HeaderKey pulumi.StringInput `pulumi:"headerKey"`
	// The value of the header to send
	HeaderValue pulumi.StringInput `pulumi:"headerValue"`
}

func (WebhookIntegrationHeaderArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*WebhookIntegrationHeader)(nil)).Elem()
}

func (i WebhookIntegrationHeaderArgs) ToWebhookIntegrationHeaderOutput() WebhookIntegrationHeaderOutput {
	return i.ToWebhookIntegrationHeaderOutputWithContext(context.Background())
}

func (i WebhookIntegrationHeaderArgs) ToWebhookIntegrationHeaderOutputWithContext(ctx context.Context) WebhookIntegrationHeaderOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WebhookIntegrationHeaderOutput)
}

// WebhookIntegrationHeaderArrayInput is an input type that accepts WebhookIntegrationHeaderArray and WebhookIntegrationHeaderArrayOutput values.
// You can construct a concrete instance of `WebhookIntegrationHeaderArrayInput` via:
//
//	WebhookIntegrationHeaderArray{ WebhookIntegrationHeaderArgs{...} }
type WebhookIntegrationHeaderArrayInput interface {
	pulumi.Input

	ToWebhookIntegrationHeaderArrayOutput() WebhookIntegrationHeaderArrayOutput
	ToWebhookIntegrationHeaderArrayOutputWithContext(context.Context) WebhookIntegrationHeaderArrayOutput
}

type WebhookIntegrationHeaderArray []WebhookIntegrationHeaderInput

func (WebhookIntegrationHeaderArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]WebhookIntegrationHeader)(nil)).Elem()
}

func (i WebhookIntegrationHeaderArray) ToWebhookIntegrationHeaderArrayOutput() WebhookIntegrationHeaderArrayOutput {
	return i.ToWebhookIntegrationHeaderArrayOutputWithContext(context.Background())
}

func (i WebhookIntegrationHeaderArray) ToWebhookIntegrationHeaderArrayOutputWithContext(ctx context.Context) WebhookIntegrationHeaderArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WebhookIntegrationHeaderArrayOutput)
}

type WebhookIntegrationHeaderOutput struct{ *pulumi.OutputState }

func (WebhookIntegrationHeaderOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*WebhookIntegrationHeader)(nil)).Elem()
}

func (o WebhookIntegrationHeaderOutput) ToWebhookIntegrationHeaderOutput() WebhookIntegrationHeaderOutput {
	return o
}

func (o WebhookIntegrationHeaderOutput) ToWebhookIntegrationHeaderOutputWithContext(ctx context.Context) WebhookIntegrationHeaderOutput {
	return o
}

// The key of the header to send
func (o WebhookIntegrationHeaderOutput) HeaderKey() pulumi.StringOutput {
	return o.ApplyT(func(v WebhookIntegrationHeader) string { return v.HeaderKey }).(pulumi.StringOutput)
}

// The value of the header to send
func (o WebhookIntegrationHeaderOutput) HeaderValue() pulumi.StringOutput {
	return o.ApplyT(func(v WebhookIntegrationHeader) string { return v.HeaderValue }).(pulumi.StringOutput)
}

type WebhookIntegrationHeaderArrayOutput struct{ *pulumi.OutputState }

func (WebhookIntegrationHeaderArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]WebhookIntegrationHeader)(nil)).Elem()
}

func (o WebhookIntegrationHeaderArrayOutput) ToWebhookIntegrationHeaderArrayOutput() WebhookIntegrationHeaderArrayOutput {
	return o
}

func (o WebhookIntegrationHeaderArrayOutput) ToWebhookIntegrationHeaderArrayOutputWithContext(ctx context.Context) WebhookIntegrationHeaderArrayOutput {
	return o
}

func (o WebhookIntegrationHeaderArrayOutput) Index(i pulumi.IntInput) WebhookIntegrationHeaderOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) WebhookIntegrationHeader {
		return vs[0].([]WebhookIntegrationHeader)[vs[1].(int)]
	}).(WebhookIntegrationHeaderOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*AlertMutingRuleFilterInput)(nil)).Elem(), AlertMutingRuleFilterArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AlertMutingRuleFilterArrayInput)(nil)).Elem(), AlertMutingRuleFilterArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*AlertMutingRuleRecurrenceInput)(nil)).Elem(), AlertMutingRuleRecurrenceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AlertMutingRuleRecurrencePtrInput)(nil)).Elem(), AlertMutingRuleRecurrenceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DashboardChartInput)(nil)).Elem(), DashboardChartArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DashboardChartArrayInput)(nil)).Elem(), DashboardChartArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*DashboardColumnInput)(nil)).Elem(), DashboardColumnArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DashboardColumnArrayInput)(nil)).Elem(), DashboardColumnArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*DashboardEventOverlayInput)(nil)).Elem(), DashboardEventOverlayArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DashboardEventOverlayArrayInput)(nil)).Elem(), DashboardEventOverlayArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*DashboardEventOverlaySourceInput)(nil)).Elem(), DashboardEventOverlaySourceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DashboardEventOverlaySourceArrayInput)(nil)).Elem(), DashboardEventOverlaySourceArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*DashboardFilterInput)(nil)).Elem(), DashboardFilterArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DashboardFilterArrayInput)(nil)).Elem(), DashboardFilterArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*DashboardGridInput)(nil)).Elem(), DashboardGridArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DashboardGridArrayInput)(nil)).Elem(), DashboardGridArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*DashboardGroupDashboardInput)(nil)).Elem(), DashboardGroupDashboardArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DashboardGroupDashboardArrayInput)(nil)).Elem(), DashboardGroupDashboardArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*DashboardGroupDashboardFilterOverrideInput)(nil)).Elem(), DashboardGroupDashboardFilterOverrideArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DashboardGroupDashboardFilterOverrideArrayInput)(nil)).Elem(), DashboardGroupDashboardFilterOverrideArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*DashboardGroupDashboardVariableOverrideInput)(nil)).Elem(), DashboardGroupDashboardVariableOverrideArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DashboardGroupDashboardVariableOverrideArrayInput)(nil)).Elem(), DashboardGroupDashboardVariableOverrideArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*DashboardGroupImportQualifierInput)(nil)).Elem(), DashboardGroupImportQualifierArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DashboardGroupImportQualifierArrayInput)(nil)).Elem(), DashboardGroupImportQualifierArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*DashboardGroupImportQualifierFilterInput)(nil)).Elem(), DashboardGroupImportQualifierFilterArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DashboardGroupImportQualifierFilterArrayInput)(nil)).Elem(), DashboardGroupImportQualifierFilterArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*DashboardGroupPermissionInput)(nil)).Elem(), DashboardGroupPermissionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DashboardGroupPermissionArrayInput)(nil)).Elem(), DashboardGroupPermissionArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*DashboardPermissionsInput)(nil)).Elem(), DashboardPermissionsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DashboardPermissionsPtrInput)(nil)).Elem(), DashboardPermissionsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DashboardPermissionsAclInput)(nil)).Elem(), DashboardPermissionsAclArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DashboardPermissionsAclArrayInput)(nil)).Elem(), DashboardPermissionsAclArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*DashboardSelectedEventOverlayInput)(nil)).Elem(), DashboardSelectedEventOverlayArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DashboardSelectedEventOverlayArrayInput)(nil)).Elem(), DashboardSelectedEventOverlayArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*DashboardSelectedEventOverlaySourceInput)(nil)).Elem(), DashboardSelectedEventOverlaySourceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DashboardSelectedEventOverlaySourceArrayInput)(nil)).Elem(), DashboardSelectedEventOverlaySourceArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*DashboardVariableInput)(nil)).Elem(), DashboardVariableArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DashboardVariableArrayInput)(nil)).Elem(), DashboardVariableArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*DataLinkTargetAppdUrlInput)(nil)).Elem(), DataLinkTargetAppdUrlArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DataLinkTargetAppdUrlArrayInput)(nil)).Elem(), DataLinkTargetAppdUrlArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*DataLinkTargetExternalUrlInput)(nil)).Elem(), DataLinkTargetExternalUrlArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DataLinkTargetExternalUrlArrayInput)(nil)).Elem(), DataLinkTargetExternalUrlArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*DataLinkTargetSignalfxDashboardInput)(nil)).Elem(), DataLinkTargetSignalfxDashboardArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DataLinkTargetSignalfxDashboardArrayInput)(nil)).Elem(), DataLinkTargetSignalfxDashboardArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*DataLinkTargetSplunkInput)(nil)).Elem(), DataLinkTargetSplunkArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DataLinkTargetSplunkArrayInput)(nil)).Elem(), DataLinkTargetSplunkArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*DetectorRuleInput)(nil)).Elem(), DetectorRuleArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DetectorRuleArrayInput)(nil)).Elem(), DetectorRuleArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*DetectorRuleReminderNotificationInput)(nil)).Elem(), DetectorRuleReminderNotificationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DetectorRuleReminderNotificationPtrInput)(nil)).Elem(), DetectorRuleReminderNotificationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DetectorVizOptionInput)(nil)).Elem(), DetectorVizOptionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DetectorVizOptionArrayInput)(nil)).Elem(), DetectorVizOptionArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*HeatmapChartColorRangeInput)(nil)).Elem(), HeatmapChartColorRangeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*HeatmapChartColorRangePtrInput)(nil)).Elem(), HeatmapChartColorRangeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*HeatmapChartColorScaleInput)(nil)).Elem(), HeatmapChartColorScaleArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*HeatmapChartColorScaleArrayInput)(nil)).Elem(), HeatmapChartColorScaleArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ListChartColorScaleInput)(nil)).Elem(), ListChartColorScaleArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ListChartColorScaleArrayInput)(nil)).Elem(), ListChartColorScaleArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ListChartLegendOptionsFieldInput)(nil)).Elem(), ListChartLegendOptionsFieldArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ListChartLegendOptionsFieldArrayInput)(nil)).Elem(), ListChartLegendOptionsFieldArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ListChartVizOptionInput)(nil)).Elem(), ListChartVizOptionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ListChartVizOptionArrayInput)(nil)).Elem(), ListChartVizOptionArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*MetricRulesetAggregationRuleInput)(nil)).Elem(), MetricRulesetAggregationRuleArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*MetricRulesetAggregationRuleArrayInput)(nil)).Elem(), MetricRulesetAggregationRuleArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*MetricRulesetAggregationRuleAggregatorInput)(nil)).Elem(), MetricRulesetAggregationRuleAggregatorArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*MetricRulesetAggregationRuleAggregatorArrayInput)(nil)).Elem(), MetricRulesetAggregationRuleAggregatorArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*MetricRulesetAggregationRuleMatcherInput)(nil)).Elem(), MetricRulesetAggregationRuleMatcherArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*MetricRulesetAggregationRuleMatcherArrayInput)(nil)).Elem(), MetricRulesetAggregationRuleMatcherArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*MetricRulesetAggregationRuleMatcherFilterInput)(nil)).Elem(), MetricRulesetAggregationRuleMatcherFilterArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*MetricRulesetAggregationRuleMatcherFilterArrayInput)(nil)).Elem(), MetricRulesetAggregationRuleMatcherFilterArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*MetricRulesetExceptionRuleInput)(nil)).Elem(), MetricRulesetExceptionRuleArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*MetricRulesetExceptionRuleArrayInput)(nil)).Elem(), MetricRulesetExceptionRuleArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*MetricRulesetExceptionRuleMatcherInput)(nil)).Elem(), MetricRulesetExceptionRuleMatcherArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*MetricRulesetExceptionRuleMatcherArrayInput)(nil)).Elem(), MetricRulesetExceptionRuleMatcherArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*MetricRulesetExceptionRuleMatcherFilterInput)(nil)).Elem(), MetricRulesetExceptionRuleMatcherFilterArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*MetricRulesetExceptionRuleMatcherFilterArrayInput)(nil)).Elem(), MetricRulesetExceptionRuleMatcherFilterArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*MetricRulesetExceptionRuleRestorationInput)(nil)).Elem(), MetricRulesetExceptionRuleRestorationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*MetricRulesetExceptionRuleRestorationArrayInput)(nil)).Elem(), MetricRulesetExceptionRuleRestorationArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*MetricRulesetRoutingRuleInput)(nil)).Elem(), MetricRulesetRoutingRuleArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*MetricRulesetRoutingRuleArrayInput)(nil)).Elem(), MetricRulesetRoutingRuleArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*OrgTokenDpmLimitsInput)(nil)).Elem(), OrgTokenDpmLimitsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*OrgTokenDpmLimitsPtrInput)(nil)).Elem(), OrgTokenDpmLimitsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*OrgTokenHostOrUsageLimitsInput)(nil)).Elem(), OrgTokenHostOrUsageLimitsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*OrgTokenHostOrUsageLimitsPtrInput)(nil)).Elem(), OrgTokenHostOrUsageLimitsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SingleValueChartColorScaleInput)(nil)).Elem(), SingleValueChartColorScaleArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SingleValueChartColorScaleArrayInput)(nil)).Elem(), SingleValueChartColorScaleArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SingleValueChartVizOptionInput)(nil)).Elem(), SingleValueChartVizOptionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SingleValueChartVizOptionArrayInput)(nil)).Elem(), SingleValueChartVizOptionArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SloInputTypeInput)(nil)).Elem(), SloInputTypeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SloInputTypePtrInput)(nil)).Elem(), SloInputTypeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SloTargetInput)(nil)).Elem(), SloTargetArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SloTargetPtrInput)(nil)).Elem(), SloTargetArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SloTargetAlertRuleInput)(nil)).Elem(), SloTargetAlertRuleArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SloTargetAlertRuleArrayInput)(nil)).Elem(), SloTargetAlertRuleArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SloTargetAlertRuleRuleInput)(nil)).Elem(), SloTargetAlertRuleRuleArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SloTargetAlertRuleRuleArrayInput)(nil)).Elem(), SloTargetAlertRuleRuleArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SloTargetAlertRuleRuleParametersInput)(nil)).Elem(), SloTargetAlertRuleRuleParametersArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SloTargetAlertRuleRuleParametersPtrInput)(nil)).Elem(), SloTargetAlertRuleRuleParametersArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SloTargetAlertRuleRuleReminderNotificationInput)(nil)).Elem(), SloTargetAlertRuleRuleReminderNotificationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SloTargetAlertRuleRuleReminderNotificationPtrInput)(nil)).Elem(), SloTargetAlertRuleRuleReminderNotificationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TableChartVizOptionInput)(nil)).Elem(), TableChartVizOptionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TableChartVizOptionArrayInput)(nil)).Elem(), TableChartVizOptionArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*TimeChartAxisLeftInput)(nil)).Elem(), TimeChartAxisLeftArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TimeChartAxisLeftPtrInput)(nil)).Elem(), TimeChartAxisLeftArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TimeChartAxisLeftWatermarkInput)(nil)).Elem(), TimeChartAxisLeftWatermarkArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TimeChartAxisLeftWatermarkArrayInput)(nil)).Elem(), TimeChartAxisLeftWatermarkArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*TimeChartAxisRightInput)(nil)).Elem(), TimeChartAxisRightArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TimeChartAxisRightPtrInput)(nil)).Elem(), TimeChartAxisRightArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TimeChartAxisRightWatermarkInput)(nil)).Elem(), TimeChartAxisRightWatermarkArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TimeChartAxisRightWatermarkArrayInput)(nil)).Elem(), TimeChartAxisRightWatermarkArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*TimeChartEventOptionInput)(nil)).Elem(), TimeChartEventOptionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TimeChartEventOptionArrayInput)(nil)).Elem(), TimeChartEventOptionArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*TimeChartHistogramOptionInput)(nil)).Elem(), TimeChartHistogramOptionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TimeChartHistogramOptionArrayInput)(nil)).Elem(), TimeChartHistogramOptionArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*TimeChartLegendOptionsFieldInput)(nil)).Elem(), TimeChartLegendOptionsFieldArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TimeChartLegendOptionsFieldArrayInput)(nil)).Elem(), TimeChartLegendOptionsFieldArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*TimeChartVizOptionInput)(nil)).Elem(), TimeChartVizOptionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TimeChartVizOptionArrayInput)(nil)).Elem(), TimeChartVizOptionArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*WebhookIntegrationHeaderInput)(nil)).Elem(), WebhookIntegrationHeaderArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*WebhookIntegrationHeaderArrayInput)(nil)).Elem(), WebhookIntegrationHeaderArray{})
	pulumi.RegisterOutputType(AlertMutingRuleFilterOutput{})
	pulumi.RegisterOutputType(AlertMutingRuleFilterArrayOutput{})
	pulumi.RegisterOutputType(AlertMutingRuleRecurrenceOutput{})
	pulumi.RegisterOutputType(AlertMutingRuleRecurrencePtrOutput{})
	pulumi.RegisterOutputType(DashboardChartOutput{})
	pulumi.RegisterOutputType(DashboardChartArrayOutput{})
	pulumi.RegisterOutputType(DashboardColumnOutput{})
	pulumi.RegisterOutputType(DashboardColumnArrayOutput{})
	pulumi.RegisterOutputType(DashboardEventOverlayOutput{})
	pulumi.RegisterOutputType(DashboardEventOverlayArrayOutput{})
	pulumi.RegisterOutputType(DashboardEventOverlaySourceOutput{})
	pulumi.RegisterOutputType(DashboardEventOverlaySourceArrayOutput{})
	pulumi.RegisterOutputType(DashboardFilterOutput{})
	pulumi.RegisterOutputType(DashboardFilterArrayOutput{})
	pulumi.RegisterOutputType(DashboardGridOutput{})
	pulumi.RegisterOutputType(DashboardGridArrayOutput{})
	pulumi.RegisterOutputType(DashboardGroupDashboardOutput{})
	pulumi.RegisterOutputType(DashboardGroupDashboardArrayOutput{})
	pulumi.RegisterOutputType(DashboardGroupDashboardFilterOverrideOutput{})
	pulumi.RegisterOutputType(DashboardGroupDashboardFilterOverrideArrayOutput{})
	pulumi.RegisterOutputType(DashboardGroupDashboardVariableOverrideOutput{})
	pulumi.RegisterOutputType(DashboardGroupDashboardVariableOverrideArrayOutput{})
	pulumi.RegisterOutputType(DashboardGroupImportQualifierOutput{})
	pulumi.RegisterOutputType(DashboardGroupImportQualifierArrayOutput{})
	pulumi.RegisterOutputType(DashboardGroupImportQualifierFilterOutput{})
	pulumi.RegisterOutputType(DashboardGroupImportQualifierFilterArrayOutput{})
	pulumi.RegisterOutputType(DashboardGroupPermissionOutput{})
	pulumi.RegisterOutputType(DashboardGroupPermissionArrayOutput{})
	pulumi.RegisterOutputType(DashboardPermissionsOutput{})
	pulumi.RegisterOutputType(DashboardPermissionsPtrOutput{})
	pulumi.RegisterOutputType(DashboardPermissionsAclOutput{})
	pulumi.RegisterOutputType(DashboardPermissionsAclArrayOutput{})
	pulumi.RegisterOutputType(DashboardSelectedEventOverlayOutput{})
	pulumi.RegisterOutputType(DashboardSelectedEventOverlayArrayOutput{})
	pulumi.RegisterOutputType(DashboardSelectedEventOverlaySourceOutput{})
	pulumi.RegisterOutputType(DashboardSelectedEventOverlaySourceArrayOutput{})
	pulumi.RegisterOutputType(DashboardVariableOutput{})
	pulumi.RegisterOutputType(DashboardVariableArrayOutput{})
	pulumi.RegisterOutputType(DataLinkTargetAppdUrlOutput{})
	pulumi.RegisterOutputType(DataLinkTargetAppdUrlArrayOutput{})
	pulumi.RegisterOutputType(DataLinkTargetExternalUrlOutput{})
	pulumi.RegisterOutputType(DataLinkTargetExternalUrlArrayOutput{})
	pulumi.RegisterOutputType(DataLinkTargetSignalfxDashboardOutput{})
	pulumi.RegisterOutputType(DataLinkTargetSignalfxDashboardArrayOutput{})
	pulumi.RegisterOutputType(DataLinkTargetSplunkOutput{})
	pulumi.RegisterOutputType(DataLinkTargetSplunkArrayOutput{})
	pulumi.RegisterOutputType(DetectorRuleOutput{})
	pulumi.RegisterOutputType(DetectorRuleArrayOutput{})
	pulumi.RegisterOutputType(DetectorRuleReminderNotificationOutput{})
	pulumi.RegisterOutputType(DetectorRuleReminderNotificationPtrOutput{})
	pulumi.RegisterOutputType(DetectorVizOptionOutput{})
	pulumi.RegisterOutputType(DetectorVizOptionArrayOutput{})
	pulumi.RegisterOutputType(HeatmapChartColorRangeOutput{})
	pulumi.RegisterOutputType(HeatmapChartColorRangePtrOutput{})
	pulumi.RegisterOutputType(HeatmapChartColorScaleOutput{})
	pulumi.RegisterOutputType(HeatmapChartColorScaleArrayOutput{})
	pulumi.RegisterOutputType(ListChartColorScaleOutput{})
	pulumi.RegisterOutputType(ListChartColorScaleArrayOutput{})
	pulumi.RegisterOutputType(ListChartLegendOptionsFieldOutput{})
	pulumi.RegisterOutputType(ListChartLegendOptionsFieldArrayOutput{})
	pulumi.RegisterOutputType(ListChartVizOptionOutput{})
	pulumi.RegisterOutputType(ListChartVizOptionArrayOutput{})
	pulumi.RegisterOutputType(MetricRulesetAggregationRuleOutput{})
	pulumi.RegisterOutputType(MetricRulesetAggregationRuleArrayOutput{})
	pulumi.RegisterOutputType(MetricRulesetAggregationRuleAggregatorOutput{})
	pulumi.RegisterOutputType(MetricRulesetAggregationRuleAggregatorArrayOutput{})
	pulumi.RegisterOutputType(MetricRulesetAggregationRuleMatcherOutput{})
	pulumi.RegisterOutputType(MetricRulesetAggregationRuleMatcherArrayOutput{})
	pulumi.RegisterOutputType(MetricRulesetAggregationRuleMatcherFilterOutput{})
	pulumi.RegisterOutputType(MetricRulesetAggregationRuleMatcherFilterArrayOutput{})
	pulumi.RegisterOutputType(MetricRulesetExceptionRuleOutput{})
	pulumi.RegisterOutputType(MetricRulesetExceptionRuleArrayOutput{})
	pulumi.RegisterOutputType(MetricRulesetExceptionRuleMatcherOutput{})
	pulumi.RegisterOutputType(MetricRulesetExceptionRuleMatcherArrayOutput{})
	pulumi.RegisterOutputType(MetricRulesetExceptionRuleMatcherFilterOutput{})
	pulumi.RegisterOutputType(MetricRulesetExceptionRuleMatcherFilterArrayOutput{})
	pulumi.RegisterOutputType(MetricRulesetExceptionRuleRestorationOutput{})
	pulumi.RegisterOutputType(MetricRulesetExceptionRuleRestorationArrayOutput{})
	pulumi.RegisterOutputType(MetricRulesetRoutingRuleOutput{})
	pulumi.RegisterOutputType(MetricRulesetRoutingRuleArrayOutput{})
	pulumi.RegisterOutputType(OrgTokenDpmLimitsOutput{})
	pulumi.RegisterOutputType(OrgTokenDpmLimitsPtrOutput{})
	pulumi.RegisterOutputType(OrgTokenHostOrUsageLimitsOutput{})
	pulumi.RegisterOutputType(OrgTokenHostOrUsageLimitsPtrOutput{})
	pulumi.RegisterOutputType(SingleValueChartColorScaleOutput{})
	pulumi.RegisterOutputType(SingleValueChartColorScaleArrayOutput{})
	pulumi.RegisterOutputType(SingleValueChartVizOptionOutput{})
	pulumi.RegisterOutputType(SingleValueChartVizOptionArrayOutput{})
	pulumi.RegisterOutputType(SloInputTypeOutput{})
	pulumi.RegisterOutputType(SloInputTypePtrOutput{})
	pulumi.RegisterOutputType(SloTargetOutput{})
	pulumi.RegisterOutputType(SloTargetPtrOutput{})
	pulumi.RegisterOutputType(SloTargetAlertRuleOutput{})
	pulumi.RegisterOutputType(SloTargetAlertRuleArrayOutput{})
	pulumi.RegisterOutputType(SloTargetAlertRuleRuleOutput{})
	pulumi.RegisterOutputType(SloTargetAlertRuleRuleArrayOutput{})
	pulumi.RegisterOutputType(SloTargetAlertRuleRuleParametersOutput{})
	pulumi.RegisterOutputType(SloTargetAlertRuleRuleParametersPtrOutput{})
	pulumi.RegisterOutputType(SloTargetAlertRuleRuleReminderNotificationOutput{})
	pulumi.RegisterOutputType(SloTargetAlertRuleRuleReminderNotificationPtrOutput{})
	pulumi.RegisterOutputType(TableChartVizOptionOutput{})
	pulumi.RegisterOutputType(TableChartVizOptionArrayOutput{})
	pulumi.RegisterOutputType(TimeChartAxisLeftOutput{})
	pulumi.RegisterOutputType(TimeChartAxisLeftPtrOutput{})
	pulumi.RegisterOutputType(TimeChartAxisLeftWatermarkOutput{})
	pulumi.RegisterOutputType(TimeChartAxisLeftWatermarkArrayOutput{})
	pulumi.RegisterOutputType(TimeChartAxisRightOutput{})
	pulumi.RegisterOutputType(TimeChartAxisRightPtrOutput{})
	pulumi.RegisterOutputType(TimeChartAxisRightWatermarkOutput{})
	pulumi.RegisterOutputType(TimeChartAxisRightWatermarkArrayOutput{})
	pulumi.RegisterOutputType(TimeChartEventOptionOutput{})
	pulumi.RegisterOutputType(TimeChartEventOptionArrayOutput{})
	pulumi.RegisterOutputType(TimeChartHistogramOptionOutput{})
	pulumi.RegisterOutputType(TimeChartHistogramOptionArrayOutput{})
	pulumi.RegisterOutputType(TimeChartLegendOptionsFieldOutput{})
	pulumi.RegisterOutputType(TimeChartLegendOptionsFieldArrayOutput{})
	pulumi.RegisterOutputType(TimeChartVizOptionOutput{})
	pulumi.RegisterOutputType(TimeChartVizOptionArrayOutput{})
	pulumi.RegisterOutputType(WebhookIntegrationHeaderOutput{})
	pulumi.RegisterOutputType(WebhookIntegrationHeaderArrayOutput{})
}
