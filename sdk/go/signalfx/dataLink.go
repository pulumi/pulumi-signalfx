// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package signalfx

import (
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// Manage SignalFx [Data Links](https://docs.signalfx.com/en/latest/managing/data-links.html).
//
// > This content is derived from https://github.com/terraform-providers/terraform-provider-signalfx/blob/master/website/docs/r/data_link.html.markdown.
type DataLink struct {
	s *pulumi.ResourceState
}

// NewDataLink registers a new resource with the given unique name, arguments, and options.
func NewDataLink(ctx *pulumi.Context,
	name string, args *DataLinkArgs, opts ...pulumi.ResourceOpt) (*DataLink, error) {
	inputs := make(map[string]interface{})
	if args == nil {
		inputs["contextDashboardId"] = nil
		inputs["propertyName"] = nil
		inputs["propertyValue"] = nil
		inputs["targetExternalUrls"] = nil
		inputs["targetSignalfxDashboards"] = nil
		inputs["targetSplunks"] = nil
	} else {
		inputs["contextDashboardId"] = args.ContextDashboardId
		inputs["propertyName"] = args.PropertyName
		inputs["propertyValue"] = args.PropertyValue
		inputs["targetExternalUrls"] = args.TargetExternalUrls
		inputs["targetSignalfxDashboards"] = args.TargetSignalfxDashboards
		inputs["targetSplunks"] = args.TargetSplunks
	}
	s, err := ctx.RegisterResource("signalfx:index/dataLink:DataLink", name, true, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &DataLink{s: s}, nil
}

// GetDataLink gets an existing DataLink resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetDataLink(ctx *pulumi.Context,
	name string, id pulumi.ID, state *DataLinkState, opts ...pulumi.ResourceOpt) (*DataLink, error) {
	inputs := make(map[string]interface{})
	if state != nil {
		inputs["contextDashboardId"] = state.ContextDashboardId
		inputs["propertyName"] = state.PropertyName
		inputs["propertyValue"] = state.PropertyValue
		inputs["targetExternalUrls"] = state.TargetExternalUrls
		inputs["targetSignalfxDashboards"] = state.TargetSignalfxDashboards
		inputs["targetSplunks"] = state.TargetSplunks
	}
	s, err := ctx.ReadResource("signalfx:index/dataLink:DataLink", name, id, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &DataLink{s: s}, nil
}

// URN is this resource's unique name assigned by Pulumi.
func (r *DataLink) URN() pulumi.URNOutput {
	return r.s.URN()
}

// ID is this resource's unique identifier assigned by its provider.
func (r *DataLink) ID() pulumi.IDOutput {
	return r.s.ID()
}

// The dashobard ID to which this data link will be applied
func (r *DataLink) ContextDashboardId() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["contextDashboardId"])
}

// Name (key) of the metadata that's the trigger of a data link. If you specify `propertyValue`, you must specify `propertyName`.
func (r *DataLink) PropertyName() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["propertyName"])
}

// Value of the metadata that's the trigger of a data link. If you specify this property, you must also specify `propertyName`.
func (r *DataLink) PropertyValue() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["propertyValue"])
}

// Link to an external URL
func (r *DataLink) TargetExternalUrls() pulumi.ArrayOutput {
	return (pulumi.ArrayOutput)(r.s.State["targetExternalUrls"])
}

// Link to a SignalFx dashboard
func (r *DataLink) TargetSignalfxDashboards() pulumi.ArrayOutput {
	return (pulumi.ArrayOutput)(r.s.State["targetSignalfxDashboards"])
}

// Link to an external URL
func (r *DataLink) TargetSplunks() pulumi.ArrayOutput {
	return (pulumi.ArrayOutput)(r.s.State["targetSplunks"])
}

// Input properties used for looking up and filtering DataLink resources.
type DataLinkState struct {
	// The dashobard ID to which this data link will be applied
	ContextDashboardId interface{}
	// Name (key) of the metadata that's the trigger of a data link. If you specify `propertyValue`, you must specify `propertyName`.
	PropertyName interface{}
	// Value of the metadata that's the trigger of a data link. If you specify this property, you must also specify `propertyName`.
	PropertyValue interface{}
	// Link to an external URL
	TargetExternalUrls interface{}
	// Link to a SignalFx dashboard
	TargetSignalfxDashboards interface{}
	// Link to an external URL
	TargetSplunks interface{}
}

// The set of arguments for constructing a DataLink resource.
type DataLinkArgs struct {
	// The dashobard ID to which this data link will be applied
	ContextDashboardId interface{}
	// Name (key) of the metadata that's the trigger of a data link. If you specify `propertyValue`, you must specify `propertyName`.
	PropertyName interface{}
	// Value of the metadata that's the trigger of a data link. If you specify this property, you must also specify `propertyName`.
	PropertyValue interface{}
	// Link to an external URL
	TargetExternalUrls interface{}
	// Link to a SignalFx dashboard
	TargetSignalfxDashboards interface{}
	// Link to an external URL
	TargetSplunks interface{}
}
