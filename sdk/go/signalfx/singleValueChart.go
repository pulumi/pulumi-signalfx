// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package signalfx

import (
	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// This chart type displays a single number in a large font, representing the current value of a single metric on a plot line.
// 
// If the time period is in the past, the number represents the value of the metric near the end of the time period.
//
// > This content is derived from https://github.com/terraform-providers/terraform-provider-signalfx/blob/master/website/docs/r/single_value_chart.html.markdown.
type SingleValueChart struct {
	s *pulumi.ResourceState
}

// NewSingleValueChart registers a new resource with the given unique name, arguments, and options.
func NewSingleValueChart(ctx *pulumi.Context,
	name string, args *SingleValueChartArgs, opts ...pulumi.ResourceOpt) (*SingleValueChart, error) {
	if args == nil || args.ProgramText == nil {
		return nil, errors.New("missing required argument 'ProgramText'")
	}
	inputs := make(map[string]interface{})
	if args == nil {
		inputs["colorBy"] = nil
		inputs["colorScales"] = nil
		inputs["description"] = nil
		inputs["isTimestampHidden"] = nil
		inputs["maxDelay"] = nil
		inputs["maxPrecision"] = nil
		inputs["name"] = nil
		inputs["programText"] = nil
		inputs["refreshInterval"] = nil
		inputs["secondaryVisualization"] = nil
		inputs["showSparkLine"] = nil
		inputs["unitPrefix"] = nil
		inputs["vizOptions"] = nil
	} else {
		inputs["colorBy"] = args.ColorBy
		inputs["colorScales"] = args.ColorScales
		inputs["description"] = args.Description
		inputs["isTimestampHidden"] = args.IsTimestampHidden
		inputs["maxDelay"] = args.MaxDelay
		inputs["maxPrecision"] = args.MaxPrecision
		inputs["name"] = args.Name
		inputs["programText"] = args.ProgramText
		inputs["refreshInterval"] = args.RefreshInterval
		inputs["secondaryVisualization"] = args.SecondaryVisualization
		inputs["showSparkLine"] = args.ShowSparkLine
		inputs["unitPrefix"] = args.UnitPrefix
		inputs["vizOptions"] = args.VizOptions
	}
	inputs["url"] = nil
	s, err := ctx.RegisterResource("signalfx:index/singleValueChart:SingleValueChart", name, true, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &SingleValueChart{s: s}, nil
}

// GetSingleValueChart gets an existing SingleValueChart resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSingleValueChart(ctx *pulumi.Context,
	name string, id pulumi.ID, state *SingleValueChartState, opts ...pulumi.ResourceOpt) (*SingleValueChart, error) {
	inputs := make(map[string]interface{})
	if state != nil {
		inputs["colorBy"] = state.ColorBy
		inputs["colorScales"] = state.ColorScales
		inputs["description"] = state.Description
		inputs["isTimestampHidden"] = state.IsTimestampHidden
		inputs["maxDelay"] = state.MaxDelay
		inputs["maxPrecision"] = state.MaxPrecision
		inputs["name"] = state.Name
		inputs["programText"] = state.ProgramText
		inputs["refreshInterval"] = state.RefreshInterval
		inputs["secondaryVisualization"] = state.SecondaryVisualization
		inputs["showSparkLine"] = state.ShowSparkLine
		inputs["unitPrefix"] = state.UnitPrefix
		inputs["url"] = state.Url
		inputs["vizOptions"] = state.VizOptions
	}
	s, err := ctx.ReadResource("signalfx:index/singleValueChart:SingleValueChart", name, id, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &SingleValueChart{s: s}, nil
}

// URN is this resource's unique name assigned by Pulumi.
func (r *SingleValueChart) URN() pulumi.URNOutput {
	return r.s.URN()
}

// ID is this resource's unique identifier assigned by its provider.
func (r *SingleValueChart) ID() pulumi.IDOutput {
	return r.s.ID()
}

// Must be `"Dimension"`, `"Scale"` or `"Metric"`. `"Dimension"` by default.
func (r *SingleValueChart) ColorBy() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["colorBy"])
}

// Single color range including both the color to display for that range and the borders of the range. Example: `[{ gt = 60, color = "blue" }, { lte = 60, color = "yellow" }]`. Look at this [link](https://docs.signalfx.com/en/latest/charts/chart-options-tab.html).
func (r *SingleValueChart) ColorScales() pulumi.ArrayOutput {
	return (pulumi.ArrayOutput)(r.s.State["colorScales"])
}

// Description of the chart.
func (r *SingleValueChart) Description() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["description"])
}

// Whether to hide the timestamp in the chart. `false` by default.
func (r *SingleValueChart) IsTimestampHidden() pulumi.BoolOutput {
	return (pulumi.BoolOutput)(r.s.State["isTimestampHidden"])
}

// How long (in seconds) to wait for late datapoints
func (r *SingleValueChart) MaxDelay() pulumi.IntOutput {
	return (pulumi.IntOutput)(r.s.State["maxDelay"])
}

// The maximum precision to for value displayed.
func (r *SingleValueChart) MaxPrecision() pulumi.IntOutput {
	return (pulumi.IntOutput)(r.s.State["maxPrecision"])
}

// Name of the chart.
func (r *SingleValueChart) Name() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["name"])
}

// Signalflow program text for the chart. More info at <https://developers.signalfx.com/docs/signalflow-overview>.
func (r *SingleValueChart) ProgramText() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["programText"])
}

// How often (in seconds) to refresh the value.
func (r *SingleValueChart) RefreshInterval() pulumi.IntOutput {
	return (pulumi.IntOutput)(r.s.State["refreshInterval"])
}

// The type of secondary visualization. Can be `None`, `Radial`, `Linear`, or `Sparkline`. If unset, the SignalFx default is used (`None`).
func (r *SingleValueChart) SecondaryVisualization() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["secondaryVisualization"])
}

// Whether to show a trend line below the current value. `false` by default.
func (r *SingleValueChart) ShowSparkLine() pulumi.BoolOutput {
	return (pulumi.BoolOutput)(r.s.State["showSparkLine"])
}

// Must be `"Metric"` or `"Binary"`. `"Metric"` by default.
func (r *SingleValueChart) UnitPrefix() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["unitPrefix"])
}

// URL of the chart
func (r *SingleValueChart) Url() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["url"])
}

// Plot-level customization options, associated with a publish statement.
func (r *SingleValueChart) VizOptions() pulumi.ArrayOutput {
	return (pulumi.ArrayOutput)(r.s.State["vizOptions"])
}

// Input properties used for looking up and filtering SingleValueChart resources.
type SingleValueChartState struct {
	// Must be `"Dimension"`, `"Scale"` or `"Metric"`. `"Dimension"` by default.
	ColorBy interface{}
	// Single color range including both the color to display for that range and the borders of the range. Example: `[{ gt = 60, color = "blue" }, { lte = 60, color = "yellow" }]`. Look at this [link](https://docs.signalfx.com/en/latest/charts/chart-options-tab.html).
	ColorScales interface{}
	// Description of the chart.
	Description interface{}
	// Whether to hide the timestamp in the chart. `false` by default.
	IsTimestampHidden interface{}
	// How long (in seconds) to wait for late datapoints
	MaxDelay interface{}
	// The maximum precision to for value displayed.
	MaxPrecision interface{}
	// Name of the chart.
	Name interface{}
	// Signalflow program text for the chart. More info at <https://developers.signalfx.com/docs/signalflow-overview>.
	ProgramText interface{}
	// How often (in seconds) to refresh the value.
	RefreshInterval interface{}
	// The type of secondary visualization. Can be `None`, `Radial`, `Linear`, or `Sparkline`. If unset, the SignalFx default is used (`None`).
	SecondaryVisualization interface{}
	// Whether to show a trend line below the current value. `false` by default.
	ShowSparkLine interface{}
	// Must be `"Metric"` or `"Binary"`. `"Metric"` by default.
	UnitPrefix interface{}
	// URL of the chart
	Url interface{}
	// Plot-level customization options, associated with a publish statement.
	VizOptions interface{}
}

// The set of arguments for constructing a SingleValueChart resource.
type SingleValueChartArgs struct {
	// Must be `"Dimension"`, `"Scale"` or `"Metric"`. `"Dimension"` by default.
	ColorBy interface{}
	// Single color range including both the color to display for that range and the borders of the range. Example: `[{ gt = 60, color = "blue" }, { lte = 60, color = "yellow" }]`. Look at this [link](https://docs.signalfx.com/en/latest/charts/chart-options-tab.html).
	ColorScales interface{}
	// Description of the chart.
	Description interface{}
	// Whether to hide the timestamp in the chart. `false` by default.
	IsTimestampHidden interface{}
	// How long (in seconds) to wait for late datapoints
	MaxDelay interface{}
	// The maximum precision to for value displayed.
	MaxPrecision interface{}
	// Name of the chart.
	Name interface{}
	// Signalflow program text for the chart. More info at <https://developers.signalfx.com/docs/signalflow-overview>.
	ProgramText interface{}
	// How often (in seconds) to refresh the value.
	RefreshInterval interface{}
	// The type of secondary visualization. Can be `None`, `Radial`, `Linear`, or `Sparkline`. If unset, the SignalFx default is used (`None`).
	SecondaryVisualization interface{}
	// Whether to show a trend line below the current value. `false` by default.
	ShowSparkLine interface{}
	// Must be `"Metric"` or `"Binary"`. `"Metric"` by default.
	UnitPrefix interface{}
	// Plot-level customization options, associated with a publish statement.
	VizOptions interface{}
}
