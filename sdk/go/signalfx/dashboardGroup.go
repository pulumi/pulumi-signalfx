// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package signalfx

import (
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// In the SignalFx web UI, a [dashboard group](https://developers.signalfx.com/v2/docs/dashboard-group-model) is a collection of dashboards.
// 
// **NOTE:** Dashboard groups cannot be accessed directly, but just via a dashboard contained in them. This is the reason why make show won't show any of yours dashboard groups.
//
// > This content is derived from https://github.com/terraform-providers/terraform-provider-signalfx/blob/master/website/docs/r/dashboard_group.html.markdown.
type DashboardGroup struct {
	s *pulumi.ResourceState
}

// NewDashboardGroup registers a new resource with the given unique name, arguments, and options.
func NewDashboardGroup(ctx *pulumi.Context,
	name string, args *DashboardGroupArgs, opts ...pulumi.ResourceOpt) (*DashboardGroup, error) {
	inputs := make(map[string]interface{})
	if args == nil {
		inputs["dashboards"] = nil
		inputs["description"] = nil
		inputs["name"] = nil
		inputs["teams"] = nil
	} else {
		inputs["dashboards"] = args.Dashboards
		inputs["description"] = args.Description
		inputs["name"] = args.Name
		inputs["teams"] = args.Teams
	}
	s, err := ctx.RegisterResource("signalfx:index/dashboardGroup:DashboardGroup", name, true, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &DashboardGroup{s: s}, nil
}

// GetDashboardGroup gets an existing DashboardGroup resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetDashboardGroup(ctx *pulumi.Context,
	name string, id pulumi.ID, state *DashboardGroupState, opts ...pulumi.ResourceOpt) (*DashboardGroup, error) {
	inputs := make(map[string]interface{})
	if state != nil {
		inputs["dashboards"] = state.Dashboards
		inputs["description"] = state.Description
		inputs["name"] = state.Name
		inputs["teams"] = state.Teams
	}
	s, err := ctx.ReadResource("signalfx:index/dashboardGroup:DashboardGroup", name, id, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &DashboardGroup{s: s}, nil
}

// URN is this resource's unique name assigned by Pulumi.
func (r *DashboardGroup) URN() *pulumi.URNOutput {
	return r.s.URN()
}

// ID is this resource's unique identifier assigned by its provider.
func (r *DashboardGroup) ID() *pulumi.IDOutput {
	return r.s.ID()
}

// [Mirrored dashboards](https://docs.signalfx.com/en/latest/dashboards/dashboard-mirrors.html) in this dashboard group. **Note:** This feature is not present in all accounts. Please contact support if you are unsure.
func (r *DashboardGroup) Dashboards() *pulumi.ArrayOutput {
	return (*pulumi.ArrayOutput)(r.s.State["dashboards"])
}

// Description of the dashboard group.
func (r *DashboardGroup) Description() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["description"])
}

// Name of the dashboard group.
func (r *DashboardGroup) Name() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["name"])
}

// Team IDs to associate the dashboard group to.
func (r *DashboardGroup) Teams() *pulumi.ArrayOutput {
	return (*pulumi.ArrayOutput)(r.s.State["teams"])
}

// Input properties used for looking up and filtering DashboardGroup resources.
type DashboardGroupState struct {
	// [Mirrored dashboards](https://docs.signalfx.com/en/latest/dashboards/dashboard-mirrors.html) in this dashboard group. **Note:** This feature is not present in all accounts. Please contact support if you are unsure.
	Dashboards interface{}
	// Description of the dashboard group.
	Description interface{}
	// Name of the dashboard group.
	Name interface{}
	// Team IDs to associate the dashboard group to.
	Teams interface{}
}

// The set of arguments for constructing a DashboardGroup resource.
type DashboardGroupArgs struct {
	// [Mirrored dashboards](https://docs.signalfx.com/en/latest/dashboards/dashboard-mirrors.html) in this dashboard group. **Note:** This feature is not present in all accounts. Please contact support if you are unsure.
	Dashboards interface{}
	// Description of the dashboard group.
	Description interface{}
	// Name of the dashboard group.
	Name interface{}
	// Team IDs to associate the dashboard group to.
	Teams interface{}
}
