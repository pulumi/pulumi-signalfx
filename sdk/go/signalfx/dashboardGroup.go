// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package signalfx

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-signalfx/sdk/v6/go/signalfx/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// In the SignalFx web UI, a [dashboard group](https://developers.signalfx.com/dashboard_groups_reference.html) is a collection of dashboards.
//
// > **NOTE** Dashboard groups cannot be accessed directly, but just via a dashboard contained in them. This is the reason why make show won't show any of yours dashboard groups.
//
// > **NOTE** When you want to "Change or remove write permissions for a user other than yourself" regarding dashboard groups, use a session token of an administrator to authenticate the SignalFx provider. See [Operations that require a session token for an administrator](https://dev.splunk.com/observability/docs/administration/authtokens#Operations-that-require-a-session-token-for-an-administrator).
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-signalfx/sdk/v6/go/signalfx"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := signalfx.NewDashboardGroup(ctx, "mydashboardgroup0", &signalfx.DashboardGroupArgs{
//				Description: pulumi.String("Cool dashboard group"),
//				AuthorizedWriterTeams: pulumi.StringArray{
//					signalfx_team.Mycoolteam.Id,
//				},
//				AuthorizedWriterUsers: pulumi.StringArray{
//					pulumi.String("abc123"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// ### With Permissions
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-signalfx/sdk/v6/go/signalfx"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := signalfx.NewDashboardGroup(ctx, "mydashboardgroupWithpermissions", &signalfx.DashboardGroupArgs{
//				Description: pulumi.String("Cool dashboard group"),
//				Permissions: signalfx.DashboardGroupPermissionArray{
//					&signalfx.DashboardGroupPermissionArgs{
//						Actions: pulumi.StringArray{
//							pulumi.String("READ"),
//						},
//						PrincipalId:   pulumi.String("abc123"),
//						PrincipalType: pulumi.String("ORG"),
//					},
//					&signalfx.DashboardGroupPermissionArgs{
//						Actions: pulumi.StringArray{
//							pulumi.String("READ"),
//							pulumi.String("WRITE"),
//						},
//						PrincipalId:   pulumi.String("abc456"),
//						PrincipalType: pulumi.String("USER"),
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// ### With Mirrored Dashboards
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-signalfx/sdk/v6/go/signalfx"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := signalfx.NewDashboardGroup(ctx, "mydashboardgroupWithmirrors", &signalfx.DashboardGroupArgs{
//				Description: pulumi.String("Cool dashboard group"),
//				Dashboards: signalfx.DashboardGroupDashboardArray{
//					&signalfx.DashboardGroupDashboardArgs{
//						DashboardId:         pulumi.Any(signalfx_dashboard.Gc_dashboard.Id),
//						NameOverride:        pulumi.String("GC For My Service"),
//						DescriptionOverride: pulumi.String("Garbage Collection dashboard maintained by JVM team"),
//						FilterOverrides: signalfx.DashboardGroupDashboardFilterOverrideArray{
//							&signalfx.DashboardGroupDashboardFilterOverrideArgs{
//								Property: pulumi.String("service"),
//								Values: pulumi.StringArray{
//									pulumi.String("myservice"),
//								},
//								Negated: pulumi.Bool(false),
//							},
//						},
//						VariableOverrides: signalfx.DashboardGroupDashboardVariableOverrideArray{
//							&signalfx.DashboardGroupDashboardVariableOverrideArgs{
//								Property: pulumi.String("region"),
//								Values: pulumi.StringArray{
//									pulumi.String("us-west1"),
//								},
//								ValuesSuggesteds: pulumi.StringArray{
//									pulumi.String("us-west-1"),
//									pulumi.String("us-east-1"),
//								},
//							},
//						},
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
type DashboardGroup struct {
	pulumi.CustomResourceState

	// Team IDs that have write access to this dashboard group. Remember to use an admin's token if using this feature and to include that admin's team (or user id in `authorizedWriterTeams`). **Note:** Deprecated use `permissions` instead.
	//
	// Deprecated: Please use permissions field now
	AuthorizedWriterTeams pulumi.StringArrayOutput `pulumi:"authorizedWriterTeams"`
	// User IDs that have write access to this dashboard group. Remember to use an admin's token if using this feature and to include that admin's user id (or team id in `authorizedWriterTeams`). **Note:** Deprecated use `permissions` instead.
	//
	// Deprecated: Please use permissions field now
	AuthorizedWriterUsers pulumi.StringArrayOutput `pulumi:"authorizedWriterUsers"`
	// [Mirrored dashboards](https://docs.signalfx.com/en/latest/dashboards/dashboard-mirrors.html) in this dashboard group. **Note:** This feature is not present in all accounts. Please contact support if you are unsure.
	Dashboards DashboardGroupDashboardArrayOutput `pulumi:"dashboards"`
	// Description of the dashboard group.
	Description      pulumi.StringPtrOutput                   `pulumi:"description"`
	ImportQualifiers DashboardGroupImportQualifierArrayOutput `pulumi:"importQualifiers"`
	// Name of the dashboard group.
	Name pulumi.StringOutput `pulumi:"name"`
	// [Permissions](https://docs.splunk.com/Observability/infrastructure/terms-concepts/permissions.html) List of read and write permission configuration to specify which user, team, and organization can view and/or edit your dashboard group. **Note:** This feature is not present in all accounts. Please contact support if you are unsure.
	Permissions DashboardGroupPermissionArrayOutput `pulumi:"permissions"`
	// Team IDs to associate the dashboard group to.
	Teams pulumi.StringArrayOutput `pulumi:"teams"`
}

// NewDashboardGroup registers a new resource with the given unique name, arguments, and options.
func NewDashboardGroup(ctx *pulumi.Context,
	name string, args *DashboardGroupArgs, opts ...pulumi.ResourceOption) (*DashboardGroup, error) {
	if args == nil {
		args = &DashboardGroupArgs{}
	}

	opts = internal.PkgResourceDefaultOpts(opts)
	var resource DashboardGroup
	err := ctx.RegisterResource("signalfx:index/dashboardGroup:DashboardGroup", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetDashboardGroup gets an existing DashboardGroup resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetDashboardGroup(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *DashboardGroupState, opts ...pulumi.ResourceOption) (*DashboardGroup, error) {
	var resource DashboardGroup
	err := ctx.ReadResource("signalfx:index/dashboardGroup:DashboardGroup", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering DashboardGroup resources.
type dashboardGroupState struct {
	// Team IDs that have write access to this dashboard group. Remember to use an admin's token if using this feature and to include that admin's team (or user id in `authorizedWriterTeams`). **Note:** Deprecated use `permissions` instead.
	//
	// Deprecated: Please use permissions field now
	AuthorizedWriterTeams []string `pulumi:"authorizedWriterTeams"`
	// User IDs that have write access to this dashboard group. Remember to use an admin's token if using this feature and to include that admin's user id (or team id in `authorizedWriterTeams`). **Note:** Deprecated use `permissions` instead.
	//
	// Deprecated: Please use permissions field now
	AuthorizedWriterUsers []string `pulumi:"authorizedWriterUsers"`
	// [Mirrored dashboards](https://docs.signalfx.com/en/latest/dashboards/dashboard-mirrors.html) in this dashboard group. **Note:** This feature is not present in all accounts. Please contact support if you are unsure.
	Dashboards []DashboardGroupDashboard `pulumi:"dashboards"`
	// Description of the dashboard group.
	Description      *string                         `pulumi:"description"`
	ImportQualifiers []DashboardGroupImportQualifier `pulumi:"importQualifiers"`
	// Name of the dashboard group.
	Name *string `pulumi:"name"`
	// [Permissions](https://docs.splunk.com/Observability/infrastructure/terms-concepts/permissions.html) List of read and write permission configuration to specify which user, team, and organization can view and/or edit your dashboard group. **Note:** This feature is not present in all accounts. Please contact support if you are unsure.
	Permissions []DashboardGroupPermission `pulumi:"permissions"`
	// Team IDs to associate the dashboard group to.
	Teams []string `pulumi:"teams"`
}

type DashboardGroupState struct {
	// Team IDs that have write access to this dashboard group. Remember to use an admin's token if using this feature and to include that admin's team (or user id in `authorizedWriterTeams`). **Note:** Deprecated use `permissions` instead.
	//
	// Deprecated: Please use permissions field now
	AuthorizedWriterTeams pulumi.StringArrayInput
	// User IDs that have write access to this dashboard group. Remember to use an admin's token if using this feature and to include that admin's user id (or team id in `authorizedWriterTeams`). **Note:** Deprecated use `permissions` instead.
	//
	// Deprecated: Please use permissions field now
	AuthorizedWriterUsers pulumi.StringArrayInput
	// [Mirrored dashboards](https://docs.signalfx.com/en/latest/dashboards/dashboard-mirrors.html) in this dashboard group. **Note:** This feature is not present in all accounts. Please contact support if you are unsure.
	Dashboards DashboardGroupDashboardArrayInput
	// Description of the dashboard group.
	Description      pulumi.StringPtrInput
	ImportQualifiers DashboardGroupImportQualifierArrayInput
	// Name of the dashboard group.
	Name pulumi.StringPtrInput
	// [Permissions](https://docs.splunk.com/Observability/infrastructure/terms-concepts/permissions.html) List of read and write permission configuration to specify which user, team, and organization can view and/or edit your dashboard group. **Note:** This feature is not present in all accounts. Please contact support if you are unsure.
	Permissions DashboardGroupPermissionArrayInput
	// Team IDs to associate the dashboard group to.
	Teams pulumi.StringArrayInput
}

func (DashboardGroupState) ElementType() reflect.Type {
	return reflect.TypeOf((*dashboardGroupState)(nil)).Elem()
}

type dashboardGroupArgs struct {
	// Team IDs that have write access to this dashboard group. Remember to use an admin's token if using this feature and to include that admin's team (or user id in `authorizedWriterTeams`). **Note:** Deprecated use `permissions` instead.
	//
	// Deprecated: Please use permissions field now
	AuthorizedWriterTeams []string `pulumi:"authorizedWriterTeams"`
	// User IDs that have write access to this dashboard group. Remember to use an admin's token if using this feature and to include that admin's user id (or team id in `authorizedWriterTeams`). **Note:** Deprecated use `permissions` instead.
	//
	// Deprecated: Please use permissions field now
	AuthorizedWriterUsers []string `pulumi:"authorizedWriterUsers"`
	// [Mirrored dashboards](https://docs.signalfx.com/en/latest/dashboards/dashboard-mirrors.html) in this dashboard group. **Note:** This feature is not present in all accounts. Please contact support if you are unsure.
	Dashboards []DashboardGroupDashboard `pulumi:"dashboards"`
	// Description of the dashboard group.
	Description      *string                         `pulumi:"description"`
	ImportQualifiers []DashboardGroupImportQualifier `pulumi:"importQualifiers"`
	// Name of the dashboard group.
	Name *string `pulumi:"name"`
	// [Permissions](https://docs.splunk.com/Observability/infrastructure/terms-concepts/permissions.html) List of read and write permission configuration to specify which user, team, and organization can view and/or edit your dashboard group. **Note:** This feature is not present in all accounts. Please contact support if you are unsure.
	Permissions []DashboardGroupPermission `pulumi:"permissions"`
	// Team IDs to associate the dashboard group to.
	Teams []string `pulumi:"teams"`
}

// The set of arguments for constructing a DashboardGroup resource.
type DashboardGroupArgs struct {
	// Team IDs that have write access to this dashboard group. Remember to use an admin's token if using this feature and to include that admin's team (or user id in `authorizedWriterTeams`). **Note:** Deprecated use `permissions` instead.
	//
	// Deprecated: Please use permissions field now
	AuthorizedWriterTeams pulumi.StringArrayInput
	// User IDs that have write access to this dashboard group. Remember to use an admin's token if using this feature and to include that admin's user id (or team id in `authorizedWriterTeams`). **Note:** Deprecated use `permissions` instead.
	//
	// Deprecated: Please use permissions field now
	AuthorizedWriterUsers pulumi.StringArrayInput
	// [Mirrored dashboards](https://docs.signalfx.com/en/latest/dashboards/dashboard-mirrors.html) in this dashboard group. **Note:** This feature is not present in all accounts. Please contact support if you are unsure.
	Dashboards DashboardGroupDashboardArrayInput
	// Description of the dashboard group.
	Description      pulumi.StringPtrInput
	ImportQualifiers DashboardGroupImportQualifierArrayInput
	// Name of the dashboard group.
	Name pulumi.StringPtrInput
	// [Permissions](https://docs.splunk.com/Observability/infrastructure/terms-concepts/permissions.html) List of read and write permission configuration to specify which user, team, and organization can view and/or edit your dashboard group. **Note:** This feature is not present in all accounts. Please contact support if you are unsure.
	Permissions DashboardGroupPermissionArrayInput
	// Team IDs to associate the dashboard group to.
	Teams pulumi.StringArrayInput
}

func (DashboardGroupArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*dashboardGroupArgs)(nil)).Elem()
}

type DashboardGroupInput interface {
	pulumi.Input

	ToDashboardGroupOutput() DashboardGroupOutput
	ToDashboardGroupOutputWithContext(ctx context.Context) DashboardGroupOutput
}

func (*DashboardGroup) ElementType() reflect.Type {
	return reflect.TypeOf((**DashboardGroup)(nil)).Elem()
}

func (i *DashboardGroup) ToDashboardGroupOutput() DashboardGroupOutput {
	return i.ToDashboardGroupOutputWithContext(context.Background())
}

func (i *DashboardGroup) ToDashboardGroupOutputWithContext(ctx context.Context) DashboardGroupOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardGroupOutput)
}

// DashboardGroupArrayInput is an input type that accepts DashboardGroupArray and DashboardGroupArrayOutput values.
// You can construct a concrete instance of `DashboardGroupArrayInput` via:
//
//	DashboardGroupArray{ DashboardGroupArgs{...} }
type DashboardGroupArrayInput interface {
	pulumi.Input

	ToDashboardGroupArrayOutput() DashboardGroupArrayOutput
	ToDashboardGroupArrayOutputWithContext(context.Context) DashboardGroupArrayOutput
}

type DashboardGroupArray []DashboardGroupInput

func (DashboardGroupArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*DashboardGroup)(nil)).Elem()
}

func (i DashboardGroupArray) ToDashboardGroupArrayOutput() DashboardGroupArrayOutput {
	return i.ToDashboardGroupArrayOutputWithContext(context.Background())
}

func (i DashboardGroupArray) ToDashboardGroupArrayOutputWithContext(ctx context.Context) DashboardGroupArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardGroupArrayOutput)
}

// DashboardGroupMapInput is an input type that accepts DashboardGroupMap and DashboardGroupMapOutput values.
// You can construct a concrete instance of `DashboardGroupMapInput` via:
//
//	DashboardGroupMap{ "key": DashboardGroupArgs{...} }
type DashboardGroupMapInput interface {
	pulumi.Input

	ToDashboardGroupMapOutput() DashboardGroupMapOutput
	ToDashboardGroupMapOutputWithContext(context.Context) DashboardGroupMapOutput
}

type DashboardGroupMap map[string]DashboardGroupInput

func (DashboardGroupMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*DashboardGroup)(nil)).Elem()
}

func (i DashboardGroupMap) ToDashboardGroupMapOutput() DashboardGroupMapOutput {
	return i.ToDashboardGroupMapOutputWithContext(context.Background())
}

func (i DashboardGroupMap) ToDashboardGroupMapOutputWithContext(ctx context.Context) DashboardGroupMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardGroupMapOutput)
}

type DashboardGroupOutput struct{ *pulumi.OutputState }

func (DashboardGroupOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DashboardGroup)(nil)).Elem()
}

func (o DashboardGroupOutput) ToDashboardGroupOutput() DashboardGroupOutput {
	return o
}

func (o DashboardGroupOutput) ToDashboardGroupOutputWithContext(ctx context.Context) DashboardGroupOutput {
	return o
}

// Team IDs that have write access to this dashboard group. Remember to use an admin's token if using this feature and to include that admin's team (or user id in `authorizedWriterTeams`). **Note:** Deprecated use `permissions` instead.
//
// Deprecated: Please use permissions field now
func (o DashboardGroupOutput) AuthorizedWriterTeams() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *DashboardGroup) pulumi.StringArrayOutput { return v.AuthorizedWriterTeams }).(pulumi.StringArrayOutput)
}

// User IDs that have write access to this dashboard group. Remember to use an admin's token if using this feature and to include that admin's user id (or team id in `authorizedWriterTeams`). **Note:** Deprecated use `permissions` instead.
//
// Deprecated: Please use permissions field now
func (o DashboardGroupOutput) AuthorizedWriterUsers() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *DashboardGroup) pulumi.StringArrayOutput { return v.AuthorizedWriterUsers }).(pulumi.StringArrayOutput)
}

// [Mirrored dashboards](https://docs.signalfx.com/en/latest/dashboards/dashboard-mirrors.html) in this dashboard group. **Note:** This feature is not present in all accounts. Please contact support if you are unsure.
func (o DashboardGroupOutput) Dashboards() DashboardGroupDashboardArrayOutput {
	return o.ApplyT(func(v *DashboardGroup) DashboardGroupDashboardArrayOutput { return v.Dashboards }).(DashboardGroupDashboardArrayOutput)
}

// Description of the dashboard group.
func (o DashboardGroupOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DashboardGroup) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

func (o DashboardGroupOutput) ImportQualifiers() DashboardGroupImportQualifierArrayOutput {
	return o.ApplyT(func(v *DashboardGroup) DashboardGroupImportQualifierArrayOutput { return v.ImportQualifiers }).(DashboardGroupImportQualifierArrayOutput)
}

// Name of the dashboard group.
func (o DashboardGroupOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *DashboardGroup) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// [Permissions](https://docs.splunk.com/Observability/infrastructure/terms-concepts/permissions.html) List of read and write permission configuration to specify which user, team, and organization can view and/or edit your dashboard group. **Note:** This feature is not present in all accounts. Please contact support if you are unsure.
func (o DashboardGroupOutput) Permissions() DashboardGroupPermissionArrayOutput {
	return o.ApplyT(func(v *DashboardGroup) DashboardGroupPermissionArrayOutput { return v.Permissions }).(DashboardGroupPermissionArrayOutput)
}

// Team IDs to associate the dashboard group to.
func (o DashboardGroupOutput) Teams() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *DashboardGroup) pulumi.StringArrayOutput { return v.Teams }).(pulumi.StringArrayOutput)
}

type DashboardGroupArrayOutput struct{ *pulumi.OutputState }

func (DashboardGroupArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*DashboardGroup)(nil)).Elem()
}

func (o DashboardGroupArrayOutput) ToDashboardGroupArrayOutput() DashboardGroupArrayOutput {
	return o
}

func (o DashboardGroupArrayOutput) ToDashboardGroupArrayOutputWithContext(ctx context.Context) DashboardGroupArrayOutput {
	return o
}

func (o DashboardGroupArrayOutput) Index(i pulumi.IntInput) DashboardGroupOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *DashboardGroup {
		return vs[0].([]*DashboardGroup)[vs[1].(int)]
	}).(DashboardGroupOutput)
}

type DashboardGroupMapOutput struct{ *pulumi.OutputState }

func (DashboardGroupMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*DashboardGroup)(nil)).Elem()
}

func (o DashboardGroupMapOutput) ToDashboardGroupMapOutput() DashboardGroupMapOutput {
	return o
}

func (o DashboardGroupMapOutput) ToDashboardGroupMapOutputWithContext(ctx context.Context) DashboardGroupMapOutput {
	return o
}

func (o DashboardGroupMapOutput) MapIndex(k pulumi.StringInput) DashboardGroupOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *DashboardGroup {
		return vs[0].(map[string]*DashboardGroup)[vs[1].(string)]
	}).(DashboardGroupOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*DashboardGroupInput)(nil)).Elem(), &DashboardGroup{})
	pulumi.RegisterInputType(reflect.TypeOf((*DashboardGroupArrayInput)(nil)).Elem(), DashboardGroupArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*DashboardGroupMapInput)(nil)).Elem(), DashboardGroupMap{})
	pulumi.RegisterOutputType(DashboardGroupOutput{})
	pulumi.RegisterOutputType(DashboardGroupArrayOutput{})
	pulumi.RegisterOutputType(DashboardGroupMapOutput{})
}
