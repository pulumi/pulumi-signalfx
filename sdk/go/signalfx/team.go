// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package signalfx

import (
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// Handles management of SignalFx teams.
// 
// You can configure [team notification policies](https://docs.signalfx.com/en/latest/managing/teams/team-notifications.html) using this resource and the various `notifications_*` properties.
//
// > This content is derived from https://github.com/terraform-providers/terraform-provider-signalfx/blob/master/website/docs/r/team.html.markdown.
type Team struct {
	s *pulumi.ResourceState
}

// NewTeam registers a new resource with the given unique name, arguments, and options.
func NewTeam(ctx *pulumi.Context,
	name string, args *TeamArgs, opts ...pulumi.ResourceOpt) (*Team, error) {
	inputs := make(map[string]interface{})
	if args == nil {
		inputs["description"] = nil
		inputs["members"] = nil
		inputs["name"] = nil
		inputs["notificationsCriticals"] = nil
		inputs["notificationsDefaults"] = nil
		inputs["notificationsInfos"] = nil
		inputs["notificationsMajors"] = nil
		inputs["notificationsMinors"] = nil
		inputs["notificationsWarnings"] = nil
	} else {
		inputs["description"] = args.Description
		inputs["members"] = args.Members
		inputs["name"] = args.Name
		inputs["notificationsCriticals"] = args.NotificationsCriticals
		inputs["notificationsDefaults"] = args.NotificationsDefaults
		inputs["notificationsInfos"] = args.NotificationsInfos
		inputs["notificationsMajors"] = args.NotificationsMajors
		inputs["notificationsMinors"] = args.NotificationsMinors
		inputs["notificationsWarnings"] = args.NotificationsWarnings
	}
	inputs["url"] = nil
	s, err := ctx.RegisterResource("signalfx:index/team:Team", name, true, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &Team{s: s}, nil
}

// GetTeam gets an existing Team resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetTeam(ctx *pulumi.Context,
	name string, id pulumi.ID, state *TeamState, opts ...pulumi.ResourceOpt) (*Team, error) {
	inputs := make(map[string]interface{})
	if state != nil {
		inputs["description"] = state.Description
		inputs["members"] = state.Members
		inputs["name"] = state.Name
		inputs["notificationsCriticals"] = state.NotificationsCriticals
		inputs["notificationsDefaults"] = state.NotificationsDefaults
		inputs["notificationsInfos"] = state.NotificationsInfos
		inputs["notificationsMajors"] = state.NotificationsMajors
		inputs["notificationsMinors"] = state.NotificationsMinors
		inputs["notificationsWarnings"] = state.NotificationsWarnings
		inputs["url"] = state.Url
	}
	s, err := ctx.ReadResource("signalfx:index/team:Team", name, id, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &Team{s: s}, nil
}

// URN is this resource's unique name assigned by Pulumi.
func (r *Team) URN() *pulumi.URNOutput {
	return r.s.URN()
}

// ID is this resource's unique identifier assigned by its provider.
func (r *Team) ID() *pulumi.IDOutput {
	return r.s.ID()
}

// Description of the team.
func (r *Team) Description() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["description"])
}

// List of user IDs to include in the team.
func (r *Team) Members() *pulumi.ArrayOutput {
	return (*pulumi.ArrayOutput)(r.s.State["members"])
}

// Name of the team.
func (r *Team) Name() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["name"])
}

// Where to send notifications for critical alerts
func (r *Team) NotificationsCriticals() *pulumi.ArrayOutput {
	return (*pulumi.ArrayOutput)(r.s.State["notificationsCriticals"])
}

// Where to send notifications for default alerts
func (r *Team) NotificationsDefaults() *pulumi.ArrayOutput {
	return (*pulumi.ArrayOutput)(r.s.State["notificationsDefaults"])
}

// Where to send notifications for info alerts
func (r *Team) NotificationsInfos() *pulumi.ArrayOutput {
	return (*pulumi.ArrayOutput)(r.s.State["notificationsInfos"])
}

// Where to send notifications for major alerts
func (r *Team) NotificationsMajors() *pulumi.ArrayOutput {
	return (*pulumi.ArrayOutput)(r.s.State["notificationsMajors"])
}

// Where to send notifications for minor alerts
func (r *Team) NotificationsMinors() *pulumi.ArrayOutput {
	return (*pulumi.ArrayOutput)(r.s.State["notificationsMinors"])
}

// Where to send notifications for warning alerts
func (r *Team) NotificationsWarnings() *pulumi.ArrayOutput {
	return (*pulumi.ArrayOutput)(r.s.State["notificationsWarnings"])
}

// URL of the team
func (r *Team) Url() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["url"])
}

// Input properties used for looking up and filtering Team resources.
type TeamState struct {
	// Description of the team.
	Description interface{}
	// List of user IDs to include in the team.
	Members interface{}
	// Name of the team.
	Name interface{}
	// Where to send notifications for critical alerts
	NotificationsCriticals interface{}
	// Where to send notifications for default alerts
	NotificationsDefaults interface{}
	// Where to send notifications for info alerts
	NotificationsInfos interface{}
	// Where to send notifications for major alerts
	NotificationsMajors interface{}
	// Where to send notifications for minor alerts
	NotificationsMinors interface{}
	// Where to send notifications for warning alerts
	NotificationsWarnings interface{}
	// URL of the team
	Url interface{}
}

// The set of arguments for constructing a Team resource.
type TeamArgs struct {
	// Description of the team.
	Description interface{}
	// List of user IDs to include in the team.
	Members interface{}
	// Name of the team.
	Name interface{}
	// Where to send notifications for critical alerts
	NotificationsCriticals interface{}
	// Where to send notifications for default alerts
	NotificationsDefaults interface{}
	// Where to send notifications for info alerts
	NotificationsInfos interface{}
	// Where to send notifications for major alerts
	NotificationsMajors interface{}
	// Where to send notifications for minor alerts
	NotificationsMinors interface{}
	// Where to send notifications for warning alerts
	NotificationsWarnings interface{}
}
