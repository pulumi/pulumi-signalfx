// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package signalfx

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-signalfx/sdk/v7/go/signalfx/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Handles management of Splunk Observability Cloud teams.
//
// You can configure [team notification policies](https://docs.splunk.com/observability/en/admin/user-management/teams/team-notifications.html) using this resource and the various `notifications_*` properties.
//
// > **NOTE** When managing teams, use a session token of an administrator to authenticate the Splunk Observability Cloud provider. See [Operations that require a session token for an administrator](https://dev.splunk.com/observability/docs/administration/authtokens#Operations-that-require-a-session-token-for-an-administrator).
//
// ## Example
//
// ## Arguments
//
// The following arguments are supported in the resource block:
//
// * `name` - (Required) Name of the team.
// * `description` - (Optional) Description of the team.
// * `members` - (Optional) List of user IDs to include in the team.
// * `notificationsCritical` - (Optional) Where to send notifications for critical alerts
// * `notificationsDefault` - (Optional) Where to send notifications for default alerts
// * `notificationsInfo` - (Optional) Where to send notifications for info alerts
// * `notificationsMajor` - (Optional) Where to send notifications for major alerts
// * `notificationsMinor` - (Optional) Where to send notifications for minor alerts
// * `notificationsWarning` - (Optional) Where to send notifications for warning alerts
//
// ## Attributes
//
// In a addition to all arguments above, the following attributes are exported:
//
// * `id` - The ID of the team.
// * `url` - The URL of the team.
type Team struct {
	pulumi.CustomResourceState

	// Description of the team (Optional)
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// Members of team
	Members pulumi.StringArrayOutput `pulumi:"members"`
	// Name of the team
	Name pulumi.StringOutput `pulumi:"name"`
	// List of notification destinations to use for the critical alerts category.
	NotificationsCriticals pulumi.StringArrayOutput `pulumi:"notificationsCriticals"`
	// List of notification destinations to use for the default alerts category.
	NotificationsDefaults pulumi.StringArrayOutput `pulumi:"notificationsDefaults"`
	// List of notification destinations to use for the info alerts category.
	NotificationsInfos pulumi.StringArrayOutput `pulumi:"notificationsInfos"`
	// List of notification destinations to use for the major alerts category.
	NotificationsMajors pulumi.StringArrayOutput `pulumi:"notificationsMajors"`
	// List of notification destinations to use for the minor alerts category.
	NotificationsMinors pulumi.StringArrayOutput `pulumi:"notificationsMinors"`
	// List of notification destinations to use for the warning alerts category.
	NotificationsWarnings pulumi.StringArrayOutput `pulumi:"notificationsWarnings"`
	// URL of the team
	Url pulumi.StringOutput `pulumi:"url"`
}

// NewTeam registers a new resource with the given unique name, arguments, and options.
func NewTeam(ctx *pulumi.Context,
	name string, args *TeamArgs, opts ...pulumi.ResourceOption) (*Team, error) {
	if args == nil {
		args = &TeamArgs{}
	}

	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Team
	err := ctx.RegisterResource("signalfx:index/team:Team", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetTeam gets an existing Team resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetTeam(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *TeamState, opts ...pulumi.ResourceOption) (*Team, error) {
	var resource Team
	err := ctx.ReadResource("signalfx:index/team:Team", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Team resources.
type teamState struct {
	// Description of the team (Optional)
	Description *string `pulumi:"description"`
	// Members of team
	Members []string `pulumi:"members"`
	// Name of the team
	Name *string `pulumi:"name"`
	// List of notification destinations to use for the critical alerts category.
	NotificationsCriticals []string `pulumi:"notificationsCriticals"`
	// List of notification destinations to use for the default alerts category.
	NotificationsDefaults []string `pulumi:"notificationsDefaults"`
	// List of notification destinations to use for the info alerts category.
	NotificationsInfos []string `pulumi:"notificationsInfos"`
	// List of notification destinations to use for the major alerts category.
	NotificationsMajors []string `pulumi:"notificationsMajors"`
	// List of notification destinations to use for the minor alerts category.
	NotificationsMinors []string `pulumi:"notificationsMinors"`
	// List of notification destinations to use for the warning alerts category.
	NotificationsWarnings []string `pulumi:"notificationsWarnings"`
	// URL of the team
	Url *string `pulumi:"url"`
}

type TeamState struct {
	// Description of the team (Optional)
	Description pulumi.StringPtrInput
	// Members of team
	Members pulumi.StringArrayInput
	// Name of the team
	Name pulumi.StringPtrInput
	// List of notification destinations to use for the critical alerts category.
	NotificationsCriticals pulumi.StringArrayInput
	// List of notification destinations to use for the default alerts category.
	NotificationsDefaults pulumi.StringArrayInput
	// List of notification destinations to use for the info alerts category.
	NotificationsInfos pulumi.StringArrayInput
	// List of notification destinations to use for the major alerts category.
	NotificationsMajors pulumi.StringArrayInput
	// List of notification destinations to use for the minor alerts category.
	NotificationsMinors pulumi.StringArrayInput
	// List of notification destinations to use for the warning alerts category.
	NotificationsWarnings pulumi.StringArrayInput
	// URL of the team
	Url pulumi.StringPtrInput
}

func (TeamState) ElementType() reflect.Type {
	return reflect.TypeOf((*teamState)(nil)).Elem()
}

type teamArgs struct {
	// Description of the team (Optional)
	Description *string `pulumi:"description"`
	// Members of team
	Members []string `pulumi:"members"`
	// Name of the team
	Name *string `pulumi:"name"`
	// List of notification destinations to use for the critical alerts category.
	NotificationsCriticals []string `pulumi:"notificationsCriticals"`
	// List of notification destinations to use for the default alerts category.
	NotificationsDefaults []string `pulumi:"notificationsDefaults"`
	// List of notification destinations to use for the info alerts category.
	NotificationsInfos []string `pulumi:"notificationsInfos"`
	// List of notification destinations to use for the major alerts category.
	NotificationsMajors []string `pulumi:"notificationsMajors"`
	// List of notification destinations to use for the minor alerts category.
	NotificationsMinors []string `pulumi:"notificationsMinors"`
	// List of notification destinations to use for the warning alerts category.
	NotificationsWarnings []string `pulumi:"notificationsWarnings"`
}

// The set of arguments for constructing a Team resource.
type TeamArgs struct {
	// Description of the team (Optional)
	Description pulumi.StringPtrInput
	// Members of team
	Members pulumi.StringArrayInput
	// Name of the team
	Name pulumi.StringPtrInput
	// List of notification destinations to use for the critical alerts category.
	NotificationsCriticals pulumi.StringArrayInput
	// List of notification destinations to use for the default alerts category.
	NotificationsDefaults pulumi.StringArrayInput
	// List of notification destinations to use for the info alerts category.
	NotificationsInfos pulumi.StringArrayInput
	// List of notification destinations to use for the major alerts category.
	NotificationsMajors pulumi.StringArrayInput
	// List of notification destinations to use for the minor alerts category.
	NotificationsMinors pulumi.StringArrayInput
	// List of notification destinations to use for the warning alerts category.
	NotificationsWarnings pulumi.StringArrayInput
}

func (TeamArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*teamArgs)(nil)).Elem()
}

type TeamInput interface {
	pulumi.Input

	ToTeamOutput() TeamOutput
	ToTeamOutputWithContext(ctx context.Context) TeamOutput
}

func (*Team) ElementType() reflect.Type {
	return reflect.TypeOf((**Team)(nil)).Elem()
}

func (i *Team) ToTeamOutput() TeamOutput {
	return i.ToTeamOutputWithContext(context.Background())
}

func (i *Team) ToTeamOutputWithContext(ctx context.Context) TeamOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TeamOutput)
}

// TeamArrayInput is an input type that accepts TeamArray and TeamArrayOutput values.
// You can construct a concrete instance of `TeamArrayInput` via:
//
//	TeamArray{ TeamArgs{...} }
type TeamArrayInput interface {
	pulumi.Input

	ToTeamArrayOutput() TeamArrayOutput
	ToTeamArrayOutputWithContext(context.Context) TeamArrayOutput
}

type TeamArray []TeamInput

func (TeamArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Team)(nil)).Elem()
}

func (i TeamArray) ToTeamArrayOutput() TeamArrayOutput {
	return i.ToTeamArrayOutputWithContext(context.Background())
}

func (i TeamArray) ToTeamArrayOutputWithContext(ctx context.Context) TeamArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TeamArrayOutput)
}

// TeamMapInput is an input type that accepts TeamMap and TeamMapOutput values.
// You can construct a concrete instance of `TeamMapInput` via:
//
//	TeamMap{ "key": TeamArgs{...} }
type TeamMapInput interface {
	pulumi.Input

	ToTeamMapOutput() TeamMapOutput
	ToTeamMapOutputWithContext(context.Context) TeamMapOutput
}

type TeamMap map[string]TeamInput

func (TeamMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Team)(nil)).Elem()
}

func (i TeamMap) ToTeamMapOutput() TeamMapOutput {
	return i.ToTeamMapOutputWithContext(context.Background())
}

func (i TeamMap) ToTeamMapOutputWithContext(ctx context.Context) TeamMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TeamMapOutput)
}

type TeamOutput struct{ *pulumi.OutputState }

func (TeamOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Team)(nil)).Elem()
}

func (o TeamOutput) ToTeamOutput() TeamOutput {
	return o
}

func (o TeamOutput) ToTeamOutputWithContext(ctx context.Context) TeamOutput {
	return o
}

// Description of the team (Optional)
func (o TeamOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Team) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// Members of team
func (o TeamOutput) Members() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Team) pulumi.StringArrayOutput { return v.Members }).(pulumi.StringArrayOutput)
}

// Name of the team
func (o TeamOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Team) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// List of notification destinations to use for the critical alerts category.
func (o TeamOutput) NotificationsCriticals() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Team) pulumi.StringArrayOutput { return v.NotificationsCriticals }).(pulumi.StringArrayOutput)
}

// List of notification destinations to use for the default alerts category.
func (o TeamOutput) NotificationsDefaults() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Team) pulumi.StringArrayOutput { return v.NotificationsDefaults }).(pulumi.StringArrayOutput)
}

// List of notification destinations to use for the info alerts category.
func (o TeamOutput) NotificationsInfos() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Team) pulumi.StringArrayOutput { return v.NotificationsInfos }).(pulumi.StringArrayOutput)
}

// List of notification destinations to use for the major alerts category.
func (o TeamOutput) NotificationsMajors() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Team) pulumi.StringArrayOutput { return v.NotificationsMajors }).(pulumi.StringArrayOutput)
}

// List of notification destinations to use for the minor alerts category.
func (o TeamOutput) NotificationsMinors() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Team) pulumi.StringArrayOutput { return v.NotificationsMinors }).(pulumi.StringArrayOutput)
}

// List of notification destinations to use for the warning alerts category.
func (o TeamOutput) NotificationsWarnings() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Team) pulumi.StringArrayOutput { return v.NotificationsWarnings }).(pulumi.StringArrayOutput)
}

// URL of the team
func (o TeamOutput) Url() pulumi.StringOutput {
	return o.ApplyT(func(v *Team) pulumi.StringOutput { return v.Url }).(pulumi.StringOutput)
}

type TeamArrayOutput struct{ *pulumi.OutputState }

func (TeamArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Team)(nil)).Elem()
}

func (o TeamArrayOutput) ToTeamArrayOutput() TeamArrayOutput {
	return o
}

func (o TeamArrayOutput) ToTeamArrayOutputWithContext(ctx context.Context) TeamArrayOutput {
	return o
}

func (o TeamArrayOutput) Index(i pulumi.IntInput) TeamOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Team {
		return vs[0].([]*Team)[vs[1].(int)]
	}).(TeamOutput)
}

type TeamMapOutput struct{ *pulumi.OutputState }

func (TeamMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Team)(nil)).Elem()
}

func (o TeamMapOutput) ToTeamMapOutput() TeamMapOutput {
	return o
}

func (o TeamMapOutput) ToTeamMapOutputWithContext(ctx context.Context) TeamMapOutput {
	return o
}

func (o TeamMapOutput) MapIndex(k pulumi.StringInput) TeamOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Team {
		return vs[0].(map[string]*Team)[vs[1].(string)]
	}).(TeamOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*TeamInput)(nil)).Elem(), &Team{})
	pulumi.RegisterInputType(reflect.TypeOf((*TeamArrayInput)(nil)).Elem(), TeamArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*TeamMapInput)(nil)).Elem(), TeamMap{})
	pulumi.RegisterOutputType(TeamOutput{})
	pulumi.RegisterOutputType(TeamArrayOutput{})
	pulumi.RegisterOutputType(TeamMapOutput{})
}
