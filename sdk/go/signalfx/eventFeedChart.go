// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package signalfx

import (
	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// Displays a listing of events as a widget in a dashboard.
//
// > This content is derived from https://github.com/terraform-providers/terraform-provider-signalfx/blob/master/website/docs/r/event_feed_chart.html.markdown.
type EventFeedChart struct {
	s *pulumi.ResourceState
}

// NewEventFeedChart registers a new resource with the given unique name, arguments, and options.
func NewEventFeedChart(ctx *pulumi.Context,
	name string, args *EventFeedChartArgs, opts ...pulumi.ResourceOpt) (*EventFeedChart, error) {
	if args == nil || args.ProgramText == nil {
		return nil, errors.New("missing required argument 'ProgramText'")
	}
	inputs := make(map[string]interface{})
	if args == nil {
		inputs["description"] = nil
		inputs["endTime"] = nil
		inputs["name"] = nil
		inputs["programText"] = nil
		inputs["startTime"] = nil
		inputs["timeRange"] = nil
	} else {
		inputs["description"] = args.Description
		inputs["endTime"] = args.EndTime
		inputs["name"] = args.Name
		inputs["programText"] = args.ProgramText
		inputs["startTime"] = args.StartTime
		inputs["timeRange"] = args.TimeRange
	}
	inputs["url"] = nil
	s, err := ctx.RegisterResource("signalfx:index/eventFeedChart:EventFeedChart", name, true, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &EventFeedChart{s: s}, nil
}

// GetEventFeedChart gets an existing EventFeedChart resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetEventFeedChart(ctx *pulumi.Context,
	name string, id pulumi.ID, state *EventFeedChartState, opts ...pulumi.ResourceOpt) (*EventFeedChart, error) {
	inputs := make(map[string]interface{})
	if state != nil {
		inputs["description"] = state.Description
		inputs["endTime"] = state.EndTime
		inputs["name"] = state.Name
		inputs["programText"] = state.ProgramText
		inputs["startTime"] = state.StartTime
		inputs["timeRange"] = state.TimeRange
		inputs["url"] = state.Url
	}
	s, err := ctx.ReadResource("signalfx:index/eventFeedChart:EventFeedChart", name, id, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &EventFeedChart{s: s}, nil
}

// URN is this resource's unique name assigned by Pulumi.
func (r *EventFeedChart) URN() pulumi.URNOutput {
	return r.s.URN()
}

// ID is this resource's unique identifier assigned by its provider.
func (r *EventFeedChart) ID() pulumi.IDOutput {
	return r.s.ID()
}

// Description of the text note.
func (r *EventFeedChart) Description() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["description"])
}

// Seconds since epoch. Used for visualization. Conflicts with `timeRange`.
func (r *EventFeedChart) EndTime() pulumi.IntOutput {
	return (pulumi.IntOutput)(r.s.State["endTime"])
}

// Name of the text note.
func (r *EventFeedChart) Name() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["name"])
}

// Signalflow program text for the chart. More info at <https://developers.signalfx.com/docs/signalflow-overview>.
func (r *EventFeedChart) ProgramText() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["programText"])
}

// Seconds since epoch. Used for visualization. Conflicts with `timeRange`.
func (r *EventFeedChart) StartTime() pulumi.IntOutput {
	return (pulumi.IntOutput)(r.s.State["startTime"])
}

// From when to display data. SignalFx time syntax (e.g. `"-5m"`, `"-1h"`). Conflicts with `startTime` and `endTime`.
func (r *EventFeedChart) TimeRange() pulumi.IntOutput {
	return (pulumi.IntOutput)(r.s.State["timeRange"])
}

// URL of the chart
func (r *EventFeedChart) Url() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["url"])
}

// Input properties used for looking up and filtering EventFeedChart resources.
type EventFeedChartState struct {
	// Description of the text note.
	Description interface{}
	// Seconds since epoch. Used for visualization. Conflicts with `timeRange`.
	EndTime interface{}
	// Name of the text note.
	Name interface{}
	// Signalflow program text for the chart. More info at <https://developers.signalfx.com/docs/signalflow-overview>.
	ProgramText interface{}
	// Seconds since epoch. Used for visualization. Conflicts with `timeRange`.
	StartTime interface{}
	// From when to display data. SignalFx time syntax (e.g. `"-5m"`, `"-1h"`). Conflicts with `startTime` and `endTime`.
	TimeRange interface{}
	// URL of the chart
	Url interface{}
}

// The set of arguments for constructing a EventFeedChart resource.
type EventFeedChartArgs struct {
	// Description of the text note.
	Description interface{}
	// Seconds since epoch. Used for visualization. Conflicts with `timeRange`.
	EndTime interface{}
	// Name of the text note.
	Name interface{}
	// Signalflow program text for the chart. More info at <https://developers.signalfx.com/docs/signalflow-overview>.
	ProgramText interface{}
	// Seconds since epoch. Used for visualization. Conflicts with `timeRange`.
	StartTime interface{}
	// From when to display data. SignalFx time syntax (e.g. `"-5m"`, `"-1h"`). Conflicts with `startTime` and `endTime`.
	TimeRange interface{}
}
