// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package signalfx

import (
	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// > This content is derived from https://github.com/terraform-providers/terraform-provider-signalfx/blob/master/website/docs/r/dashboard.html.markdown.
type Dashboard struct {
	s *pulumi.ResourceState
}

// NewDashboard registers a new resource with the given unique name, arguments, and options.
func NewDashboard(ctx *pulumi.Context,
	name string, args *DashboardArgs, opts ...pulumi.ResourceOpt) (*Dashboard, error) {
	if args == nil || args.DashboardGroup == nil {
		return nil, errors.New("missing required argument 'DashboardGroup'")
	}
	inputs := make(map[string]interface{})
	if args == nil {
		inputs["authorizedWriterTeams"] = nil
		inputs["authorizedWriterUsers"] = nil
		inputs["charts"] = nil
		inputs["chartsResolution"] = nil
		inputs["columns"] = nil
		inputs["dashboardGroup"] = nil
		inputs["description"] = nil
		inputs["endTime"] = nil
		inputs["eventOverlays"] = nil
		inputs["filters"] = nil
		inputs["grids"] = nil
		inputs["name"] = nil
		inputs["selectedEventOverlays"] = nil
		inputs["startTime"] = nil
		inputs["timeRange"] = nil
		inputs["variables"] = nil
	} else {
		inputs["authorizedWriterTeams"] = args.AuthorizedWriterTeams
		inputs["authorizedWriterUsers"] = args.AuthorizedWriterUsers
		inputs["charts"] = args.Charts
		inputs["chartsResolution"] = args.ChartsResolution
		inputs["columns"] = args.Columns
		inputs["dashboardGroup"] = args.DashboardGroup
		inputs["description"] = args.Description
		inputs["endTime"] = args.EndTime
		inputs["eventOverlays"] = args.EventOverlays
		inputs["filters"] = args.Filters
		inputs["grids"] = args.Grids
		inputs["name"] = args.Name
		inputs["selectedEventOverlays"] = args.SelectedEventOverlays
		inputs["startTime"] = args.StartTime
		inputs["timeRange"] = args.TimeRange
		inputs["variables"] = args.Variables
	}
	inputs["url"] = nil
	s, err := ctx.RegisterResource("signalfx:index/dashboard:Dashboard", name, true, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &Dashboard{s: s}, nil
}

// GetDashboard gets an existing Dashboard resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetDashboard(ctx *pulumi.Context,
	name string, id pulumi.ID, state *DashboardState, opts ...pulumi.ResourceOpt) (*Dashboard, error) {
	inputs := make(map[string]interface{})
	if state != nil {
		inputs["authorizedWriterTeams"] = state.AuthorizedWriterTeams
		inputs["authorizedWriterUsers"] = state.AuthorizedWriterUsers
		inputs["charts"] = state.Charts
		inputs["chartsResolution"] = state.ChartsResolution
		inputs["columns"] = state.Columns
		inputs["dashboardGroup"] = state.DashboardGroup
		inputs["description"] = state.Description
		inputs["endTime"] = state.EndTime
		inputs["eventOverlays"] = state.EventOverlays
		inputs["filters"] = state.Filters
		inputs["grids"] = state.Grids
		inputs["name"] = state.Name
		inputs["selectedEventOverlays"] = state.SelectedEventOverlays
		inputs["startTime"] = state.StartTime
		inputs["timeRange"] = state.TimeRange
		inputs["url"] = state.Url
		inputs["variables"] = state.Variables
	}
	s, err := ctx.ReadResource("signalfx:index/dashboard:Dashboard", name, id, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &Dashboard{s: s}, nil
}

// URN is this resource's unique name assigned by Pulumi.
func (r *Dashboard) URN() pulumi.URNOutput {
	return r.s.URN()
}

// ID is this resource's unique identifier assigned by its provider.
func (r *Dashboard) ID() pulumi.IDOutput {
	return r.s.ID()
}

// Team IDs that have write access to this dashboard
func (r *Dashboard) AuthorizedWriterTeams() pulumi.ArrayOutput {
	return (pulumi.ArrayOutput)(r.s.State["authorizedWriterTeams"])
}

// User IDs that have write access to this dashboard
func (r *Dashboard) AuthorizedWriterUsers() pulumi.ArrayOutput {
	return (pulumi.ArrayOutput)(r.s.State["authorizedWriterUsers"])
}

// Chart ID and layout information for the charts in the dashboard.
func (r *Dashboard) Charts() pulumi.ArrayOutput {
	return (pulumi.ArrayOutput)(r.s.State["charts"])
}

// Specifies the chart data display resolution for charts in this dashboard. Value can be one of `"default"`,  `"low"`, `"high"`, or  `"highest"`.
func (r *Dashboard) ChartsResolution() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["chartsResolution"])
}

// Column number for the layout.
func (r *Dashboard) Columns() pulumi.ArrayOutput {
	return (pulumi.ArrayOutput)(r.s.State["columns"])
}

// The ID of the dashboard group that contains the dashboard.
func (r *Dashboard) DashboardGroup() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["dashboardGroup"])
}

// Variable description.
func (r *Dashboard) Description() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["description"])
}

// Seconds since epoch. Used for visualization. You must specify timeSpanType = `"absolute"` too.
func (r *Dashboard) EndTime() pulumi.IntOutput {
	return (pulumi.IntOutput)(r.s.State["endTime"])
}

// Specify a list of event overlays to include in the dashboard. Note: These overlays correspond to the *suggested* event overlays specified in the web UI, and they're not automatically applied as active overlays. To set default active event overlays, use the `selectedEventOverlay` property instead.
func (r *Dashboard) EventOverlays() pulumi.ArrayOutput {
	return (pulumi.ArrayOutput)(r.s.State["eventOverlays"])
}

// Filter to apply to the charts when displaying the dashboard.
func (r *Dashboard) Filters() pulumi.ArrayOutput {
	return (pulumi.ArrayOutput)(r.s.State["filters"])
}

// Grid dashboard layout. Charts listed will be placed in a grid by row with the same width and height. If a chart cannot fit in a row, it will be placed automatically in the next row.
func (r *Dashboard) Grids() pulumi.ArrayOutput {
	return (pulumi.ArrayOutput)(r.s.State["grids"])
}

// Name of the dashboard.
func (r *Dashboard) Name() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["name"])
}

// Defines event overlays which are enabled by **default**. Any overlay specified here should have an accompanying entry in `eventOverlay`, which are similar to the properties here.
func (r *Dashboard) SelectedEventOverlays() pulumi.ArrayOutput {
	return (pulumi.ArrayOutput)(r.s.State["selectedEventOverlays"])
}

// Seconds since epoch. Used for visualization. You must specify timeSpanType = `"absolute"` too.
func (r *Dashboard) StartTime() pulumi.IntOutput {
	return (pulumi.IntOutput)(r.s.State["startTime"])
}

// The time range prior to now to visualize. SignalFx time syntax (e.g. `"-5m"`, `"-1h"`).
func (r *Dashboard) TimeRange() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["timeRange"])
}

// URL of the dashboard
func (r *Dashboard) Url() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["url"])
}

// Dashboard variable to apply to each chart in the dashboard.
func (r *Dashboard) Variables() pulumi.ArrayOutput {
	return (pulumi.ArrayOutput)(r.s.State["variables"])
}

// Input properties used for looking up and filtering Dashboard resources.
type DashboardState struct {
	// Team IDs that have write access to this dashboard
	AuthorizedWriterTeams interface{}
	// User IDs that have write access to this dashboard
	AuthorizedWriterUsers interface{}
	// Chart ID and layout information for the charts in the dashboard.
	Charts interface{}
	// Specifies the chart data display resolution for charts in this dashboard. Value can be one of `"default"`,  `"low"`, `"high"`, or  `"highest"`.
	ChartsResolution interface{}
	// Column number for the layout.
	Columns interface{}
	// The ID of the dashboard group that contains the dashboard.
	DashboardGroup interface{}
	// Variable description.
	Description interface{}
	// Seconds since epoch. Used for visualization. You must specify timeSpanType = `"absolute"` too.
	EndTime interface{}
	// Specify a list of event overlays to include in the dashboard. Note: These overlays correspond to the *suggested* event overlays specified in the web UI, and they're not automatically applied as active overlays. To set default active event overlays, use the `selectedEventOverlay` property instead.
	EventOverlays interface{}
	// Filter to apply to the charts when displaying the dashboard.
	Filters interface{}
	// Grid dashboard layout. Charts listed will be placed in a grid by row with the same width and height. If a chart cannot fit in a row, it will be placed automatically in the next row.
	Grids interface{}
	// Name of the dashboard.
	Name interface{}
	// Defines event overlays which are enabled by **default**. Any overlay specified here should have an accompanying entry in `eventOverlay`, which are similar to the properties here.
	SelectedEventOverlays interface{}
	// Seconds since epoch. Used for visualization. You must specify timeSpanType = `"absolute"` too.
	StartTime interface{}
	// The time range prior to now to visualize. SignalFx time syntax (e.g. `"-5m"`, `"-1h"`).
	TimeRange interface{}
	// URL of the dashboard
	Url interface{}
	// Dashboard variable to apply to each chart in the dashboard.
	Variables interface{}
}

// The set of arguments for constructing a Dashboard resource.
type DashboardArgs struct {
	// Team IDs that have write access to this dashboard
	AuthorizedWriterTeams interface{}
	// User IDs that have write access to this dashboard
	AuthorizedWriterUsers interface{}
	// Chart ID and layout information for the charts in the dashboard.
	Charts interface{}
	// Specifies the chart data display resolution for charts in this dashboard. Value can be one of `"default"`,  `"low"`, `"high"`, or  `"highest"`.
	ChartsResolution interface{}
	// Column number for the layout.
	Columns interface{}
	// The ID of the dashboard group that contains the dashboard.
	DashboardGroup interface{}
	// Variable description.
	Description interface{}
	// Seconds since epoch. Used for visualization. You must specify timeSpanType = `"absolute"` too.
	EndTime interface{}
	// Specify a list of event overlays to include in the dashboard. Note: These overlays correspond to the *suggested* event overlays specified in the web UI, and they're not automatically applied as active overlays. To set default active event overlays, use the `selectedEventOverlay` property instead.
	EventOverlays interface{}
	// Filter to apply to the charts when displaying the dashboard.
	Filters interface{}
	// Grid dashboard layout. Charts listed will be placed in a grid by row with the same width and height. If a chart cannot fit in a row, it will be placed automatically in the next row.
	Grids interface{}
	// Name of the dashboard.
	Name interface{}
	// Defines event overlays which are enabled by **default**. Any overlay specified here should have an accompanying entry in `eventOverlay`, which are similar to the properties here.
	SelectedEventOverlays interface{}
	// Seconds since epoch. Used for visualization. You must specify timeSpanType = `"absolute"` too.
	StartTime interface{}
	// The time range prior to now to visualize. SignalFx time syntax (e.g. `"-5m"`, `"-1h"`).
	TimeRange interface{}
	// Dashboard variable to apply to each chart in the dashboard.
	Variables interface{}
}
