// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package signalfx

import (
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// A dashboard is a curated collection of specific charts and supports dimensional [filters](http://docs.signalfx.com/en/latest/dashboards/dashboard-filter-dynamic.html#filter-dashboard-charts), [dashboard variables](http://docs.signalfx.com/en/latest/dashboards/dashboard-filter-dynamic.html#dashboard-variables) and [time range](http://docs.signalfx.com/en/latest/_sidebars-and-includes/using-time-range-selector.html#time-range-selector) options. These options are applied to all charts in the dashboard, providing a consistent view of the data displayed in that dashboard. This also means that when you open a chart to drill down for more details, you are viewing the same data that is visible in the dashboard view.
//
// > **NOTE** Since every dashboard is included in a `dashboard group` (SignalFx collection of dashboards), you need to create that first and reference it as shown in the example.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-signalfx/sdk/v2/go/signalfx"
// 	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		_, err := signalfx.NewDashboard(ctx, "mydashboard0", &signalfx.DashboardArgs{
// 			DashboardGroup: pulumi.Any(signalfx_dashboard_group.Mydashboardgroup0.Id),
// 			TimeRange:      pulumi.String("-30m"),
// 			Filters: signalfx.DashboardFilterArray{
// 				&signalfx.DashboardFilterArgs{
// 					Property: pulumi.String("collector"),
// 					Values: pulumi.StringArray{
// 						pulumi.String("cpu"),
// 						pulumi.String("Diamond"),
// 					},
// 				},
// 			},
// 			Variables: signalfx.DashboardVariableArray{
// 				&signalfx.DashboardVariableArgs{
// 					Property: pulumi.String("region"),
// 					Alias:    pulumi.String("region"),
// 					Values: pulumi.StringArray{
// 						pulumi.String("uswest-1-"),
// 					},
// 				},
// 			},
// 			Charts: signalfx.DashboardChartArray{
// 				&signalfx.DashboardChartArgs{
// 					ChartId: pulumi.Any(signalfx_time_chart.Mychart0.Id),
// 					Width:   pulumi.Int(12),
// 					Height:  pulumi.Int(1),
// 				},
// 				&signalfx.DashboardChartArgs{
// 					ChartId: pulumi.Any(signalfx_time_chart.Mychart1.Id),
// 					Width:   pulumi.Int(5),
// 					Height:  pulumi.Int(2),
// 				},
// 			},
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
//
// **Every SignalFx dashboard is shown as a grid of 12 columns and potentially infinite number of rows.** The dimension of the single column depends on the screen resolution.
//
// When you define a dashboard resource, you need to specify which charts (by `chartId`) should be displayed in the dashboard, along with layout information determining where on the dashboard the charts should be displayed. You have to assign to every chart a **width** in terms of number of columns to cover up (from 1 to 12) and a **height** in terms of number of rows (more or equal than 1). You can also assign a position in the dashboard grid where you like the graph to stay. In order to do that, you assign a **row** that represents the topmost row of the chart and a **column** that represent the leftmost column of the chart. If by mistake, you wrote a configuration where there are not enough columns to accommodate your charts in a specific row, they will be split in different rows. In case a **row** was specified with value higher than 1, if all the rows above are not filled by other charts, the chart will be placed the **first empty row**.
//
// The are a bunch of use cases where this layout makes things too verbose and hard to work with loops. For those you can now use one of these two layouts: grids and columns.
//
// > **WARNING** These other layouts are not supported by the SignalFx API and are purely provider-side constructs. As such the provider cannot import them and cannot properly reconcile API-side changes. In other words, if someone changes the charts in the UI it will not be reconciled at the next apply. Also, you may only use one of `chart`, `column`, or `grid` when laying out dashboards. You can, however, use multiple instances of each (e.g. multiple `grid`s) for fancy layout.
// ## Dashboard Layout Information
//
// **Every SignalFx dashboard is shown as a grid of 12 columns and potentially infinite number of rows.** The dimension of the single column depends on the screen resolution.
//
// When you define a dashboard resource, you need to specify which charts (by `chartId`) should be displayed in the dashboard, along with layout information determining where on the dashboard the charts should be displayed. You have to assign to every chart a **width** in terms of number of columns to cover up (from 1 to 12) and a **height** in terms of number of rows (more or equal than 1). You can also assign a position in the dashboard grid where you like the graph to stay. In order to do that, you assign a **row** that represents the topmost row of the chart and a **column** that represent the leftmost column of the chart. If by mistake, you wrote a configuration where there are not enough columns to accommodate your charts in a specific row, they will be split in different rows. In case a **row** was specified with value higher than 1, if all the rows above are not filled by other charts, the chart will be placed the **first empty row**.
//
// The are a bunch of use cases where this layout makes things too verbose and hard to work with loops. For those you can now use one of these two layouts: grids and columns.
//
// > **WARNING** These other layouts are not supported by the SignalFx API and are purely provider-side constructs. As such the provider cannot import them and cannot properly reconcile API-side changes. In other words, if someone changes the charts in the UI it will not be reconciled at the next apply. Also, you may only use one of `chart`, `column`, or `grid` when laying out dashboards. You can, however, use multiple instances of each (e.g. multiple `grid`s) for fancy layout.
type Dashboard struct {
	pulumi.CustomResourceState

	// Team IDs that have write access to this dashboard
	AuthorizedWriterTeams pulumi.StringArrayOutput `pulumi:"authorizedWriterTeams"`
	// User IDs that have write access to this dashboard
	AuthorizedWriterUsers pulumi.StringArrayOutput `pulumi:"authorizedWriterUsers"`
	// Chart ID and layout information for the charts in the dashboard.
	Charts DashboardChartArrayOutput `pulumi:"charts"`
	// Specifies the chart data display resolution for charts in this dashboard. Value can be one of `"default"`,  `"low"`, `"high"`, or  `"highest"`.
	ChartsResolution pulumi.StringPtrOutput `pulumi:"chartsResolution"`
	// Column number for the layout.
	Columns DashboardColumnArrayOutput `pulumi:"columns"`
	// The ID of the dashboard group that contains the dashboard.
	DashboardGroup pulumi.StringOutput `pulumi:"dashboardGroup"`
	// Variable description.
	Description               pulumi.StringPtrOutput   `pulumi:"description"`
	DiscoveryOptionsQuery     pulumi.StringPtrOutput   `pulumi:"discoveryOptionsQuery"`
	DiscoveryOptionsSelectors pulumi.StringArrayOutput `pulumi:"discoveryOptionsSelectors"`
	// Seconds since epoch. Used for visualization. You must specify timeSpanType = `"absolute"` too.
	EndTime pulumi.IntPtrOutput `pulumi:"endTime"`
	// Specify a list of event overlays to include in the dashboard. Note: These overlays correspond to the *suggested* event overlays specified in the web UI, and they're not automatically applied as active overlays. To set default active event overlays, use the `selectedEventOverlay` property instead.
	EventOverlays DashboardEventOverlayArrayOutput `pulumi:"eventOverlays"`
	// Filter to apply to the charts when displaying the dashboard.
	Filters DashboardFilterArrayOutput `pulumi:"filters"`
	// Grid dashboard layout. Charts listed will be placed in a grid by row with the same width and height. If a chart cannot fit in a row, it will be placed automatically in the next row.
	Grids DashboardGridArrayOutput `pulumi:"grids"`
	// Name of the dashboard.
	Name pulumi.StringOutput `pulumi:"name"`
	// Defines event overlays which are enabled by **default**. Any overlay specified here should have an accompanying entry in `eventOverlay`, which are similar to the properties here.
	SelectedEventOverlays DashboardSelectedEventOverlayArrayOutput `pulumi:"selectedEventOverlays"`
	// Seconds since epoch. Used for visualization. You must specify timeSpanType = `"absolute"` too.
	StartTime pulumi.IntPtrOutput `pulumi:"startTime"`
	// The time range prior to now to visualize. SignalFx time syntax (e.g. `"-5m"`, `"-1h"`).
	TimeRange pulumi.StringPtrOutput `pulumi:"timeRange"`
	// URL of the dashboard
	Url pulumi.StringOutput `pulumi:"url"`
	// Dashboard variable to apply to each chart in the dashboard.
	Variables DashboardVariableArrayOutput `pulumi:"variables"`
}

// NewDashboard registers a new resource with the given unique name, arguments, and options.
func NewDashboard(ctx *pulumi.Context,
	name string, args *DashboardArgs, opts ...pulumi.ResourceOption) (*Dashboard, error) {
	if args == nil || args.DashboardGroup == nil {
		return nil, errors.New("missing required argument 'DashboardGroup'")
	}
	if args == nil {
		args = &DashboardArgs{}
	}
	var resource Dashboard
	err := ctx.RegisterResource("signalfx:index/dashboard:Dashboard", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetDashboard gets an existing Dashboard resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetDashboard(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *DashboardState, opts ...pulumi.ResourceOption) (*Dashboard, error) {
	var resource Dashboard
	err := ctx.ReadResource("signalfx:index/dashboard:Dashboard", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Dashboard resources.
type dashboardState struct {
	// Team IDs that have write access to this dashboard
	AuthorizedWriterTeams []string `pulumi:"authorizedWriterTeams"`
	// User IDs that have write access to this dashboard
	AuthorizedWriterUsers []string `pulumi:"authorizedWriterUsers"`
	// Chart ID and layout information for the charts in the dashboard.
	Charts []DashboardChart `pulumi:"charts"`
	// Specifies the chart data display resolution for charts in this dashboard. Value can be one of `"default"`,  `"low"`, `"high"`, or  `"highest"`.
	ChartsResolution *string `pulumi:"chartsResolution"`
	// Column number for the layout.
	Columns []DashboardColumn `pulumi:"columns"`
	// The ID of the dashboard group that contains the dashboard.
	DashboardGroup *string `pulumi:"dashboardGroup"`
	// Variable description.
	Description               *string  `pulumi:"description"`
	DiscoveryOptionsQuery     *string  `pulumi:"discoveryOptionsQuery"`
	DiscoveryOptionsSelectors []string `pulumi:"discoveryOptionsSelectors"`
	// Seconds since epoch. Used for visualization. You must specify timeSpanType = `"absolute"` too.
	EndTime *int `pulumi:"endTime"`
	// Specify a list of event overlays to include in the dashboard. Note: These overlays correspond to the *suggested* event overlays specified in the web UI, and they're not automatically applied as active overlays. To set default active event overlays, use the `selectedEventOverlay` property instead.
	EventOverlays []DashboardEventOverlay `pulumi:"eventOverlays"`
	// Filter to apply to the charts when displaying the dashboard.
	Filters []DashboardFilter `pulumi:"filters"`
	// Grid dashboard layout. Charts listed will be placed in a grid by row with the same width and height. If a chart cannot fit in a row, it will be placed automatically in the next row.
	Grids []DashboardGrid `pulumi:"grids"`
	// Name of the dashboard.
	Name *string `pulumi:"name"`
	// Defines event overlays which are enabled by **default**. Any overlay specified here should have an accompanying entry in `eventOverlay`, which are similar to the properties here.
	SelectedEventOverlays []DashboardSelectedEventOverlay `pulumi:"selectedEventOverlays"`
	// Seconds since epoch. Used for visualization. You must specify timeSpanType = `"absolute"` too.
	StartTime *int `pulumi:"startTime"`
	// The time range prior to now to visualize. SignalFx time syntax (e.g. `"-5m"`, `"-1h"`).
	TimeRange *string `pulumi:"timeRange"`
	// URL of the dashboard
	Url *string `pulumi:"url"`
	// Dashboard variable to apply to each chart in the dashboard.
	Variables []DashboardVariable `pulumi:"variables"`
}

type DashboardState struct {
	// Team IDs that have write access to this dashboard
	AuthorizedWriterTeams pulumi.StringArrayInput
	// User IDs that have write access to this dashboard
	AuthorizedWriterUsers pulumi.StringArrayInput
	// Chart ID and layout information for the charts in the dashboard.
	Charts DashboardChartArrayInput
	// Specifies the chart data display resolution for charts in this dashboard. Value can be one of `"default"`,  `"low"`, `"high"`, or  `"highest"`.
	ChartsResolution pulumi.StringPtrInput
	// Column number for the layout.
	Columns DashboardColumnArrayInput
	// The ID of the dashboard group that contains the dashboard.
	DashboardGroup pulumi.StringPtrInput
	// Variable description.
	Description               pulumi.StringPtrInput
	DiscoveryOptionsQuery     pulumi.StringPtrInput
	DiscoveryOptionsSelectors pulumi.StringArrayInput
	// Seconds since epoch. Used for visualization. You must specify timeSpanType = `"absolute"` too.
	EndTime pulumi.IntPtrInput
	// Specify a list of event overlays to include in the dashboard. Note: These overlays correspond to the *suggested* event overlays specified in the web UI, and they're not automatically applied as active overlays. To set default active event overlays, use the `selectedEventOverlay` property instead.
	EventOverlays DashboardEventOverlayArrayInput
	// Filter to apply to the charts when displaying the dashboard.
	Filters DashboardFilterArrayInput
	// Grid dashboard layout. Charts listed will be placed in a grid by row with the same width and height. If a chart cannot fit in a row, it will be placed automatically in the next row.
	Grids DashboardGridArrayInput
	// Name of the dashboard.
	Name pulumi.StringPtrInput
	// Defines event overlays which are enabled by **default**. Any overlay specified here should have an accompanying entry in `eventOverlay`, which are similar to the properties here.
	SelectedEventOverlays DashboardSelectedEventOverlayArrayInput
	// Seconds since epoch. Used for visualization. You must specify timeSpanType = `"absolute"` too.
	StartTime pulumi.IntPtrInput
	// The time range prior to now to visualize. SignalFx time syntax (e.g. `"-5m"`, `"-1h"`).
	TimeRange pulumi.StringPtrInput
	// URL of the dashboard
	Url pulumi.StringPtrInput
	// Dashboard variable to apply to each chart in the dashboard.
	Variables DashboardVariableArrayInput
}

func (DashboardState) ElementType() reflect.Type {
	return reflect.TypeOf((*dashboardState)(nil)).Elem()
}

type dashboardArgs struct {
	// Team IDs that have write access to this dashboard
	AuthorizedWriterTeams []string `pulumi:"authorizedWriterTeams"`
	// User IDs that have write access to this dashboard
	AuthorizedWriterUsers []string `pulumi:"authorizedWriterUsers"`
	// Chart ID and layout information for the charts in the dashboard.
	Charts []DashboardChart `pulumi:"charts"`
	// Specifies the chart data display resolution for charts in this dashboard. Value can be one of `"default"`,  `"low"`, `"high"`, or  `"highest"`.
	ChartsResolution *string `pulumi:"chartsResolution"`
	// Column number for the layout.
	Columns []DashboardColumn `pulumi:"columns"`
	// The ID of the dashboard group that contains the dashboard.
	DashboardGroup string `pulumi:"dashboardGroup"`
	// Variable description.
	Description               *string  `pulumi:"description"`
	DiscoveryOptionsQuery     *string  `pulumi:"discoveryOptionsQuery"`
	DiscoveryOptionsSelectors []string `pulumi:"discoveryOptionsSelectors"`
	// Seconds since epoch. Used for visualization. You must specify timeSpanType = `"absolute"` too.
	EndTime *int `pulumi:"endTime"`
	// Specify a list of event overlays to include in the dashboard. Note: These overlays correspond to the *suggested* event overlays specified in the web UI, and they're not automatically applied as active overlays. To set default active event overlays, use the `selectedEventOverlay` property instead.
	EventOverlays []DashboardEventOverlay `pulumi:"eventOverlays"`
	// Filter to apply to the charts when displaying the dashboard.
	Filters []DashboardFilter `pulumi:"filters"`
	// Grid dashboard layout. Charts listed will be placed in a grid by row with the same width and height. If a chart cannot fit in a row, it will be placed automatically in the next row.
	Grids []DashboardGrid `pulumi:"grids"`
	// Name of the dashboard.
	Name *string `pulumi:"name"`
	// Defines event overlays which are enabled by **default**. Any overlay specified here should have an accompanying entry in `eventOverlay`, which are similar to the properties here.
	SelectedEventOverlays []DashboardSelectedEventOverlay `pulumi:"selectedEventOverlays"`
	// Seconds since epoch. Used for visualization. You must specify timeSpanType = `"absolute"` too.
	StartTime *int `pulumi:"startTime"`
	// The time range prior to now to visualize. SignalFx time syntax (e.g. `"-5m"`, `"-1h"`).
	TimeRange *string `pulumi:"timeRange"`
	// Dashboard variable to apply to each chart in the dashboard.
	Variables []DashboardVariable `pulumi:"variables"`
}

// The set of arguments for constructing a Dashboard resource.
type DashboardArgs struct {
	// Team IDs that have write access to this dashboard
	AuthorizedWriterTeams pulumi.StringArrayInput
	// User IDs that have write access to this dashboard
	AuthorizedWriterUsers pulumi.StringArrayInput
	// Chart ID and layout information for the charts in the dashboard.
	Charts DashboardChartArrayInput
	// Specifies the chart data display resolution for charts in this dashboard. Value can be one of `"default"`,  `"low"`, `"high"`, or  `"highest"`.
	ChartsResolution pulumi.StringPtrInput
	// Column number for the layout.
	Columns DashboardColumnArrayInput
	// The ID of the dashboard group that contains the dashboard.
	DashboardGroup pulumi.StringInput
	// Variable description.
	Description               pulumi.StringPtrInput
	DiscoveryOptionsQuery     pulumi.StringPtrInput
	DiscoveryOptionsSelectors pulumi.StringArrayInput
	// Seconds since epoch. Used for visualization. You must specify timeSpanType = `"absolute"` too.
	EndTime pulumi.IntPtrInput
	// Specify a list of event overlays to include in the dashboard. Note: These overlays correspond to the *suggested* event overlays specified in the web UI, and they're not automatically applied as active overlays. To set default active event overlays, use the `selectedEventOverlay` property instead.
	EventOverlays DashboardEventOverlayArrayInput
	// Filter to apply to the charts when displaying the dashboard.
	Filters DashboardFilterArrayInput
	// Grid dashboard layout. Charts listed will be placed in a grid by row with the same width and height. If a chart cannot fit in a row, it will be placed automatically in the next row.
	Grids DashboardGridArrayInput
	// Name of the dashboard.
	Name pulumi.StringPtrInput
	// Defines event overlays which are enabled by **default**. Any overlay specified here should have an accompanying entry in `eventOverlay`, which are similar to the properties here.
	SelectedEventOverlays DashboardSelectedEventOverlayArrayInput
	// Seconds since epoch. Used for visualization. You must specify timeSpanType = `"absolute"` too.
	StartTime pulumi.IntPtrInput
	// The time range prior to now to visualize. SignalFx time syntax (e.g. `"-5m"`, `"-1h"`).
	TimeRange pulumi.StringPtrInput
	// Dashboard variable to apply to each chart in the dashboard.
	Variables DashboardVariableArrayInput
}

func (DashboardArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*dashboardArgs)(nil)).Elem()
}
