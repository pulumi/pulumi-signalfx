// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package logs

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// This chart type displays current data values in a list format.
//
// The name of each value in the chart reflects the name of the plot and any associated dimensions. We recommend you click the Pencil icon and give the plot a meaningful name, as in plot B below. Otherwise, just the raw metric name will be displayed on the chart, as in plot A below.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"fmt"
//
//	"github.com/pulumi/pulumi-signalfx/sdk/v5/go/signalfx"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := signalfx.NewListChart(ctx, "mylistchart0", &signalfx.ListChartArgs{
//				ColorBy:           pulumi.String("Metric"),
//				Description:       pulumi.String("Very cool List Chart"),
//				DisableSampling:   pulumi.Bool(true),
//				HideMissingValues: pulumi.Bool(true),
//				LegendOptionsFields: ListChartLegendOptionsFieldArray{
//					&ListChartLegendOptionsFieldArgs{
//						Enabled:  pulumi.Bool(false),
//						Property: pulumi.String("collector"),
//					},
//					&ListChartLegendOptionsFieldArgs{
//						Enabled:  pulumi.Bool(true),
//						Property: pulumi.String("cluster_name"),
//					},
//					&ListChartLegendOptionsFieldArgs{
//						Enabled:  pulumi.Bool(true),
//						Property: pulumi.String("role"),
//					},
//					&ListChartLegendOptionsFieldArgs{
//						Enabled:  pulumi.Bool(false),
//						Property: pulumi.String("collector"),
//					},
//					&ListChartLegendOptionsFieldArgs{
//						Enabled:  pulumi.Bool(false),
//						Property: pulumi.String("host"),
//					},
//				},
//				MaxDelay:        pulumi.Int(2),
//				MaxPrecision:    pulumi.Int(2),
//				ProgramText:     pulumi.String(fmt.Sprintf("myfilters = filter(\"cluster_name\", \"prod\") and filter(\"role\", \"search\")\ndata(\"cpu.total.idle\", filter=myfilters).publish()\n\n")),
//				RefreshInterval: pulumi.Int(1),
//				SortBy:          pulumi.String("-value"),
//				Timezone:        pulumi.String("Europe/Paris"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
type ListChart struct {
	pulumi.CustomResourceState

	// Column configuration
	Columns ListChartColumnArrayOutput `pulumi:"columns"`
	// default connection that the dashboard uses
	DefaultConnection pulumi.StringPtrOutput `pulumi:"defaultConnection"`
	// Description of the chart.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// Seconds since epoch. Used for visualization. Conflicts with `timeRange`.
	EndTime pulumi.IntPtrOutput `pulumi:"endTime"`
	// Name of the chart.
	Name pulumi.StringOutput `pulumi:"name"`
	// Signalflow program text for the chart. More info[in the SignalFx docs](https://developers.signalfx.com/signalflow_analytics/signalflow_overview.html#_signalflow_programming_language).
	ProgramText pulumi.StringOutput `pulumi:"programText"`
	// Sorting options configuration
	SortOptions ListChartSortOptionArrayOutput `pulumi:"sortOptions"`
	// Seconds since epoch. Used for visualization. Conflicts with `timeRange`.
	StartTime pulumi.IntPtrOutput `pulumi:"startTime"`
	// How many seconds ago from which to display data. For example, the last hour would be `3600`, etc. Conflicts with `startTime` and `endTime`.
	TimeRange pulumi.IntPtrOutput `pulumi:"timeRange"`
	// The URL of the chart.
	Url pulumi.StringOutput `pulumi:"url"`
}

// NewListChart registers a new resource with the given unique name, arguments, and options.
func NewListChart(ctx *pulumi.Context,
	name string, args *ListChartArgs, opts ...pulumi.ResourceOption) (*ListChart, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ProgramText == nil {
		return nil, errors.New("invalid value for required argument 'ProgramText'")
	}
	var resource ListChart
	err := ctx.RegisterResource("signalfx:logs/listChart:ListChart", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetListChart gets an existing ListChart resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetListChart(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ListChartState, opts ...pulumi.ResourceOption) (*ListChart, error) {
	var resource ListChart
	err := ctx.ReadResource("signalfx:logs/listChart:ListChart", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ListChart resources.
type listChartState struct {
	// Column configuration
	Columns []ListChartColumn `pulumi:"columns"`
	// default connection that the dashboard uses
	DefaultConnection *string `pulumi:"defaultConnection"`
	// Description of the chart.
	Description *string `pulumi:"description"`
	// Seconds since epoch. Used for visualization. Conflicts with `timeRange`.
	EndTime *int `pulumi:"endTime"`
	// Name of the chart.
	Name *string `pulumi:"name"`
	// Signalflow program text for the chart. More info[in the SignalFx docs](https://developers.signalfx.com/signalflow_analytics/signalflow_overview.html#_signalflow_programming_language).
	ProgramText *string `pulumi:"programText"`
	// Sorting options configuration
	SortOptions []ListChartSortOption `pulumi:"sortOptions"`
	// Seconds since epoch. Used for visualization. Conflicts with `timeRange`.
	StartTime *int `pulumi:"startTime"`
	// How many seconds ago from which to display data. For example, the last hour would be `3600`, etc. Conflicts with `startTime` and `endTime`.
	TimeRange *int `pulumi:"timeRange"`
	// The URL of the chart.
	Url *string `pulumi:"url"`
}

type ListChartState struct {
	// Column configuration
	Columns ListChartColumnArrayInput
	// default connection that the dashboard uses
	DefaultConnection pulumi.StringPtrInput
	// Description of the chart.
	Description pulumi.StringPtrInput
	// Seconds since epoch. Used for visualization. Conflicts with `timeRange`.
	EndTime pulumi.IntPtrInput
	// Name of the chart.
	Name pulumi.StringPtrInput
	// Signalflow program text for the chart. More info[in the SignalFx docs](https://developers.signalfx.com/signalflow_analytics/signalflow_overview.html#_signalflow_programming_language).
	ProgramText pulumi.StringPtrInput
	// Sorting options configuration
	SortOptions ListChartSortOptionArrayInput
	// Seconds since epoch. Used for visualization. Conflicts with `timeRange`.
	StartTime pulumi.IntPtrInput
	// How many seconds ago from which to display data. For example, the last hour would be `3600`, etc. Conflicts with `startTime` and `endTime`.
	TimeRange pulumi.IntPtrInput
	// The URL of the chart.
	Url pulumi.StringPtrInput
}

func (ListChartState) ElementType() reflect.Type {
	return reflect.TypeOf((*listChartState)(nil)).Elem()
}

type listChartArgs struct {
	// Column configuration
	Columns []ListChartColumn `pulumi:"columns"`
	// default connection that the dashboard uses
	DefaultConnection *string `pulumi:"defaultConnection"`
	// Description of the chart.
	Description *string `pulumi:"description"`
	// Seconds since epoch. Used for visualization. Conflicts with `timeRange`.
	EndTime *int `pulumi:"endTime"`
	// Name of the chart.
	Name *string `pulumi:"name"`
	// Signalflow program text for the chart. More info[in the SignalFx docs](https://developers.signalfx.com/signalflow_analytics/signalflow_overview.html#_signalflow_programming_language).
	ProgramText string `pulumi:"programText"`
	// Sorting options configuration
	SortOptions []ListChartSortOption `pulumi:"sortOptions"`
	// Seconds since epoch. Used for visualization. Conflicts with `timeRange`.
	StartTime *int `pulumi:"startTime"`
	// How many seconds ago from which to display data. For example, the last hour would be `3600`, etc. Conflicts with `startTime` and `endTime`.
	TimeRange *int `pulumi:"timeRange"`
}

// The set of arguments for constructing a ListChart resource.
type ListChartArgs struct {
	// Column configuration
	Columns ListChartColumnArrayInput
	// default connection that the dashboard uses
	DefaultConnection pulumi.StringPtrInput
	// Description of the chart.
	Description pulumi.StringPtrInput
	// Seconds since epoch. Used for visualization. Conflicts with `timeRange`.
	EndTime pulumi.IntPtrInput
	// Name of the chart.
	Name pulumi.StringPtrInput
	// Signalflow program text for the chart. More info[in the SignalFx docs](https://developers.signalfx.com/signalflow_analytics/signalflow_overview.html#_signalflow_programming_language).
	ProgramText pulumi.StringInput
	// Sorting options configuration
	SortOptions ListChartSortOptionArrayInput
	// Seconds since epoch. Used for visualization. Conflicts with `timeRange`.
	StartTime pulumi.IntPtrInput
	// How many seconds ago from which to display data. For example, the last hour would be `3600`, etc. Conflicts with `startTime` and `endTime`.
	TimeRange pulumi.IntPtrInput
}

func (ListChartArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*listChartArgs)(nil)).Elem()
}

type ListChartInput interface {
	pulumi.Input

	ToListChartOutput() ListChartOutput
	ToListChartOutputWithContext(ctx context.Context) ListChartOutput
}

func (*ListChart) ElementType() reflect.Type {
	return reflect.TypeOf((**ListChart)(nil)).Elem()
}

func (i *ListChart) ToListChartOutput() ListChartOutput {
	return i.ToListChartOutputWithContext(context.Background())
}

func (i *ListChart) ToListChartOutputWithContext(ctx context.Context) ListChartOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ListChartOutput)
}

// ListChartArrayInput is an input type that accepts ListChartArray and ListChartArrayOutput values.
// You can construct a concrete instance of `ListChartArrayInput` via:
//
//	ListChartArray{ ListChartArgs{...} }
type ListChartArrayInput interface {
	pulumi.Input

	ToListChartArrayOutput() ListChartArrayOutput
	ToListChartArrayOutputWithContext(context.Context) ListChartArrayOutput
}

type ListChartArray []ListChartInput

func (ListChartArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ListChart)(nil)).Elem()
}

func (i ListChartArray) ToListChartArrayOutput() ListChartArrayOutput {
	return i.ToListChartArrayOutputWithContext(context.Background())
}

func (i ListChartArray) ToListChartArrayOutputWithContext(ctx context.Context) ListChartArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ListChartArrayOutput)
}

// ListChartMapInput is an input type that accepts ListChartMap and ListChartMapOutput values.
// You can construct a concrete instance of `ListChartMapInput` via:
//
//	ListChartMap{ "key": ListChartArgs{...} }
type ListChartMapInput interface {
	pulumi.Input

	ToListChartMapOutput() ListChartMapOutput
	ToListChartMapOutputWithContext(context.Context) ListChartMapOutput
}

type ListChartMap map[string]ListChartInput

func (ListChartMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ListChart)(nil)).Elem()
}

func (i ListChartMap) ToListChartMapOutput() ListChartMapOutput {
	return i.ToListChartMapOutputWithContext(context.Background())
}

func (i ListChartMap) ToListChartMapOutputWithContext(ctx context.Context) ListChartMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ListChartMapOutput)
}

type ListChartOutput struct{ *pulumi.OutputState }

func (ListChartOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ListChart)(nil)).Elem()
}

func (o ListChartOutput) ToListChartOutput() ListChartOutput {
	return o
}

func (o ListChartOutput) ToListChartOutputWithContext(ctx context.Context) ListChartOutput {
	return o
}

// Column configuration
func (o ListChartOutput) Columns() ListChartColumnArrayOutput {
	return o.ApplyT(func(v *ListChart) ListChartColumnArrayOutput { return v.Columns }).(ListChartColumnArrayOutput)
}

// default connection that the dashboard uses
func (o ListChartOutput) DefaultConnection() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ListChart) pulumi.StringPtrOutput { return v.DefaultConnection }).(pulumi.StringPtrOutput)
}

// Description of the chart.
func (o ListChartOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ListChart) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// Seconds since epoch. Used for visualization. Conflicts with `timeRange`.
func (o ListChartOutput) EndTime() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ListChart) pulumi.IntPtrOutput { return v.EndTime }).(pulumi.IntPtrOutput)
}

// Name of the chart.
func (o ListChartOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *ListChart) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Signalflow program text for the chart. More info[in the SignalFx docs](https://developers.signalfx.com/signalflow_analytics/signalflow_overview.html#_signalflow_programming_language).
func (o ListChartOutput) ProgramText() pulumi.StringOutput {
	return o.ApplyT(func(v *ListChart) pulumi.StringOutput { return v.ProgramText }).(pulumi.StringOutput)
}

// Sorting options configuration
func (o ListChartOutput) SortOptions() ListChartSortOptionArrayOutput {
	return o.ApplyT(func(v *ListChart) ListChartSortOptionArrayOutput { return v.SortOptions }).(ListChartSortOptionArrayOutput)
}

// Seconds since epoch. Used for visualization. Conflicts with `timeRange`.
func (o ListChartOutput) StartTime() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ListChart) pulumi.IntPtrOutput { return v.StartTime }).(pulumi.IntPtrOutput)
}

// How many seconds ago from which to display data. For example, the last hour would be `3600`, etc. Conflicts with `startTime` and `endTime`.
func (o ListChartOutput) TimeRange() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ListChart) pulumi.IntPtrOutput { return v.TimeRange }).(pulumi.IntPtrOutput)
}

// The URL of the chart.
func (o ListChartOutput) Url() pulumi.StringOutput {
	return o.ApplyT(func(v *ListChart) pulumi.StringOutput { return v.Url }).(pulumi.StringOutput)
}

type ListChartArrayOutput struct{ *pulumi.OutputState }

func (ListChartArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ListChart)(nil)).Elem()
}

func (o ListChartArrayOutput) ToListChartArrayOutput() ListChartArrayOutput {
	return o
}

func (o ListChartArrayOutput) ToListChartArrayOutputWithContext(ctx context.Context) ListChartArrayOutput {
	return o
}

func (o ListChartArrayOutput) Index(i pulumi.IntInput) ListChartOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ListChart {
		return vs[0].([]*ListChart)[vs[1].(int)]
	}).(ListChartOutput)
}

type ListChartMapOutput struct{ *pulumi.OutputState }

func (ListChartMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ListChart)(nil)).Elem()
}

func (o ListChartMapOutput) ToListChartMapOutput() ListChartMapOutput {
	return o
}

func (o ListChartMapOutput) ToListChartMapOutputWithContext(ctx context.Context) ListChartMapOutput {
	return o
}

func (o ListChartMapOutput) MapIndex(k pulumi.StringInput) ListChartOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ListChart {
		return vs[0].(map[string]*ListChart)[vs[1].(string)]
	}).(ListChartOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ListChartInput)(nil)).Elem(), &ListChart{})
	pulumi.RegisterInputType(reflect.TypeOf((*ListChartArrayInput)(nil)).Elem(), ListChartArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ListChartMapInput)(nil)).Elem(), ListChartMap{})
	pulumi.RegisterOutputType(ListChartOutput{})
	pulumi.RegisterOutputType(ListChartArrayOutput{})
	pulumi.RegisterOutputType(ListChartMapOutput{})
}
