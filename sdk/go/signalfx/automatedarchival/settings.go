// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package automatedarchival

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-signalfx/sdk/v7/go/signalfx/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type Settings struct {
	pulumi.CustomResourceState

	// Timestamp of when the automated archival setting was created
	Created pulumi.IntOutput `pulumi:"created"`
	// ID of the creator of the automated archival setting
	Creator pulumi.StringOutput `pulumi:"creator"`
	// Whether the automated archival is enabled for this organization or not
	Enabled pulumi.BoolOutput `pulumi:"enabled"`
	// Grace period is an org level setting that applies to the newly created metrics. This allows customers to protect newly added metrics that users haven’t had the time to use in charts and detectors from being automatically archived The value here uses ISO 8061 duration format. Examples - 'P0D', 'P15D', 'P30D', 'P45D', 'P60D'
	GracePeriod pulumi.StringOutput `pulumi:"gracePeriod"`
	// Timestamp of when the automated archival setting was last updated
	LastUpdated pulumi.IntOutput `pulumi:"lastUpdated"`
	// ID of user who last updated the automated archival setting
	LastUpdatedBy pulumi.StringOutput `pulumi:"lastUpdatedBy"`
	// This tracks if a metric was unused in the past N number of days (N one of 30, 45, or 60). We’ll archive a metric if it wasn’t used in the lookback period. The value here uses ISO 8061 duration format. Examples - 'P30D', 'P45D', 'P60D'
	LookbackPeriod pulumi.StringOutput `pulumi:"lookbackPeriod"`
	// Org limit for the number of rulesets that can be created
	RulesetLimit pulumi.IntPtrOutput `pulumi:"rulesetLimit"`
	// Version of the automated archival setting
	Version pulumi.StringOutput `pulumi:"version"`
}

// NewSettings registers a new resource with the given unique name, arguments, and options.
func NewSettings(ctx *pulumi.Context,
	name string, args *SettingsArgs, opts ...pulumi.ResourceOption) (*Settings, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Enabled == nil {
		return nil, errors.New("invalid value for required argument 'Enabled'")
	}
	if args.GracePeriod == nil {
		return nil, errors.New("invalid value for required argument 'GracePeriod'")
	}
	if args.LookbackPeriod == nil {
		return nil, errors.New("invalid value for required argument 'LookbackPeriod'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Settings
	err := ctx.RegisterResource("signalfx:automatedarchival/settings:Settings", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSettings gets an existing Settings resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSettings(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SettingsState, opts ...pulumi.ResourceOption) (*Settings, error) {
	var resource Settings
	err := ctx.ReadResource("signalfx:automatedarchival/settings:Settings", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Settings resources.
type settingsState struct {
	// Timestamp of when the automated archival setting was created
	Created *int `pulumi:"created"`
	// ID of the creator of the automated archival setting
	Creator *string `pulumi:"creator"`
	// Whether the automated archival is enabled for this organization or not
	Enabled *bool `pulumi:"enabled"`
	// Grace period is an org level setting that applies to the newly created metrics. This allows customers to protect newly added metrics that users haven’t had the time to use in charts and detectors from being automatically archived The value here uses ISO 8061 duration format. Examples - 'P0D', 'P15D', 'P30D', 'P45D', 'P60D'
	GracePeriod *string `pulumi:"gracePeriod"`
	// Timestamp of when the automated archival setting was last updated
	LastUpdated *int `pulumi:"lastUpdated"`
	// ID of user who last updated the automated archival setting
	LastUpdatedBy *string `pulumi:"lastUpdatedBy"`
	// This tracks if a metric was unused in the past N number of days (N one of 30, 45, or 60). We’ll archive a metric if it wasn’t used in the lookback period. The value here uses ISO 8061 duration format. Examples - 'P30D', 'P45D', 'P60D'
	LookbackPeriod *string `pulumi:"lookbackPeriod"`
	// Org limit for the number of rulesets that can be created
	RulesetLimit *int `pulumi:"rulesetLimit"`
	// Version of the automated archival setting
	Version *string `pulumi:"version"`
}

type SettingsState struct {
	// Timestamp of when the automated archival setting was created
	Created pulumi.IntPtrInput
	// ID of the creator of the automated archival setting
	Creator pulumi.StringPtrInput
	// Whether the automated archival is enabled for this organization or not
	Enabled pulumi.BoolPtrInput
	// Grace period is an org level setting that applies to the newly created metrics. This allows customers to protect newly added metrics that users haven’t had the time to use in charts and detectors from being automatically archived The value here uses ISO 8061 duration format. Examples - 'P0D', 'P15D', 'P30D', 'P45D', 'P60D'
	GracePeriod pulumi.StringPtrInput
	// Timestamp of when the automated archival setting was last updated
	LastUpdated pulumi.IntPtrInput
	// ID of user who last updated the automated archival setting
	LastUpdatedBy pulumi.StringPtrInput
	// This tracks if a metric was unused in the past N number of days (N one of 30, 45, or 60). We’ll archive a metric if it wasn’t used in the lookback period. The value here uses ISO 8061 duration format. Examples - 'P30D', 'P45D', 'P60D'
	LookbackPeriod pulumi.StringPtrInput
	// Org limit for the number of rulesets that can be created
	RulesetLimit pulumi.IntPtrInput
	// Version of the automated archival setting
	Version pulumi.StringPtrInput
}

func (SettingsState) ElementType() reflect.Type {
	return reflect.TypeOf((*settingsState)(nil)).Elem()
}

type settingsArgs struct {
	// Whether the automated archival is enabled for this organization or not
	Enabled bool `pulumi:"enabled"`
	// Grace period is an org level setting that applies to the newly created metrics. This allows customers to protect newly added metrics that users haven’t had the time to use in charts and detectors from being automatically archived The value here uses ISO 8061 duration format. Examples - 'P0D', 'P15D', 'P30D', 'P45D', 'P60D'
	GracePeriod string `pulumi:"gracePeriod"`
	// This tracks if a metric was unused in the past N number of days (N one of 30, 45, or 60). We’ll archive a metric if it wasn’t used in the lookback period. The value here uses ISO 8061 duration format. Examples - 'P30D', 'P45D', 'P60D'
	LookbackPeriod string `pulumi:"lookbackPeriod"`
	// Org limit for the number of rulesets that can be created
	RulesetLimit *int `pulumi:"rulesetLimit"`
}

// The set of arguments for constructing a Settings resource.
type SettingsArgs struct {
	// Whether the automated archival is enabled for this organization or not
	Enabled pulumi.BoolInput
	// Grace period is an org level setting that applies to the newly created metrics. This allows customers to protect newly added metrics that users haven’t had the time to use in charts and detectors from being automatically archived The value here uses ISO 8061 duration format. Examples - 'P0D', 'P15D', 'P30D', 'P45D', 'P60D'
	GracePeriod pulumi.StringInput
	// This tracks if a metric was unused in the past N number of days (N one of 30, 45, or 60). We’ll archive a metric if it wasn’t used in the lookback period. The value here uses ISO 8061 duration format. Examples - 'P30D', 'P45D', 'P60D'
	LookbackPeriod pulumi.StringInput
	// Org limit for the number of rulesets that can be created
	RulesetLimit pulumi.IntPtrInput
}

func (SettingsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*settingsArgs)(nil)).Elem()
}

type SettingsInput interface {
	pulumi.Input

	ToSettingsOutput() SettingsOutput
	ToSettingsOutputWithContext(ctx context.Context) SettingsOutput
}

func (*Settings) ElementType() reflect.Type {
	return reflect.TypeOf((**Settings)(nil)).Elem()
}

func (i *Settings) ToSettingsOutput() SettingsOutput {
	return i.ToSettingsOutputWithContext(context.Background())
}

func (i *Settings) ToSettingsOutputWithContext(ctx context.Context) SettingsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SettingsOutput)
}

// SettingsArrayInput is an input type that accepts SettingsArray and SettingsArrayOutput values.
// You can construct a concrete instance of `SettingsArrayInput` via:
//
//	SettingsArray{ SettingsArgs{...} }
type SettingsArrayInput interface {
	pulumi.Input

	ToSettingsArrayOutput() SettingsArrayOutput
	ToSettingsArrayOutputWithContext(context.Context) SettingsArrayOutput
}

type SettingsArray []SettingsInput

func (SettingsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Settings)(nil)).Elem()
}

func (i SettingsArray) ToSettingsArrayOutput() SettingsArrayOutput {
	return i.ToSettingsArrayOutputWithContext(context.Background())
}

func (i SettingsArray) ToSettingsArrayOutputWithContext(ctx context.Context) SettingsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SettingsArrayOutput)
}

// SettingsMapInput is an input type that accepts SettingsMap and SettingsMapOutput values.
// You can construct a concrete instance of `SettingsMapInput` via:
//
//	SettingsMap{ "key": SettingsArgs{...} }
type SettingsMapInput interface {
	pulumi.Input

	ToSettingsMapOutput() SettingsMapOutput
	ToSettingsMapOutputWithContext(context.Context) SettingsMapOutput
}

type SettingsMap map[string]SettingsInput

func (SettingsMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Settings)(nil)).Elem()
}

func (i SettingsMap) ToSettingsMapOutput() SettingsMapOutput {
	return i.ToSettingsMapOutputWithContext(context.Background())
}

func (i SettingsMap) ToSettingsMapOutputWithContext(ctx context.Context) SettingsMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SettingsMapOutput)
}

type SettingsOutput struct{ *pulumi.OutputState }

func (SettingsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Settings)(nil)).Elem()
}

func (o SettingsOutput) ToSettingsOutput() SettingsOutput {
	return o
}

func (o SettingsOutput) ToSettingsOutputWithContext(ctx context.Context) SettingsOutput {
	return o
}

// Timestamp of when the automated archival setting was created
func (o SettingsOutput) Created() pulumi.IntOutput {
	return o.ApplyT(func(v *Settings) pulumi.IntOutput { return v.Created }).(pulumi.IntOutput)
}

// ID of the creator of the automated archival setting
func (o SettingsOutput) Creator() pulumi.StringOutput {
	return o.ApplyT(func(v *Settings) pulumi.StringOutput { return v.Creator }).(pulumi.StringOutput)
}

// Whether the automated archival is enabled for this organization or not
func (o SettingsOutput) Enabled() pulumi.BoolOutput {
	return o.ApplyT(func(v *Settings) pulumi.BoolOutput { return v.Enabled }).(pulumi.BoolOutput)
}

// Grace period is an org level setting that applies to the newly created metrics. This allows customers to protect newly added metrics that users haven’t had the time to use in charts and detectors from being automatically archived The value here uses ISO 8061 duration format. Examples - 'P0D', 'P15D', 'P30D', 'P45D', 'P60D'
func (o SettingsOutput) GracePeriod() pulumi.StringOutput {
	return o.ApplyT(func(v *Settings) pulumi.StringOutput { return v.GracePeriod }).(pulumi.StringOutput)
}

// Timestamp of when the automated archival setting was last updated
func (o SettingsOutput) LastUpdated() pulumi.IntOutput {
	return o.ApplyT(func(v *Settings) pulumi.IntOutput { return v.LastUpdated }).(pulumi.IntOutput)
}

// ID of user who last updated the automated archival setting
func (o SettingsOutput) LastUpdatedBy() pulumi.StringOutput {
	return o.ApplyT(func(v *Settings) pulumi.StringOutput { return v.LastUpdatedBy }).(pulumi.StringOutput)
}

// This tracks if a metric was unused in the past N number of days (N one of 30, 45, or 60). We’ll archive a metric if it wasn’t used in the lookback period. The value here uses ISO 8061 duration format. Examples - 'P30D', 'P45D', 'P60D'
func (o SettingsOutput) LookbackPeriod() pulumi.StringOutput {
	return o.ApplyT(func(v *Settings) pulumi.StringOutput { return v.LookbackPeriod }).(pulumi.StringOutput)
}

// Org limit for the number of rulesets that can be created
func (o SettingsOutput) RulesetLimit() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Settings) pulumi.IntPtrOutput { return v.RulesetLimit }).(pulumi.IntPtrOutput)
}

// Version of the automated archival setting
func (o SettingsOutput) Version() pulumi.StringOutput {
	return o.ApplyT(func(v *Settings) pulumi.StringOutput { return v.Version }).(pulumi.StringOutput)
}

type SettingsArrayOutput struct{ *pulumi.OutputState }

func (SettingsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Settings)(nil)).Elem()
}

func (o SettingsArrayOutput) ToSettingsArrayOutput() SettingsArrayOutput {
	return o
}

func (o SettingsArrayOutput) ToSettingsArrayOutputWithContext(ctx context.Context) SettingsArrayOutput {
	return o
}

func (o SettingsArrayOutput) Index(i pulumi.IntInput) SettingsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Settings {
		return vs[0].([]*Settings)[vs[1].(int)]
	}).(SettingsOutput)
}

type SettingsMapOutput struct{ *pulumi.OutputState }

func (SettingsMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Settings)(nil)).Elem()
}

func (o SettingsMapOutput) ToSettingsMapOutput() SettingsMapOutput {
	return o
}

func (o SettingsMapOutput) ToSettingsMapOutputWithContext(ctx context.Context) SettingsMapOutput {
	return o
}

func (o SettingsMapOutput) MapIndex(k pulumi.StringInput) SettingsOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Settings {
		return vs[0].(map[string]*Settings)[vs[1].(string)]
	}).(SettingsOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*SettingsInput)(nil)).Elem(), &Settings{})
	pulumi.RegisterInputType(reflect.TypeOf((*SettingsArrayInput)(nil)).Elem(), SettingsArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SettingsMapInput)(nil)).Elem(), SettingsMap{})
	pulumi.RegisterOutputType(SettingsOutput{})
	pulumi.RegisterOutputType(SettingsArrayOutput{})
	pulumi.RegisterOutputType(SettingsMapOutput{})
}
