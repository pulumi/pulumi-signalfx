// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package signalfx

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-signalfx/sdk/v7/go/signalfx/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// This chart type displays an overview of your SLO and can give more specific insights into your SLI performance using different filter and customized time ranges.
//
// ## Example
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-signalfx/sdk/v7/go/signalfx"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := signalfx.NewSloChart(ctx, "myslochart0", &signalfx.SloChartArgs{
//				SloId: pulumi.String("GbOHXbSAEAA"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
type SloChart struct {
	pulumi.CustomResourceState

	// ID of SLO object.
	SloId pulumi.StringOutput `pulumi:"sloId"`
	// The URL of the chart.
	Url pulumi.StringOutput `pulumi:"url"`
}

// NewSloChart registers a new resource with the given unique name, arguments, and options.
func NewSloChart(ctx *pulumi.Context,
	name string, args *SloChartArgs, opts ...pulumi.ResourceOption) (*SloChart, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.SloId == nil {
		return nil, errors.New("invalid value for required argument 'SloId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource SloChart
	err := ctx.RegisterResource("signalfx:index/sloChart:SloChart", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSloChart gets an existing SloChart resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSloChart(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SloChartState, opts ...pulumi.ResourceOption) (*SloChart, error) {
	var resource SloChart
	err := ctx.ReadResource("signalfx:index/sloChart:SloChart", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering SloChart resources.
type sloChartState struct {
	// ID of SLO object.
	SloId *string `pulumi:"sloId"`
	// The URL of the chart.
	Url *string `pulumi:"url"`
}

type SloChartState struct {
	// ID of SLO object.
	SloId pulumi.StringPtrInput
	// The URL of the chart.
	Url pulumi.StringPtrInput
}

func (SloChartState) ElementType() reflect.Type {
	return reflect.TypeOf((*sloChartState)(nil)).Elem()
}

type sloChartArgs struct {
	// ID of SLO object.
	SloId string `pulumi:"sloId"`
}

// The set of arguments for constructing a SloChart resource.
type SloChartArgs struct {
	// ID of SLO object.
	SloId pulumi.StringInput
}

func (SloChartArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*sloChartArgs)(nil)).Elem()
}

type SloChartInput interface {
	pulumi.Input

	ToSloChartOutput() SloChartOutput
	ToSloChartOutputWithContext(ctx context.Context) SloChartOutput
}

func (*SloChart) ElementType() reflect.Type {
	return reflect.TypeOf((**SloChart)(nil)).Elem()
}

func (i *SloChart) ToSloChartOutput() SloChartOutput {
	return i.ToSloChartOutputWithContext(context.Background())
}

func (i *SloChart) ToSloChartOutputWithContext(ctx context.Context) SloChartOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SloChartOutput)
}

// SloChartArrayInput is an input type that accepts SloChartArray and SloChartArrayOutput values.
// You can construct a concrete instance of `SloChartArrayInput` via:
//
//	SloChartArray{ SloChartArgs{...} }
type SloChartArrayInput interface {
	pulumi.Input

	ToSloChartArrayOutput() SloChartArrayOutput
	ToSloChartArrayOutputWithContext(context.Context) SloChartArrayOutput
}

type SloChartArray []SloChartInput

func (SloChartArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SloChart)(nil)).Elem()
}

func (i SloChartArray) ToSloChartArrayOutput() SloChartArrayOutput {
	return i.ToSloChartArrayOutputWithContext(context.Background())
}

func (i SloChartArray) ToSloChartArrayOutputWithContext(ctx context.Context) SloChartArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SloChartArrayOutput)
}

// SloChartMapInput is an input type that accepts SloChartMap and SloChartMapOutput values.
// You can construct a concrete instance of `SloChartMapInput` via:
//
//	SloChartMap{ "key": SloChartArgs{...} }
type SloChartMapInput interface {
	pulumi.Input

	ToSloChartMapOutput() SloChartMapOutput
	ToSloChartMapOutputWithContext(context.Context) SloChartMapOutput
}

type SloChartMap map[string]SloChartInput

func (SloChartMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SloChart)(nil)).Elem()
}

func (i SloChartMap) ToSloChartMapOutput() SloChartMapOutput {
	return i.ToSloChartMapOutputWithContext(context.Background())
}

func (i SloChartMap) ToSloChartMapOutputWithContext(ctx context.Context) SloChartMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SloChartMapOutput)
}

type SloChartOutput struct{ *pulumi.OutputState }

func (SloChartOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SloChart)(nil)).Elem()
}

func (o SloChartOutput) ToSloChartOutput() SloChartOutput {
	return o
}

func (o SloChartOutput) ToSloChartOutputWithContext(ctx context.Context) SloChartOutput {
	return o
}

// ID of SLO object.
func (o SloChartOutput) SloId() pulumi.StringOutput {
	return o.ApplyT(func(v *SloChart) pulumi.StringOutput { return v.SloId }).(pulumi.StringOutput)
}

// The URL of the chart.
func (o SloChartOutput) Url() pulumi.StringOutput {
	return o.ApplyT(func(v *SloChart) pulumi.StringOutput { return v.Url }).(pulumi.StringOutput)
}

type SloChartArrayOutput struct{ *pulumi.OutputState }

func (SloChartArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SloChart)(nil)).Elem()
}

func (o SloChartArrayOutput) ToSloChartArrayOutput() SloChartArrayOutput {
	return o
}

func (o SloChartArrayOutput) ToSloChartArrayOutputWithContext(ctx context.Context) SloChartArrayOutput {
	return o
}

func (o SloChartArrayOutput) Index(i pulumi.IntInput) SloChartOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *SloChart {
		return vs[0].([]*SloChart)[vs[1].(int)]
	}).(SloChartOutput)
}

type SloChartMapOutput struct{ *pulumi.OutputState }

func (SloChartMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SloChart)(nil)).Elem()
}

func (o SloChartMapOutput) ToSloChartMapOutput() SloChartMapOutput {
	return o
}

func (o SloChartMapOutput) ToSloChartMapOutputWithContext(ctx context.Context) SloChartMapOutput {
	return o
}

func (o SloChartMapOutput) MapIndex(k pulumi.StringInput) SloChartOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *SloChart {
		return vs[0].(map[string]*SloChart)[vs[1].(string)]
	}).(SloChartOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*SloChartInput)(nil)).Elem(), &SloChart{})
	pulumi.RegisterInputType(reflect.TypeOf((*SloChartArrayInput)(nil)).Elem(), SloChartArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SloChartMapInput)(nil)).Elem(), SloChartMap{})
	pulumi.RegisterOutputType(SloChartOutput{})
	pulumi.RegisterOutputType(SloChartArrayOutput{})
	pulumi.RegisterOutputType(SloChartMapOutput{})
}
