// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

// nolint: lll
package gcp

import (
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// SignalFx GCP Integration
//
// > **NOTE** When managing integrations you'll need to use an admin token to authenticate the SignalFx provider. Otherwise you'll receive a 4xx error.
//
// > This content is derived from https://github.com/terraform-providers/terraform-provider-signalfx/blob/master/website/docs/r/gcp_integration.html.markdown.
type Integration struct {
	pulumi.CustomResourceState

	// Whether the integration is enabled.
	Enabled pulumi.BoolOutput `pulumi:"enabled"`
	// Name of the integration.
	Name pulumi.StringOutput `pulumi:"name"`
	// GCP integration poll rate in seconds. Can be set to either 60 or 300 (1 minute or 5 minutes).
	PollRate pulumi.IntPtrOutput `pulumi:"pollRate"`
	// GCP projects to add.
	ProjectServiceKeys IntegrationProjectServiceKeyArrayOutput `pulumi:"projectServiceKeys"`
	// GCP service metrics to import. Can be an empty list, or not included, to import 'All services'.
	Services pulumi.StringArrayOutput `pulumi:"services"`
}

// NewIntegration registers a new resource with the given unique name, arguments, and options.
func NewIntegration(ctx *pulumi.Context,
	name string, args *IntegrationArgs, opts ...pulumi.ResourceOption) (*Integration, error) {
	if args == nil || args.Enabled == nil {
		return nil, errors.New("missing required argument 'Enabled'")
	}
	if args == nil {
		args = &IntegrationArgs{}
	}
	var resource Integration
	err := ctx.RegisterResource("signalfx:gcp/integration:Integration", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetIntegration gets an existing Integration resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetIntegration(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *IntegrationState, opts ...pulumi.ResourceOption) (*Integration, error) {
	var resource Integration
	err := ctx.ReadResource("signalfx:gcp/integration:Integration", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Integration resources.
type integrationState struct {
	// Whether the integration is enabled.
	Enabled *bool `pulumi:"enabled"`
	// Name of the integration.
	Name *string `pulumi:"name"`
	// GCP integration poll rate in seconds. Can be set to either 60 or 300 (1 minute or 5 minutes).
	PollRate *int `pulumi:"pollRate"`
	// GCP projects to add.
	ProjectServiceKeys []IntegrationProjectServiceKey `pulumi:"projectServiceKeys"`
	// GCP service metrics to import. Can be an empty list, or not included, to import 'All services'.
	Services []string `pulumi:"services"`
}

type IntegrationState struct {
	// Whether the integration is enabled.
	Enabled pulumi.BoolPtrInput
	// Name of the integration.
	Name pulumi.StringPtrInput
	// GCP integration poll rate in seconds. Can be set to either 60 or 300 (1 minute or 5 minutes).
	PollRate pulumi.IntPtrInput
	// GCP projects to add.
	ProjectServiceKeys IntegrationProjectServiceKeyArrayInput
	// GCP service metrics to import. Can be an empty list, or not included, to import 'All services'.
	Services pulumi.StringArrayInput
}

func (IntegrationState) ElementType() reflect.Type {
	return reflect.TypeOf((*integrationState)(nil)).Elem()
}

type integrationArgs struct {
	// Whether the integration is enabled.
	Enabled bool `pulumi:"enabled"`
	// Name of the integration.
	Name *string `pulumi:"name"`
	// GCP integration poll rate in seconds. Can be set to either 60 or 300 (1 minute or 5 minutes).
	PollRate *int `pulumi:"pollRate"`
	// GCP projects to add.
	ProjectServiceKeys []IntegrationProjectServiceKey `pulumi:"projectServiceKeys"`
	// GCP service metrics to import. Can be an empty list, or not included, to import 'All services'.
	Services []string `pulumi:"services"`
}

// The set of arguments for constructing a Integration resource.
type IntegrationArgs struct {
	// Whether the integration is enabled.
	Enabled pulumi.BoolInput
	// Name of the integration.
	Name pulumi.StringPtrInput
	// GCP integration poll rate in seconds. Can be set to either 60 or 300 (1 minute or 5 minutes).
	PollRate pulumi.IntPtrInput
	// GCP projects to add.
	ProjectServiceKeys IntegrationProjectServiceKeyArrayInput
	// GCP service metrics to import. Can be an empty list, or not included, to import 'All services'.
	Services pulumi.StringArrayInput
}

func (IntegrationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*integrationArgs)(nil)).Elem()
}
