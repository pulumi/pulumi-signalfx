// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package gcp

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-signalfx/sdk/v7/go/signalfx/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

var _ = internal.GetEnvOrDefault

type IntegrationProjectServiceKey struct {
	ProjectId  string `pulumi:"projectId"`
	ProjectKey string `pulumi:"projectKey"`
}

// IntegrationProjectServiceKeyInput is an input type that accepts IntegrationProjectServiceKeyArgs and IntegrationProjectServiceKeyOutput values.
// You can construct a concrete instance of `IntegrationProjectServiceKeyInput` via:
//
//	IntegrationProjectServiceKeyArgs{...}
type IntegrationProjectServiceKeyInput interface {
	pulumi.Input

	ToIntegrationProjectServiceKeyOutput() IntegrationProjectServiceKeyOutput
	ToIntegrationProjectServiceKeyOutputWithContext(context.Context) IntegrationProjectServiceKeyOutput
}

type IntegrationProjectServiceKeyArgs struct {
	ProjectId  pulumi.StringInput `pulumi:"projectId"`
	ProjectKey pulumi.StringInput `pulumi:"projectKey"`
}

func (IntegrationProjectServiceKeyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*IntegrationProjectServiceKey)(nil)).Elem()
}

func (i IntegrationProjectServiceKeyArgs) ToIntegrationProjectServiceKeyOutput() IntegrationProjectServiceKeyOutput {
	return i.ToIntegrationProjectServiceKeyOutputWithContext(context.Background())
}

func (i IntegrationProjectServiceKeyArgs) ToIntegrationProjectServiceKeyOutputWithContext(ctx context.Context) IntegrationProjectServiceKeyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IntegrationProjectServiceKeyOutput)
}

// IntegrationProjectServiceKeyArrayInput is an input type that accepts IntegrationProjectServiceKeyArray and IntegrationProjectServiceKeyArrayOutput values.
// You can construct a concrete instance of `IntegrationProjectServiceKeyArrayInput` via:
//
//	IntegrationProjectServiceKeyArray{ IntegrationProjectServiceKeyArgs{...} }
type IntegrationProjectServiceKeyArrayInput interface {
	pulumi.Input

	ToIntegrationProjectServiceKeyArrayOutput() IntegrationProjectServiceKeyArrayOutput
	ToIntegrationProjectServiceKeyArrayOutputWithContext(context.Context) IntegrationProjectServiceKeyArrayOutput
}

type IntegrationProjectServiceKeyArray []IntegrationProjectServiceKeyInput

func (IntegrationProjectServiceKeyArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]IntegrationProjectServiceKey)(nil)).Elem()
}

func (i IntegrationProjectServiceKeyArray) ToIntegrationProjectServiceKeyArrayOutput() IntegrationProjectServiceKeyArrayOutput {
	return i.ToIntegrationProjectServiceKeyArrayOutputWithContext(context.Background())
}

func (i IntegrationProjectServiceKeyArray) ToIntegrationProjectServiceKeyArrayOutputWithContext(ctx context.Context) IntegrationProjectServiceKeyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IntegrationProjectServiceKeyArrayOutput)
}

type IntegrationProjectServiceKeyOutput struct{ *pulumi.OutputState }

func (IntegrationProjectServiceKeyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*IntegrationProjectServiceKey)(nil)).Elem()
}

func (o IntegrationProjectServiceKeyOutput) ToIntegrationProjectServiceKeyOutput() IntegrationProjectServiceKeyOutput {
	return o
}

func (o IntegrationProjectServiceKeyOutput) ToIntegrationProjectServiceKeyOutputWithContext(ctx context.Context) IntegrationProjectServiceKeyOutput {
	return o
}

func (o IntegrationProjectServiceKeyOutput) ProjectId() pulumi.StringOutput {
	return o.ApplyT(func(v IntegrationProjectServiceKey) string { return v.ProjectId }).(pulumi.StringOutput)
}

func (o IntegrationProjectServiceKeyOutput) ProjectKey() pulumi.StringOutput {
	return o.ApplyT(func(v IntegrationProjectServiceKey) string { return v.ProjectKey }).(pulumi.StringOutput)
}

type IntegrationProjectServiceKeyArrayOutput struct{ *pulumi.OutputState }

func (IntegrationProjectServiceKeyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]IntegrationProjectServiceKey)(nil)).Elem()
}

func (o IntegrationProjectServiceKeyArrayOutput) ToIntegrationProjectServiceKeyArrayOutput() IntegrationProjectServiceKeyArrayOutput {
	return o
}

func (o IntegrationProjectServiceKeyArrayOutput) ToIntegrationProjectServiceKeyArrayOutputWithContext(ctx context.Context) IntegrationProjectServiceKeyArrayOutput {
	return o
}

func (o IntegrationProjectServiceKeyArrayOutput) Index(i pulumi.IntInput) IntegrationProjectServiceKeyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) IntegrationProjectServiceKey {
		return vs[0].([]IntegrationProjectServiceKey)[vs[1].(int)]
	}).(IntegrationProjectServiceKeyOutput)
}

type IntegrationProjectWifConfig struct {
	ProjectId string `pulumi:"projectId"`
	WifConfig string `pulumi:"wifConfig"`
}

// IntegrationProjectWifConfigInput is an input type that accepts IntegrationProjectWifConfigArgs and IntegrationProjectWifConfigOutput values.
// You can construct a concrete instance of `IntegrationProjectWifConfigInput` via:
//
//	IntegrationProjectWifConfigArgs{...}
type IntegrationProjectWifConfigInput interface {
	pulumi.Input

	ToIntegrationProjectWifConfigOutput() IntegrationProjectWifConfigOutput
	ToIntegrationProjectWifConfigOutputWithContext(context.Context) IntegrationProjectWifConfigOutput
}

type IntegrationProjectWifConfigArgs struct {
	ProjectId pulumi.StringInput `pulumi:"projectId"`
	WifConfig pulumi.StringInput `pulumi:"wifConfig"`
}

func (IntegrationProjectWifConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*IntegrationProjectWifConfig)(nil)).Elem()
}

func (i IntegrationProjectWifConfigArgs) ToIntegrationProjectWifConfigOutput() IntegrationProjectWifConfigOutput {
	return i.ToIntegrationProjectWifConfigOutputWithContext(context.Background())
}

func (i IntegrationProjectWifConfigArgs) ToIntegrationProjectWifConfigOutputWithContext(ctx context.Context) IntegrationProjectWifConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IntegrationProjectWifConfigOutput)
}

// IntegrationProjectWifConfigArrayInput is an input type that accepts IntegrationProjectWifConfigArray and IntegrationProjectWifConfigArrayOutput values.
// You can construct a concrete instance of `IntegrationProjectWifConfigArrayInput` via:
//
//	IntegrationProjectWifConfigArray{ IntegrationProjectWifConfigArgs{...} }
type IntegrationProjectWifConfigArrayInput interface {
	pulumi.Input

	ToIntegrationProjectWifConfigArrayOutput() IntegrationProjectWifConfigArrayOutput
	ToIntegrationProjectWifConfigArrayOutputWithContext(context.Context) IntegrationProjectWifConfigArrayOutput
}

type IntegrationProjectWifConfigArray []IntegrationProjectWifConfigInput

func (IntegrationProjectWifConfigArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]IntegrationProjectWifConfig)(nil)).Elem()
}

func (i IntegrationProjectWifConfigArray) ToIntegrationProjectWifConfigArrayOutput() IntegrationProjectWifConfigArrayOutput {
	return i.ToIntegrationProjectWifConfigArrayOutputWithContext(context.Background())
}

func (i IntegrationProjectWifConfigArray) ToIntegrationProjectWifConfigArrayOutputWithContext(ctx context.Context) IntegrationProjectWifConfigArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IntegrationProjectWifConfigArrayOutput)
}

type IntegrationProjectWifConfigOutput struct{ *pulumi.OutputState }

func (IntegrationProjectWifConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*IntegrationProjectWifConfig)(nil)).Elem()
}

func (o IntegrationProjectWifConfigOutput) ToIntegrationProjectWifConfigOutput() IntegrationProjectWifConfigOutput {
	return o
}

func (o IntegrationProjectWifConfigOutput) ToIntegrationProjectWifConfigOutputWithContext(ctx context.Context) IntegrationProjectWifConfigOutput {
	return o
}

func (o IntegrationProjectWifConfigOutput) ProjectId() pulumi.StringOutput {
	return o.ApplyT(func(v IntegrationProjectWifConfig) string { return v.ProjectId }).(pulumi.StringOutput)
}

func (o IntegrationProjectWifConfigOutput) WifConfig() pulumi.StringOutput {
	return o.ApplyT(func(v IntegrationProjectWifConfig) string { return v.WifConfig }).(pulumi.StringOutput)
}

type IntegrationProjectWifConfigArrayOutput struct{ *pulumi.OutputState }

func (IntegrationProjectWifConfigArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]IntegrationProjectWifConfig)(nil)).Elem()
}

func (o IntegrationProjectWifConfigArrayOutput) ToIntegrationProjectWifConfigArrayOutput() IntegrationProjectWifConfigArrayOutput {
	return o
}

func (o IntegrationProjectWifConfigArrayOutput) ToIntegrationProjectWifConfigArrayOutputWithContext(ctx context.Context) IntegrationProjectWifConfigArrayOutput {
	return o
}

func (o IntegrationProjectWifConfigArrayOutput) Index(i pulumi.IntInput) IntegrationProjectWifConfigOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) IntegrationProjectWifConfig {
		return vs[0].([]IntegrationProjectWifConfig)[vs[1].(int)]
	}).(IntegrationProjectWifConfigOutput)
}

type IntegrationProjects struct {
	// List of project IDs to synchronize metrics and metadata from. Use only if you don't want to automatically synchronize all projects.
	SelectedProjectIds []string `pulumi:"selectedProjectIds"`
	// What mode of synchronizing projects should be used. Sync all tries to synchronize metrics and metadata from all discoverable projects.
	SyncMode *string `pulumi:"syncMode"`
}

// IntegrationProjectsInput is an input type that accepts IntegrationProjectsArgs and IntegrationProjectsOutput values.
// You can construct a concrete instance of `IntegrationProjectsInput` via:
//
//	IntegrationProjectsArgs{...}
type IntegrationProjectsInput interface {
	pulumi.Input

	ToIntegrationProjectsOutput() IntegrationProjectsOutput
	ToIntegrationProjectsOutputWithContext(context.Context) IntegrationProjectsOutput
}

type IntegrationProjectsArgs struct {
	// List of project IDs to synchronize metrics and metadata from. Use only if you don't want to automatically synchronize all projects.
	SelectedProjectIds pulumi.StringArrayInput `pulumi:"selectedProjectIds"`
	// What mode of synchronizing projects should be used. Sync all tries to synchronize metrics and metadata from all discoverable projects.
	SyncMode pulumi.StringPtrInput `pulumi:"syncMode"`
}

func (IntegrationProjectsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*IntegrationProjects)(nil)).Elem()
}

func (i IntegrationProjectsArgs) ToIntegrationProjectsOutput() IntegrationProjectsOutput {
	return i.ToIntegrationProjectsOutputWithContext(context.Background())
}

func (i IntegrationProjectsArgs) ToIntegrationProjectsOutputWithContext(ctx context.Context) IntegrationProjectsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IntegrationProjectsOutput)
}

func (i IntegrationProjectsArgs) ToIntegrationProjectsPtrOutput() IntegrationProjectsPtrOutput {
	return i.ToIntegrationProjectsPtrOutputWithContext(context.Background())
}

func (i IntegrationProjectsArgs) ToIntegrationProjectsPtrOutputWithContext(ctx context.Context) IntegrationProjectsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IntegrationProjectsOutput).ToIntegrationProjectsPtrOutputWithContext(ctx)
}

// IntegrationProjectsPtrInput is an input type that accepts IntegrationProjectsArgs, IntegrationProjectsPtr and IntegrationProjectsPtrOutput values.
// You can construct a concrete instance of `IntegrationProjectsPtrInput` via:
//
//	        IntegrationProjectsArgs{...}
//
//	or:
//
//	        nil
type IntegrationProjectsPtrInput interface {
	pulumi.Input

	ToIntegrationProjectsPtrOutput() IntegrationProjectsPtrOutput
	ToIntegrationProjectsPtrOutputWithContext(context.Context) IntegrationProjectsPtrOutput
}

type integrationProjectsPtrType IntegrationProjectsArgs

func IntegrationProjectsPtr(v *IntegrationProjectsArgs) IntegrationProjectsPtrInput {
	return (*integrationProjectsPtrType)(v)
}

func (*integrationProjectsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**IntegrationProjects)(nil)).Elem()
}

func (i *integrationProjectsPtrType) ToIntegrationProjectsPtrOutput() IntegrationProjectsPtrOutput {
	return i.ToIntegrationProjectsPtrOutputWithContext(context.Background())
}

func (i *integrationProjectsPtrType) ToIntegrationProjectsPtrOutputWithContext(ctx context.Context) IntegrationProjectsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IntegrationProjectsPtrOutput)
}

type IntegrationProjectsOutput struct{ *pulumi.OutputState }

func (IntegrationProjectsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*IntegrationProjects)(nil)).Elem()
}

func (o IntegrationProjectsOutput) ToIntegrationProjectsOutput() IntegrationProjectsOutput {
	return o
}

func (o IntegrationProjectsOutput) ToIntegrationProjectsOutputWithContext(ctx context.Context) IntegrationProjectsOutput {
	return o
}

func (o IntegrationProjectsOutput) ToIntegrationProjectsPtrOutput() IntegrationProjectsPtrOutput {
	return o.ToIntegrationProjectsPtrOutputWithContext(context.Background())
}

func (o IntegrationProjectsOutput) ToIntegrationProjectsPtrOutputWithContext(ctx context.Context) IntegrationProjectsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v IntegrationProjects) *IntegrationProjects {
		return &v
	}).(IntegrationProjectsPtrOutput)
}

// List of project IDs to synchronize metrics and metadata from. Use only if you don't want to automatically synchronize all projects.
func (o IntegrationProjectsOutput) SelectedProjectIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v IntegrationProjects) []string { return v.SelectedProjectIds }).(pulumi.StringArrayOutput)
}

// What mode of synchronizing projects should be used. Sync all tries to synchronize metrics and metadata from all discoverable projects.
func (o IntegrationProjectsOutput) SyncMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v IntegrationProjects) *string { return v.SyncMode }).(pulumi.StringPtrOutput)
}

type IntegrationProjectsPtrOutput struct{ *pulumi.OutputState }

func (IntegrationProjectsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**IntegrationProjects)(nil)).Elem()
}

func (o IntegrationProjectsPtrOutput) ToIntegrationProjectsPtrOutput() IntegrationProjectsPtrOutput {
	return o
}

func (o IntegrationProjectsPtrOutput) ToIntegrationProjectsPtrOutputWithContext(ctx context.Context) IntegrationProjectsPtrOutput {
	return o
}

func (o IntegrationProjectsPtrOutput) Elem() IntegrationProjectsOutput {
	return o.ApplyT(func(v *IntegrationProjects) IntegrationProjects {
		if v != nil {
			return *v
		}
		var ret IntegrationProjects
		return ret
	}).(IntegrationProjectsOutput)
}

// List of project IDs to synchronize metrics and metadata from. Use only if you don't want to automatically synchronize all projects.
func (o IntegrationProjectsPtrOutput) SelectedProjectIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *IntegrationProjects) []string {
		if v == nil {
			return nil
		}
		return v.SelectedProjectIds
	}).(pulumi.StringArrayOutput)
}

// What mode of synchronizing projects should be used. Sync all tries to synchronize metrics and metadata from all discoverable projects.
func (o IntegrationProjectsPtrOutput) SyncMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *IntegrationProjects) *string {
		if v == nil {
			return nil
		}
		return v.SyncMode
	}).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*IntegrationProjectServiceKeyInput)(nil)).Elem(), IntegrationProjectServiceKeyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*IntegrationProjectServiceKeyArrayInput)(nil)).Elem(), IntegrationProjectServiceKeyArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*IntegrationProjectWifConfigInput)(nil)).Elem(), IntegrationProjectWifConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*IntegrationProjectWifConfigArrayInput)(nil)).Elem(), IntegrationProjectWifConfigArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*IntegrationProjectsInput)(nil)).Elem(), IntegrationProjectsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*IntegrationProjectsPtrInput)(nil)).Elem(), IntegrationProjectsArgs{})
	pulumi.RegisterOutputType(IntegrationProjectServiceKeyOutput{})
	pulumi.RegisterOutputType(IntegrationProjectServiceKeyArrayOutput{})
	pulumi.RegisterOutputType(IntegrationProjectWifConfigOutput{})
	pulumi.RegisterOutputType(IntegrationProjectWifConfigArrayOutput{})
	pulumi.RegisterOutputType(IntegrationProjectsOutput{})
	pulumi.RegisterOutputType(IntegrationProjectsPtrOutput{})
}
