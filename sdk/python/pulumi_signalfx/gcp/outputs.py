# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities

__all__ = [
    'IntegrationProjectServiceKey',
    'IntegrationProjectWifConfig',
    'IntegrationProjects',
]

@pulumi.output_type
class IntegrationProjectServiceKey(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "projectId":
            suggest = "project_id"
        elif key == "projectKey":
            suggest = "project_key"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in IntegrationProjectServiceKey. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        IntegrationProjectServiceKey.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        IntegrationProjectServiceKey.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 project_id: _builtins.str,
                 project_key: _builtins.str):
        pulumi.set(__self__, "project_id", project_id)
        pulumi.set(__self__, "project_key", project_key)

    @_builtins.property
    @pulumi.getter(name="projectId")
    def project_id(self) -> _builtins.str:
        return pulumi.get(self, "project_id")

    @_builtins.property
    @pulumi.getter(name="projectKey")
    def project_key(self) -> _builtins.str:
        return pulumi.get(self, "project_key")


@pulumi.output_type
class IntegrationProjectWifConfig(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "projectId":
            suggest = "project_id"
        elif key == "wifConfig":
            suggest = "wif_config"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in IntegrationProjectWifConfig. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        IntegrationProjectWifConfig.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        IntegrationProjectWifConfig.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 project_id: _builtins.str,
                 wif_config: _builtins.str):
        pulumi.set(__self__, "project_id", project_id)
        pulumi.set(__self__, "wif_config", wif_config)

    @_builtins.property
    @pulumi.getter(name="projectId")
    def project_id(self) -> _builtins.str:
        return pulumi.get(self, "project_id")

    @_builtins.property
    @pulumi.getter(name="wifConfig")
    def wif_config(self) -> _builtins.str:
        return pulumi.get(self, "wif_config")


@pulumi.output_type
class IntegrationProjects(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "selectedProjectIds":
            suggest = "selected_project_ids"
        elif key == "syncMode":
            suggest = "sync_mode"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in IntegrationProjects. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        IntegrationProjects.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        IntegrationProjects.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 selected_project_ids: Optional[Sequence[_builtins.str]] = None,
                 sync_mode: Optional[_builtins.str] = None):
        """
        :param Sequence[_builtins.str] selected_project_ids: List of project IDs to synchronize metrics and metadata from. Use only if you don't want to automatically synchronize all projects.
        :param _builtins.str sync_mode: What mode of synchronizing projects should be used. Sync all tries to synchronize metrics and metadata from all discoverable projects.
        """
        if selected_project_ids is not None:
            pulumi.set(__self__, "selected_project_ids", selected_project_ids)
        if sync_mode is not None:
            pulumi.set(__self__, "sync_mode", sync_mode)

    @_builtins.property
    @pulumi.getter(name="selectedProjectIds")
    def selected_project_ids(self) -> Optional[Sequence[_builtins.str]]:
        """
        List of project IDs to synchronize metrics and metadata from. Use only if you don't want to automatically synchronize all projects.
        """
        return pulumi.get(self, "selected_project_ids")

    @_builtins.property
    @pulumi.getter(name="syncMode")
    def sync_mode(self) -> Optional[_builtins.str]:
        """
        What mode of synchronizing projects should be used. Sync all tries to synchronize metrics and metadata from all discoverable projects.
        """
        return pulumi.get(self, "sync_mode")


