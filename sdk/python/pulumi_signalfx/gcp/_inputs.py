# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities

__all__ = [
    'IntegrationProjectServiceKeyArgs',
    'IntegrationProjectServiceKeyArgsDict',
    'IntegrationProjectWifConfigArgs',
    'IntegrationProjectWifConfigArgsDict',
    'IntegrationProjectsArgs',
    'IntegrationProjectsArgsDict',
]

MYPY = False

if not MYPY:
    class IntegrationProjectServiceKeyArgsDict(TypedDict):
        project_id: pulumi.Input[_builtins.str]
        project_key: pulumi.Input[_builtins.str]
elif False:
    IntegrationProjectServiceKeyArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class IntegrationProjectServiceKeyArgs:
    def __init__(__self__, *,
                 project_id: pulumi.Input[_builtins.str],
                 project_key: pulumi.Input[_builtins.str]):
        pulumi.set(__self__, "project_id", project_id)
        pulumi.set(__self__, "project_key", project_key)

    @_builtins.property
    @pulumi.getter(name="projectId")
    def project_id(self) -> pulumi.Input[_builtins.str]:
        return pulumi.get(self, "project_id")

    @project_id.setter
    def project_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "project_id", value)

    @_builtins.property
    @pulumi.getter(name="projectKey")
    def project_key(self) -> pulumi.Input[_builtins.str]:
        return pulumi.get(self, "project_key")

    @project_key.setter
    def project_key(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "project_key", value)


if not MYPY:
    class IntegrationProjectWifConfigArgsDict(TypedDict):
        project_id: pulumi.Input[_builtins.str]
        wif_config: pulumi.Input[_builtins.str]
elif False:
    IntegrationProjectWifConfigArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class IntegrationProjectWifConfigArgs:
    def __init__(__self__, *,
                 project_id: pulumi.Input[_builtins.str],
                 wif_config: pulumi.Input[_builtins.str]):
        pulumi.set(__self__, "project_id", project_id)
        pulumi.set(__self__, "wif_config", wif_config)

    @_builtins.property
    @pulumi.getter(name="projectId")
    def project_id(self) -> pulumi.Input[_builtins.str]:
        return pulumi.get(self, "project_id")

    @project_id.setter
    def project_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "project_id", value)

    @_builtins.property
    @pulumi.getter(name="wifConfig")
    def wif_config(self) -> pulumi.Input[_builtins.str]:
        return pulumi.get(self, "wif_config")

    @wif_config.setter
    def wif_config(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "wif_config", value)


if not MYPY:
    class IntegrationProjectsArgsDict(TypedDict):
        selected_project_ids: NotRequired[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]
        """
        List of project IDs to synchronize metrics and metadata from. Use only if you don't want to automatically synchronize all projects.
        """
        sync_mode: NotRequired[pulumi.Input[_builtins.str]]
        """
        What mode of synchronizing projects should be used. Sync all tries to synchronize metrics and metadata from all discoverable projects.
        """
elif False:
    IntegrationProjectsArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class IntegrationProjectsArgs:
    def __init__(__self__, *,
                 selected_project_ids: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 sync_mode: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] selected_project_ids: List of project IDs to synchronize metrics and metadata from. Use only if you don't want to automatically synchronize all projects.
        :param pulumi.Input[_builtins.str] sync_mode: What mode of synchronizing projects should be used. Sync all tries to synchronize metrics and metadata from all discoverable projects.
        """
        if selected_project_ids is not None:
            pulumi.set(__self__, "selected_project_ids", selected_project_ids)
        if sync_mode is not None:
            pulumi.set(__self__, "sync_mode", sync_mode)

    @_builtins.property
    @pulumi.getter(name="selectedProjectIds")
    def selected_project_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        List of project IDs to synchronize metrics and metadata from. Use only if you don't want to automatically synchronize all projects.
        """
        return pulumi.get(self, "selected_project_ids")

    @selected_project_ids.setter
    def selected_project_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "selected_project_ids", value)

    @_builtins.property
    @pulumi.getter(name="syncMode")
    def sync_mode(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        What mode of synchronizing projects should be used. Sync all tries to synchronize metrics and metadata from all discoverable projects.
        """
        return pulumi.get(self, "sync_mode")

    @sync_mode.setter
    def sync_mode(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "sync_mode", value)


