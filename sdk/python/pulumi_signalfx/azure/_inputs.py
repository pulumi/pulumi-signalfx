# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Callable, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = [
    'IntegrationCustomNamespacesPerServiceArgs',
    'IntegrationResourceFilterRuleArgs',
]

@pulumi.input_type
class IntegrationCustomNamespacesPerServiceArgs:
    def __init__(__self__, *,
                 namespaces: pulumi.Input[Sequence[pulumi.Input[str]]],
                 service: pulumi.Input[str]):
        """
        :param pulumi.Input[Sequence[pulumi.Input[str]]] namespaces: The additional namespaces.
        :param pulumi.Input[str] service: The name of the service.
        """
        IntegrationCustomNamespacesPerServiceArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            namespaces=namespaces,
            service=service,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             namespaces: pulumi.Input[Sequence[pulumi.Input[str]]],
             service: pulumi.Input[str],
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("namespaces", namespaces)
        _setter("service", service)

    @property
    @pulumi.getter
    def namespaces(self) -> pulumi.Input[Sequence[pulumi.Input[str]]]:
        """
        The additional namespaces.
        """
        return pulumi.get(self, "namespaces")

    @namespaces.setter
    def namespaces(self, value: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(self, "namespaces", value)

    @property
    @pulumi.getter
    def service(self) -> pulumi.Input[str]:
        """
        The name of the service.
        """
        return pulumi.get(self, "service")

    @service.setter
    def service(self, value: pulumi.Input[str]):
        pulumi.set(self, "service", value)


@pulumi.input_type
class IntegrationResourceFilterRuleArgs:
    def __init__(__self__, *,
                 filter_source: pulumi.Input[str]):
        """
        :param pulumi.Input[str] filter_source: Expression that selects the data that SignalFx should sync for the resource associated with this sync rule. The expression uses the syntax defined for the SignalFlow `filter()` function. The source of each filter rule must be in the form filter('key', 'value'). You can join multiple filter statements using the and and or operators. Referenced keys are limited to tags and must start with the azure_tag_ prefix.
        """
        IntegrationResourceFilterRuleArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            filter_source=filter_source,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             filter_source: pulumi.Input[str],
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("filter_source", filter_source)

    @property
    @pulumi.getter(name="filterSource")
    def filter_source(self) -> pulumi.Input[str]:
        """
        Expression that selects the data that SignalFx should sync for the resource associated with this sync rule. The expression uses the syntax defined for the SignalFlow `filter()` function. The source of each filter rule must be in the form filter('key', 'value'). You can join multiple filter statements using the and and or operators. Referenced keys are limited to tags and must start with the azure_tag_ prefix.
        """
        return pulumi.get(self, "filter_source")

    @filter_source.setter
    def filter_source(self, value: pulumi.Input[str]):
        pulumi.set(self, "filter_source", value)


