# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union
from .. import _utilities, _tables

__all__ = ['Integration']


class Integration(pulumi.CustomResource):
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 api_token: Optional[pulumi.Input[str]] = None,
                 assignee_display_name: Optional[pulumi.Input[str]] = None,
                 assignee_name: Optional[pulumi.Input[str]] = None,
                 auth_method: Optional[pulumi.Input[str]] = None,
                 base_url: Optional[pulumi.Input[str]] = None,
                 enabled: Optional[pulumi.Input[bool]] = None,
                 issue_type: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 password: Optional[pulumi.Input[str]] = None,
                 project_key: Optional[pulumi.Input[str]] = None,
                 user_email: Optional[pulumi.Input[str]] = None,
                 username: Optional[pulumi.Input[str]] = None,
                 __props__=None,
                 __name__=None,
                 __opts__=None):
        """
        SignalFx Jira integrations. For help with this integration see [Integration with Jira](https://docs.signalfx.com/en/latest/admin-guide/integrate-notifications.html#integrate-with-jira).

        > **NOTE** When managing integrations you'll need to use an admin token to authenticate the SignalFx provider. Otherwise you'll receive a 4xx error.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_signalfx as signalfx

        jira_myteam_xx = signalfx.jira.Integration("jiraMyteamXX",
            assignee_display_name="Testy Testerson",
            assignee_name="testytesterson",
            auth_method="UsernameAndPassword",
            base_url="https://www.example.com",
            enabled=False,
            issue_type="Story",
            password="paasword",
            project_key="TEST",
            username="yoosername")
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] api_token: The API token for the user email
        :param pulumi.Input[str] assignee_display_name: Jira display name for the assignee.
        :param pulumi.Input[str] assignee_name: Jira user name for the assignee.
        :param pulumi.Input[str] auth_method: Authentication method used when creating the Jira integration. One of `EmailAndToken` (using `user_email` and `api_token`) or `UsernameAndPassword` (using `username` and `password`).
        :param pulumi.Input[str] base_url: Base URL of the Jira instance that's integrated with SignalFx.
        :param pulumi.Input[bool] enabled: Whether the integration is enabled.
        :param pulumi.Input[str] issue_type: Issue type (for example, Story) for tickets that Jira creates for detector notifications. SignalFx validates issue types, so you must specify a type that's valid for the Jira project specified in `projectKey`.
        :param pulumi.Input[str] name: Name of the integration.
        :param pulumi.Input[str] password: Password used to authenticate the Jira integration.
        :param pulumi.Input[str] project_key: Jira key of an existing project. When Jira creates a new ticket for a detector notification, the ticket is assigned to this project.
        :param pulumi.Input[str] user_email: Email address used to authenticate the Jira integration.
        :param pulumi.Input[str] username: User name used to authenticate the Jira integration.
        """
        if __name__ is not None:
            warnings.warn("explicit use of __name__ is deprecated", DeprecationWarning)
            resource_name = __name__
        if __opts__ is not None:
            warnings.warn("explicit use of __opts__ is deprecated, use 'opts' instead", DeprecationWarning)
            opts = __opts__
        if opts is None:
            opts = pulumi.ResourceOptions()
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.version is None:
            opts.version = _utilities.get_version()
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = dict()

            __props__['api_token'] = api_token
            __props__['assignee_display_name'] = assignee_display_name
            if assignee_name is None and not opts.urn:
                raise TypeError("Missing required property 'assignee_name'")
            __props__['assignee_name'] = assignee_name
            if auth_method is None and not opts.urn:
                raise TypeError("Missing required property 'auth_method'")
            __props__['auth_method'] = auth_method
            if base_url is None and not opts.urn:
                raise TypeError("Missing required property 'base_url'")
            __props__['base_url'] = base_url
            if enabled is None and not opts.urn:
                raise TypeError("Missing required property 'enabled'")
            __props__['enabled'] = enabled
            if issue_type is None and not opts.urn:
                raise TypeError("Missing required property 'issue_type'")
            __props__['issue_type'] = issue_type
            __props__['name'] = name
            __props__['password'] = password
            if project_key is None and not opts.urn:
                raise TypeError("Missing required property 'project_key'")
            __props__['project_key'] = project_key
            __props__['user_email'] = user_email
            __props__['username'] = username
        super(Integration, __self__).__init__(
            'signalfx:jira/integration:Integration',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            api_token: Optional[pulumi.Input[str]] = None,
            assignee_display_name: Optional[pulumi.Input[str]] = None,
            assignee_name: Optional[pulumi.Input[str]] = None,
            auth_method: Optional[pulumi.Input[str]] = None,
            base_url: Optional[pulumi.Input[str]] = None,
            enabled: Optional[pulumi.Input[bool]] = None,
            issue_type: Optional[pulumi.Input[str]] = None,
            name: Optional[pulumi.Input[str]] = None,
            password: Optional[pulumi.Input[str]] = None,
            project_key: Optional[pulumi.Input[str]] = None,
            user_email: Optional[pulumi.Input[str]] = None,
            username: Optional[pulumi.Input[str]] = None) -> 'Integration':
        """
        Get an existing Integration resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] api_token: The API token for the user email
        :param pulumi.Input[str] assignee_display_name: Jira display name for the assignee.
        :param pulumi.Input[str] assignee_name: Jira user name for the assignee.
        :param pulumi.Input[str] auth_method: Authentication method used when creating the Jira integration. One of `EmailAndToken` (using `user_email` and `api_token`) or `UsernameAndPassword` (using `username` and `password`).
        :param pulumi.Input[str] base_url: Base URL of the Jira instance that's integrated with SignalFx.
        :param pulumi.Input[bool] enabled: Whether the integration is enabled.
        :param pulumi.Input[str] issue_type: Issue type (for example, Story) for tickets that Jira creates for detector notifications. SignalFx validates issue types, so you must specify a type that's valid for the Jira project specified in `projectKey`.
        :param pulumi.Input[str] name: Name of the integration.
        :param pulumi.Input[str] password: Password used to authenticate the Jira integration.
        :param pulumi.Input[str] project_key: Jira key of an existing project. When Jira creates a new ticket for a detector notification, the ticket is assigned to this project.
        :param pulumi.Input[str] user_email: Email address used to authenticate the Jira integration.
        :param pulumi.Input[str] username: User name used to authenticate the Jira integration.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = dict()

        __props__["api_token"] = api_token
        __props__["assignee_display_name"] = assignee_display_name
        __props__["assignee_name"] = assignee_name
        __props__["auth_method"] = auth_method
        __props__["base_url"] = base_url
        __props__["enabled"] = enabled
        __props__["issue_type"] = issue_type
        __props__["name"] = name
        __props__["password"] = password
        __props__["project_key"] = project_key
        __props__["user_email"] = user_email
        __props__["username"] = username
        return Integration(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="apiToken")
    def api_token(self) -> pulumi.Output[Optional[str]]:
        """
        The API token for the user email
        """
        return pulumi.get(self, "api_token")

    @property
    @pulumi.getter(name="assigneeDisplayName")
    def assignee_display_name(self) -> pulumi.Output[Optional[str]]:
        """
        Jira display name for the assignee.
        """
        return pulumi.get(self, "assignee_display_name")

    @property
    @pulumi.getter(name="assigneeName")
    def assignee_name(self) -> pulumi.Output[str]:
        """
        Jira user name for the assignee.
        """
        return pulumi.get(self, "assignee_name")

    @property
    @pulumi.getter(name="authMethod")
    def auth_method(self) -> pulumi.Output[str]:
        """
        Authentication method used when creating the Jira integration. One of `EmailAndToken` (using `user_email` and `api_token`) or `UsernameAndPassword` (using `username` and `password`).
        """
        return pulumi.get(self, "auth_method")

    @property
    @pulumi.getter(name="baseUrl")
    def base_url(self) -> pulumi.Output[str]:
        """
        Base URL of the Jira instance that's integrated with SignalFx.
        """
        return pulumi.get(self, "base_url")

    @property
    @pulumi.getter
    def enabled(self) -> pulumi.Output[bool]:
        """
        Whether the integration is enabled.
        """
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter(name="issueType")
    def issue_type(self) -> pulumi.Output[str]:
        """
        Issue type (for example, Story) for tickets that Jira creates for detector notifications. SignalFx validates issue types, so you must specify a type that's valid for the Jira project specified in `projectKey`.
        """
        return pulumi.get(self, "issue_type")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        Name of the integration.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def password(self) -> pulumi.Output[Optional[str]]:
        """
        Password used to authenticate the Jira integration.
        """
        return pulumi.get(self, "password")

    @property
    @pulumi.getter(name="projectKey")
    def project_key(self) -> pulumi.Output[str]:
        """
        Jira key of an existing project. When Jira creates a new ticket for a detector notification, the ticket is assigned to this project.
        """
        return pulumi.get(self, "project_key")

    @property
    @pulumi.getter(name="userEmail")
    def user_email(self) -> pulumi.Output[Optional[str]]:
        """
        Email address used to authenticate the Jira integration.
        """
        return pulumi.get(self, "user_email")

    @property
    @pulumi.getter
    def username(self) -> pulumi.Output[Optional[str]]:
        """
        User name used to authenticate the Jira integration.
        """
        return pulumi.get(self, "username")

    def translate_output_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop

    def translate_input_property(self, prop):
        return _tables.SNAKE_TO_CAMEL_CASE_TABLE.get(prop) or prop

