# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = [
    'IntegrationCustomNamespaceSyncRuleArgs',
    'IntegrationMetricStatsToSyncArgs',
    'IntegrationNamespaceSyncRuleArgs',
]

@pulumi.input_type
class IntegrationCustomNamespaceSyncRuleArgs:
    def __init__(__self__, *,
                 namespace: pulumi.Input[str],
                 default_action: Optional[pulumi.Input[str]] = None,
                 filter_action: Optional[pulumi.Input[str]] = None,
                 filter_source: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "namespace", namespace)
        if default_action is not None:
            pulumi.set(__self__, "default_action", default_action)
        if filter_action is not None:
            pulumi.set(__self__, "filter_action", filter_action)
        if filter_source is not None:
            pulumi.set(__self__, "filter_source", filter_source)

    @property
    @pulumi.getter
    def namespace(self) -> pulumi.Input[str]:
        return pulumi.get(self, "namespace")

    @namespace.setter
    def namespace(self, value: pulumi.Input[str]):
        pulumi.set(self, "namespace", value)

    @property
    @pulumi.getter(name="defaultAction")
    def default_action(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "default_action")

    @default_action.setter
    def default_action(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "default_action", value)

    @property
    @pulumi.getter(name="filterAction")
    def filter_action(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "filter_action")

    @filter_action.setter
    def filter_action(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "filter_action", value)

    @property
    @pulumi.getter(name="filterSource")
    def filter_source(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "filter_source")

    @filter_source.setter
    def filter_source(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "filter_source", value)


@pulumi.input_type
class IntegrationMetricStatsToSyncArgs:
    def __init__(__self__, *,
                 metric: pulumi.Input[str],
                 namespace: pulumi.Input[str],
                 stats: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(__self__, "metric", metric)
        pulumi.set(__self__, "namespace", namespace)
        pulumi.set(__self__, "stats", stats)

    @property
    @pulumi.getter
    def metric(self) -> pulumi.Input[str]:
        return pulumi.get(self, "metric")

    @metric.setter
    def metric(self, value: pulumi.Input[str]):
        pulumi.set(self, "metric", value)

    @property
    @pulumi.getter
    def namespace(self) -> pulumi.Input[str]:
        return pulumi.get(self, "namespace")

    @namespace.setter
    def namespace(self, value: pulumi.Input[str]):
        pulumi.set(self, "namespace", value)

    @property
    @pulumi.getter
    def stats(self) -> pulumi.Input[Sequence[pulumi.Input[str]]]:
        return pulumi.get(self, "stats")

    @stats.setter
    def stats(self, value: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(self, "stats", value)


@pulumi.input_type
class IntegrationNamespaceSyncRuleArgs:
    def __init__(__self__, *,
                 namespace: pulumi.Input[str],
                 default_action: Optional[pulumi.Input[str]] = None,
                 filter_action: Optional[pulumi.Input[str]] = None,
                 filter_source: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "namespace", namespace)
        if default_action is not None:
            pulumi.set(__self__, "default_action", default_action)
        if filter_action is not None:
            pulumi.set(__self__, "filter_action", filter_action)
        if filter_source is not None:
            pulumi.set(__self__, "filter_source", filter_source)

    @property
    @pulumi.getter
    def namespace(self) -> pulumi.Input[str]:
        return pulumi.get(self, "namespace")

    @namespace.setter
    def namespace(self, value: pulumi.Input[str]):
        pulumi.set(self, "namespace", value)

    @property
    @pulumi.getter(name="defaultAction")
    def default_action(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "default_action")

    @default_action.setter
    def default_action(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "default_action", value)

    @property
    @pulumi.getter(name="filterAction")
    def filter_action(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "filter_action")

    @filter_action.setter
    def filter_action(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "filter_action", value)

    @property
    @pulumi.getter(name="filterSource")
    def filter_source(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "filter_source")

    @filter_source.setter
    def filter_source(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "filter_source", value)


