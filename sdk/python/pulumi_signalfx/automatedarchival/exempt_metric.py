# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['ExemptMetricArgs', 'ExemptMetric']

@pulumi.input_type
class ExemptMetricArgs:
    def __init__(__self__, *,
                 exempt_metrics: pulumi.Input[Sequence[pulumi.Input['ExemptMetricExemptMetricArgs']]]):
        """
        The set of arguments for constructing a ExemptMetric resource.
        :param pulumi.Input[Sequence[pulumi.Input['ExemptMetricExemptMetricArgs']]] exempt_metrics: List of metrics to be exempted from automated archival
        """
        pulumi.set(__self__, "exempt_metrics", exempt_metrics)

    @_builtins.property
    @pulumi.getter(name="exemptMetrics")
    def exempt_metrics(self) -> pulumi.Input[Sequence[pulumi.Input['ExemptMetricExemptMetricArgs']]]:
        """
        List of metrics to be exempted from automated archival
        """
        return pulumi.get(self, "exempt_metrics")

    @exempt_metrics.setter
    def exempt_metrics(self, value: pulumi.Input[Sequence[pulumi.Input['ExemptMetricExemptMetricArgs']]]):
        pulumi.set(self, "exempt_metrics", value)


@pulumi.input_type
class _ExemptMetricState:
    def __init__(__self__, *,
                 exempt_metrics: Optional[pulumi.Input[Sequence[pulumi.Input['ExemptMetricExemptMetricArgs']]]] = None):
        """
        Input properties used for looking up and filtering ExemptMetric resources.
        :param pulumi.Input[Sequence[pulumi.Input['ExemptMetricExemptMetricArgs']]] exempt_metrics: List of metrics to be exempted from automated archival
        """
        if exempt_metrics is not None:
            pulumi.set(__self__, "exempt_metrics", exempt_metrics)

    @_builtins.property
    @pulumi.getter(name="exemptMetrics")
    def exempt_metrics(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ExemptMetricExemptMetricArgs']]]]:
        """
        List of metrics to be exempted from automated archival
        """
        return pulumi.get(self, "exempt_metrics")

    @exempt_metrics.setter
    def exempt_metrics(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ExemptMetricExemptMetricArgs']]]]):
        pulumi.set(self, "exempt_metrics", value)


@pulumi.type_token("signalfx:automatedarchival/exemptMetric:ExemptMetric")
class ExemptMetric(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 exempt_metrics: Optional[pulumi.Input[Sequence[pulumi.Input[Union['ExemptMetricExemptMetricArgs', 'ExemptMetricExemptMetricArgsDict']]]]] = None,
                 __props__=None):
        """
        Create a ExemptMetric resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Sequence[pulumi.Input[Union['ExemptMetricExemptMetricArgs', 'ExemptMetricExemptMetricArgsDict']]]] exempt_metrics: List of metrics to be exempted from automated archival
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: ExemptMetricArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a ExemptMetric resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param ExemptMetricArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(ExemptMetricArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 exempt_metrics: Optional[pulumi.Input[Sequence[pulumi.Input[Union['ExemptMetricExemptMetricArgs', 'ExemptMetricExemptMetricArgsDict']]]]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = ExemptMetricArgs.__new__(ExemptMetricArgs)

            if exempt_metrics is None and not opts.urn:
                raise TypeError("Missing required property 'exempt_metrics'")
            __props__.__dict__["exempt_metrics"] = exempt_metrics
        super(ExemptMetric, __self__).__init__(
            'signalfx:automatedarchival/exemptMetric:ExemptMetric',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            exempt_metrics: Optional[pulumi.Input[Sequence[pulumi.Input[Union['ExemptMetricExemptMetricArgs', 'ExemptMetricExemptMetricArgsDict']]]]] = None) -> 'ExemptMetric':
        """
        Get an existing ExemptMetric resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Sequence[pulumi.Input[Union['ExemptMetricExemptMetricArgs', 'ExemptMetricExemptMetricArgsDict']]]] exempt_metrics: List of metrics to be exempted from automated archival
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _ExemptMetricState.__new__(_ExemptMetricState)

        __props__.__dict__["exempt_metrics"] = exempt_metrics
        return ExemptMetric(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter(name="exemptMetrics")
    def exempt_metrics(self) -> pulumi.Output[Sequence['outputs.ExemptMetricExemptMetric']]:
        """
        List of metrics to be exempted from automated archival
        """
        return pulumi.get(self, "exempt_metrics")

