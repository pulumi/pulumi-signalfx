# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union
from . import _utilities, _tables

__all__ = ['Team']


class Team(pulumi.CustomResource):
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 members: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 notifications_criticals: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 notifications_defaults: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 notifications_infos: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 notifications_majors: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 notifications_minors: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 notifications_warnings: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 __props__=None,
                 __name__=None,
                 __opts__=None):
        """
        Handles management of SignalFx teams.

        You can configure [team notification policies](https://docs.signalfx.com/en/latest/managing/teams/team-notifications.html) using this resource and the various `notifications_*` properties.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_signalfx as signalfx

        myteam0 = signalfx.Team("myteam0",
            description="Super great team no jerks definitely",
            members=[
                "userid1",
                "userid2",
            ],
            notifications_criticals=["PagerDuty,credentialId"],
            notifications_infos=["Email,notify@example.com"])
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] description: Description of the team.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] members: List of user IDs to include in the team.
        :param pulumi.Input[str] name: Name of the team.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] notifications_criticals: Where to send notifications for critical alerts
        :param pulumi.Input[Sequence[pulumi.Input[str]]] notifications_defaults: Where to send notifications for default alerts
        :param pulumi.Input[Sequence[pulumi.Input[str]]] notifications_infos: Where to send notifications for info alerts
        :param pulumi.Input[Sequence[pulumi.Input[str]]] notifications_majors: Where to send notifications for major alerts
        :param pulumi.Input[Sequence[pulumi.Input[str]]] notifications_minors: Where to send notifications for minor alerts
        :param pulumi.Input[Sequence[pulumi.Input[str]]] notifications_warnings: Where to send notifications for warning alerts
        """
        if __name__ is not None:
            warnings.warn("explicit use of __name__ is deprecated", DeprecationWarning)
            resource_name = __name__
        if __opts__ is not None:
            warnings.warn("explicit use of __opts__ is deprecated, use 'opts' instead", DeprecationWarning)
            opts = __opts__
        if opts is None:
            opts = pulumi.ResourceOptions()
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.version is None:
            opts.version = _utilities.get_version()
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = dict()

            __props__['description'] = description
            __props__['members'] = members
            __props__['name'] = name
            __props__['notifications_criticals'] = notifications_criticals
            __props__['notifications_defaults'] = notifications_defaults
            __props__['notifications_infos'] = notifications_infos
            __props__['notifications_majors'] = notifications_majors
            __props__['notifications_minors'] = notifications_minors
            __props__['notifications_warnings'] = notifications_warnings
            __props__['url'] = None
        super(Team, __self__).__init__(
            'signalfx:index/team:Team',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            description: Optional[pulumi.Input[str]] = None,
            members: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            name: Optional[pulumi.Input[str]] = None,
            notifications_criticals: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            notifications_defaults: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            notifications_infos: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            notifications_majors: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            notifications_minors: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            notifications_warnings: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            url: Optional[pulumi.Input[str]] = None) -> 'Team':
        """
        Get an existing Team resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] description: Description of the team.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] members: List of user IDs to include in the team.
        :param pulumi.Input[str] name: Name of the team.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] notifications_criticals: Where to send notifications for critical alerts
        :param pulumi.Input[Sequence[pulumi.Input[str]]] notifications_defaults: Where to send notifications for default alerts
        :param pulumi.Input[Sequence[pulumi.Input[str]]] notifications_infos: Where to send notifications for info alerts
        :param pulumi.Input[Sequence[pulumi.Input[str]]] notifications_majors: Where to send notifications for major alerts
        :param pulumi.Input[Sequence[pulumi.Input[str]]] notifications_minors: Where to send notifications for minor alerts
        :param pulumi.Input[Sequence[pulumi.Input[str]]] notifications_warnings: Where to send notifications for warning alerts
        :param pulumi.Input[str] url: The URL of the team.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = dict()

        __props__["description"] = description
        __props__["members"] = members
        __props__["name"] = name
        __props__["notifications_criticals"] = notifications_criticals
        __props__["notifications_defaults"] = notifications_defaults
        __props__["notifications_infos"] = notifications_infos
        __props__["notifications_majors"] = notifications_majors
        __props__["notifications_minors"] = notifications_minors
        __props__["notifications_warnings"] = notifications_warnings
        __props__["url"] = url
        return Team(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def description(self) -> pulumi.Output[Optional[str]]:
        """
        Description of the team.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def members(self) -> pulumi.Output[Optional[Sequence[str]]]:
        """
        List of user IDs to include in the team.
        """
        return pulumi.get(self, "members")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        Name of the team.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="notificationsCriticals")
    def notifications_criticals(self) -> pulumi.Output[Optional[Sequence[str]]]:
        """
        Where to send notifications for critical alerts
        """
        return pulumi.get(self, "notifications_criticals")

    @property
    @pulumi.getter(name="notificationsDefaults")
    def notifications_defaults(self) -> pulumi.Output[Optional[Sequence[str]]]:
        """
        Where to send notifications for default alerts
        """
        return pulumi.get(self, "notifications_defaults")

    @property
    @pulumi.getter(name="notificationsInfos")
    def notifications_infos(self) -> pulumi.Output[Optional[Sequence[str]]]:
        """
        Where to send notifications for info alerts
        """
        return pulumi.get(self, "notifications_infos")

    @property
    @pulumi.getter(name="notificationsMajors")
    def notifications_majors(self) -> pulumi.Output[Optional[Sequence[str]]]:
        """
        Where to send notifications for major alerts
        """
        return pulumi.get(self, "notifications_majors")

    @property
    @pulumi.getter(name="notificationsMinors")
    def notifications_minors(self) -> pulumi.Output[Optional[Sequence[str]]]:
        """
        Where to send notifications for minor alerts
        """
        return pulumi.get(self, "notifications_minors")

    @property
    @pulumi.getter(name="notificationsWarnings")
    def notifications_warnings(self) -> pulumi.Output[Optional[Sequence[str]]]:
        """
        Where to send notifications for warning alerts
        """
        return pulumi.get(self, "notifications_warnings")

    @property
    @pulumi.getter
    def url(self) -> pulumi.Output[str]:
        """
        The URL of the team.
        """
        return pulumi.get(self, "url")

    def translate_output_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop

    def translate_input_property(self, prop):
        return _tables.SNAKE_TO_CAMEL_CASE_TABLE.get(prop) or prop

