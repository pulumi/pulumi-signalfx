# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins
import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities

__all__ = [
    'OrganizationMembersResult',
    'AwaitableOrganizationMembersResult',
    'organization_members',
    'organization_members_output',
]

@pulumi.output_type
class OrganizationMembersResult:
    """
    A collection of values returned by OrganizationMembers.
    """
    def __init__(__self__, emails=None, id=None, users=None):
        if emails and not isinstance(emails, list):
            raise TypeError("Expected argument 'emails' to be a list")
        pulumi.set(__self__, "emails", emails)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if users and not isinstance(users, list):
            raise TypeError("Expected argument 'users' to be a list")
        pulumi.set(__self__, "users", users)

    @property
    @pulumi.getter
    def emails(self) -> Sequence[builtins.str]:
        return pulumi.get(self, "emails")

    @property
    @pulumi.getter
    def id(self) -> builtins.str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def users(self) -> Sequence[builtins.str]:
        return pulumi.get(self, "users")


class AwaitableOrganizationMembersResult(OrganizationMembersResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return OrganizationMembersResult(
            emails=self.emails,
            id=self.id,
            users=self.users)


def organization_members(emails: Optional[Sequence[builtins.str]] = None,
                         opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableOrganizationMembersResult:
    """
    Allows for members to be queried and used as part of other resources. Requires the supplied token to have Admin priviledges.
    """
    __args__ = dict()
    __args__['emails'] = emails
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('signalfx:index/organizationMembers:OrganizationMembers', __args__, opts=opts, typ=OrganizationMembersResult).value

    return AwaitableOrganizationMembersResult(
        emails=pulumi.get(__ret__, 'emails'),
        id=pulumi.get(__ret__, 'id'),
        users=pulumi.get(__ret__, 'users'))
def organization_members_output(emails: Optional[pulumi.Input[Sequence[builtins.str]]] = None,
                                opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[OrganizationMembersResult]:
    """
    Allows for members to be queried and used as part of other resources. Requires the supplied token to have Admin priviledges.
    """
    __args__ = dict()
    __args__['emails'] = emails
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('signalfx:index/organizationMembers:OrganizationMembers', __args__, opts=opts, typ=OrganizationMembersResult)
    return __ret__.apply(lambda __response__: OrganizationMembersResult(
        emails=pulumi.get(__response__, 'emails'),
        id=pulumi.get(__response__, 'id'),
        users=pulumi.get(__response__, 'users')))
