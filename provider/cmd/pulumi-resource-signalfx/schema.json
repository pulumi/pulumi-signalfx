{
    "name": "signalfx",
    "description": "A Pulumi package for creating and managing SignalFx resources.",
    "keywords": [
        "pulumi",
        "signalfx"
    ],
    "homepage": "https://pulumi.io",
    "license": "Apache-2.0",
    "attribution": "This Pulumi package is based on the [`signalfx` Terraform Provider](https://github.com/splunk-terraform/terraform-provider-signalfx).",
    "repository": "https://github.com/pulumi/pulumi-signalfx",
    "meta": {
        "moduleFormat": "(.*)(?:/[^/]*)"
    },
    "config": {
        "variables": {
            "apiUrl": {
                "type": "string",
                "description": "API URL for your SignalFx org, may include a realm\n"
            },
            "authToken": {
                "type": "string",
                "description": "SignalFx auth token\n",
                "defaultInfo": {
                    "environment": [
                        "SFX_AUTH_TOKEN"
                    ]
                }
            },
            "customAppUrl": {
                "type": "string",
                "description": "Application URL for your SignalFx org, often customzied for organizations using SSO\n"
            },
            "timeoutSeconds": {
                "type": "integer",
                "description": "Timeout duration for a single HTTP call in seconds. Defaults to 120\n"
            }
        }
    },
    "types": {
        "signalfx:aws/IntegrationCustomNamespaceSyncRule:IntegrationCustomNamespaceSyncRule": {
            "properties": {
                "defaultAction": {
                    "type": "string",
                    "description": "Controls the SignalFx default behavior for processing data from an AWS namespace. If you do specify a filter, use this property to control how SignalFx treats data that doesn't match the filter. The available actions are one of `\"Include\"` or `\"Exclude\"`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "filterAction": {
                    "type": "string",
                    "description": "Controls how SignalFx processes data from a custom AWS namespace. The available actions are one of `\"Include\"` or `\"Exclude\"`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "filterSource": {
                    "type": "string",
                    "description": "Expression that selects the data that SignalFx should sync for the custom namespace associated with this sync rule. The expression uses the syntax defined for the SignalFlow `filter()` function; it can be any valid SignalFlow filter expression.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "namespace": {
                    "type": "string",
                    "description": "An AWS custom namespace having custom AWS metrics that you want to sync with SignalFx. See the AWS documentation on publishing metrics for more information.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "namespace"
            ]
        },
        "signalfx:aws/IntegrationNamespaceSyncRule:IntegrationNamespaceSyncRule": {
            "properties": {
                "defaultAction": {
                    "type": "string",
                    "description": "Controls the SignalFx default behavior for processing data from an AWS namespace. If you do specify a filter, use this property to control how SignalFx treats data that doesn't match the filter. The available actions are one of `\"Include\"` or `\"Exclude\"`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "filterAction": {
                    "type": "string",
                    "description": "Controls how SignalFx processes data from a custom AWS namespace. The available actions are one of `\"Include\"` or `\"Exclude\"`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "filterSource": {
                    "type": "string",
                    "description": "Expression that selects the data that SignalFx should sync for the custom namespace associated with this sync rule. The expression uses the syntax defined for the SignalFlow `filter()` function; it can be any valid SignalFlow filter expression.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "namespace": {
                    "type": "string",
                    "description": "An AWS custom namespace having custom AWS metrics that you want to sync with SignalFx. See the AWS documentation on publishing metrics for more information.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "namespace"
            ]
        },
        "signalfx:aws/getServicesService:getServicesService": {
            "properties": {
                "name": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "name"
            ]
        },
        "signalfx:azure/IntegrationCustomNamespacesPerService:IntegrationCustomNamespacesPerService": {
            "properties": {
                "namespaces": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The additional namespaces.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "service": {
                    "type": "string",
                    "description": "The name of the service.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "namespaces",
                "service"
            ]
        },
        "signalfx:azure/getServicesService:getServicesService": {
            "properties": {
                "name": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "name"
            ]
        },
        "signalfx:gcp/IntegrationProjectServiceKey:IntegrationProjectServiceKey": {
            "properties": {
                "projectId": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "projectKey": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "projectId",
                "projectKey"
            ]
        },
        "signalfx:gcp/getServicesService:getServicesService": {
            "properties": {
                "name": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "name"
            ]
        },
        "signalfx:index/AlertMutingRuleFilter:AlertMutingRuleFilter": {
            "properties": {
                "negated": {
                    "type": "boolean",
                    "description": "Determines if this is a \"not\" filter. Defaults to `false`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "property": {
                    "type": "string",
                    "description": "The property to filter.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "propertyValue": {
                    "type": "string",
                    "description": "The property value to filter.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "property",
                "propertyValue"
            ]
        },
        "signalfx:index/DashboardChart:DashboardChart": {
            "properties": {
                "chartId": {
                    "type": "string",
                    "description": "ID of the chart to display.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "column": {
                    "type": "integer",
                    "description": "Column number for the layout.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "height": {
                    "type": "integer",
                    "description": "How many rows every chart should take up (greater than or equal to 1). 1 by default.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "row": {
                    "type": "integer",
                    "description": "The row to show the chart in (zero-based); if `height \u003e 1`, this value represents the topmost row of the chart (greater than or equal to `0`).\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "width": {
                    "type": "integer",
                    "description": "How many columns (out of a total of `12`) every chart should take up (between `1` and `12`). `12` by default.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "chartId"
            ]
        },
        "signalfx:index/DashboardColumn:DashboardColumn": {
            "properties": {
                "chartIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of IDs of the charts to display.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "column": {
                    "type": "integer",
                    "description": "Column number for the layout.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "height": {
                    "type": "integer",
                    "description": "How many rows every chart should take up (greater than or equal to 1). 1 by default.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "width": {
                    "type": "integer",
                    "description": "How many columns (out of a total of `12`) every chart should take up (between `1` and `12`). `12` by default.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "chartIds"
            ]
        },
        "signalfx:index/DashboardEventOverlay:DashboardEventOverlay": {
            "properties": {
                "color": {
                    "type": "string",
                    "description": "Color to use : gray, blue, azure, navy, brown, orange, yellow, iris, magenta, pink, purple, violet, lilac, emerald, green, aquamarine.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "label": {
                    "type": "string",
                    "description": "Text shown in the dropdown when selecting this overlay from the menu.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "line": {
                    "type": "boolean",
                    "description": "Show a vertical line for the event. `false` by default.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "signal": {
                    "type": "string",
                    "description": "Search term used to choose the events shown in the overlay.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "sources": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/signalfx:index/DashboardEventOverlaySource:DashboardEventOverlaySource"
                    },
                    "description": "Each element specifies a filter to use against the signal specified in the `signal`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "type": {
                    "type": "string",
                    "description": "Can be set to `eventTimeSeries` (the default) to refer to externally reported events, or `detectorEvents` to refer to events from detector triggers.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "signal"
            ]
        },
        "signalfx:index/DashboardEventOverlaySource:DashboardEventOverlaySource": {
            "properties": {
                "negated": {
                    "type": "boolean",
                    "description": "If true,  only data that does not match the specified value of the specified property appear in the event overlay. Defaults to `false`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "property": {
                    "type": "string",
                    "description": "The name of a dimension to filter against.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "values": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of values to be used with the `property`, they will be combined via `OR`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "property",
                "values"
            ]
        },
        "signalfx:index/DashboardFilter:DashboardFilter": {
            "properties": {
                "applyIfExist": {
                    "type": "boolean",
                    "description": "If true, this variable will also match data that doesn't have this property at all.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "negated": {
                    "type": "boolean",
                    "description": "If true,  only data that does not match the specified value of the specified property appear in the event overlay. Defaults to `false`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "property": {
                    "type": "string",
                    "description": "The name of a dimension to filter against.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "values": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of values to be used with the `property`, they will be combined via `OR`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "property",
                "values"
            ]
        },
        "signalfx:index/DashboardGrid:DashboardGrid": {
            "properties": {
                "chartIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of IDs of the charts to display.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "height": {
                    "type": "integer",
                    "description": "How many rows every chart should take up (greater than or equal to 1). 1 by default.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "width": {
                    "type": "integer",
                    "description": "How many columns (out of a total of `12`) every chart should take up (between `1` and `12`). `12` by default.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "chartIds"
            ]
        },
        "signalfx:index/DashboardGroupDashboard:DashboardGroupDashboard": {
            "properties": {
                "dashboardId": {
                    "type": "string",
                    "description": "The dashboard id to mirror\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "descriptionOverride": {
                    "type": "string",
                    "description": "The description that will override the original dashboards's description.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "filterOverrides": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/signalfx:index/DashboardGroupDashboardFilterOverride:DashboardGroupDashboardFilterOverride"
                    },
                    "description": "The description that will override the original dashboards's description.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "nameOverride": {
                    "type": "string",
                    "description": "The name that will override the original dashboards's name.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "variableOverrides": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/signalfx:index/DashboardGroupDashboardVariableOverride:DashboardGroupDashboardVariableOverride"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "dashboardId"
            ]
        },
        "signalfx:index/DashboardGroupDashboardFilterOverride:DashboardGroupDashboardFilterOverride": {
            "properties": {
                "negated": {
                    "type": "boolean",
                    "description": "If true,  only data that does not match the specified value of the specified property appear in the event overlay. Defaults to `false`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "property": {
                    "type": "string",
                    "description": "A metric time series dimension or property name.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "values": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "(Optional) List of of strings (which will be treated as an OR filter on the property).\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "property",
                "values"
            ]
        },
        "signalfx:index/DashboardGroupDashboardVariableOverride:DashboardGroupDashboardVariableOverride": {
            "properties": {
                "property": {
                    "type": "string",
                    "description": "A metric time series dimension or property name.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "values": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "(Optional) List of of strings (which will be treated as an OR filter on the property).\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "valuesSuggesteds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of strings of suggested values for this variable; these suggestions will receive priority when values are autosuggested for this variable.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "property"
            ]
        },
        "signalfx:index/DashboardGroupImportQualifier:DashboardGroupImportQualifier": {
            "properties": {
                "filters": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/signalfx:index/DashboardGroupImportQualifierFilter:DashboardGroupImportQualifierFilter"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "metric": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "signalfx:index/DashboardGroupImportQualifierFilter:DashboardGroupImportQualifierFilter": {
            "properties": {
                "negated": {
                    "type": "boolean",
                    "description": "If true,  only data that does not match the specified value of the specified property appear in the event overlay. Defaults to `false`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "property": {
                    "type": "string",
                    "description": "A metric time series dimension or property name.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "values": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "(Optional) List of of strings (which will be treated as an OR filter on the property).\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "property",
                "values"
            ]
        },
        "signalfx:index/DashboardSelectedEventOverlay:DashboardSelectedEventOverlay": {
            "properties": {
                "signal": {
                    "type": "string",
                    "description": "Search term used to choose the events shown in the overlay.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "sources": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/signalfx:index/DashboardSelectedEventOverlaySource:DashboardSelectedEventOverlaySource"
                    },
                    "description": "Each element specifies a filter to use against the signal specified in the `signal`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "type": {
                    "type": "string",
                    "description": "Can be set to `eventTimeSeries` (the default) to refer to externally reported events, or `detectorEvents` to refer to events from detector triggers.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "signal"
            ]
        },
        "signalfx:index/DashboardSelectedEventOverlaySource:DashboardSelectedEventOverlaySource": {
            "properties": {
                "negated": {
                    "type": "boolean",
                    "description": "If true,  only data that does not match the specified value of the specified property appear in the event overlay. Defaults to `false`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "property": {
                    "type": "string",
                    "description": "The name of a dimension to filter against.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "values": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of values to be used with the `property`, they will be combined via `OR`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "property",
                "values"
            ]
        },
        "signalfx:index/DashboardVariable:DashboardVariable": {
            "properties": {
                "alias": {
                    "type": "string",
                    "description": "An alias for the dashboard variable. This text will appear as the label for the dropdown field on the dashboard.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "applyIfExist": {
                    "type": "boolean",
                    "description": "If true, this variable will also match data that doesn't have this property at all.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "description": {
                    "type": "string",
                    "description": "Variable description.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "property": {
                    "type": "string",
                    "description": "The name of a dimension to filter against.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "replaceOnly": {
                    "type": "boolean",
                    "description": "If `true`, this variable will only apply to charts that have a filter for the property.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "restrictedSuggestions": {
                    "type": "boolean",
                    "description": "If `true`, this variable may only be set to the values listed in `values_suggested` and only these values will appear in autosuggestion menus. `false` by default.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "valueRequired": {
                    "type": "boolean",
                    "description": "Determines whether a value is required for this variable (and therefore whether it will be possible to view this dashboard without this filter applied). `false` by default.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "values": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of values to be used with the `property`, they will be combined via `OR`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "valuesSuggesteds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of strings of suggested values for this variable; these suggestions will receive priority when values are autosuggested for this variable.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "alias",
                "property"
            ]
        },
        "signalfx:index/DataLinkTargetExternalUrl:DataLinkTargetExternalUrl": {
            "properties": {
                "isDefault": {
                    "type": "boolean",
                    "description": "Flag that designates a target as the default for a data link object. `true` by default\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "minimumTimeWindow": {
                    "type": "string",
                    "description": "The [minimum time window](https://developers.signalfx.com/administration/data_links_overview.html#_minimum_time_window) for a search sent to an external site. Defaults to `6000`\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "description": "User-assigned target name. Use this value to differentiate between the link targets for a data link object.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "propertyKeyMapping": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Describes the relationship between SignalFx metadata keys and external system properties when the key names are different.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "timeFormat": {
                    "type": "string",
                    "description": "[Designates the format](https://developers.signalfx.com/administration/data_links_overview.html#_minimum_time_window) of `minimum_time_window` in the same data link target object. Must be one of `\"ISO8601\"`, `\"EpochSeconds\"` or `\"Epoch\"` (which is milliseconds). Defaults to `\"ISO8601\"`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "url": {
                    "type": "string",
                    "description": "URL string for a Splunk instance or external system data link target. [See the supported template variables](https://developers.signalfx.com/administration/data_links_overview.html#_external_link_targets).\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "name",
                "url"
            ]
        },
        "signalfx:index/DataLinkTargetSignalfxDashboard:DataLinkTargetSignalfxDashboard": {
            "properties": {
                "dashboardGroupId": {
                    "type": "string",
                    "description": "SignalFx-assigned ID of the dashboard link target's dashboard group\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "dashboardId": {
                    "type": "string",
                    "description": "SignalFx-assigned ID of the dashboard link target\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "isDefault": {
                    "type": "boolean",
                    "description": "Flag that designates a target as the default for a data link object. `true` by default\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "description": "User-assigned target name. Use this value to differentiate between the link targets for a data link object.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "dashboardGroupId",
                "dashboardId",
                "name"
            ]
        },
        "signalfx:index/DataLinkTargetSplunk:DataLinkTargetSplunk": {
            "properties": {
                "isDefault": {
                    "type": "boolean",
                    "description": "Flag that designates a target as the default for a data link object. `true` by default\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "description": "User-assigned target name. Use this value to differentiate between the link targets for a data link object.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "propertyKeyMapping": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Describes the relationship between SignalFx metadata keys and external system properties when the key names are different.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "name"
            ]
        },
        "signalfx:index/DetectorRule:DetectorRule": {
            "properties": {
                "description": {
                    "type": "string",
                    "description": "Description for the rule. Displays as the alert condition in the Alert Rules tab of the detector editor in the web UI.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "detectLabel": {
                    "type": "string",
                    "description": "A detect label which matches a detect label within `program_text`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "disabled": {
                    "type": "boolean",
                    "description": "When true, notifications and events will not be generated for the detect label. `false` by default.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "notifications": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of strings specifying where notifications will be sent when an incident occurs. See [Create A Single Detector](https://developers.signalfx.com/detectors_reference.html#operation/Create%20Single%20Detector) for more info.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "parameterizedBody": {
                    "type": "string",
                    "description": "Custom notification message body when an alert is triggered. See [Set Up Detectors to Trigger Alerts](https://docs.signalfx.com/en/latest/detect-alert/set-up-detectors.html#about-detectors#alert-settings) for more info.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "parameterizedSubject": {
                    "type": "string",
                    "description": "Custom notification message subject when an alert is triggered. See [Set Up Detectors to Trigger Alerts](https://docs.signalfx.com/en/latest/detect-alert/set-up-detectors.html#about-detectors#alert-settings) for more info.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "runbookUrl": {
                    "type": "string",
                    "description": "URL of page to consult when an alert is triggered. This can be used with custom notification messages.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "severity": {
                    "type": "string",
                    "description": "The severity of the rule, must be one of: `\"Critical\"`, `\"Major\"`, `\"Minor\"`, `\"Warning\"`, `\"Info\"`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "tip": {
                    "type": "string",
                    "description": "Plain text suggested first course of action, such as a command line to execute. This can be used with custom notification messages.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "detectLabel",
                "severity"
            ]
        },
        "signalfx:index/DetectorVizOption:DetectorVizOption": {
            "properties": {
                "color": {
                    "type": "string",
                    "description": "Color to use : gray, blue, azure, navy, brown, orange, yellow, iris, magenta, pink, purple, violet, lilac, emerald, green, aquamarine.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "displayName": {
                    "type": "string",
                    "description": "Specifies an alternate value for the Plot Name column of the Data Table associated with the chart.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "label": {
                    "type": "string",
                    "description": "Label used in the publish statement that displays the plot (metric time series data) you want to customize.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "valuePrefix": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "valueSuffix": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "valueUnit": {
                    "type": "string",
                    "description": "A unit to attach to this plot. Units support automatic scaling (eg thousands of bytes will be displayed as kilobytes). Values values are `Bit, Kilobit, Megabit, Gigabit, Terabit, Petabit, Exabit, Zettabit, Yottabit, Byte, Kibibyte, Mebibyte, Gigibyte, Tebibyte, Pebibyte, Exbibyte, Zebibyte, Yobibyte, Nanosecond, Microsecond, Millisecond, Second, Minute, Hour, Day, Week`.\n* `value_prefix`, `value_suffix` - (Optional) Arbitrary prefix/suffix to display with the value of this plot.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "label"
            ]
        },
        "signalfx:index/HeatmapChartColorRange:HeatmapChartColorRange": {
            "properties": {
                "color": {
                    "type": "string",
                    "description": "The color range to use. Hex values are not supported here. Must be one of gray, blue, light_blue, navy, dark_orange, orange, dark_yellow, magenta, cerise, pink, violet, purple, gray_blue, dark_green, green, aquamarine, red, yellow, vivid_yellow, light_green, or lime_green.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "maxValue": {
                    "type": "number",
                    "description": "The maximum value within the coloring range.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "minValue": {
                    "type": "number",
                    "description": "The minimum value within the coloring range.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "color"
            ]
        },
        "signalfx:index/HeatmapChartColorScale:HeatmapChartColorScale": {
            "properties": {
                "color": {
                    "type": "string",
                    "description": "The color range to use. Hex values are not supported here. Must be one of gray, blue, light_blue, navy, dark_orange, orange, dark_yellow, magenta, cerise, pink, violet, purple, gray_blue, dark_green, green, aquamarine, red, yellow, vivid_yellow, light_green, or lime_green.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "gt": {
                    "type": "number",
                    "description": "Indicates the lower threshold non-inclusive value for this range.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "gte": {
                    "type": "number",
                    "description": "Indicates the lower threshold inclusive value for this range.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "lt": {
                    "type": "number",
                    "description": "Indicates the upper threshold non-inclusive value for this range.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "lte": {
                    "type": "number",
                    "description": "Indicates the upper threshold inclusive value for this range.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "color"
            ]
        },
        "signalfx:index/ListChartColorScale:ListChartColorScale": {
            "properties": {
                "color": {
                    "type": "string",
                    "description": "The color to use. Must be one of gray, blue, light_blue, navy, dark_orange, orange, dark_yellow, magenta, cerise, pink, violet, purple, gray_blue, dark_green, green, aquamarine, red, yellow, vivid_yellow, light_green, or lime_green.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "gt": {
                    "type": "number",
                    "description": "Indicates the lower threshold non-inclusive value for this range.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "gte": {
                    "type": "number",
                    "description": "Indicates the lower threshold inclusive value for this range.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "lt": {
                    "type": "number",
                    "description": "Indicates the upper threshold non-inculsive value for this range.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "lte": {
                    "type": "number",
                    "description": "Indicates the upper threshold inclusive value for this range.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "color"
            ]
        },
        "signalfx:index/ListChartLegendOptionsField:ListChartLegendOptionsField": {
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "description": "True or False depending on if you want the property to be shown or hidden.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "property": {
                    "type": "string",
                    "description": "The name of the property to display. Note the special values of `sf_metric` (corresponding with the API's `Plot Name`) which shows the label of the time series `publish()` and `sf_originatingMetric` (corresponding with the API's `metric (sf metric)`) that shows the [name of the metric](https://developers.signalfx.com/signalflow_analytics/functions/data_function.html#table-1-parameter-definitions) for the time series being displayed.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "property"
            ]
        },
        "signalfx:index/ListChartVizOption:ListChartVizOption": {
            "properties": {
                "color": {
                    "type": "string",
                    "description": "The color to use. Must be one of gray, blue, light_blue, navy, dark_orange, orange, dark_yellow, magenta, cerise, pink, violet, purple, gray_blue, dark_green, green, aquamarine, red, yellow, vivid_yellow, light_green, or lime_green.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "displayName": {
                    "type": "string",
                    "description": "Specifies an alternate value for the Plot Name column of the Data Table associated with the chart.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "label": {
                    "type": "string",
                    "description": "Label used in the publish statement that displays the plot (metric time series data) you want to customize.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "valuePrefix": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "valueSuffix": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "valueUnit": {
                    "type": "string",
                    "description": "A unit to attach to this plot. Units support automatic scaling (eg thousands of bytes will be displayed as kilobytes). Values values are `Bit, Kilobit, Megabit, Gigabit, Terabit, Petabit, Exabit, Zettabit, Yottabit, Byte, Kibibyte, Mebibyte, Gigibyte, Tebibyte, Pebibyte, Exbibyte, Zebibyte, Yobibyte, Nanosecond, Microsecond, Millisecond, Second, Minute, Hour, Day, Week`.\n* `value_prefix`, `value_suffix` - (Optional) Arbitrary prefix/suffix to display with the value of this plot.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "label"
            ]
        },
        "signalfx:index/OrgTokenDpmLimits:OrgTokenDpmLimits": {
            "properties": {
                "dpmLimit": {
                    "type": "integer",
                    "description": "The datapoints per minute (dpm) limit for this token. If you exceed this limit, SignalFx sends out an alert.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "dpmNotificationThreshold": {
                    "type": "integer",
                    "description": "DPM level at which SignalFx sends the notification for this token. If you don't specify a notification, SignalFx sends the generic notification.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "dpmLimit"
            ]
        },
        "signalfx:index/OrgTokenHostOrUsageLimits:OrgTokenHostOrUsageLimits": {
            "properties": {
                "containerLimit": {
                    "type": "integer",
                    "description": "Max number of Docker containers that can use this token\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "containerNotificationThreshold": {
                    "type": "integer",
                    "description": "Notification threshold for Docker containers\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "customMetricsLimit": {
                    "type": "integer",
                    "description": "Max number of custom metrics that can be sent with this token\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "customMetricsNotificationThreshold": {
                    "type": "integer",
                    "description": "Notification threshold for custom metrics\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "highResMetricsLimit": {
                    "type": "integer",
                    "description": "Max number of hi-res metrics that can be sent with this toke\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "highResMetricsNotificationThreshold": {
                    "type": "integer",
                    "description": "Notification threshold for hi-res metrics\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "hostLimit": {
                    "type": "integer",
                    "description": "Max number of hosts that can use this token\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "hostNotificationThreshold": {
                    "type": "integer",
                    "description": "Notification threshold for hosts\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "signalfx:index/SingleValueChartColorScale:SingleValueChartColorScale": {
            "properties": {
                "color": {
                    "type": "string",
                    "description": "The color to use. Must be one of gray, blue, light_blue, navy, dark_orange, orange, dark_yellow, magenta, cerise, pink, violet, purple, gray_blue, dark_green, green, aquamarine, red, yellow, vivid_yellow, light_green, or lime_green.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "gt": {
                    "type": "number",
                    "description": "Indicates the lower threshold non-inclusive value for this range.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "gte": {
                    "type": "number",
                    "description": "Indicates the lower threshold inclusive value for this range.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "lt": {
                    "type": "number",
                    "description": "Indicates the upper threshold non-inculsive value for this range.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "lte": {
                    "type": "number",
                    "description": "Indicates the upper threshold inclusive value for this range.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "color"
            ]
        },
        "signalfx:index/SingleValueChartVizOption:SingleValueChartVizOption": {
            "properties": {
                "color": {
                    "type": "string",
                    "description": "The color to use. Must be one of gray, blue, light_blue, navy, dark_orange, orange, dark_yellow, magenta, cerise, pink, violet, purple, gray_blue, dark_green, green, aquamarine, red, yellow, vivid_yellow, light_green, or lime_green.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "displayName": {
                    "type": "string",
                    "description": "Specifies an alternate value for the Plot Name column of the Data Table associated with the chart.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "label": {
                    "type": "string",
                    "description": "Label used in the publish statement that displays the plot (metric time series data) you want to customize.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "valuePrefix": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "valueSuffix": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "valueUnit": {
                    "type": "string",
                    "description": "A unit to attach to this plot. Units support automatic scaling (eg thousands of bytes will be displayed as kilobytes). Values values are `Bit, Kilobit, Megabit, Gigabit, Terabit, Petabit, Exabit, Zettabit, Yottabit, Byte, Kibibyte, Mebibyte, Gigibyte, Tebibyte, Pebibyte, Exbibyte, Zebibyte, Yobibyte, Nanosecond, Microsecond, Millisecond, Second, Minute, Hour, Day, Week`.\n* `value_prefix`, `value_suffix` - (Optional) Arbitrary prefix/suffix to display with the value of this plot.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "label"
            ]
        },
        "signalfx:index/TimeChartAxisLeft:TimeChartAxisLeft": {
            "properties": {
                "highWatermark": {
                    "type": "number",
                    "description": "A line to draw as a high watermark.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "highWatermarkLabel": {
                    "type": "string",
                    "description": "A label to attach to the high watermark line.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "label": {
                    "type": "string",
                    "description": "Label used in the publish statement that displays the event query you want to customize.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "lowWatermark": {
                    "type": "number",
                    "description": "A line to draw as a low watermark.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "lowWatermarkLabel": {
                    "type": "string",
                    "description": "A label to attach to the low watermark line.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "maxValue": {
                    "type": "number",
                    "description": "The maximum value for the right axis.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "minValue": {
                    "type": "number",
                    "description": "The minimum value for the right axis.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "watermarks": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/signalfx:index/TimeChartAxisLeftWatermark:TimeChartAxisLeftWatermark"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "signalfx:index/TimeChartAxisLeftWatermark:TimeChartAxisLeftWatermark": {
            "properties": {
                "label": {
                    "type": "string",
                    "description": "Label used in the publish statement that displays the event query you want to customize.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "value": {
                    "type": "number",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "value"
            ]
        },
        "signalfx:index/TimeChartAxisRight:TimeChartAxisRight": {
            "properties": {
                "highWatermark": {
                    "type": "number",
                    "description": "A line to draw as a high watermark.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "highWatermarkLabel": {
                    "type": "string",
                    "description": "A label to attach to the high watermark line.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "label": {
                    "type": "string",
                    "description": "Label used in the publish statement that displays the event query you want to customize.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "lowWatermark": {
                    "type": "number",
                    "description": "A line to draw as a low watermark.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "lowWatermarkLabel": {
                    "type": "string",
                    "description": "A label to attach to the low watermark line.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "maxValue": {
                    "type": "number",
                    "description": "The maximum value for the right axis.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "minValue": {
                    "type": "number",
                    "description": "The minimum value for the right axis.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "watermarks": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/signalfx:index/TimeChartAxisRightWatermark:TimeChartAxisRightWatermark"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "signalfx:index/TimeChartAxisRightWatermark:TimeChartAxisRightWatermark": {
            "properties": {
                "label": {
                    "type": "string",
                    "description": "Label used in the publish statement that displays the event query you want to customize.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "value": {
                    "type": "number",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "value"
            ]
        },
        "signalfx:index/TimeChartEventOption:TimeChartEventOption": {
            "properties": {
                "color": {
                    "type": "string",
                    "description": "Color to use : gray, blue, azure, navy, brown, orange, yellow, iris, magenta, pink, purple, violet, lilac, emerald, green, aquamarine.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "displayName": {
                    "type": "string",
                    "description": "Specifies an alternate value for the Plot Name column of the Data Table associated with the chart.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "label": {
                    "type": "string",
                    "description": "Label used in the publish statement that displays the event query you want to customize.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "label"
            ]
        },
        "signalfx:index/TimeChartHistogramOption:TimeChartHistogramOption": {
            "properties": {
                "colorTheme": {
                    "type": "string",
                    "description": "Color to use : gray, blue, azure, navy, brown, orange, yellow, iris, magenta, pink, purple, violet, lilac, emerald, green, aquamarine, red, gold, greenyellow, chartreuse, jade\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "signalfx:index/TimeChartLegendOptionsField:TimeChartLegendOptionsField": {
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "description": "True or False depending on if you want the property to be shown or hidden.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "property": {
                    "type": "string",
                    "description": "The name of the property to display. Note the special values of `plot_label` (corresponding with the API's `sf_metric`) which shows the label of the time series `publish()` and `metric` (corresponding with the API's `sf_originatingMetric`) that shows the name of the metric for the time series being displayed.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "property"
            ]
        },
        "signalfx:index/TimeChartVizOption:TimeChartVizOption": {
            "properties": {
                "axis": {
                    "type": "string",
                    "description": "Y-axis associated with values for this plot. Must be either `right` or `left`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "color": {
                    "type": "string",
                    "description": "Color to use : gray, blue, azure, navy, brown, orange, yellow, iris, magenta, pink, purple, violet, lilac, emerald, green, aquamarine.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "displayName": {
                    "type": "string",
                    "description": "Specifies an alternate value for the Plot Name column of the Data Table associated with the chart.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "label": {
                    "type": "string",
                    "description": "Label used in the publish statement that displays the event query you want to customize.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "plotType": {
                    "type": "string",
                    "description": "The visualization style to use. Must be `\"LineChart\"`, `\"AreaChart\"`, `\"ColumnChart\"`, or `\"Histogram\"`. Chart level `plot_type` by default.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "valuePrefix": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "valueSuffix": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "valueUnit": {
                    "type": "string",
                    "description": "A unit to attach to this plot. Units support automatic scaling (eg thousands of bytes will be displayed as kilobytes). Values values are `Bit, Kilobit, Megabit, Gigabit, Terabit, Petabit, Exabit, Zettabit, Yottabit, Byte, Kibibyte, Mebibyte, Gigibyte, Tebibyte, Pebibyte, Exbibyte, Zebibyte, Yobibyte, Nanosecond, Microsecond, Millisecond, Second, Minute, Hour, Day, Week`.\n* `value_prefix`, `value_suffix` - (Optional) Arbitrary prefix/suffix to display with the value of this plot.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "label"
            ]
        },
        "signalfx:index/WebhookIntegrationHeader:WebhookIntegrationHeader": {
            "properties": {
                "headerKey": {
                    "type": "string",
                    "description": "The key of the header to send\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "headerValue": {
                    "type": "string",
                    "description": "The value of the header to send\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "headerKey",
                "headerValue"
            ]
        },
        "signalfx:index/getAwsServicesService:getAwsServicesService": {
            "properties": {
                "name": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "name"
            ]
        },
        "signalfx:index/getAzureServicesService:getAzureServicesService": {
            "properties": {
                "name": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "name"
            ]
        }
    },
    "provider": {
        "description": "The provider type for the signalfx package. By default, resources use package-wide configuration\nsettings, however an explicit `Provider` instance may be created and passed during resource\nconstruction to achieve fine-grained programmatic control over provider settings. See the\n[documentation](https://www.pulumi.com/docs/reference/programming-model/#providers) for more information.\n",
        "inputProperties": {
            "apiUrl": {
                "type": "string",
                "description": "API URL for your SignalFx org, may include a realm\n"
            },
            "authToken": {
                "type": "string",
                "description": "SignalFx auth token\n",
                "defaultInfo": {
                    "environment": [
                        "SFX_AUTH_TOKEN"
                    ]
                }
            },
            "customAppUrl": {
                "type": "string",
                "description": "Application URL for your SignalFx org, often customzied for organizations using SSO\n"
            },
            "timeoutSeconds": {
                "type": "integer",
                "description": "Timeout duration for a single HTTP call in seconds. Defaults to 120\n"
            }
        }
    },
    "resources": {
        "signalfx:aws/externalIntegration:ExternalIntegration": {
            "description": "SignalFx AWS CloudWatch integrations using Role ARNs. For help with this integration see [Connect to AWS CloudWatch](https://docs.signalfx.com/en/latest/integrations/amazon-web-services.html#connect-to-aws).\n\n\u003e **NOTE** When managing integrations you'll need to use an admin token to authenticate the SignalFx provider.\n\n\u003e **WARNING** This resource implements a part of a workflow. You must use it with `signalfx.aws.Integration`. Check with SignalFx support for your realm's AWS account id.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as aws from \"@pulumi/aws\";\nimport * as signalfx from \"@pulumi/signalfx\";\n\nconst awsMyteamExtern = new signalfx.aws.ExternalIntegration(\"awsMyteamExtern\", {});\nconst signalfxAssumePolicy = pulumi.all([awsMyteamExtern.signalfxAwsAccount, awsMyteamExtern.externalId]).apply(([signalfxAwsAccount, externalId]) =\u003e aws.iam.getPolicyDocument({\n    statements: [{\n        actions: [\"sts:AssumeRole\"],\n        principals: [{\n            type: \"AWS\",\n            identifiers: [signalfxAwsAccount],\n        }],\n        conditions: [{\n            test: \"StringEquals\",\n            variable: \"sts:ExternalId\",\n            values: [externalId],\n        }],\n    }],\n}));\nconst awsSfxRole = new aws.iam.Role(\"awsSfxRole\", {\n    description: \"signalfx integration to read out data and send it to signalfxs aws account\",\n    assumeRolePolicy: signalfxAssumePolicy.json,\n});\nconst awsReadPermissions = new aws.iam.Policy(\"awsReadPermissions\", {\n    description: \"farts\",\n    policy: `{\n\t\"Version\": \"2012-10-17\",\n\t\"Statement\": [\n\t\t{\n\t\t\t\"Action\": [\n\t\t\t\t\"dynamodb:ListTables\",\n\t\t    \"dynamodb:DescribeTable\",\n\t\t    \"dynamodb:ListTagsOfResource\",\n\t\t    \"ec2:DescribeInstances\",\n\t\t    \"ec2:DescribeInstanceStatus\",\n\t\t    \"ec2:DescribeVolumes\",\n\t\t    \"ec2:DescribeReservedInstances\",\n\t\t    \"ec2:DescribeReservedInstancesModifications\",\n\t\t    \"ec2:DescribeTags\",\n\t\t    \"organizations:DescribeOrganization\",\n\t\t    \"cloudwatch:ListMetrics\",\n\t\t    \"cloudwatch:GetMetricData\",\n\t\t    \"cloudwatch:GetMetricStatistics\",\n\t\t    \"cloudwatch:DescribeAlarms\",\n\t\t    \"sqs:ListQueues\",\n\t\t    \"sqs:GetQueueAttributes\",\n\t\t    \"sqs:ListQueueTags\",\n\t\t    \"elasticmapreduce:ListClusters\",\n\t\t    \"elasticmapreduce:DescribeCluster\",\n\t\t    \"kinesis:ListShards\",\n\t\t    \"kinesis:ListStreams\",\n\t\t    \"kinesis:DescribeStream\",\n\t\t    \"kinesis:ListTagsForStream\",\n\t\t    \"rds:DescribeDBInstances\",\n\t\t    \"rds:ListTagsForResource\",\n\t\t    \"elasticloadbalancing:DescribeLoadBalancers\",\n\t\t    \"elasticloadbalancing:DescribeTags\",\n\t\t    \"elasticache:describeCacheClusters\",\n\t\t    \"redshift:DescribeClusters\",\n\t\t    \"lambda:GetAlias\",\n\t\t    \"lambda:ListFunctions\",\n\t\t    \"lambda:ListTags\",\n\t\t    \"autoscaling:DescribeAutoScalingGroups\",\n\t\t    \"s3:ListAllMyBuckets\",\n\t\t    \"s3:ListBucket\",\n\t\t    \"s3:GetBucketLocation\",\n\t\t    \"s3:GetBucketTagging\",\n\t\t    \"ecs:ListServices\",\n\t\t    \"ecs:ListTasks\",\n\t\t    \"ecs:DescribeTasks\",\n\t\t    \"ecs:DescribeServices\",\n\t\t    \"ecs:ListClusters\",\n\t\t    \"ecs:DescribeClusters\",\n\t\t    \"ecs:ListTaskDefinitions\",\n\t\t    \"ecs:ListTagsForResource\",\n\t\t    \"apigateway:GET\",\n\t\t    \"cloudfront:ListDistributions\",\n\t\t    \"cloudfront:ListTagsForResource\",\n\t\t    \"tag:GetResources\",\n\t\t    \"es:ListDomainNames\",\n\t\t    \"es:DescribeElasticsearchDomain\"\n\t\t\t],\n\t\t\t\"Effect\": \"Allow\",\n\t\t\t\"Resource\": \"*\"\n\t\t}\n\t]\n}\n`,\n});\nconst sfx_read_attach = new aws.iam.RolePolicyAttachment(\"sfx-read-attach\", {\n    role: awsSfxRole.name,\n    policyArn: awsReadPermissions.arn,\n});\nconst awsMyteam = new signalfx.aws.Integration(\"awsMyteam\", {\n    enabled: true,\n    integrationId: awsMyteamExtern.id,\n    externalId: awsMyteamExtern.externalId,\n    roleArn: awsSfxRole.arn,\n    regions: [\"us-east-1\"],\n    pollRate: 300,\n    importCloudWatch: true,\n    enableAwsUsage: true,\n});\n```\n```python\nimport pulumi\nimport pulumi_aws as aws\nimport pulumi_signalfx as signalfx\n\naws_myteam_extern = signalfx.aws.ExternalIntegration(\"awsMyteamExtern\")\nsignalfx_assume_policy = pulumi.Output.all(aws_myteam_extern.signalfx_aws_account, aws_myteam_extern.external_id).apply(lambda signalfx_aws_account, external_id: aws.iam.get_policy_document(statements=[aws.iam.GetPolicyDocumentStatementArgs(\n    actions=[\"sts:AssumeRole\"],\n    principals=[aws.iam.GetPolicyDocumentStatementPrincipalArgs(\n        type=\"AWS\",\n        identifiers=[signalfx_aws_account],\n    )],\n    conditions=[aws.iam.GetPolicyDocumentStatementConditionArgs(\n        test=\"StringEquals\",\n        variable=\"sts:ExternalId\",\n        values=[external_id],\n    )],\n)]))\naws_sfx_role = aws.iam.Role(\"awsSfxRole\",\n    description=\"signalfx integration to read out data and send it to signalfxs aws account\",\n    assume_role_policy=signalfx_assume_policy.json)\naws_read_permissions = aws.iam.Policy(\"awsReadPermissions\",\n    description=\"farts\",\n    policy=\"\"\"{\n\t\"Version\": \"2012-10-17\",\n\t\"Statement\": [\n\t\t{\n\t\t\t\"Action\": [\n\t\t\t\t\"dynamodb:ListTables\",\n\t\t    \"dynamodb:DescribeTable\",\n\t\t    \"dynamodb:ListTagsOfResource\",\n\t\t    \"ec2:DescribeInstances\",\n\t\t    \"ec2:DescribeInstanceStatus\",\n\t\t    \"ec2:DescribeVolumes\",\n\t\t    \"ec2:DescribeReservedInstances\",\n\t\t    \"ec2:DescribeReservedInstancesModifications\",\n\t\t    \"ec2:DescribeTags\",\n\t\t    \"organizations:DescribeOrganization\",\n\t\t    \"cloudwatch:ListMetrics\",\n\t\t    \"cloudwatch:GetMetricData\",\n\t\t    \"cloudwatch:GetMetricStatistics\",\n\t\t    \"cloudwatch:DescribeAlarms\",\n\t\t    \"sqs:ListQueues\",\n\t\t    \"sqs:GetQueueAttributes\",\n\t\t    \"sqs:ListQueueTags\",\n\t\t    \"elasticmapreduce:ListClusters\",\n\t\t    \"elasticmapreduce:DescribeCluster\",\n\t\t    \"kinesis:ListShards\",\n\t\t    \"kinesis:ListStreams\",\n\t\t    \"kinesis:DescribeStream\",\n\t\t    \"kinesis:ListTagsForStream\",\n\t\t    \"rds:DescribeDBInstances\",\n\t\t    \"rds:ListTagsForResource\",\n\t\t    \"elasticloadbalancing:DescribeLoadBalancers\",\n\t\t    \"elasticloadbalancing:DescribeTags\",\n\t\t    \"elasticache:describeCacheClusters\",\n\t\t    \"redshift:DescribeClusters\",\n\t\t    \"lambda:GetAlias\",\n\t\t    \"lambda:ListFunctions\",\n\t\t    \"lambda:ListTags\",\n\t\t    \"autoscaling:DescribeAutoScalingGroups\",\n\t\t    \"s3:ListAllMyBuckets\",\n\t\t    \"s3:ListBucket\",\n\t\t    \"s3:GetBucketLocation\",\n\t\t    \"s3:GetBucketTagging\",\n\t\t    \"ecs:ListServices\",\n\t\t    \"ecs:ListTasks\",\n\t\t    \"ecs:DescribeTasks\",\n\t\t    \"ecs:DescribeServices\",\n\t\t    \"ecs:ListClusters\",\n\t\t    \"ecs:DescribeClusters\",\n\t\t    \"ecs:ListTaskDefinitions\",\n\t\t    \"ecs:ListTagsForResource\",\n\t\t    \"apigateway:GET\",\n\t\t    \"cloudfront:ListDistributions\",\n\t\t    \"cloudfront:ListTagsForResource\",\n\t\t    \"tag:GetResources\",\n\t\t    \"es:ListDomainNames\",\n\t\t    \"es:DescribeElasticsearchDomain\"\n\t\t\t],\n\t\t\t\"Effect\": \"Allow\",\n\t\t\t\"Resource\": \"*\"\n\t\t}\n\t]\n}\n\"\"\")\nsfx_read_attach = aws.iam.RolePolicyAttachment(\"sfx-read-attach\",\n    role=aws_sfx_role.name,\n    policy_arn=aws_read_permissions.arn)\naws_myteam = signalfx.aws.Integration(\"awsMyteam\",\n    enabled=True,\n    integration_id=aws_myteam_extern.id,\n    external_id=aws_myteam_extern.external_id,\n    role_arn=aws_sfx_role.arn,\n    regions=[\"us-east-1\"],\n    poll_rate=300,\n    import_cloud_watch=True,\n    enable_aws_usage=True)\n```\n```csharp\nusing Pulumi;\nusing Aws = Pulumi.Aws;\nusing SignalFx = Pulumi.SignalFx;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var awsMyteamExtern = new SignalFx.Aws.ExternalIntegration(\"awsMyteamExtern\", new SignalFx.Aws.ExternalIntegrationArgs\n        {\n        });\n        var signalfxAssumePolicy = Output.Tuple(awsMyteamExtern.SignalfxAwsAccount, awsMyteamExtern.ExternalId).Apply(values =\u003e\n        {\n            var signalfxAwsAccount = values.Item1;\n            var externalId = values.Item2;\n            return Aws.Iam.GetPolicyDocument.InvokeAsync(new Aws.Iam.GetPolicyDocumentArgs\n            {\n                Statements = \n                {\n                    new Aws.Iam.Inputs.GetPolicyDocumentStatementArgs\n                    {\n                        Actions = \n                        {\n                            \"sts:AssumeRole\",\n                        },\n                        Principals = \n                        {\n                            new Aws.Iam.Inputs.GetPolicyDocumentStatementPrincipalArgs\n                            {\n                                Type = \"AWS\",\n                                Identifiers = \n                                {\n                                    signalfxAwsAccount,\n                                },\n                            },\n                        },\n                        Conditions = \n                        {\n                            new Aws.Iam.Inputs.GetPolicyDocumentStatementConditionArgs\n                            {\n                                Test = \"StringEquals\",\n                                Variable = \"sts:ExternalId\",\n                                Values = \n                                {\n                                    externalId,\n                                },\n                            },\n                        },\n                    },\n                },\n            });\n        });\n        var awsSfxRole = new Aws.Iam.Role(\"awsSfxRole\", new Aws.Iam.RoleArgs\n        {\n            Description = \"signalfx integration to read out data and send it to signalfxs aws account\",\n            AssumeRolePolicy = signalfxAssumePolicy.Apply(signalfxAssumePolicy =\u003e signalfxAssumePolicy.Json),\n        });\n        var awsReadPermissions = new Aws.Iam.Policy(\"awsReadPermissions\", new Aws.Iam.PolicyArgs\n        {\n            Description = \"farts\",\n            Policy = @\"{\n\t\"\"Version\"\": \"\"2012-10-17\"\",\n\t\"\"Statement\"\": [\n\t\t{\n\t\t\t\"\"Action\"\": [\n\t\t\t\t\"\"dynamodb:ListTables\"\",\n\t\t    \"\"dynamodb:DescribeTable\"\",\n\t\t    \"\"dynamodb:ListTagsOfResource\"\",\n\t\t    \"\"ec2:DescribeInstances\"\",\n\t\t    \"\"ec2:DescribeInstanceStatus\"\",\n\t\t    \"\"ec2:DescribeVolumes\"\",\n\t\t    \"\"ec2:DescribeReservedInstances\"\",\n\t\t    \"\"ec2:DescribeReservedInstancesModifications\"\",\n\t\t    \"\"ec2:DescribeTags\"\",\n\t\t    \"\"organizations:DescribeOrganization\"\",\n\t\t    \"\"cloudwatch:ListMetrics\"\",\n\t\t    \"\"cloudwatch:GetMetricData\"\",\n\t\t    \"\"cloudwatch:GetMetricStatistics\"\",\n\t\t    \"\"cloudwatch:DescribeAlarms\"\",\n\t\t    \"\"sqs:ListQueues\"\",\n\t\t    \"\"sqs:GetQueueAttributes\"\",\n\t\t    \"\"sqs:ListQueueTags\"\",\n\t\t    \"\"elasticmapreduce:ListClusters\"\",\n\t\t    \"\"elasticmapreduce:DescribeCluster\"\",\n\t\t    \"\"kinesis:ListShards\"\",\n\t\t    \"\"kinesis:ListStreams\"\",\n\t\t    \"\"kinesis:DescribeStream\"\",\n\t\t    \"\"kinesis:ListTagsForStream\"\",\n\t\t    \"\"rds:DescribeDBInstances\"\",\n\t\t    \"\"rds:ListTagsForResource\"\",\n\t\t    \"\"elasticloadbalancing:DescribeLoadBalancers\"\",\n\t\t    \"\"elasticloadbalancing:DescribeTags\"\",\n\t\t    \"\"elasticache:describeCacheClusters\"\",\n\t\t    \"\"redshift:DescribeClusters\"\",\n\t\t    \"\"lambda:GetAlias\"\",\n\t\t    \"\"lambda:ListFunctions\"\",\n\t\t    \"\"lambda:ListTags\"\",\n\t\t    \"\"autoscaling:DescribeAutoScalingGroups\"\",\n\t\t    \"\"s3:ListAllMyBuckets\"\",\n\t\t    \"\"s3:ListBucket\"\",\n\t\t    \"\"s3:GetBucketLocation\"\",\n\t\t    \"\"s3:GetBucketTagging\"\",\n\t\t    \"\"ecs:ListServices\"\",\n\t\t    \"\"ecs:ListTasks\"\",\n\t\t    \"\"ecs:DescribeTasks\"\",\n\t\t    \"\"ecs:DescribeServices\"\",\n\t\t    \"\"ecs:ListClusters\"\",\n\t\t    \"\"ecs:DescribeClusters\"\",\n\t\t    \"\"ecs:ListTaskDefinitions\"\",\n\t\t    \"\"ecs:ListTagsForResource\"\",\n\t\t    \"\"apigateway:GET\"\",\n\t\t    \"\"cloudfront:ListDistributions\"\",\n\t\t    \"\"cloudfront:ListTagsForResource\"\",\n\t\t    \"\"tag:GetResources\"\",\n\t\t    \"\"es:ListDomainNames\"\",\n\t\t    \"\"es:DescribeElasticsearchDomain\"\"\n\t\t\t],\n\t\t\t\"\"Effect\"\": \"\"Allow\"\",\n\t\t\t\"\"Resource\"\": \"\"*\"\"\n\t\t}\n\t]\n}\n\",\n        });\n        var sfx_read_attach = new Aws.Iam.RolePolicyAttachment(\"sfx-read-attach\", new Aws.Iam.RolePolicyAttachmentArgs\n        {\n            Role = awsSfxRole.Name,\n            PolicyArn = awsReadPermissions.Arn,\n        });\n        var awsMyteam = new SignalFx.Aws.Integration(\"awsMyteam\", new SignalFx.Aws.IntegrationArgs\n        {\n            Enabled = true,\n            IntegrationId = awsMyteamExtern.Id,\n            ExternalId = awsMyteamExtern.ExternalId,\n            RoleArn = awsSfxRole.Arn,\n            Regions = \n            {\n                \"us-east-1\",\n            },\n            PollRate = 300,\n            ImportCloudWatch = true,\n            EnableAwsUsage = true,\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"fmt\"\n\n\t\"github.com/pulumi/pulumi-aws/sdk/v3/go/aws/iam\"\n\t\"github.com/pulumi/pulumi-signalfx/sdk/v4/go/signalfx/aws\"\n\t\"github.com/pulumi/pulumi/sdk/v2/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tawsMyteamExtern, err := aws.NewExternalIntegration(ctx, \"awsMyteamExtern\", nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tawsSfxRole, err := iam.NewRole(ctx, \"awsSfxRole\", \u0026iam.RoleArgs{\n\t\t\tDescription: pulumi.String(\"signalfx integration to read out data and send it to signalfxs aws account\"),\n\t\t\tAssumeRolePolicy: signalfxAssumePolicy.ApplyT(func(signalfxAssumePolicy iam.GetPolicyDocumentResult) (string, error) {\n\t\t\t\treturn signalfxAssumePolicy.Json, nil\n\t\t\t}).(pulumi.StringOutput),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tawsReadPermissions, err := iam.NewPolicy(ctx, \"awsReadPermissions\", \u0026iam.PolicyArgs{\n\t\t\tDescription: pulumi.String(\"farts\"),\n\t\t\tPolicy: pulumi.String(fmt.Sprintf(\"%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v\", \"{\\n\", \"\t\\\"Version\\\": \\\"2012-10-17\\\",\\n\", \"\t\\\"Statement\\\": [\\n\", \"\t\t{\\n\", \"\t\t\t\\\"Action\\\": [\\n\", \"\t\t\t\t\\\"dynamodb:ListTables\\\",\\n\", \"\t\t    \\\"dynamodb:DescribeTable\\\",\\n\", \"\t\t    \\\"dynamodb:ListTagsOfResource\\\",\\n\", \"\t\t    \\\"ec2:DescribeInstances\\\",\\n\", \"\t\t    \\\"ec2:DescribeInstanceStatus\\\",\\n\", \"\t\t    \\\"ec2:DescribeVolumes\\\",\\n\", \"\t\t    \\\"ec2:DescribeReservedInstances\\\",\\n\", \"\t\t    \\\"ec2:DescribeReservedInstancesModifications\\\",\\n\", \"\t\t    \\\"ec2:DescribeTags\\\",\\n\", \"\t\t    \\\"organizations:DescribeOrganization\\\",\\n\", \"\t\t    \\\"cloudwatch:ListMetrics\\\",\\n\", \"\t\t    \\\"cloudwatch:GetMetricData\\\",\\n\", \"\t\t    \\\"cloudwatch:GetMetricStatistics\\\",\\n\", \"\t\t    \\\"cloudwatch:DescribeAlarms\\\",\\n\", \"\t\t    \\\"sqs:ListQueues\\\",\\n\", \"\t\t    \\\"sqs:GetQueueAttributes\\\",\\n\", \"\t\t    \\\"sqs:ListQueueTags\\\",\\n\", \"\t\t    \\\"elasticmapreduce:ListClusters\\\",\\n\", \"\t\t    \\\"elasticmapreduce:DescribeCluster\\\",\\n\", \"\t\t    \\\"kinesis:ListShards\\\",\\n\", \"\t\t    \\\"kinesis:ListStreams\\\",\\n\", \"\t\t    \\\"kinesis:DescribeStream\\\",\\n\", \"\t\t    \\\"kinesis:ListTagsForStream\\\",\\n\", \"\t\t    \\\"rds:DescribeDBInstances\\\",\\n\", \"\t\t    \\\"rds:ListTagsForResource\\\",\\n\", \"\t\t    \\\"elasticloadbalancing:DescribeLoadBalancers\\\",\\n\", \"\t\t    \\\"elasticloadbalancing:DescribeTags\\\",\\n\", \"\t\t    \\\"elasticache:describeCacheClusters\\\",\\n\", \"\t\t    \\\"redshift:DescribeClusters\\\",\\n\", \"\t\t    \\\"lambda:GetAlias\\\",\\n\", \"\t\t    \\\"lambda:ListFunctions\\\",\\n\", \"\t\t    \\\"lambda:ListTags\\\",\\n\", \"\t\t    \\\"autoscaling:DescribeAutoScalingGroups\\\",\\n\", \"\t\t    \\\"s3:ListAllMyBuckets\\\",\\n\", \"\t\t    \\\"s3:ListBucket\\\",\\n\", \"\t\t    \\\"s3:GetBucketLocation\\\",\\n\", \"\t\t    \\\"s3:GetBucketTagging\\\",\\n\", \"\t\t    \\\"ecs:ListServices\\\",\\n\", \"\t\t    \\\"ecs:ListTasks\\\",\\n\", \"\t\t    \\\"ecs:DescribeTasks\\\",\\n\", \"\t\t    \\\"ecs:DescribeServices\\\",\\n\", \"\t\t    \\\"ecs:ListClusters\\\",\\n\", \"\t\t    \\\"ecs:DescribeClusters\\\",\\n\", \"\t\t    \\\"ecs:ListTaskDefinitions\\\",\\n\", \"\t\t    \\\"ecs:ListTagsForResource\\\",\\n\", \"\t\t    \\\"apigateway:GET\\\",\\n\", \"\t\t    \\\"cloudfront:ListDistributions\\\",\\n\", \"\t\t    \\\"cloudfront:ListTagsForResource\\\",\\n\", \"\t\t    \\\"tag:GetResources\\\",\\n\", \"\t\t    \\\"es:ListDomainNames\\\",\\n\", \"\t\t    \\\"es:DescribeElasticsearchDomain\\\"\\n\", \"\t\t\t],\\n\", \"\t\t\t\\\"Effect\\\": \\\"Allow\\\",\\n\", \"\t\t\t\\\"Resource\\\": \\\"*\\\"\\n\", \"\t\t}\\n\", \"\t]\\n\", \"}\\n\")),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = iam.NewRolePolicyAttachment(ctx, \"sfx_read_attach\", \u0026iam.RolePolicyAttachmentArgs{\n\t\t\tRole:      awsSfxRole.Name,\n\t\t\tPolicyArn: awsReadPermissions.Arn,\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = aws.NewIntegration(ctx, \"awsMyteam\", \u0026aws.IntegrationArgs{\n\t\t\tEnabled:       pulumi.Bool(true),\n\t\t\tIntegrationId: awsMyteamExtern.ID(),\n\t\t\tExternalId:    awsMyteamExtern.ExternalId,\n\t\t\tRoleArn:       awsSfxRole.Arn,\n\t\t\tRegions: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"us-east-1\"),\n\t\t\t},\n\t\t\tPollRate:         pulumi.Int(300),\n\t\t\tImportCloudWatch: pulumi.Bool(true),\n\t\t\tEnableAwsUsage:   pulumi.Bool(true),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}",
            "properties": {
                "externalId": {
                    "type": "string",
                    "description": "The external ID to use with your IAM role and with `signalfx.aws.Integration`.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of this integration\n"
                },
                "signalfxAwsAccount": {
                    "type": "string",
                    "description": "The AWS Account ARN to use with your policies/roles, provided by SignalFx.\n"
                }
            },
            "required": [
                "externalId",
                "name",
                "signalfxAwsAccount"
            ],
            "inputProperties": {
                "name": {
                    "type": "string",
                    "description": "The name of this integration\n"
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering ExternalIntegration resources.\n",
                "properties": {
                    "externalId": {
                        "type": "string",
                        "description": "The external ID to use with your IAM role and with `signalfx.aws.Integration`.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of this integration\n"
                    },
                    "signalfxAwsAccount": {
                        "type": "string",
                        "description": "The AWS Account ARN to use with your policies/roles, provided by SignalFx.\n"
                    }
                },
                "type": "object"
            }
        },
        "signalfx:aws/integration:Integration": {
            "description": "SignalFx AWS CloudWatch integrations. For help with this integration see [Monitoring Amazon Web Services](https://docs.signalfx.com/en/latest/integrations/amazon-web-services.html#monitor-amazon-web-services).\n\n\u003e **NOTE** When managing integrations you'll need to use an admin token to authenticate the SignalFx provider.\n\n\u003e **WARNING** This resource implements a part of a workflow. You must use it with one of either `signalfx.aws.ExternalIntegration` or `signalfx.aws.TokenIntegration`.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as aws from \"@pulumi/aws\";\nimport * as signalfx from \"@pulumi/signalfx\";\n\n// This resource returns an account id in `external_id`…\nconst awsMyteamExternal = new signalfx.aws.ExternalIntegration(\"awsMyteamExternal\", {});\n// Make yourself an AWS IAM role here, use `signalfx_aws_external_integration.aws_myteam_external.external_id`\nconst awsSfxRole = new aws.iam.Role(\"awsSfxRole\", {});\n// Stuff here that uses the external and account ID\nconst awsMyteam = new signalfx.aws.Integration(\"awsMyteam\", {\n    enabled: true,\n    integrationId: awsMyteamExternal.id,\n    externalId: awsMyteamExternal.externalId,\n    roleArn: awsSfxRole.arn,\n    regions: [\"us-east-1\"],\n    pollRate: 300,\n    importCloudWatch: true,\n    enableAwsUsage: true,\n    customNamespaceSyncRules: [{\n        defaultAction: \"Exclude\",\n        filterAction: \"Include\",\n        filterSource: \"filter('code', '200')\",\n        namespace: \"fart\",\n    }],\n    namespaceSyncRules: [{\n        defaultAction: \"Exclude\",\n        filterAction: \"Include\",\n        filterSource: \"filter('code', '200')\",\n        namespace: \"AWS/EC2\",\n    }],\n});\n```\n```python\nimport pulumi\nimport pulumi_aws as aws\nimport pulumi_signalfx as signalfx\n\n# This resource returns an account id in `external_id`…\naws_myteam_external = signalfx.aws.ExternalIntegration(\"awsMyteamExternal\")\n# Make yourself an AWS IAM role here, use `signalfx_aws_external_integration.aws_myteam_external.external_id`\naws_sfx_role = aws.iam.Role(\"awsSfxRole\")\n# Stuff here that uses the external and account ID\naws_myteam = signalfx.aws.Integration(\"awsMyteam\",\n    enabled=True,\n    integration_id=aws_myteam_external.id,\n    external_id=aws_myteam_external.external_id,\n    role_arn=aws_sfx_role.arn,\n    regions=[\"us-east-1\"],\n    poll_rate=300,\n    import_cloud_watch=True,\n    enable_aws_usage=True,\n    custom_namespace_sync_rules=[signalfx.aws.IntegrationCustomNamespaceSyncRuleArgs(\n        default_action=\"Exclude\",\n        filter_action=\"Include\",\n        filter_source=\"filter('code', '200')\",\n        namespace=\"fart\",\n    )],\n    namespace_sync_rules=[signalfx.aws.IntegrationNamespaceSyncRuleArgs(\n        default_action=\"Exclude\",\n        filter_action=\"Include\",\n        filter_source=\"filter('code', '200')\",\n        namespace=\"AWS/EC2\",\n    )])\n```\n```csharp\nusing Pulumi;\nusing Aws = Pulumi.Aws;\nusing SignalFx = Pulumi.SignalFx;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        // This resource returns an account id in `external_id`…\n        var awsMyteamExternal = new SignalFx.Aws.ExternalIntegration(\"awsMyteamExternal\", new SignalFx.Aws.ExternalIntegrationArgs\n        {\n        });\n        // Make yourself an AWS IAM role here, use `signalfx_aws_external_integration.aws_myteam_external.external_id`\n        var awsSfxRole = new Aws.Iam.Role(\"awsSfxRole\", new Aws.Iam.RoleArgs\n        {\n        });\n        // Stuff here that uses the external and account ID\n        var awsMyteam = new SignalFx.Aws.Integration(\"awsMyteam\", new SignalFx.Aws.IntegrationArgs\n        {\n            Enabled = true,\n            IntegrationId = awsMyteamExternal.Id,\n            ExternalId = awsMyteamExternal.ExternalId,\n            RoleArn = awsSfxRole.Arn,\n            Regions = \n            {\n                \"us-east-1\",\n            },\n            PollRate = 300,\n            ImportCloudWatch = true,\n            EnableAwsUsage = true,\n            CustomNamespaceSyncRules = \n            {\n                new SignalFx.Aws.Inputs.IntegrationCustomNamespaceSyncRuleArgs\n                {\n                    DefaultAction = \"Exclude\",\n                    FilterAction = \"Include\",\n                    FilterSource = \"filter('code', '200')\",\n                    Namespace = \"fart\",\n                },\n            },\n            NamespaceSyncRules = \n            {\n                new SignalFx.Aws.Inputs.IntegrationNamespaceSyncRuleArgs\n                {\n                    DefaultAction = \"Exclude\",\n                    FilterAction = \"Include\",\n                    FilterSource = \"filter('code', '200')\",\n                    Namespace = \"AWS/EC2\",\n                },\n            },\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-aws/sdk/v3/go/aws/iam\"\n\t\"github.com/pulumi/pulumi-signalfx/sdk/v4/go/signalfx/aws\"\n\t\"github.com/pulumi/pulumi/sdk/v2/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tawsMyteamExternal, err := aws.NewExternalIntegration(ctx, \"awsMyteamExternal\", nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tawsSfxRole, err := iam.NewRole(ctx, \"awsSfxRole\", nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = aws.NewIntegration(ctx, \"awsMyteam\", \u0026aws.IntegrationArgs{\n\t\t\tEnabled:       pulumi.Bool(true),\n\t\t\tIntegrationId: awsMyteamExternal.ID(),\n\t\t\tExternalId:    awsMyteamExternal.ExternalId,\n\t\t\tRoleArn:       awsSfxRole.Arn,\n\t\t\tRegions: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"us-east-1\"),\n\t\t\t},\n\t\t\tPollRate:         pulumi.Int(300),\n\t\t\tImportCloudWatch: pulumi.Bool(true),\n\t\t\tEnableAwsUsage:   pulumi.Bool(true),\n\t\t\tCustomNamespaceSyncRules: aws.IntegrationCustomNamespaceSyncRuleArray{\n\t\t\t\t\u0026aws.IntegrationCustomNamespaceSyncRuleArgs{\n\t\t\t\t\tDefaultAction: pulumi.String(\"Exclude\"),\n\t\t\t\t\tFilterAction:  pulumi.String(\"Include\"),\n\t\t\t\t\tFilterSource:  pulumi.String(\"filter('code', '200')\"),\n\t\t\t\t\tNamespace:     pulumi.String(\"fart\"),\n\t\t\t\t},\n\t\t\t},\n\t\t\tNamespaceSyncRules: aws.IntegrationNamespaceSyncRuleArray{\n\t\t\t\t\u0026aws.IntegrationNamespaceSyncRuleArgs{\n\t\t\t\t\tDefaultAction: pulumi.String(\"Exclude\"),\n\t\t\t\t\tFilterAction:  pulumi.String(\"Include\"),\n\t\t\t\t\tFilterSource:  pulumi.String(\"filter('code', '200')\"),\n\t\t\t\t\tNamespace:     pulumi.String(\"AWS/EC2\"),\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}\n## Service Names\n\n\u003e **NOTE** You can use the data source \"signalfx.aws.getServices\" to specify all services.\n",
            "properties": {
                "customCloudwatchNamespaces": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of custom AWS CloudWatch namespaces to monitor. Custom namespaces contain custom metrics that you define in AWS; SignalFx imports the metrics so you can monitor them.\n"
                },
                "customNamespaceSyncRules": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/signalfx:aws/IntegrationCustomNamespaceSyncRule:IntegrationCustomNamespaceSyncRule"
                    },
                    "description": "Each element controls the data collected by SignalFx for the specified namespace. Conflicts with the `custom_cloudwatch_namespaces` property.\n"
                },
                "enableAwsUsage": {
                    "type": "boolean",
                    "description": "Flag that controls how SignalFx imports usage metrics from AWS to use with AWS Cost Optimizer. If `true`, SignalFx imports the metrics.\n"
                },
                "enableCheckLargeVolume": {
                    "type": "boolean",
                    "description": "Controls how SignalFx checks for large amounts of data for this AWS integration. If `true`, SignalFx monitors the amount of data coming in from the integration.\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "Whether the integration is enabled.\n"
                },
                "externalId": {
                    "type": "string",
                    "description": "The `external_id` property from one of a `signalfx.aws.ExternalIntegration` or `signalfx.aws.TokenIntegration`\n"
                },
                "importCloudWatch": {
                    "type": "boolean",
                    "description": "Flag that controls how SignalFx imports Cloud Watch metrics. If true, SignalFx imports Cloud Watch metrics from AWS.\n"
                },
                "integrationId": {
                    "type": "string",
                    "description": "The id of one of a `signalfx.aws.ExternalIntegration` or `signalfx.aws.TokenIntegration`.\n"
                },
                "key": {
                    "type": "string",
                    "description": "If you specify `auth_method = \\\"SecurityToken\\\"` in your request to create an AWS integration object, use this property to specify the key.\n"
                },
                "namedToken": {
                    "type": "string",
                    "description": "A named token to use for ingest\n"
                },
                "namespaceSyncRules": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/signalfx:aws/IntegrationNamespaceSyncRule:IntegrationNamespaceSyncRule"
                    },
                    "description": "Each element in the array is an object that contains an AWS namespace name and a filter that controls the data that SignalFx collects for the namespace. Conflicts with the `services` property. If you don't specify either property, SignalFx syncs all data in all AWS namespaces.\n"
                },
                "pollRate": {
                    "type": "integer",
                    "description": "AWS poll rate (in seconds). Value between `60` and `300`.\n"
                },
                "regions": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of AWS regions that SignalFx should monitor.\n"
                },
                "roleArn": {
                    "type": "string",
                    "description": "Role ARN that you add to an existing AWS integration object. **Note**: Ensure you use the `arn` property of your role, not the id!\n"
                },
                "services": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of AWS services that you want SignalFx to monitor. Each element is a string designating an AWS service. Conflicts with `namespace_sync_rule`. See the documentation for [Creating Integrations](https://developers.signalfx.com/integrations_reference.html#operation/Create%20Integration) for valida values.\n"
                },
                "token": {
                    "type": "string",
                    "description": "Used with `signalfx_aws_token_integration`. Use this property to specify the token.\n"
                },
                "useGetMetricDataMethod": {
                    "type": "boolean",
                    "description": "Enable the use of Amazon's `GetMetricData` for collecting metrics. Note that this requires the inclusion of the `\"cloudwatch:GetMetricData\"` permission.\n"
                }
            },
            "required": [
                "enabled",
                "integrationId"
            ],
            "inputProperties": {
                "customCloudwatchNamespaces": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of custom AWS CloudWatch namespaces to monitor. Custom namespaces contain custom metrics that you define in AWS; SignalFx imports the metrics so you can monitor them.\n"
                },
                "customNamespaceSyncRules": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/signalfx:aws/IntegrationCustomNamespaceSyncRule:IntegrationCustomNamespaceSyncRule"
                    },
                    "description": "Each element controls the data collected by SignalFx for the specified namespace. Conflicts with the `custom_cloudwatch_namespaces` property.\n"
                },
                "enableAwsUsage": {
                    "type": "boolean",
                    "description": "Flag that controls how SignalFx imports usage metrics from AWS to use with AWS Cost Optimizer. If `true`, SignalFx imports the metrics.\n"
                },
                "enableCheckLargeVolume": {
                    "type": "boolean",
                    "description": "Controls how SignalFx checks for large amounts of data for this AWS integration. If `true`, SignalFx monitors the amount of data coming in from the integration.\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "Whether the integration is enabled.\n"
                },
                "externalId": {
                    "type": "string",
                    "description": "The `external_id` property from one of a `signalfx.aws.ExternalIntegration` or `signalfx.aws.TokenIntegration`\n"
                },
                "importCloudWatch": {
                    "type": "boolean",
                    "description": "Flag that controls how SignalFx imports Cloud Watch metrics. If true, SignalFx imports Cloud Watch metrics from AWS.\n"
                },
                "integrationId": {
                    "type": "string",
                    "description": "The id of one of a `signalfx.aws.ExternalIntegration` or `signalfx.aws.TokenIntegration`.\n"
                },
                "key": {
                    "type": "string",
                    "description": "If you specify `auth_method = \\\"SecurityToken\\\"` in your request to create an AWS integration object, use this property to specify the key.\n"
                },
                "namedToken": {
                    "type": "string",
                    "description": "A named token to use for ingest\n"
                },
                "namespaceSyncRules": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/signalfx:aws/IntegrationNamespaceSyncRule:IntegrationNamespaceSyncRule"
                    },
                    "description": "Each element in the array is an object that contains an AWS namespace name and a filter that controls the data that SignalFx collects for the namespace. Conflicts with the `services` property. If you don't specify either property, SignalFx syncs all data in all AWS namespaces.\n"
                },
                "pollRate": {
                    "type": "integer",
                    "description": "AWS poll rate (in seconds). Value between `60` and `300`.\n"
                },
                "regions": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of AWS regions that SignalFx should monitor.\n"
                },
                "roleArn": {
                    "type": "string",
                    "description": "Role ARN that you add to an existing AWS integration object. **Note**: Ensure you use the `arn` property of your role, not the id!\n"
                },
                "services": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of AWS services that you want SignalFx to monitor. Each element is a string designating an AWS service. Conflicts with `namespace_sync_rule`. See the documentation for [Creating Integrations](https://developers.signalfx.com/integrations_reference.html#operation/Create%20Integration) for valida values.\n"
                },
                "token": {
                    "type": "string",
                    "description": "Used with `signalfx_aws_token_integration`. Use this property to specify the token.\n"
                },
                "useGetMetricDataMethod": {
                    "type": "boolean",
                    "description": "Enable the use of Amazon's `GetMetricData` for collecting metrics. Note that this requires the inclusion of the `\"cloudwatch:GetMetricData\"` permission.\n"
                }
            },
            "requiredInputs": [
                "enabled",
                "integrationId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Integration resources.\n",
                "properties": {
                    "customCloudwatchNamespaces": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "List of custom AWS CloudWatch namespaces to monitor. Custom namespaces contain custom metrics that you define in AWS; SignalFx imports the metrics so you can monitor them.\n"
                    },
                    "customNamespaceSyncRules": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/signalfx:aws/IntegrationCustomNamespaceSyncRule:IntegrationCustomNamespaceSyncRule"
                        },
                        "description": "Each element controls the data collected by SignalFx for the specified namespace. Conflicts with the `custom_cloudwatch_namespaces` property.\n"
                    },
                    "enableAwsUsage": {
                        "type": "boolean",
                        "description": "Flag that controls how SignalFx imports usage metrics from AWS to use with AWS Cost Optimizer. If `true`, SignalFx imports the metrics.\n"
                    },
                    "enableCheckLargeVolume": {
                        "type": "boolean",
                        "description": "Controls how SignalFx checks for large amounts of data for this AWS integration. If `true`, SignalFx monitors the amount of data coming in from the integration.\n"
                    },
                    "enabled": {
                        "type": "boolean",
                        "description": "Whether the integration is enabled.\n"
                    },
                    "externalId": {
                        "type": "string",
                        "description": "The `external_id` property from one of a `signalfx.aws.ExternalIntegration` or `signalfx.aws.TokenIntegration`\n"
                    },
                    "importCloudWatch": {
                        "type": "boolean",
                        "description": "Flag that controls how SignalFx imports Cloud Watch metrics. If true, SignalFx imports Cloud Watch metrics from AWS.\n"
                    },
                    "integrationId": {
                        "type": "string",
                        "description": "The id of one of a `signalfx.aws.ExternalIntegration` or `signalfx.aws.TokenIntegration`.\n"
                    },
                    "key": {
                        "type": "string",
                        "description": "If you specify `auth_method = \\\"SecurityToken\\\"` in your request to create an AWS integration object, use this property to specify the key.\n"
                    },
                    "namedToken": {
                        "type": "string",
                        "description": "A named token to use for ingest\n"
                    },
                    "namespaceSyncRules": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/signalfx:aws/IntegrationNamespaceSyncRule:IntegrationNamespaceSyncRule"
                        },
                        "description": "Each element in the array is an object that contains an AWS namespace name and a filter that controls the data that SignalFx collects for the namespace. Conflicts with the `services` property. If you don't specify either property, SignalFx syncs all data in all AWS namespaces.\n"
                    },
                    "pollRate": {
                        "type": "integer",
                        "description": "AWS poll rate (in seconds). Value between `60` and `300`.\n"
                    },
                    "regions": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "List of AWS regions that SignalFx should monitor.\n"
                    },
                    "roleArn": {
                        "type": "string",
                        "description": "Role ARN that you add to an existing AWS integration object. **Note**: Ensure you use the `arn` property of your role, not the id!\n"
                    },
                    "services": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "List of AWS services that you want SignalFx to monitor. Each element is a string designating an AWS service. Conflicts with `namespace_sync_rule`. See the documentation for [Creating Integrations](https://developers.signalfx.com/integrations_reference.html#operation/Create%20Integration) for valida values.\n"
                    },
                    "token": {
                        "type": "string",
                        "description": "Used with `signalfx_aws_token_integration`. Use this property to specify the token.\n"
                    },
                    "useGetMetricDataMethod": {
                        "type": "boolean",
                        "description": "Enable the use of Amazon's `GetMetricData` for collecting metrics. Note that this requires the inclusion of the `\"cloudwatch:GetMetricData\"` permission.\n"
                    }
                },
                "type": "object"
            }
        },
        "signalfx:aws/tokenIntegration:TokenIntegration": {
            "description": "SignalFx AWS CloudWatch integrations using security tokens. For help with this integration see [Connect to AWS CloudWatch](https://docs.signalfx.com/en/latest/integrations/amazon-web-services.html#connect-to-aws).\n\n\u003e **NOTE** When managing integrations you'll need to use an admin token to authenticate the SignalFx provider.\n\n\u003e **WARNING** This resource implements a part of a workflow. You must use it with `signalfx.aws.Integration`.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as aws from \"@pulumi/aws\";\nimport * as signalfx from \"@pulumi/signalfx\";\n\nconst awsMyteamToken = new signalfx.aws.TokenIntegration(\"awsMyteamToken\", {});\n// Make yourself an AWS IAM role here\nconst awsSfxRole = new aws.iam.Role(\"awsSfxRole\", {});\n// Stuff here that uses the external and account ID\nconst awsMyteam = new signalfx.aws.Integration(\"awsMyteam\", {\n    enabled: true,\n    integrationId: awsMyteamToken.id,\n    token: \"put_your_token_here\",\n    key: \"put_your_key_here\",\n    regions: [\"us-east-1\"],\n    pollRate: 300,\n    importCloudWatch: true,\n    enableAwsUsage: true,\n    customNamespaceSyncRules: [{\n        defaultAction: \"Exclude\",\n        filterAction: \"Include\",\n        filterSource: \"filter('code', '200')\",\n        namespace: \"fart\",\n    }],\n    namespaceSyncRules: [{\n        defaultAction: \"Exclude\",\n        filterAction: \"Include\",\n        filterSource: \"filter('code', '200')\",\n        namespace: \"AWS/EC2\",\n    }],\n});\n```\n```python\nimport pulumi\nimport pulumi_aws as aws\nimport pulumi_signalfx as signalfx\n\naws_myteam_token = signalfx.aws.TokenIntegration(\"awsMyteamToken\")\n# Make yourself an AWS IAM role here\naws_sfx_role = aws.iam.Role(\"awsSfxRole\")\n# Stuff here that uses the external and account ID\naws_myteam = signalfx.aws.Integration(\"awsMyteam\",\n    enabled=True,\n    integration_id=aws_myteam_token.id,\n    token=\"put_your_token_here\",\n    key=\"put_your_key_here\",\n    regions=[\"us-east-1\"],\n    poll_rate=300,\n    import_cloud_watch=True,\n    enable_aws_usage=True,\n    custom_namespace_sync_rules=[signalfx.aws.IntegrationCustomNamespaceSyncRuleArgs(\n        default_action=\"Exclude\",\n        filter_action=\"Include\",\n        filter_source=\"filter('code', '200')\",\n        namespace=\"fart\",\n    )],\n    namespace_sync_rules=[signalfx.aws.IntegrationNamespaceSyncRuleArgs(\n        default_action=\"Exclude\",\n        filter_action=\"Include\",\n        filter_source=\"filter('code', '200')\",\n        namespace=\"AWS/EC2\",\n    )])\n```\n```csharp\nusing Pulumi;\nusing Aws = Pulumi.Aws;\nusing SignalFx = Pulumi.SignalFx;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var awsMyteamToken = new SignalFx.Aws.TokenIntegration(\"awsMyteamToken\", new SignalFx.Aws.TokenIntegrationArgs\n        {\n        });\n        // Make yourself an AWS IAM role here\n        var awsSfxRole = new Aws.Iam.Role(\"awsSfxRole\", new Aws.Iam.RoleArgs\n        {\n        });\n        // Stuff here that uses the external and account ID\n        var awsMyteam = new SignalFx.Aws.Integration(\"awsMyteam\", new SignalFx.Aws.IntegrationArgs\n        {\n            Enabled = true,\n            IntegrationId = awsMyteamToken.Id,\n            Token = \"put_your_token_here\",\n            Key = \"put_your_key_here\",\n            Regions = \n            {\n                \"us-east-1\",\n            },\n            PollRate = 300,\n            ImportCloudWatch = true,\n            EnableAwsUsage = true,\n            CustomNamespaceSyncRules = \n            {\n                new SignalFx.Aws.Inputs.IntegrationCustomNamespaceSyncRuleArgs\n                {\n                    DefaultAction = \"Exclude\",\n                    FilterAction = \"Include\",\n                    FilterSource = \"filter('code', '200')\",\n                    Namespace = \"fart\",\n                },\n            },\n            NamespaceSyncRules = \n            {\n                new SignalFx.Aws.Inputs.IntegrationNamespaceSyncRuleArgs\n                {\n                    DefaultAction = \"Exclude\",\n                    FilterAction = \"Include\",\n                    FilterSource = \"filter('code', '200')\",\n                    Namespace = \"AWS/EC2\",\n                },\n            },\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-aws/sdk/v3/go/aws/iam\"\n\t\"github.com/pulumi/pulumi-signalfx/sdk/v4/go/signalfx/aws\"\n\t\"github.com/pulumi/pulumi/sdk/v2/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tawsMyteamToken, err := aws.NewTokenIntegration(ctx, \"awsMyteamToken\", nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = iam.NewRole(ctx, \"awsSfxRole\", nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = aws.NewIntegration(ctx, \"awsMyteam\", \u0026aws.IntegrationArgs{\n\t\t\tEnabled:       pulumi.Bool(true),\n\t\t\tIntegrationId: awsMyteamToken.ID(),\n\t\t\tToken:         pulumi.String(\"put_your_token_here\"),\n\t\t\tKey:           pulumi.String(\"put_your_key_here\"),\n\t\t\tRegions: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"us-east-1\"),\n\t\t\t},\n\t\t\tPollRate:         pulumi.Int(300),\n\t\t\tImportCloudWatch: pulumi.Bool(true),\n\t\t\tEnableAwsUsage:   pulumi.Bool(true),\n\t\t\tCustomNamespaceSyncRules: aws.IntegrationCustomNamespaceSyncRuleArray{\n\t\t\t\t\u0026aws.IntegrationCustomNamespaceSyncRuleArgs{\n\t\t\t\t\tDefaultAction: pulumi.String(\"Exclude\"),\n\t\t\t\t\tFilterAction:  pulumi.String(\"Include\"),\n\t\t\t\t\tFilterSource:  pulumi.String(\"filter('code', '200')\"),\n\t\t\t\t\tNamespace:     pulumi.String(\"fart\"),\n\t\t\t\t},\n\t\t\t},\n\t\t\tNamespaceSyncRules: aws.IntegrationNamespaceSyncRuleArray{\n\t\t\t\t\u0026aws.IntegrationNamespaceSyncRuleArgs{\n\t\t\t\t\tDefaultAction: pulumi.String(\"Exclude\"),\n\t\t\t\t\tFilterAction:  pulumi.String(\"Include\"),\n\t\t\t\t\tFilterSource:  pulumi.String(\"filter('code', '200')\"),\n\t\t\t\t\tNamespace:     pulumi.String(\"AWS/EC2\"),\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}",
            "properties": {
                "name": {
                    "type": "string",
                    "description": "The name of this integration\n"
                },
                "signalfxAwsAccount": {
                    "type": "string",
                    "description": "The AWS Account ARN to use with your policies/roles, provided by SignalFx.\n"
                },
                "tokenId": {
                    "type": "string",
                    "description": "The SignalFx-generated AWS token to use with an AWS integration.\n"
                }
            },
            "required": [
                "name",
                "signalfxAwsAccount",
                "tokenId"
            ],
            "inputProperties": {
                "name": {
                    "type": "string",
                    "description": "The name of this integration\n"
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering TokenIntegration resources.\n",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "The name of this integration\n"
                    },
                    "signalfxAwsAccount": {
                        "type": "string",
                        "description": "The AWS Account ARN to use with your policies/roles, provided by SignalFx.\n"
                    },
                    "tokenId": {
                        "type": "string",
                        "description": "The SignalFx-generated AWS token to use with an AWS integration.\n"
                    }
                },
                "type": "object"
            }
        },
        "signalfx:azure/integration:Integration": {
            "description": "SignalFx Azure integrations. For help with this integration see [Monitoring Microsoft Azure](https://docs.signalfx.com/en/latest/integrations/azure-info.html#connect-to-azure).\n\n\u003e **NOTE** When managing integrations you'll need to use an admin token to authenticate the SignalFx provider. Otherwise you'll receive a 4xx error.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as signalfx from \"@pulumi/signalfx\";\n\nconst azureMyteam = new signalfx.azure.Integration(\"azure_myteam\", {\n    appId: \"YYY\",\n    // Optional\n    customNamespacesPerServices: [{\n        namespaces: [\n            \"monitoringAgent\",\n            \"customNamespace\",\n        ],\n        service: \"Microsoft.Compute/virtualMachines\",\n    }],\n    enabled: true,\n    environment: \"azure\",\n    pollRate: 300,\n    secretKey: \"XXX\",\n    services: [\"microsoft.sql/servers/elasticpools\"],\n    subscriptions: [\"sub-guid-here\"],\n    tenantId: \"ZZZ\",\n});\n```\n```python\nimport pulumi\nimport pulumi_signalfx as signalfx\n\nazure_myteam = signalfx.azure.Integration(\"azureMyteam\",\n    app_id=\"YYY\",\n    custom_namespaces_per_services=[signalfx.azure.IntegrationCustomNamespacesPerServiceArgs(\n        namespaces=[\n            \"monitoringAgent\",\n            \"customNamespace\",\n        ],\n        service=\"Microsoft.Compute/virtualMachines\",\n    )],\n    enabled=True,\n    environment=\"azure\",\n    poll_rate=300,\n    secret_key=\"XXX\",\n    services=[\"microsoft.sql/servers/elasticpools\"],\n    subscriptions=[\"sub-guid-here\"],\n    tenant_id=\"ZZZ\")\n```\n```csharp\nusing Pulumi;\nusing SignalFx = Pulumi.SignalFx;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var azureMyteam = new SignalFx.Azure.Integration(\"azureMyteam\", new SignalFx.Azure.IntegrationArgs\n        {\n            AppId = \"YYY\",\n            CustomNamespacesPerServices = \n            {\n                new SignalFx.Azure.Inputs.IntegrationCustomNamespacesPerServiceArgs\n                {\n                    Namespaces = \n                    {\n                        \"monitoringAgent\",\n                        \"customNamespace\",\n                    },\n                    Service = \"Microsoft.Compute/virtualMachines\",\n                },\n            },\n            Enabled = true,\n            Environment = \"azure\",\n            PollRate = 300,\n            SecretKey = \"XXX\",\n            Services = \n            {\n                \"microsoft.sql/servers/elasticpools\",\n            },\n            Subscriptions = \n            {\n                \"sub-guid-here\",\n            },\n            TenantId = \"ZZZ\",\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-signalfx/sdk/v4/go/signalfx/azure\"\n\t\"github.com/pulumi/pulumi/sdk/v2/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := azure.NewIntegration(ctx, \"azureMyteam\", \u0026azure.IntegrationArgs{\n\t\t\tAppId: pulumi.String(\"YYY\"),\n\t\t\tCustomNamespacesPerServices: azure.IntegrationCustomNamespacesPerServiceArray{\n\t\t\t\t\u0026azure.IntegrationCustomNamespacesPerServiceArgs{\n\t\t\t\t\tNamespaces: pulumi.StringArray{\n\t\t\t\t\t\tpulumi.String(\"monitoringAgent\"),\n\t\t\t\t\t\tpulumi.String(\"customNamespace\"),\n\t\t\t\t\t},\n\t\t\t\t\tService: pulumi.String(\"Microsoft.Compute/virtualMachines\"),\n\t\t\t\t},\n\t\t\t},\n\t\t\tEnabled:     pulumi.Bool(true),\n\t\t\tEnvironment: pulumi.String(\"azure\"),\n\t\t\tPollRate:    pulumi.Int(300),\n\t\t\tSecretKey:   pulumi.String(\"XXX\"),\n\t\t\tServices: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"microsoft.sql/servers/elasticpools\"),\n\t\t\t},\n\t\t\tSubscriptions: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"sub-guid-here\"),\n\t\t\t},\n\t\t\tTenantId: pulumi.String(\"ZZZ\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}\n## Service Names\n\n\u003e **NOTE** You can use the data source \"signalfx.azure.getServices\" to specify all services.\n",
            "properties": {
                "appId": {
                    "type": "string",
                    "description": "Azure application ID for the SignalFx app. To learn how to get this ID, see the topic [Connect to Microsoft Azure](https://docs.signalfx.com/en/latest/getting-started/send-data.html#connect-to-microsoft-azure) in the product documentation.\n"
                },
                "customNamespacesPerServices": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/signalfx:azure/IntegrationCustomNamespacesPerService:IntegrationCustomNamespacesPerService"
                    },
                    "description": "Allows for more fine-grained control of syncing of custom namespaces, should the boolean convenience parameter `sync_guest_os_namespaces` be not enough. The customer may specify a map of services to custom namespaces. If they do so, for each service which is a key in this map, we will attempt to sync metrics from namespaces in the value list in addition to the default namespaces.\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "Whether the integration is enabled.\n"
                },
                "environment": {
                    "type": "string",
                    "description": "What type of Azure integration this is. The allowed values are `\\\"azure_us_government\\\"` and `\\\"azure\\\"`. Defaults to `\\\"azure\\\"`.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the integration.\n"
                },
                "namedToken": {
                    "type": "string",
                    "description": "A named token to use for ingest\n"
                },
                "pollRate": {
                    "type": "integer",
                    "description": "AWS poll rate (in seconds). One of `60` or `300`.\n"
                },
                "secretKey": {
                    "type": "string",
                    "description": "Azure secret key that associates the SignalFx app in Azure with the Azure tenant ID. To learn how to get this ID, see the topic [Connect to Microsoft Azure](https://docs.signalfx.com/en/latest/integrations/azure-info.html#connect-to-azure) in the product documentation.\n"
                },
                "services": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of Microsoft Azure service names for the Azure services you want SignalFx to monitor. See the documentation for [Creating Integrations](https://developers.signalfx.com/integrations_reference.html#operation/Create%20Integration) for valida values.\n"
                },
                "subscriptions": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of Azure subscriptions that SignalFx should monitor.\n"
                },
                "syncGuestOsNamespaces": {
                    "type": "boolean",
                    "description": "If enabled, SignalFx will try to sync additional namespaces for VMs (including VMs in scale sets): telegraf/mem, telegraf/cpu, azure.vm.windows.guest (these are namespaces recommended by Azure when enabling their Diagnostic Extension). If there are no metrics there, no new datapoints will be ingested. Defaults to false.\n"
                },
                "tenantId": {
                    "type": "string",
                    "description": "Azure ID of the Azure tenant. To learn how to get this ID, see the topic [Connect to Microsoft Azure](https://docs.signalfx.com/en/latest/integrations/azure-info.html#connect-to-azure) in the product documentation.\n"
                }
            },
            "required": [
                "appId",
                "enabled",
                "name",
                "secretKey",
                "services",
                "subscriptions",
                "tenantId"
            ],
            "inputProperties": {
                "appId": {
                    "type": "string",
                    "description": "Azure application ID for the SignalFx app. To learn how to get this ID, see the topic [Connect to Microsoft Azure](https://docs.signalfx.com/en/latest/getting-started/send-data.html#connect-to-microsoft-azure) in the product documentation.\n"
                },
                "customNamespacesPerServices": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/signalfx:azure/IntegrationCustomNamespacesPerService:IntegrationCustomNamespacesPerService"
                    },
                    "description": "Allows for more fine-grained control of syncing of custom namespaces, should the boolean convenience parameter `sync_guest_os_namespaces` be not enough. The customer may specify a map of services to custom namespaces. If they do so, for each service which is a key in this map, we will attempt to sync metrics from namespaces in the value list in addition to the default namespaces.\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "Whether the integration is enabled.\n"
                },
                "environment": {
                    "type": "string",
                    "description": "What type of Azure integration this is. The allowed values are `\\\"azure_us_government\\\"` and `\\\"azure\\\"`. Defaults to `\\\"azure\\\"`.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the integration.\n"
                },
                "namedToken": {
                    "type": "string",
                    "description": "A named token to use for ingest\n"
                },
                "pollRate": {
                    "type": "integer",
                    "description": "AWS poll rate (in seconds). One of `60` or `300`.\n"
                },
                "secretKey": {
                    "type": "string",
                    "description": "Azure secret key that associates the SignalFx app in Azure with the Azure tenant ID. To learn how to get this ID, see the topic [Connect to Microsoft Azure](https://docs.signalfx.com/en/latest/integrations/azure-info.html#connect-to-azure) in the product documentation.\n"
                },
                "services": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of Microsoft Azure service names for the Azure services you want SignalFx to monitor. See the documentation for [Creating Integrations](https://developers.signalfx.com/integrations_reference.html#operation/Create%20Integration) for valida values.\n"
                },
                "subscriptions": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of Azure subscriptions that SignalFx should monitor.\n"
                },
                "syncGuestOsNamespaces": {
                    "type": "boolean",
                    "description": "If enabled, SignalFx will try to sync additional namespaces for VMs (including VMs in scale sets): telegraf/mem, telegraf/cpu, azure.vm.windows.guest (these are namespaces recommended by Azure when enabling their Diagnostic Extension). If there are no metrics there, no new datapoints will be ingested. Defaults to false.\n"
                },
                "tenantId": {
                    "type": "string",
                    "description": "Azure ID of the Azure tenant. To learn how to get this ID, see the topic [Connect to Microsoft Azure](https://docs.signalfx.com/en/latest/integrations/azure-info.html#connect-to-azure) in the product documentation.\n"
                }
            },
            "requiredInputs": [
                "appId",
                "enabled",
                "secretKey",
                "services",
                "subscriptions",
                "tenantId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Integration resources.\n",
                "properties": {
                    "appId": {
                        "type": "string",
                        "description": "Azure application ID for the SignalFx app. To learn how to get this ID, see the topic [Connect to Microsoft Azure](https://docs.signalfx.com/en/latest/getting-started/send-data.html#connect-to-microsoft-azure) in the product documentation.\n"
                    },
                    "customNamespacesPerServices": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/signalfx:azure/IntegrationCustomNamespacesPerService:IntegrationCustomNamespacesPerService"
                        },
                        "description": "Allows for more fine-grained control of syncing of custom namespaces, should the boolean convenience parameter `sync_guest_os_namespaces` be not enough. The customer may specify a map of services to custom namespaces. If they do so, for each service which is a key in this map, we will attempt to sync metrics from namespaces in the value list in addition to the default namespaces.\n"
                    },
                    "enabled": {
                        "type": "boolean",
                        "description": "Whether the integration is enabled.\n"
                    },
                    "environment": {
                        "type": "string",
                        "description": "What type of Azure integration this is. The allowed values are `\\\"azure_us_government\\\"` and `\\\"azure\\\"`. Defaults to `\\\"azure\\\"`.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the integration.\n"
                    },
                    "namedToken": {
                        "type": "string",
                        "description": "A named token to use for ingest\n"
                    },
                    "pollRate": {
                        "type": "integer",
                        "description": "AWS poll rate (in seconds). One of `60` or `300`.\n"
                    },
                    "secretKey": {
                        "type": "string",
                        "description": "Azure secret key that associates the SignalFx app in Azure with the Azure tenant ID. To learn how to get this ID, see the topic [Connect to Microsoft Azure](https://docs.signalfx.com/en/latest/integrations/azure-info.html#connect-to-azure) in the product documentation.\n"
                    },
                    "services": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "List of Microsoft Azure service names for the Azure services you want SignalFx to monitor. See the documentation for [Creating Integrations](https://developers.signalfx.com/integrations_reference.html#operation/Create%20Integration) for valida values.\n"
                    },
                    "subscriptions": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "List of Azure subscriptions that SignalFx should monitor.\n"
                    },
                    "syncGuestOsNamespaces": {
                        "type": "boolean",
                        "description": "If enabled, SignalFx will try to sync additional namespaces for VMs (including VMs in scale sets): telegraf/mem, telegraf/cpu, azure.vm.windows.guest (these are namespaces recommended by Azure when enabling their Diagnostic Extension). If there are no metrics there, no new datapoints will be ingested. Defaults to false.\n"
                    },
                    "tenantId": {
                        "type": "string",
                        "description": "Azure ID of the Azure tenant. To learn how to get this ID, see the topic [Connect to Microsoft Azure](https://docs.signalfx.com/en/latest/integrations/azure-info.html#connect-to-azure) in the product documentation.\n"
                    }
                },
                "type": "object"
            }
        },
        "signalfx:gcp/integration:Integration": {
            "description": "SignalFx GCP Integration\n\n\u003e **NOTE** When managing integrations you'll need to use an admin token to authenticate the SignalFx provider. Otherwise you'll receive a 4xx error.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as fs from \"fs\";\nimport * as signalfx from \"@pulumi/signalfx\";\n\nconst gcpMyteam = new signalfx.gcp.Integration(\"gcp_myteam\", {\n    enabled: true,\n    pollRate: 300000,\n    projectServiceKeys: [\n        {\n            projectId: \"gcp_project_id_1\",\n            projectKey: fs.readFileSync(\"/path/to/gcp_credentials_1.json\", \"utf-8\"),\n        },\n        {\n            projectId: \"gcp_project_id_2\",\n            projectKey: fs.readFileSync(\"/path/to/gcp_credentials_2.json\", \"utf-8\"),\n        },\n    ],\n    services: [\"compute\"],\n});\n```\n```python\nimport pulumi\nimport pulumi_signalfx as signalfx\n\ngcp_myteam = signalfx.gcp.Integration(\"gcpMyteam\",\n    enabled=True,\n    poll_rate=300000,\n    project_service_keys=[\n        signalfx.gcp.IntegrationProjectServiceKeyArgs(\n            project_id=\"gcp_project_id_1\",\n            project_key=(lambda path: open(path).read())(\"/path/to/gcp_credentials_1.json\"),\n        ),\n        signalfx.gcp.IntegrationProjectServiceKeyArgs(\n            project_id=\"gcp_project_id_2\",\n            project_key=(lambda path: open(path).read())(\"/path/to/gcp_credentials_2.json\"),\n        ),\n    ],\n    services=[\"compute\"])\n```\n```csharp\nusing System.IO;\nusing Pulumi;\nusing SignalFx = Pulumi.SignalFx;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var gcpMyteam = new SignalFx.Gcp.Integration(\"gcpMyteam\", new SignalFx.Gcp.IntegrationArgs\n        {\n            Enabled = true,\n            PollRate = 300000,\n            ProjectServiceKeys = \n            {\n                new SignalFx.Gcp.Inputs.IntegrationProjectServiceKeyArgs\n                {\n                    ProjectId = \"gcp_project_id_1\",\n                    ProjectKey = File.ReadAllText(\"/path/to/gcp_credentials_1.json\"),\n                },\n                new SignalFx.Gcp.Inputs.IntegrationProjectServiceKeyArgs\n                {\n                    ProjectId = \"gcp_project_id_2\",\n                    ProjectKey = File.ReadAllText(\"/path/to/gcp_credentials_2.json\"),\n                },\n            },\n            Services = \n            {\n                \"compute\",\n            },\n        });\n    }\n\n}\n```\n{{% /example %}}\n{{% /examples %}}",
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Whether the integration is enabled.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the integration.\n"
                },
                "namedToken": {
                    "type": "string",
                    "description": "A named token to use for ingest\n"
                },
                "pollRate": {
                    "type": "integer",
                    "description": "GCP integration poll rate in seconds. Can be set to either 60 or 300 (1 minute or 5 minutes).\n"
                },
                "projectServiceKeys": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/signalfx:gcp/IntegrationProjectServiceKey:IntegrationProjectServiceKey"
                    },
                    "description": "GCP projects to add.\n"
                },
                "services": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "GCP service metrics to import. Can be an empty list, or not included, to import 'All services'. See the documentation for [Creating Integrations](https://developers.signalfx.com/integrations_reference.html#operation/Create%20Integration) for valid values.\n"
                },
                "whitelists": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Compute Metadata Whitelist\n"
                }
            },
            "required": [
                "enabled",
                "name"
            ],
            "inputProperties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Whether the integration is enabled.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the integration.\n"
                },
                "namedToken": {
                    "type": "string",
                    "description": "A named token to use for ingest\n"
                },
                "pollRate": {
                    "type": "integer",
                    "description": "GCP integration poll rate in seconds. Can be set to either 60 or 300 (1 minute or 5 minutes).\n"
                },
                "projectServiceKeys": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/signalfx:gcp/IntegrationProjectServiceKey:IntegrationProjectServiceKey"
                    },
                    "description": "GCP projects to add.\n"
                },
                "services": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "GCP service metrics to import. Can be an empty list, or not included, to import 'All services'. See the documentation for [Creating Integrations](https://developers.signalfx.com/integrations_reference.html#operation/Create%20Integration) for valid values.\n"
                },
                "whitelists": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Compute Metadata Whitelist\n"
                }
            },
            "requiredInputs": [
                "enabled"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Integration resources.\n",
                "properties": {
                    "enabled": {
                        "type": "boolean",
                        "description": "Whether the integration is enabled.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the integration.\n"
                    },
                    "namedToken": {
                        "type": "string",
                        "description": "A named token to use for ingest\n"
                    },
                    "pollRate": {
                        "type": "integer",
                        "description": "GCP integration poll rate in seconds. Can be set to either 60 or 300 (1 minute or 5 minutes).\n"
                    },
                    "projectServiceKeys": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/signalfx:gcp/IntegrationProjectServiceKey:IntegrationProjectServiceKey"
                        },
                        "description": "GCP projects to add.\n"
                    },
                    "services": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "GCP service metrics to import. Can be an empty list, or not included, to import 'All services'. See the documentation for [Creating Integrations](https://developers.signalfx.com/integrations_reference.html#operation/Create%20Integration) for valid values.\n"
                    },
                    "whitelists": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Compute Metadata Whitelist\n"
                    }
                },
                "type": "object"
            }
        },
        "signalfx:index/alertMutingRule:AlertMutingRule": {
            "description": "Provides a SignalFx resource for managing alert muting rules. See [Mute Notifications](https://docs.signalfx.com/en/latest/detect-alert/mute-notifications.html) for more information.\n\n\u003e **WARNING** SignalFx does not allow the start time of a **currently active** muting rule to be modified. As such, attempting to modify a currently active rule will destroy the existing rule and create a new rule. This may result in the emission of notifications.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as signalfx from \"@pulumi/signalfx\";\n\nconst roolMooterOne = new signalfx.AlertMutingRule(\"roolMooterOne\", {\n    description: \"mooted it NEW\",\n    startTime: 1573063243,\n    stopTime: 0,\n    detectors: [signalfx_detector.some_detector_id],\n    filters: [{\n        property: \"foo\",\n        propertyValue: \"bar\",\n    }],\n});\n```\n```python\nimport pulumi\nimport pulumi_signalfx as signalfx\n\nrool_mooter_one = signalfx.AlertMutingRule(\"roolMooterOne\",\n    description=\"mooted it NEW\",\n    start_time=1573063243,\n    stop_time=0,\n    detectors=[signalfx_detector[\"some_detector_id\"]],\n    filters=[signalfx.AlertMutingRuleFilterArgs(\n        property=\"foo\",\n        property_value=\"bar\",\n    )])\n```\n```csharp\nusing Pulumi;\nusing SignalFx = Pulumi.SignalFx;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var roolMooterOne = new SignalFx.AlertMutingRule(\"roolMooterOne\", new SignalFx.AlertMutingRuleArgs\n        {\n            Description = \"mooted it NEW\",\n            StartTime = 1573063243,\n            StopTime = 0,\n            Detectors = \n            {\n                signalfx_detector.Some_detector_id,\n            },\n            Filters = \n            {\n                new SignalFx.Inputs.AlertMutingRuleFilterArgs\n                {\n                    Property = \"foo\",\n                    PropertyValue = \"bar\",\n                },\n            },\n        });\n    }\n\n}\n```\n{{% /example %}}\n{{% /examples %}}",
            "properties": {
                "description": {
                    "type": "string",
                    "description": "The description for this muting rule\n"
                },
                "detectors": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A convenience attribute that associated this muting rule with specific detector ids.\n"
                },
                "effectiveStartTime": {
                    "type": "integer"
                },
                "filters": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/signalfx:index/AlertMutingRuleFilter:AlertMutingRuleFilter"
                    },
                    "description": "Filters for this rule. See [Creating muting rules from scratch](https://docs.signalfx.com/en/latest/detect-alert/mute-notifications.html#rule-from-scratch) for more information.\n"
                },
                "startTime": {
                    "type": "integer",
                    "description": "Starting time of an alert muting rule as a Unit time stamp in seconds.\n"
                },
                "stopTime": {
                    "type": "integer",
                    "description": "Starting time of an alert muting rule as a Unix time stamp in seconds.\n"
                }
            },
            "required": [
                "description",
                "effectiveStartTime",
                "filters",
                "startTime"
            ],
            "inputProperties": {
                "description": {
                    "type": "string",
                    "description": "The description for this muting rule\n"
                },
                "detectors": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A convenience attribute that associated this muting rule with specific detector ids.\n"
                },
                "filters": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/signalfx:index/AlertMutingRuleFilter:AlertMutingRuleFilter"
                    },
                    "description": "Filters for this rule. See [Creating muting rules from scratch](https://docs.signalfx.com/en/latest/detect-alert/mute-notifications.html#rule-from-scratch) for more information.\n"
                },
                "startTime": {
                    "type": "integer",
                    "description": "Starting time of an alert muting rule as a Unit time stamp in seconds.\n"
                },
                "stopTime": {
                    "type": "integer",
                    "description": "Starting time of an alert muting rule as a Unix time stamp in seconds.\n"
                }
            },
            "requiredInputs": [
                "description",
                "filters",
                "startTime"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering AlertMutingRule resources.\n",
                "properties": {
                    "description": {
                        "type": "string",
                        "description": "The description for this muting rule\n"
                    },
                    "detectors": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "A convenience attribute that associated this muting rule with specific detector ids.\n"
                    },
                    "effectiveStartTime": {
                        "type": "integer"
                    },
                    "filters": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/signalfx:index/AlertMutingRuleFilter:AlertMutingRuleFilter"
                        },
                        "description": "Filters for this rule. See [Creating muting rules from scratch](https://docs.signalfx.com/en/latest/detect-alert/mute-notifications.html#rule-from-scratch) for more information.\n"
                    },
                    "startTime": {
                        "type": "integer",
                        "description": "Starting time of an alert muting rule as a Unit time stamp in seconds.\n"
                    },
                    "stopTime": {
                        "type": "integer",
                        "description": "Starting time of an alert muting rule as a Unix time stamp in seconds.\n"
                    }
                },
                "type": "object"
            }
        },
        "signalfx:index/dashboard:Dashboard": {
            "properties": {
                "authorizedWriterTeams": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Team IDs that have write access to this dashboard group. Remember to use an admin's token if using this feature and to include that admin's team (or user id in `authorized_writer_teams`).\n"
                },
                "authorizedWriterUsers": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "User IDs that have write access to this dashboard group. Remember to use an admin's token if using this feature and to include that admin's user id (or team id in `authorized_writer_teams`).\n"
                },
                "charts": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/signalfx:index/DashboardChart:DashboardChart"
                    },
                    "description": "Chart ID and layout information for the charts in the dashboard.\n"
                },
                "chartsResolution": {
                    "type": "string",
                    "description": "Specifies the chart data display resolution for charts in this dashboard. Value can be one of `\"default\"`,  `\"low\"`, `\"high\"`, or  `\"highest\"`.\n"
                },
                "columns": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/signalfx:index/DashboardColumn:DashboardColumn"
                    },
                    "description": "Column number for the layout.\n"
                },
                "dashboardGroup": {
                    "type": "string",
                    "description": "The ID of the dashboard group that contains the dashboard.\n"
                },
                "description": {
                    "type": "string",
                    "description": "Variable description.\n"
                },
                "discoveryOptionsQuery": {
                    "type": "string"
                },
                "discoveryOptionsSelectors": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "endTime": {
                    "type": "integer",
                    "description": "Seconds since epoch. Used for visualization.\n"
                },
                "eventOverlays": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/signalfx:index/DashboardEventOverlay:DashboardEventOverlay"
                    },
                    "description": "Specify a list of event overlays to include in the dashboard. Note: These overlays correspond to the *suggested* event overlays specified in the web UI, and they're not automatically applied as active overlays. To set default active event overlays, use the `selected_event_overlay` property instead.\n"
                },
                "filters": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/signalfx:index/DashboardFilter:DashboardFilter"
                    },
                    "description": "Filter to apply to the charts when displaying the dashboard.\n"
                },
                "grids": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/signalfx:index/DashboardGrid:DashboardGrid"
                    },
                    "description": "Grid dashboard layout. Charts listed will be placed in a grid by row with the same width and height. If a chart cannot fit in a row, it will be placed automatically in the next row.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the dashboard.\n"
                },
                "selectedEventOverlays": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/signalfx:index/DashboardSelectedEventOverlay:DashboardSelectedEventOverlay"
                    },
                    "description": "Defines event overlays which are enabled by **default**. Any overlay specified here should have an accompanying entry in `event_overlay`, which are similar to the properties here.\n"
                },
                "startTime": {
                    "type": "integer",
                    "description": "Seconds since epoch. Used for visualization.\n"
                },
                "timeRange": {
                    "type": "string",
                    "description": "The time range prior to now to visualize. SignalFx time syntax (e.g. `\"-5m\"`, `\"-1h\"`).\n"
                },
                "url": {
                    "type": "string",
                    "description": "The URL of the dashboard.\n"
                },
                "variables": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/signalfx:index/DashboardVariable:DashboardVariable"
                    },
                    "description": "Dashboard variable to apply to each chart in the dashboard.\n"
                }
            },
            "required": [
                "dashboardGroup",
                "name",
                "url"
            ],
            "inputProperties": {
                "authorizedWriterTeams": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Team IDs that have write access to this dashboard group. Remember to use an admin's token if using this feature and to include that admin's team (or user id in `authorized_writer_teams`).\n"
                },
                "authorizedWriterUsers": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "User IDs that have write access to this dashboard group. Remember to use an admin's token if using this feature and to include that admin's user id (or team id in `authorized_writer_teams`).\n"
                },
                "charts": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/signalfx:index/DashboardChart:DashboardChart"
                    },
                    "description": "Chart ID and layout information for the charts in the dashboard.\n"
                },
                "chartsResolution": {
                    "type": "string",
                    "description": "Specifies the chart data display resolution for charts in this dashboard. Value can be one of `\"default\"`,  `\"low\"`, `\"high\"`, or  `\"highest\"`.\n"
                },
                "columns": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/signalfx:index/DashboardColumn:DashboardColumn"
                    },
                    "description": "Column number for the layout.\n"
                },
                "dashboardGroup": {
                    "type": "string",
                    "description": "The ID of the dashboard group that contains the dashboard.\n"
                },
                "description": {
                    "type": "string",
                    "description": "Variable description.\n"
                },
                "discoveryOptionsQuery": {
                    "type": "string"
                },
                "discoveryOptionsSelectors": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "endTime": {
                    "type": "integer",
                    "description": "Seconds since epoch. Used for visualization.\n"
                },
                "eventOverlays": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/signalfx:index/DashboardEventOverlay:DashboardEventOverlay"
                    },
                    "description": "Specify a list of event overlays to include in the dashboard. Note: These overlays correspond to the *suggested* event overlays specified in the web UI, and they're not automatically applied as active overlays. To set default active event overlays, use the `selected_event_overlay` property instead.\n"
                },
                "filters": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/signalfx:index/DashboardFilter:DashboardFilter"
                    },
                    "description": "Filter to apply to the charts when displaying the dashboard.\n"
                },
                "grids": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/signalfx:index/DashboardGrid:DashboardGrid"
                    },
                    "description": "Grid dashboard layout. Charts listed will be placed in a grid by row with the same width and height. If a chart cannot fit in a row, it will be placed automatically in the next row.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the dashboard.\n"
                },
                "selectedEventOverlays": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/signalfx:index/DashboardSelectedEventOverlay:DashboardSelectedEventOverlay"
                    },
                    "description": "Defines event overlays which are enabled by **default**. Any overlay specified here should have an accompanying entry in `event_overlay`, which are similar to the properties here.\n"
                },
                "startTime": {
                    "type": "integer",
                    "description": "Seconds since epoch. Used for visualization.\n"
                },
                "timeRange": {
                    "type": "string",
                    "description": "The time range prior to now to visualize. SignalFx time syntax (e.g. `\"-5m\"`, `\"-1h\"`).\n"
                },
                "variables": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/signalfx:index/DashboardVariable:DashboardVariable"
                    },
                    "description": "Dashboard variable to apply to each chart in the dashboard.\n"
                }
            },
            "requiredInputs": [
                "dashboardGroup"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Dashboard resources.\n",
                "properties": {
                    "authorizedWriterTeams": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Team IDs that have write access to this dashboard group. Remember to use an admin's token if using this feature and to include that admin's team (or user id in `authorized_writer_teams`).\n"
                    },
                    "authorizedWriterUsers": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "User IDs that have write access to this dashboard group. Remember to use an admin's token if using this feature and to include that admin's user id (or team id in `authorized_writer_teams`).\n"
                    },
                    "charts": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/signalfx:index/DashboardChart:DashboardChart"
                        },
                        "description": "Chart ID and layout information for the charts in the dashboard.\n"
                    },
                    "chartsResolution": {
                        "type": "string",
                        "description": "Specifies the chart data display resolution for charts in this dashboard. Value can be one of `\"default\"`,  `\"low\"`, `\"high\"`, or  `\"highest\"`.\n"
                    },
                    "columns": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/signalfx:index/DashboardColumn:DashboardColumn"
                        },
                        "description": "Column number for the layout.\n"
                    },
                    "dashboardGroup": {
                        "type": "string",
                        "description": "The ID of the dashboard group that contains the dashboard.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "Variable description.\n"
                    },
                    "discoveryOptionsQuery": {
                        "type": "string"
                    },
                    "discoveryOptionsSelectors": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "endTime": {
                        "type": "integer",
                        "description": "Seconds since epoch. Used for visualization.\n"
                    },
                    "eventOverlays": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/signalfx:index/DashboardEventOverlay:DashboardEventOverlay"
                        },
                        "description": "Specify a list of event overlays to include in the dashboard. Note: These overlays correspond to the *suggested* event overlays specified in the web UI, and they're not automatically applied as active overlays. To set default active event overlays, use the `selected_event_overlay` property instead.\n"
                    },
                    "filters": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/signalfx:index/DashboardFilter:DashboardFilter"
                        },
                        "description": "Filter to apply to the charts when displaying the dashboard.\n"
                    },
                    "grids": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/signalfx:index/DashboardGrid:DashboardGrid"
                        },
                        "description": "Grid dashboard layout. Charts listed will be placed in a grid by row with the same width and height. If a chart cannot fit in a row, it will be placed automatically in the next row.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the dashboard.\n"
                    },
                    "selectedEventOverlays": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/signalfx:index/DashboardSelectedEventOverlay:DashboardSelectedEventOverlay"
                        },
                        "description": "Defines event overlays which are enabled by **default**. Any overlay specified here should have an accompanying entry in `event_overlay`, which are similar to the properties here.\n"
                    },
                    "startTime": {
                        "type": "integer",
                        "description": "Seconds since epoch. Used for visualization.\n"
                    },
                    "timeRange": {
                        "type": "string",
                        "description": "The time range prior to now to visualize. SignalFx time syntax (e.g. `\"-5m\"`, `\"-1h\"`).\n"
                    },
                    "url": {
                        "type": "string",
                        "description": "The URL of the dashboard.\n"
                    },
                    "variables": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/signalfx:index/DashboardVariable:DashboardVariable"
                        },
                        "description": "Dashboard variable to apply to each chart in the dashboard.\n"
                    }
                },
                "type": "object"
            }
        },
        "signalfx:index/dashboardGroup:DashboardGroup": {
            "description": "In the SignalFx web UI, a [dashboard group](https://developers.signalfx.com/dashboard_groups_reference.html) is a collection of dashboards.\n\n\u003e **NOTE** Dashboard groups cannot be accessed directly, but just via a dashboard contained in them. This is the reason why make show won't show any of yours dashboard groups.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as signalfx from \"@pulumi/signalfx\";\n\nconst mydashboardgroup0 = new signalfx.DashboardGroup(\"mydashboardgroup0\", {\n    description: \"Cool dashboard group\",\n    authorizedWriterTeams: [signalfx_team.mycoolteam.id],\n    authorizedWriterUsers: [\"abc123\"],\n});\n```\n```python\nimport pulumi\nimport pulumi_signalfx as signalfx\n\nmydashboardgroup0 = signalfx.DashboardGroup(\"mydashboardgroup0\",\n    description=\"Cool dashboard group\",\n    authorized_writer_teams=[signalfx_team[\"mycoolteam\"][\"id\"]],\n    authorized_writer_users=[\"abc123\"])\n```\n```csharp\nusing Pulumi;\nusing SignalFx = Pulumi.SignalFx;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var mydashboardgroup0 = new SignalFx.DashboardGroup(\"mydashboardgroup0\", new SignalFx.DashboardGroupArgs\n        {\n            Description = \"Cool dashboard group\",\n            AuthorizedWriterTeams = \n            {\n                signalfx_team.Mycoolteam.Id,\n            },\n            AuthorizedWriterUsers = \n            {\n                \"abc123\",\n            },\n        });\n    }\n\n}\n```\n\n{{% /example %}}\n{{% example %}}\n### With Mirrored Dashboards\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as signalfx from \"@pulumi/signalfx\";\n\nconst mydashboardgroupWithmirrors = new signalfx.DashboardGroup(\"mydashboardgroupWithmirrors\", {\n    description: \"Cool dashboard group\",\n    dashboards: [{\n        dashboardId: signalfx_dashboard.gc_dashboard.id,\n        nameOverride: \"GC For My Service\",\n        descriptionOverride: \"Garbage Collection dashboard maintained by JVM team\",\n        filterOverrides: [{\n            property: \"service\",\n            values: [\"myservice\"],\n            negated: false,\n        }],\n        variableOverrides: [{\n            property: \"region\",\n            values: [\"us-west1\"],\n            valuesSuggesteds: [\n                \"us-west-1\",\n                \"us-east-1\",\n            ],\n        }],\n    }],\n});\n```\n```python\nimport pulumi\nimport pulumi_signalfx as signalfx\n\nmydashboardgroup_withmirrors = signalfx.DashboardGroup(\"mydashboardgroupWithmirrors\",\n    description=\"Cool dashboard group\",\n    dashboards=[signalfx.DashboardGroupDashboardArgs(\n        dashboard_id=signalfx_dashboard[\"gc_dashboard\"][\"id\"],\n        name_override=\"GC For My Service\",\n        description_override=\"Garbage Collection dashboard maintained by JVM team\",\n        filter_overrides=[signalfx.DashboardGroupDashboardFilterOverrideArgs(\n            property=\"service\",\n            values=[\"myservice\"],\n            negated=False,\n        )],\n        variable_overrides=[signalfx.DashboardGroupDashboardVariableOverrideArgs(\n            property=\"region\",\n            values=[\"us-west1\"],\n            values_suggesteds=[\n                \"us-west-1\",\n                \"us-east-1\",\n            ],\n        )],\n    )])\n```\n```csharp\nusing Pulumi;\nusing SignalFx = Pulumi.SignalFx;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var mydashboardgroupWithmirrors = new SignalFx.DashboardGroup(\"mydashboardgroupWithmirrors\", new SignalFx.DashboardGroupArgs\n        {\n            Description = \"Cool dashboard group\",\n            Dashboards = \n            {\n                new SignalFx.Inputs.DashboardGroupDashboardArgs\n                {\n                    DashboardId = signalfx_dashboard.Gc_dashboard.Id,\n                    NameOverride = \"GC For My Service\",\n                    DescriptionOverride = \"Garbage Collection dashboard maintained by JVM team\",\n                    FilterOverrides = \n                    {\n                        new SignalFx.Inputs.DashboardGroupDashboardFilterOverrideArgs\n                        {\n                            Property = \"service\",\n                            Values = \n                            {\n                                \"myservice\",\n                            },\n                            Negated = false,\n                        },\n                    },\n                    VariableOverrides = \n                    {\n                        new SignalFx.Inputs.DashboardGroupDashboardVariableOverrideArgs\n                        {\n                            Property = \"region\",\n                            Values = \n                            {\n                                \"us-west1\",\n                            },\n                            ValuesSuggesteds = \n                            {\n                                \"us-west-1\",\n                                \"us-east-1\",\n                            },\n                        },\n                    },\n                },\n            },\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-signalfx/sdk/v4/go/signalfx\"\n\t\"github.com/pulumi/pulumi-signalfx/sdk/v4/go/signalfx/\"\n\t\"github.com/pulumi/pulumi/sdk/v2/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := signalfx.NewDashboardGroup(ctx, \"mydashboardgroupWithmirrors\", \u0026signalfx.DashboardGroupArgs{\n\t\t\tDescription: pulumi.String(\"Cool dashboard group\"),\n\t\t\tDashboards: signalfx.DashboardGroupDashboardArray{\n\t\t\t\t\u0026signalfx.DashboardGroupDashboardArgs{\n\t\t\t\t\tDashboardId:         pulumi.Any(signalfx_dashboard.Gc_dashboard.Id),\n\t\t\t\t\tNameOverride:        pulumi.String(\"GC For My Service\"),\n\t\t\t\t\tDescriptionOverride: pulumi.String(\"Garbage Collection dashboard maintained by JVM team\"),\n\t\t\t\t\tFilterOverrides: signalfx.DashboardGroupDashboardFilterOverrideArray{\n\t\t\t\t\t\t\u0026signalfx.DashboardGroupDashboardFilterOverrideArgs{\n\t\t\t\t\t\t\tProperty: pulumi.String(\"service\"),\n\t\t\t\t\t\t\tValues: pulumi.StringArray{\n\t\t\t\t\t\t\t\tpulumi.String(\"myservice\"),\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tNegated: pulumi.Bool(false),\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t\tVariableOverrides: signalfx.DashboardGroupDashboardVariableOverrideArray{\n\t\t\t\t\t\t\u0026signalfx.DashboardGroupDashboardVariableOverrideArgs{\n\t\t\t\t\t\t\tProperty: pulumi.String(\"region\"),\n\t\t\t\t\t\t\tValues: pulumi.StringArray{\n\t\t\t\t\t\t\t\tpulumi.String(\"us-west1\"),\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tValuesSuggesteds: pulumi.StringArray{\n\t\t\t\t\t\t\t\tpulumi.String(\"us-west-1\"),\n\t\t\t\t\t\t\t\tpulumi.String(\"us-east-1\"),\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}",
            "properties": {
                "authorizedWriterTeams": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Team IDs that have write access to this dashboard group. Remember to use an admin's token if using this feature and to include that admin's team (or user id in `authorized_writer_teams`).\n"
                },
                "authorizedWriterUsers": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "User IDs that have write access to this dashboard group. Remember to use an admin's token if using this feature and to include that admin's user id (or team id in `authorized_writer_teams`).\n"
                },
                "dashboards": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/signalfx:index/DashboardGroupDashboard:DashboardGroupDashboard"
                    },
                    "description": "[Mirrored dashboards](https://docs.signalfx.com/en/latest/dashboards/dashboard-mirrors.html) in this dashboard group. **Note:** This feature is not present in all accounts. Please contact support if you are unsure.\n"
                },
                "description": {
                    "type": "string",
                    "description": "Description of the dashboard group.\n"
                },
                "importQualifiers": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/signalfx:index/DashboardGroupImportQualifier:DashboardGroupImportQualifier"
                    }
                },
                "name": {
                    "type": "string",
                    "description": "Name of the dashboard group.\n"
                },
                "teams": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Team IDs to associate the dashboard group to.\n"
                }
            },
            "required": [
                "name"
            ],
            "inputProperties": {
                "authorizedWriterTeams": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Team IDs that have write access to this dashboard group. Remember to use an admin's token if using this feature and to include that admin's team (or user id in `authorized_writer_teams`).\n"
                },
                "authorizedWriterUsers": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "User IDs that have write access to this dashboard group. Remember to use an admin's token if using this feature and to include that admin's user id (or team id in `authorized_writer_teams`).\n"
                },
                "dashboards": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/signalfx:index/DashboardGroupDashboard:DashboardGroupDashboard"
                    },
                    "description": "[Mirrored dashboards](https://docs.signalfx.com/en/latest/dashboards/dashboard-mirrors.html) in this dashboard group. **Note:** This feature is not present in all accounts. Please contact support if you are unsure.\n"
                },
                "description": {
                    "type": "string",
                    "description": "Description of the dashboard group.\n"
                },
                "importQualifiers": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/signalfx:index/DashboardGroupImportQualifier:DashboardGroupImportQualifier"
                    }
                },
                "name": {
                    "type": "string",
                    "description": "Name of the dashboard group.\n"
                },
                "teams": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Team IDs to associate the dashboard group to.\n"
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering DashboardGroup resources.\n",
                "properties": {
                    "authorizedWriterTeams": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Team IDs that have write access to this dashboard group. Remember to use an admin's token if using this feature and to include that admin's team (or user id in `authorized_writer_teams`).\n"
                    },
                    "authorizedWriterUsers": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "User IDs that have write access to this dashboard group. Remember to use an admin's token if using this feature and to include that admin's user id (or team id in `authorized_writer_teams`).\n"
                    },
                    "dashboards": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/signalfx:index/DashboardGroupDashboard:DashboardGroupDashboard"
                        },
                        "description": "[Mirrored dashboards](https://docs.signalfx.com/en/latest/dashboards/dashboard-mirrors.html) in this dashboard group. **Note:** This feature is not present in all accounts. Please contact support if you are unsure.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "Description of the dashboard group.\n"
                    },
                    "importQualifiers": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/signalfx:index/DashboardGroupImportQualifier:DashboardGroupImportQualifier"
                        }
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the dashboard group.\n"
                    },
                    "teams": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Team IDs to associate the dashboard group to.\n"
                    }
                },
                "type": "object"
            }
        },
        "signalfx:index/dataLink:DataLink": {
            "description": "Manage SignalFx [Data Links](https://docs.signalfx.com/en/latest/managing/data-links.html).\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as signalfx from \"@pulumi/signalfx\";\n\n// A global link to SignalFx dashboard.\nconst myDataLink = new signalfx.DataLink(\"myDataLink\", {\n    propertyName: \"pname\",\n    propertyValue: \"pvalue\",\n    targetSignalfxDashboards: [{\n        isDefault: true,\n        name: \"sfx_dash\",\n        dashboardGroupId: signalfx_dashboard_group.mydashboardgroup0.id,\n        dashboardId: signalfx_dashboard.mydashboard0.id,\n    }],\n});\n// A dashboard-specific link to an external URL\nconst myDataLinkDash = new signalfx.DataLink(\"myDataLinkDash\", {\n    contextDashboardId: signalfx_dashboard.mydashboard0.id,\n    propertyName: \"pname2\",\n    propertyValue: \"pvalue\",\n    targetExternalUrls: [{\n        isDefault: false,\n        name: \"ex_url\",\n        timeFormat: \"ISO8601\",\n        url: \"https://www.example.com\",\n        propertyKeyMapping: {\n            foo: \"bar\",\n        },\n    }],\n});\n```\n```python\nimport pulumi\nimport pulumi_signalfx as signalfx\n\n# A global link to SignalFx dashboard.\nmy_data_link = signalfx.DataLink(\"myDataLink\",\n    property_name=\"pname\",\n    property_value=\"pvalue\",\n    target_signalfx_dashboards=[signalfx.DataLinkTargetSignalfxDashboardArgs(\n        is_default=True,\n        name=\"sfx_dash\",\n        dashboard_group_id=signalfx_dashboard_group[\"mydashboardgroup0\"][\"id\"],\n        dashboard_id=signalfx_dashboard[\"mydashboard0\"][\"id\"],\n    )])\n# A dashboard-specific link to an external URL\nmy_data_link_dash = signalfx.DataLink(\"myDataLinkDash\",\n    context_dashboard_id=signalfx_dashboard[\"mydashboard0\"][\"id\"],\n    property_name=\"pname2\",\n    property_value=\"pvalue\",\n    target_external_urls=[signalfx.DataLinkTargetExternalUrlArgs(\n        is_default=False,\n        name=\"ex_url\",\n        time_format=\"ISO8601\",\n        url=\"https://www.example.com\",\n        property_key_mapping={\n            \"foo\": \"bar\",\n        },\n    )])\n```\n```csharp\nusing Pulumi;\nusing SignalFx = Pulumi.SignalFx;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        // A global link to SignalFx dashboard.\n        var myDataLink = new SignalFx.DataLink(\"myDataLink\", new SignalFx.DataLinkArgs\n        {\n            PropertyName = \"pname\",\n            PropertyValue = \"pvalue\",\n            TargetSignalfxDashboards = \n            {\n                new SignalFx.Inputs.DataLinkTargetSignalfxDashboardArgs\n                {\n                    IsDefault = true,\n                    Name = \"sfx_dash\",\n                    DashboardGroupId = signalfx_dashboard_group.Mydashboardgroup0.Id,\n                    DashboardId = signalfx_dashboard.Mydashboard0.Id,\n                },\n            },\n        });\n        // A dashboard-specific link to an external URL\n        var myDataLinkDash = new SignalFx.DataLink(\"myDataLinkDash\", new SignalFx.DataLinkArgs\n        {\n            ContextDashboardId = signalfx_dashboard.Mydashboard0.Id,\n            PropertyName = \"pname2\",\n            PropertyValue = \"pvalue\",\n            TargetExternalUrls = \n            {\n                new SignalFx.Inputs.DataLinkTargetExternalUrlArgs\n                {\n                    IsDefault = false,\n                    Name = \"ex_url\",\n                    TimeFormat = \"ISO8601\",\n                    Url = \"https://www.example.com\",\n                    PropertyKeyMapping = \n                    {\n                        { \"foo\", \"bar\" },\n                    },\n                },\n            },\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-signalfx/sdk/v4/go/signalfx\"\n\t\"github.com/pulumi/pulumi-signalfx/sdk/v4/go/signalfx/\"\n\t\"github.com/pulumi/pulumi/sdk/v2/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := signalfx.NewDataLink(ctx, \"myDataLink\", \u0026signalfx.DataLinkArgs{\n\t\t\tPropertyName:  pulumi.String(\"pname\"),\n\t\t\tPropertyValue: pulumi.String(\"pvalue\"),\n\t\t\tTargetSignalfxDashboards: signalfx.DataLinkTargetSignalfxDashboardArray{\n\t\t\t\t\u0026signalfx.DataLinkTargetSignalfxDashboardArgs{\n\t\t\t\t\tIsDefault:        pulumi.Bool(true),\n\t\t\t\t\tName:             pulumi.String(\"sfx_dash\"),\n\t\t\t\t\tDashboardGroupId: pulumi.Any(signalfx_dashboard_group.Mydashboardgroup0.Id),\n\t\t\t\t\tDashboardId:      pulumi.Any(signalfx_dashboard.Mydashboard0.Id),\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = signalfx.NewDataLink(ctx, \"myDataLinkDash\", \u0026signalfx.DataLinkArgs{\n\t\t\tContextDashboardId: pulumi.Any(signalfx_dashboard.Mydashboard0.Id),\n\t\t\tPropertyName:       pulumi.String(\"pname2\"),\n\t\t\tPropertyValue:      pulumi.String(\"pvalue\"),\n\t\t\tTargetExternalUrls: signalfx.DataLinkTargetExternalUrlArray{\n\t\t\t\t\u0026signalfx.DataLinkTargetExternalUrlArgs{\n\t\t\t\t\tIsDefault:  pulumi.Bool(false),\n\t\t\t\t\tName:       pulumi.String(\"ex_url\"),\n\t\t\t\t\tTimeFormat: pulumi.String(\"ISO8601\"),\n\t\t\t\t\tUrl:        pulumi.String(\"https://www.example.com\"),\n\t\t\t\t\tPropertyKeyMapping: pulumi.StringMap{\n\t\t\t\t\t\t\"foo\": pulumi.String(\"bar\"),\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}",
            "properties": {
                "contextDashboardId": {
                    "type": "string",
                    "description": "If provided, scopes this data link to the supplied dashboard id. If omitted then the link will be global.\n"
                },
                "propertyName": {
                    "type": "string",
                    "description": "Name (key) of the metadata that's the trigger of a data link. If you specify `property_value`, you must specify `property_name`.\n"
                },
                "propertyValue": {
                    "type": "string",
                    "description": "Value of the metadata that's the trigger of a data link. If you specify this property, you must also specify `property_name`.\n"
                },
                "targetExternalUrls": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/signalfx:index/DataLinkTargetExternalUrl:DataLinkTargetExternalUrl"
                    },
                    "description": "Link to an external URL\n"
                },
                "targetSignalfxDashboards": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/signalfx:index/DataLinkTargetSignalfxDashboard:DataLinkTargetSignalfxDashboard"
                    },
                    "description": "Link to a SignalFx dashboard\n"
                },
                "targetSplunks": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/signalfx:index/DataLinkTargetSplunk:DataLinkTargetSplunk"
                    },
                    "description": "Link to an external URL\n"
                }
            },
            "inputProperties": {
                "contextDashboardId": {
                    "type": "string",
                    "description": "If provided, scopes this data link to the supplied dashboard id. If omitted then the link will be global.\n"
                },
                "propertyName": {
                    "type": "string",
                    "description": "Name (key) of the metadata that's the trigger of a data link. If you specify `property_value`, you must specify `property_name`.\n"
                },
                "propertyValue": {
                    "type": "string",
                    "description": "Value of the metadata that's the trigger of a data link. If you specify this property, you must also specify `property_name`.\n"
                },
                "targetExternalUrls": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/signalfx:index/DataLinkTargetExternalUrl:DataLinkTargetExternalUrl"
                    },
                    "description": "Link to an external URL\n"
                },
                "targetSignalfxDashboards": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/signalfx:index/DataLinkTargetSignalfxDashboard:DataLinkTargetSignalfxDashboard"
                    },
                    "description": "Link to a SignalFx dashboard\n"
                },
                "targetSplunks": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/signalfx:index/DataLinkTargetSplunk:DataLinkTargetSplunk"
                    },
                    "description": "Link to an external URL\n"
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering DataLink resources.\n",
                "properties": {
                    "contextDashboardId": {
                        "type": "string",
                        "description": "If provided, scopes this data link to the supplied dashboard id. If omitted then the link will be global.\n"
                    },
                    "propertyName": {
                        "type": "string",
                        "description": "Name (key) of the metadata that's the trigger of a data link. If you specify `property_value`, you must specify `property_name`.\n"
                    },
                    "propertyValue": {
                        "type": "string",
                        "description": "Value of the metadata that's the trigger of a data link. If you specify this property, you must also specify `property_name`.\n"
                    },
                    "targetExternalUrls": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/signalfx:index/DataLinkTargetExternalUrl:DataLinkTargetExternalUrl"
                        },
                        "description": "Link to an external URL\n"
                    },
                    "targetSignalfxDashboards": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/signalfx:index/DataLinkTargetSignalfxDashboard:DataLinkTargetSignalfxDashboard"
                        },
                        "description": "Link to a SignalFx dashboard\n"
                    },
                    "targetSplunks": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/signalfx:index/DataLinkTargetSplunk:DataLinkTargetSplunk"
                        },
                        "description": "Link to an external URL\n"
                    }
                },
                "type": "object"
            }
        },
        "signalfx:index/detector:Detector": {
            "description": "Provides a SignalFx detector resource. This can be used to create and manage detectors.\n\n\u003e **NOTE** If you're interested in using SignalFx detector features such as Historical Anomaly, Resource Running Out, or others then consider building them in the UI first then using the \"Show SignalFlow\" feature to extract the value for `program_text`. You may also consult the [documentation for detector functions in signalflow-library](https://github.com/signalfx/signalflow-library/tree/master/library/signalfx/detectors).\n\n## Notification Format\n\nAs SignalFx supports different notification mechanisms a comma-delimited string is used to provide inputs. If you'd like to specify multiple notifications, then each should be a member in the list, like so:\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\n```\n```python\nimport pulumi\n```\n```csharp\nusing Pulumi;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v2/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\treturn nil\n\t})\n}\n```\n\nThis will likely be changed in a future iteration of the provider. See [SignalFx Docs](https://developers.signalfx.com/detectors_reference.html#operation/Create%20Single%20Detector) for more information. For now, here are some example of how to configure each notification type:\n\n### Email\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\n```\n```python\nimport pulumi\n```\n```csharp\nusing Pulumi;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v2/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\treturn nil\n\t})\n}\n```\n\n### Jira\n\nNote that the `credentialId` is the SignalFx-provided ID shown after setting up your Jira integration. (See also `signalfx.jira.Integration`.)\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\n```\n```python\nimport pulumi\n```\n```csharp\nusing Pulumi;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v2/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\treturn nil\n\t})\n}\n```\n\n### Opsgenie\n\nNote that the `credentialId` is the SignalFx-provided ID shown after setting up your Opsgenie integration. `Team` here is hardcoded as the `responderType` as that is the only acceptable type as per the API docs.\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\n```\n```python\nimport pulumi\n```\n```csharp\nusing Pulumi;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v2/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\treturn nil\n\t})\n}\n```\n\n### PagerDuty\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\n```\n```python\nimport pulumi\n```\n```csharp\nusing Pulumi;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v2/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\treturn nil\n\t})\n}\n```\n\n### Slack\n\nExclude the `#` on the channel name!\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\n```\n```python\nimport pulumi\n```\n```csharp\nusing Pulumi;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v2/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\treturn nil\n\t})\n}\n```\n\n### Team\n\nSends [notifications to a team](https://docs.signalfx.com/en/latest/managing/teams/team-notifications.html).\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\n```\n```python\nimport pulumi\n```\n```csharp\nusing Pulumi;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v2/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\treturn nil\n\t})\n}\n```\n\n### TeamEmail\n\nSends an email to every member of a team.\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\n```\n```python\nimport pulumi\n```\n```csharp\nusing Pulumi;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v2/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\treturn nil\n\t})\n}\n```\n\n### VictorOps\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\n```\n```python\nimport pulumi\n```\n```csharp\nusing Pulumi;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v2/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\treturn nil\n\t})\n}\n```\n\n### Webhook\n\n\u003e **NOTE** You need to include all the commas even if you only use a credential id below.\n\nYou can either configure a Webhook to use an existing integration's credential id:\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\n```\n```python\nimport pulumi\n```\n```csharp\nusing Pulumi;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v2/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\treturn nil\n\t})\n}\n```\n\nor configure one inline:\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\n```\n```python\nimport pulumi\n```\n```csharp\nusing Pulumi;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v2/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\treturn nil\n\t})\n}\n```\n\n\n## Import\n\nDetectors can be imported using their string ID (recoverable from URL`/#/detector/v2/abc123/edit`, e.g.\n\n```sh\n $ pulumi import signalfx:index/detector:Detector application_delay abc123\n```\n\n ",
            "properties": {
                "authorizedWriterTeams": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Team IDs that have write access to this detector. Remember to use an admin's token if using this feature and to include that admin's team id (or user id in `authorized_writer_users`).\n"
                },
                "authorizedWriterUsers": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "User IDs that have write access to this detector. Remember to use an admin's token if using this feature and to include that admin's user id (or team id in `authorized_writer_teams`).\n"
                },
                "description": {
                    "type": "string",
                    "description": "Description for the rule. Displays as the alert condition in the Alert Rules tab of the detector editor in the web UI.\n"
                },
                "disableSampling": {
                    "type": "boolean",
                    "description": "When `false`, the visualization may sample the output timeseries rather than displaying them all. `false` by default.\n"
                },
                "endTime": {
                    "type": "integer",
                    "description": "Seconds since epoch. Used for visualization. Conflicts with `time_range`.\n"
                },
                "maxDelay": {
                    "type": "integer",
                    "description": "How long (in seconds) to wait for late datapoints. See [Delayed Datapoints](https://signalfx-product-docs.readthedocs-hosted.com/en/latest/charts/chart-builder.html#delayed-datapoints) for more info. Max value is `900` seconds (15 minutes). `Auto` (as little as possible) by default.\n"
                },
                "minDelay": {
                    "type": "integer",
                    "description": "How long (in seconds) to wait even if the datapoints are arriving in a timely fashion. Max value is 900 (15m).\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the detector.\n"
                },
                "programText": {
                    "type": "string",
                    "description": "Signalflow program text for the detector. More info [in the SignalFx docs](https://developers.signalfx.com/signalflow_analytics/signalflow_overview.html#_signalflow_programming_language).\n"
                },
                "rules": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/signalfx:index/DetectorRule:DetectorRule"
                    },
                    "description": "Set of rules used for alerting.\n"
                },
                "showDataMarkers": {
                    "type": "boolean",
                    "description": "When `true`, markers will be drawn for each datapoint within the visualization. `true` by default.\n"
                },
                "showEventLines": {
                    "type": "boolean",
                    "description": "When `true`, the visualization will display a vertical line for each event trigger. `false` by default.\n"
                },
                "startTime": {
                    "type": "integer",
                    "description": "Seconds since epoch. Used for visualization. Conflicts with `time_range`.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Tags associated with the detector.\n"
                },
                "teams": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Team IDs to associate the detector to.\n"
                },
                "timeRange": {
                    "type": "integer",
                    "description": "Seconds to display in the visualization. This is a rolling range from the current time. Example: `3600` corresponds to `-1h` in web UI. `3600` by default.\n"
                },
                "timezone": {
                    "type": "string",
                    "description": "The property value is a string that denotes the geographic region associated with the time zone, (e.g. Australia/Sydney)\n"
                },
                "url": {
                    "type": "string",
                    "description": "The URL of the detector.\n"
                },
                "vizOptions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/signalfx:index/DetectorVizOption:DetectorVizOption"
                    },
                    "description": "Plot-level customization options, associated with a publish statement.\n"
                }
            },
            "required": [
                "name",
                "programText",
                "rules",
                "url"
            ],
            "inputProperties": {
                "authorizedWriterTeams": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Team IDs that have write access to this detector. Remember to use an admin's token if using this feature and to include that admin's team id (or user id in `authorized_writer_users`).\n"
                },
                "authorizedWriterUsers": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "User IDs that have write access to this detector. Remember to use an admin's token if using this feature and to include that admin's user id (or team id in `authorized_writer_teams`).\n"
                },
                "description": {
                    "type": "string",
                    "description": "Description for the rule. Displays as the alert condition in the Alert Rules tab of the detector editor in the web UI.\n"
                },
                "disableSampling": {
                    "type": "boolean",
                    "description": "When `false`, the visualization may sample the output timeseries rather than displaying them all. `false` by default.\n"
                },
                "endTime": {
                    "type": "integer",
                    "description": "Seconds since epoch. Used for visualization. Conflicts with `time_range`.\n"
                },
                "maxDelay": {
                    "type": "integer",
                    "description": "How long (in seconds) to wait for late datapoints. See [Delayed Datapoints](https://signalfx-product-docs.readthedocs-hosted.com/en/latest/charts/chart-builder.html#delayed-datapoints) for more info. Max value is `900` seconds (15 minutes). `Auto` (as little as possible) by default.\n"
                },
                "minDelay": {
                    "type": "integer",
                    "description": "How long (in seconds) to wait even if the datapoints are arriving in a timely fashion. Max value is 900 (15m).\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the detector.\n"
                },
                "programText": {
                    "type": "string",
                    "description": "Signalflow program text for the detector. More info [in the SignalFx docs](https://developers.signalfx.com/signalflow_analytics/signalflow_overview.html#_signalflow_programming_language).\n"
                },
                "rules": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/signalfx:index/DetectorRule:DetectorRule"
                    },
                    "description": "Set of rules used for alerting.\n"
                },
                "showDataMarkers": {
                    "type": "boolean",
                    "description": "When `true`, markers will be drawn for each datapoint within the visualization. `true` by default.\n"
                },
                "showEventLines": {
                    "type": "boolean",
                    "description": "When `true`, the visualization will display a vertical line for each event trigger. `false` by default.\n"
                },
                "startTime": {
                    "type": "integer",
                    "description": "Seconds since epoch. Used for visualization. Conflicts with `time_range`.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Tags associated with the detector.\n"
                },
                "teams": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Team IDs to associate the detector to.\n"
                },
                "timeRange": {
                    "type": "integer",
                    "description": "Seconds to display in the visualization. This is a rolling range from the current time. Example: `3600` corresponds to `-1h` in web UI. `3600` by default.\n"
                },
                "timezone": {
                    "type": "string",
                    "description": "The property value is a string that denotes the geographic region associated with the time zone, (e.g. Australia/Sydney)\n"
                },
                "vizOptions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/signalfx:index/DetectorVizOption:DetectorVizOption"
                    },
                    "description": "Plot-level customization options, associated with a publish statement.\n"
                }
            },
            "requiredInputs": [
                "programText",
                "rules"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Detector resources.\n",
                "properties": {
                    "authorizedWriterTeams": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Team IDs that have write access to this detector. Remember to use an admin's token if using this feature and to include that admin's team id (or user id in `authorized_writer_users`).\n"
                    },
                    "authorizedWriterUsers": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "User IDs that have write access to this detector. Remember to use an admin's token if using this feature and to include that admin's user id (or team id in `authorized_writer_teams`).\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "Description for the rule. Displays as the alert condition in the Alert Rules tab of the detector editor in the web UI.\n"
                    },
                    "disableSampling": {
                        "type": "boolean",
                        "description": "When `false`, the visualization may sample the output timeseries rather than displaying them all. `false` by default.\n"
                    },
                    "endTime": {
                        "type": "integer",
                        "description": "Seconds since epoch. Used for visualization. Conflicts with `time_range`.\n"
                    },
                    "maxDelay": {
                        "type": "integer",
                        "description": "How long (in seconds) to wait for late datapoints. See [Delayed Datapoints](https://signalfx-product-docs.readthedocs-hosted.com/en/latest/charts/chart-builder.html#delayed-datapoints) for more info. Max value is `900` seconds (15 minutes). `Auto` (as little as possible) by default.\n"
                    },
                    "minDelay": {
                        "type": "integer",
                        "description": "How long (in seconds) to wait even if the datapoints are arriving in a timely fashion. Max value is 900 (15m).\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the detector.\n"
                    },
                    "programText": {
                        "type": "string",
                        "description": "Signalflow program text for the detector. More info [in the SignalFx docs](https://developers.signalfx.com/signalflow_analytics/signalflow_overview.html#_signalflow_programming_language).\n"
                    },
                    "rules": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/signalfx:index/DetectorRule:DetectorRule"
                        },
                        "description": "Set of rules used for alerting.\n"
                    },
                    "showDataMarkers": {
                        "type": "boolean",
                        "description": "When `true`, markers will be drawn for each datapoint within the visualization. `true` by default.\n"
                    },
                    "showEventLines": {
                        "type": "boolean",
                        "description": "When `true`, the visualization will display a vertical line for each event trigger. `false` by default.\n"
                    },
                    "startTime": {
                        "type": "integer",
                        "description": "Seconds since epoch. Used for visualization. Conflicts with `time_range`.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Tags associated with the detector.\n"
                    },
                    "teams": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Team IDs to associate the detector to.\n"
                    },
                    "timeRange": {
                        "type": "integer",
                        "description": "Seconds to display in the visualization. This is a rolling range from the current time. Example: `3600` corresponds to `-1h` in web UI. `3600` by default.\n"
                    },
                    "timezone": {
                        "type": "string",
                        "description": "The property value is a string that denotes the geographic region associated with the time zone, (e.g. Australia/Sydney)\n"
                    },
                    "url": {
                        "type": "string",
                        "description": "The URL of the detector.\n"
                    },
                    "vizOptions": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/signalfx:index/DetectorVizOption:DetectorVizOption"
                        },
                        "description": "Plot-level customization options, associated with a publish statement.\n"
                    }
                },
                "type": "object"
            }
        },
        "signalfx:index/eventFeedChart:EventFeedChart": {
            "description": "Displays a listing of events as a widget in a dashboard.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as signalfx from \"@pulumi/signalfx\";\n\nconst mynote0 = new signalfx.EventFeedChart(\"mynote0\", {\n    description: \"Lorem ipsum dolor sit amet\",\n    programText: \"A = events(eventType='Fart Testing').publish(label='A')\",\n    vizOptions: [{\n        color: \"orange\",\n        label: \"A\",\n    }],\n});\n```\n{{% /example %}}\n{{% /examples %}}",
            "properties": {
                "description": {
                    "type": "string",
                    "description": "Description of the text note.\n"
                },
                "endTime": {
                    "type": "integer",
                    "description": "Seconds since epoch. Used for visualization. Conflicts with `time_range`.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the text note.\n"
                },
                "programText": {
                    "type": "string",
                    "description": "Signalflow program text for the chart. More info[in the SignalFx docs](https://developers.signalfx.com/signalflow_analytics/signalflow_overview.html#_signalflow_programming_language).\n"
                },
                "startTime": {
                    "type": "integer",
                    "description": "Seconds since epoch. Used for visualization. Conflicts with `time_range`.\n"
                },
                "timeRange": {
                    "type": "integer",
                    "description": "From when to display data. SignalFx time syntax (e.g. `\"-5m\"`, `\"-1h\"`). Conflicts with `start_time` and `end_time`.\n"
                },
                "url": {
                    "type": "string",
                    "description": "The URL of the chart.\n"
                }
            },
            "required": [
                "name",
                "programText",
                "url"
            ],
            "inputProperties": {
                "description": {
                    "type": "string",
                    "description": "Description of the text note.\n"
                },
                "endTime": {
                    "type": "integer",
                    "description": "Seconds since epoch. Used for visualization. Conflicts with `time_range`.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the text note.\n"
                },
                "programText": {
                    "type": "string",
                    "description": "Signalflow program text for the chart. More info[in the SignalFx docs](https://developers.signalfx.com/signalflow_analytics/signalflow_overview.html#_signalflow_programming_language).\n"
                },
                "startTime": {
                    "type": "integer",
                    "description": "Seconds since epoch. Used for visualization. Conflicts with `time_range`.\n"
                },
                "timeRange": {
                    "type": "integer",
                    "description": "From when to display data. SignalFx time syntax (e.g. `\"-5m\"`, `\"-1h\"`). Conflicts with `start_time` and `end_time`.\n"
                }
            },
            "requiredInputs": [
                "programText"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering EventFeedChart resources.\n",
                "properties": {
                    "description": {
                        "type": "string",
                        "description": "Description of the text note.\n"
                    },
                    "endTime": {
                        "type": "integer",
                        "description": "Seconds since epoch. Used for visualization. Conflicts with `time_range`.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the text note.\n"
                    },
                    "programText": {
                        "type": "string",
                        "description": "Signalflow program text for the chart. More info[in the SignalFx docs](https://developers.signalfx.com/signalflow_analytics/signalflow_overview.html#_signalflow_programming_language).\n"
                    },
                    "startTime": {
                        "type": "integer",
                        "description": "Seconds since epoch. Used for visualization. Conflicts with `time_range`.\n"
                    },
                    "timeRange": {
                        "type": "integer",
                        "description": "From when to display data. SignalFx time syntax (e.g. `\"-5m\"`, `\"-1h\"`). Conflicts with `start_time` and `end_time`.\n"
                    },
                    "url": {
                        "type": "string",
                        "description": "The URL of the chart.\n"
                    }
                },
                "type": "object"
            }
        },
        "signalfx:index/heatmapChart:HeatmapChart": {
            "description": "This chart type displays the specified plot in a heatmap fashion. This format is similar to the [Infrastructure Navigator](https://signalfx-product-docs.readthedocs-hosted.com/en/latest/built-in-content/infra-nav.html#infra), with squares representing each source for the selected metric, and the color of each square representing the value range of the metric.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as signalfx from \"@pulumi/signalfx\";\n\nconst myheatmapchart0 = new signalfx.HeatmapChart(\"myheatmapchart0\", {\n    colorRange: {\n        color: \"#ff0000\",\n        maxValue: 100,\n        minValue: 0,\n    },\n    colorScales: [\n        // You can only use one of color_range or color_scale!\n        {\n            color: \"green\",\n            gte: 99,\n        },\n        {\n            color: \"yellow\",\n            gte: 95,\n            lt: 99, // This ensures terraform recognizes that we cover the range 95-99\n        },\n        {\n            color: \"red\",\n            lt: 95,\n        },\n    ],\n    description: \"Very cool Heatmap\",\n    disableSampling: true,\n    groupBies: [\n        \"hostname\",\n        \"host\",\n    ],\n    hideTimestamp: true,\n    programText: `myfilters = filter(\"cluster_name\", \"prod\") and filter(\"role\", \"search\")\ndata(\"cpu.total.idle\", filter=myfilters).publish()\n`,\n    sortBy: \"+host\",\n    timezone: \"Europe/Paris\",\n});\n```\n```python\nimport pulumi\nimport pulumi_signalfx as signalfx\n\nmyheatmapchart0 = signalfx.HeatmapChart(\"myheatmapchart0\",\n    color_range=signalfx.HeatmapChartColorRangeArgs(\n        color=\"#ff0000\",\n        max_value=100,\n        min_value=0,\n    ),\n    color_scales=[\n        signalfx.HeatmapChartColorScaleArgs(\n            color=\"green\",\n            gte=99,\n        ),\n        signalfx.HeatmapChartColorScaleArgs(\n            color=\"yellow\",\n            gte=95,\n            lt=99,\n        ),\n        signalfx.HeatmapChartColorScaleArgs(\n            color=\"red\",\n            lt=95,\n        ),\n    ],\n    description=\"Very cool Heatmap\",\n    disable_sampling=True,\n    group_bies=[\n        \"hostname\",\n        \"host\",\n    ],\n    hide_timestamp=True,\n    program_text=\"\"\"myfilters = filter(\"cluster_name\", \"prod\") and filter(\"role\", \"search\")\ndata(\"cpu.total.idle\", filter=myfilters).publish()\n\n\"\"\",\n    sort_by=\"+host\",\n    timezone=\"Europe/Paris\")\n```\n```csharp\nusing Pulumi;\nusing SignalFx = Pulumi.SignalFx;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var myheatmapchart0 = new SignalFx.HeatmapChart(\"myheatmapchart0\", new SignalFx.HeatmapChartArgs\n        {\n            ColorRange = new SignalFx.Inputs.HeatmapChartColorRangeArgs\n            {\n                Color = \"#ff0000\",\n                MaxValue = 100,\n                MinValue = 0,\n            },\n            ColorScales = \n            {\n                new SignalFx.Inputs.HeatmapChartColorScaleArgs\n                {\n                    Color = \"green\",\n                    Gte = 99,\n                },\n                new SignalFx.Inputs.HeatmapChartColorScaleArgs\n                {\n                    Color = \"yellow\",\n                    Gte = 95,\n                    Lt = 99,\n                },\n                new SignalFx.Inputs.HeatmapChartColorScaleArgs\n                {\n                    Color = \"red\",\n                    Lt = 95,\n                },\n            },\n            Description = \"Very cool Heatmap\",\n            DisableSampling = true,\n            GroupBies = \n            {\n                \"hostname\",\n                \"host\",\n            },\n            HideTimestamp = true,\n            ProgramText = @\"myfilters = filter(\"\"cluster_name\"\", \"\"prod\"\") and filter(\"\"role\"\", \"\"search\"\")\ndata(\"\"cpu.total.idle\"\", filter=myfilters).publish()\n\n\",\n            SortBy = \"+host\",\n            Timezone = \"Europe/Paris\",\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"fmt\"\n\n\t\"github.com/pulumi/pulumi-signalfx/sdk/v4/go/signalfx\"\n\t\"github.com/pulumi/pulumi-signalfx/sdk/v4/go/signalfx/\"\n\t\"github.com/pulumi/pulumi/sdk/v2/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := signalfx.NewHeatmapChart(ctx, \"myheatmapchart0\", \u0026signalfx.HeatmapChartArgs{\n\t\t\tColorRange: \u0026signalfx.HeatmapChartColorRangeArgs{\n\t\t\t\tColor:    pulumi.String(\"#ff0000\"),\n\t\t\t\tMaxValue: pulumi.Float64(100),\n\t\t\t\tMinValue: pulumi.Float64(0),\n\t\t\t},\n\t\t\tColorScales: signalfx.HeatmapChartColorScaleArray{\n\t\t\t\t\u0026signalfx.HeatmapChartColorScaleArgs{\n\t\t\t\t\tColor: pulumi.String(\"green\"),\n\t\t\t\t\tGte:   pulumi.Float64(99),\n\t\t\t\t},\n\t\t\t\t\u0026signalfx.HeatmapChartColorScaleArgs{\n\t\t\t\t\tColor: pulumi.String(\"yellow\"),\n\t\t\t\t\tGte:   pulumi.Float64(95),\n\t\t\t\t\tLt:    pulumi.Float64(99),\n\t\t\t\t},\n\t\t\t\t\u0026signalfx.HeatmapChartColorScaleArgs{\n\t\t\t\t\tColor: pulumi.String(\"red\"),\n\t\t\t\t\tLt:    pulumi.Float64(95),\n\t\t\t\t},\n\t\t\t},\n\t\t\tDescription:     pulumi.String(\"Very cool Heatmap\"),\n\t\t\tDisableSampling: pulumi.Bool(true),\n\t\t\tGroupBies: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"hostname\"),\n\t\t\t\tpulumi.String(\"host\"),\n\t\t\t},\n\t\t\tHideTimestamp: pulumi.Bool(true),\n\t\t\tProgramText:   pulumi.String(fmt.Sprintf(\"%v%v%v\", \"myfilters = filter(\\\"cluster_name\\\", \\\"prod\\\") and filter(\\\"role\\\", \\\"search\\\")\\n\", \"data(\\\"cpu.total.idle\\\", filter=myfilters).publish()\\n\", \"\\n\")),\n\t\t\tSortBy:        pulumi.String(\"+host\"),\n\t\t\tTimezone:      pulumi.String(\"Europe/Paris\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}",
            "properties": {
                "colorRange": {
                    "$ref": "#/types/signalfx:index/HeatmapChartColorRange:HeatmapChartColorRange",
                    "description": "Values and color for the color range. Example: `color_range : { min : 0, max : 100, color : \"#0000ff\" }`. Look at this [link](https://docs.signalfx.com/en/latest/charts/chart-options-tab.html).\n"
                },
                "colorScales": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/signalfx:index/HeatmapChartColorScale:HeatmapChartColorScale"
                    },
                    "description": "One to N blocks, each defining a single color range including both the color to display for that range and the borders of the range. Example: `color_scale { gt = 60, color = \"blue\" } color_scale { lte = 60, color = \"yellow\" }`. Look at this [link](https://docs.signalfx.com/en/latest/charts/chart-options-tab.html).\n"
                },
                "description": {
                    "type": "string",
                    "description": "Description of the chart.\n"
                },
                "disableSampling": {
                    "type": "boolean",
                    "description": "If `false`, samples a subset of the output MTS, which improves UI performance. `false` by default.\n"
                },
                "groupBies": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Properties to group by in the heatmap (in nesting order).\n"
                },
                "hideTimestamp": {
                    "type": "boolean",
                    "description": "Whether to show the timestamp in the chart. `false` by default.\n"
                },
                "maxDelay": {
                    "type": "integer",
                    "description": "How long (in seconds) to wait for late datapoints.\n"
                },
                "minimumResolution": {
                    "type": "integer",
                    "description": "The minimum resolution (in seconds) to use for computing the underlying program.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the chart.\n"
                },
                "programText": {
                    "type": "string",
                    "description": "Signalflow program text for the chart. More info at \u003chttps://developers.signalfx.com/docs/signalflow-overview\u003e.\n"
                },
                "refreshInterval": {
                    "type": "integer",
                    "description": "How often (in seconds) to refresh the values of the heatmap.\n"
                },
                "sortBy": {
                    "type": "string",
                    "description": "The property to use when sorting the elements. Must be prepended with `+` for ascending or `-` for descending (e.g. `-foo`).\n"
                },
                "timezone": {
                    "type": "string",
                    "description": "The property value is a string that denotes the geographic region associated with the time zone, (default UTC).\n"
                },
                "unitPrefix": {
                    "type": "string",
                    "description": "Must be `\"Metric\"` or `\"Binary`\". `\"Metric\"` by default.\n"
                },
                "url": {
                    "type": "string",
                    "description": "The URL of the chart.\n"
                }
            },
            "required": [
                "name",
                "programText",
                "url"
            ],
            "inputProperties": {
                "colorRange": {
                    "$ref": "#/types/signalfx:index/HeatmapChartColorRange:HeatmapChartColorRange",
                    "description": "Values and color for the color range. Example: `color_range : { min : 0, max : 100, color : \"#0000ff\" }`. Look at this [link](https://docs.signalfx.com/en/latest/charts/chart-options-tab.html).\n"
                },
                "colorScales": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/signalfx:index/HeatmapChartColorScale:HeatmapChartColorScale"
                    },
                    "description": "One to N blocks, each defining a single color range including both the color to display for that range and the borders of the range. Example: `color_scale { gt = 60, color = \"blue\" } color_scale { lte = 60, color = \"yellow\" }`. Look at this [link](https://docs.signalfx.com/en/latest/charts/chart-options-tab.html).\n"
                },
                "description": {
                    "type": "string",
                    "description": "Description of the chart.\n"
                },
                "disableSampling": {
                    "type": "boolean",
                    "description": "If `false`, samples a subset of the output MTS, which improves UI performance. `false` by default.\n"
                },
                "groupBies": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Properties to group by in the heatmap (in nesting order).\n"
                },
                "hideTimestamp": {
                    "type": "boolean",
                    "description": "Whether to show the timestamp in the chart. `false` by default.\n"
                },
                "maxDelay": {
                    "type": "integer",
                    "description": "How long (in seconds) to wait for late datapoints.\n"
                },
                "minimumResolution": {
                    "type": "integer",
                    "description": "The minimum resolution (in seconds) to use for computing the underlying program.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the chart.\n"
                },
                "programText": {
                    "type": "string",
                    "description": "Signalflow program text for the chart. More info at \u003chttps://developers.signalfx.com/docs/signalflow-overview\u003e.\n"
                },
                "refreshInterval": {
                    "type": "integer",
                    "description": "How often (in seconds) to refresh the values of the heatmap.\n"
                },
                "sortBy": {
                    "type": "string",
                    "description": "The property to use when sorting the elements. Must be prepended with `+` for ascending or `-` for descending (e.g. `-foo`).\n"
                },
                "timezone": {
                    "type": "string",
                    "description": "The property value is a string that denotes the geographic region associated with the time zone, (default UTC).\n"
                },
                "unitPrefix": {
                    "type": "string",
                    "description": "Must be `\"Metric\"` or `\"Binary`\". `\"Metric\"` by default.\n"
                }
            },
            "requiredInputs": [
                "programText"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering HeatmapChart resources.\n",
                "properties": {
                    "colorRange": {
                        "$ref": "#/types/signalfx:index/HeatmapChartColorRange:HeatmapChartColorRange",
                        "description": "Values and color for the color range. Example: `color_range : { min : 0, max : 100, color : \"#0000ff\" }`. Look at this [link](https://docs.signalfx.com/en/latest/charts/chart-options-tab.html).\n"
                    },
                    "colorScales": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/signalfx:index/HeatmapChartColorScale:HeatmapChartColorScale"
                        },
                        "description": "One to N blocks, each defining a single color range including both the color to display for that range and the borders of the range. Example: `color_scale { gt = 60, color = \"blue\" } color_scale { lte = 60, color = \"yellow\" }`. Look at this [link](https://docs.signalfx.com/en/latest/charts/chart-options-tab.html).\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "Description of the chart.\n"
                    },
                    "disableSampling": {
                        "type": "boolean",
                        "description": "If `false`, samples a subset of the output MTS, which improves UI performance. `false` by default.\n"
                    },
                    "groupBies": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Properties to group by in the heatmap (in nesting order).\n"
                    },
                    "hideTimestamp": {
                        "type": "boolean",
                        "description": "Whether to show the timestamp in the chart. `false` by default.\n"
                    },
                    "maxDelay": {
                        "type": "integer",
                        "description": "How long (in seconds) to wait for late datapoints.\n"
                    },
                    "minimumResolution": {
                        "type": "integer",
                        "description": "The minimum resolution (in seconds) to use for computing the underlying program.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the chart.\n"
                    },
                    "programText": {
                        "type": "string",
                        "description": "Signalflow program text for the chart. More info at \u003chttps://developers.signalfx.com/docs/signalflow-overview\u003e.\n"
                    },
                    "refreshInterval": {
                        "type": "integer",
                        "description": "How often (in seconds) to refresh the values of the heatmap.\n"
                    },
                    "sortBy": {
                        "type": "string",
                        "description": "The property to use when sorting the elements. Must be prepended with `+` for ascending or `-` for descending (e.g. `-foo`).\n"
                    },
                    "timezone": {
                        "type": "string",
                        "description": "The property value is a string that denotes the geographic region associated with the time zone, (default UTC).\n"
                    },
                    "unitPrefix": {
                        "type": "string",
                        "description": "Must be `\"Metric\"` or `\"Binary`\". `\"Metric\"` by default.\n"
                    },
                    "url": {
                        "type": "string",
                        "description": "The URL of the chart.\n"
                    }
                },
                "type": "object"
            }
        },
        "signalfx:index/listChart:ListChart": {
            "description": "This chart type displays current data values in a list format.\n\nThe name of each value in the chart reflects the name of the plot and any associated dimensions. We recommend you click the Pencil icon and give the plot a meaningful name, as in plot B below. Otherwise, just the raw metric name will be displayed on the chart, as in plot A below.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as signalfx from \"@pulumi/signalfx\";\n\nconst mylistchart0 = new signalfx.ListChart(\"mylistchart0\", {\n    colorBy: \"Metric\",\n    description: \"Very cool List Chart\",\n    disableSampling: true,\n    hideMissingValues: true,\n    legendOptionsFields: [\n        {\n            enabled: false,\n            property: \"collector\",\n        },\n        {\n            enabled: true,\n            property: \"cluster_name\",\n        },\n        {\n            enabled: true,\n            property: \"role\",\n        },\n        {\n            enabled: false,\n            property: \"collector\",\n        },\n        {\n            enabled: false,\n            property: \"host\",\n        },\n    ],\n    maxDelay: 2,\n    maxPrecision: 2,\n    programText: `myfilters = filter(\"cluster_name\", \"prod\") and filter(\"role\", \"search\")\ndata(\"cpu.total.idle\", filter=myfilters).publish()\n`,\n    refreshInterval: 1,\n    sortBy: \"-value\",\n    timezone: \"Europe/Paris\",\n});\n```\n```python\nimport pulumi\nimport pulumi_signalfx as signalfx\n\nmylistchart0 = signalfx.ListChart(\"mylistchart0\",\n    color_by=\"Metric\",\n    description=\"Very cool List Chart\",\n    disable_sampling=True,\n    hide_missing_values=True,\n    legend_options_fields=[\n        signalfx.ListChartLegendOptionsFieldArgs(\n            enabled=False,\n            property=\"collector\",\n        ),\n        signalfx.ListChartLegendOptionsFieldArgs(\n            enabled=True,\n            property=\"cluster_name\",\n        ),\n        signalfx.ListChartLegendOptionsFieldArgs(\n            enabled=True,\n            property=\"role\",\n        ),\n        signalfx.ListChartLegendOptionsFieldArgs(\n            enabled=False,\n            property=\"collector\",\n        ),\n        signalfx.ListChartLegendOptionsFieldArgs(\n            enabled=False,\n            property=\"host\",\n        ),\n    ],\n    max_delay=2,\n    max_precision=2,\n    program_text=\"\"\"myfilters = filter(\"cluster_name\", \"prod\") and filter(\"role\", \"search\")\ndata(\"cpu.total.idle\", filter=myfilters).publish()\n\n\"\"\",\n    refresh_interval=1,\n    sort_by=\"-value\",\n    timezone=\"Europe/Paris\")\n```\n```csharp\nusing Pulumi;\nusing SignalFx = Pulumi.SignalFx;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var mylistchart0 = new SignalFx.ListChart(\"mylistchart0\", new SignalFx.ListChartArgs\n        {\n            ColorBy = \"Metric\",\n            Description = \"Very cool List Chart\",\n            DisableSampling = true,\n            HideMissingValues = true,\n            LegendOptionsFields = \n            {\n                new SignalFx.Inputs.ListChartLegendOptionsFieldArgs\n                {\n                    Enabled = false,\n                    Property = \"collector\",\n                },\n                new SignalFx.Inputs.ListChartLegendOptionsFieldArgs\n                {\n                    Enabled = true,\n                    Property = \"cluster_name\",\n                },\n                new SignalFx.Inputs.ListChartLegendOptionsFieldArgs\n                {\n                    Enabled = true,\n                    Property = \"role\",\n                },\n                new SignalFx.Inputs.ListChartLegendOptionsFieldArgs\n                {\n                    Enabled = false,\n                    Property = \"collector\",\n                },\n                new SignalFx.Inputs.ListChartLegendOptionsFieldArgs\n                {\n                    Enabled = false,\n                    Property = \"host\",\n                },\n            },\n            MaxDelay = 2,\n            MaxPrecision = 2,\n            ProgramText = @\"myfilters = filter(\"\"cluster_name\"\", \"\"prod\"\") and filter(\"\"role\"\", \"\"search\"\")\ndata(\"\"cpu.total.idle\"\", filter=myfilters).publish()\n\n\",\n            RefreshInterval = 1,\n            SortBy = \"-value\",\n            Timezone = \"Europe/Paris\",\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"fmt\"\n\n\t\"github.com/pulumi/pulumi-signalfx/sdk/v4/go/signalfx\"\n\t\"github.com/pulumi/pulumi-signalfx/sdk/v4/go/signalfx/\"\n\t\"github.com/pulumi/pulumi/sdk/v2/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := signalfx.NewListChart(ctx, \"mylistchart0\", \u0026signalfx.ListChartArgs{\n\t\t\tColorBy:           pulumi.String(\"Metric\"),\n\t\t\tDescription:       pulumi.String(\"Very cool List Chart\"),\n\t\t\tDisableSampling:   pulumi.Bool(true),\n\t\t\tHideMissingValues: pulumi.Bool(true),\n\t\t\tLegendOptionsFields: signalfx.ListChartLegendOptionsFieldArray{\n\t\t\t\t\u0026signalfx.ListChartLegendOptionsFieldArgs{\n\t\t\t\t\tEnabled:  pulumi.Bool(false),\n\t\t\t\t\tProperty: pulumi.String(\"collector\"),\n\t\t\t\t},\n\t\t\t\t\u0026signalfx.ListChartLegendOptionsFieldArgs{\n\t\t\t\t\tEnabled:  pulumi.Bool(true),\n\t\t\t\t\tProperty: pulumi.String(\"cluster_name\"),\n\t\t\t\t},\n\t\t\t\t\u0026signalfx.ListChartLegendOptionsFieldArgs{\n\t\t\t\t\tEnabled:  pulumi.Bool(true),\n\t\t\t\t\tProperty: pulumi.String(\"role\"),\n\t\t\t\t},\n\t\t\t\t\u0026signalfx.ListChartLegendOptionsFieldArgs{\n\t\t\t\t\tEnabled:  pulumi.Bool(false),\n\t\t\t\t\tProperty: pulumi.String(\"collector\"),\n\t\t\t\t},\n\t\t\t\t\u0026signalfx.ListChartLegendOptionsFieldArgs{\n\t\t\t\t\tEnabled:  pulumi.Bool(false),\n\t\t\t\t\tProperty: pulumi.String(\"host\"),\n\t\t\t\t},\n\t\t\t},\n\t\t\tMaxDelay:        pulumi.Int(2),\n\t\t\tMaxPrecision:    pulumi.Int(2),\n\t\t\tProgramText:     pulumi.String(fmt.Sprintf(\"%v%v%v\", \"myfilters = filter(\\\"cluster_name\\\", \\\"prod\\\") and filter(\\\"role\\\", \\\"search\\\")\\n\", \"data(\\\"cpu.total.idle\\\", filter=myfilters).publish()\\n\", \"\\n\")),\n\t\t\tRefreshInterval: pulumi.Int(1),\n\t\t\tSortBy:          pulumi.String(\"-value\"),\n\t\t\tTimezone:        pulumi.String(\"Europe/Paris\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}",
            "properties": {
                "colorBy": {
                    "type": "string",
                    "description": "Must be one of `\"Scale\"`, `\"Dimension\"` or `\"Metric\"`. `\"Dimension\"` by default.\n"
                },
                "colorScales": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/signalfx:index/ListChartColorScale:ListChartColorScale"
                    },
                    "description": "Single color range including both the color to display for that range and the borders of the range. Example: `[{ gt = 60, color = \"blue\" }, { lte = 60, color = \"yellow\" }]`. Look at this [link](https://docs.signalfx.com/en/latest/charts/chart-options-tab.html).\n"
                },
                "description": {
                    "type": "string",
                    "description": "Description of the chart.\n"
                },
                "disableSampling": {
                    "type": "boolean",
                    "description": "If `false`, samples a subset of the output MTS, which improves UI performance. `false` by default.\n"
                },
                "endTime": {
                    "type": "integer",
                    "description": "Seconds since epoch. Used for visualization. Conflicts with `time_range`.\n"
                },
                "hideMissingValues": {
                    "type": "boolean",
                    "description": "Determines whether to hide missing data points in the chart. If `true`, missing data points in the chart would be hidden. `false` by default.\n"
                },
                "legendFieldsToHides": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of properties that should not be displayed in the chart legend (i.e. dimension names). All the properties are visible by default. Deprecated, please use `legend_options_fields`.\n",
                    "deprecationMessage": "Please use legend_options_fields"
                },
                "legendOptionsFields": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/signalfx:index/ListChartLegendOptionsField:ListChartLegendOptionsField"
                    },
                    "description": "List of property names and enabled flags that should be displayed in the data table for the chart, in the order provided. This option cannot be used with `legend_fields_to_hide`.\n"
                },
                "maxDelay": {
                    "type": "integer",
                    "description": "How long (in seconds) to wait for late datapoints.\n"
                },
                "maxPrecision": {
                    "type": "integer",
                    "description": "Maximum number of digits to display when rounding values up or down.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the chart.\n"
                },
                "programText": {
                    "type": "string",
                    "description": "Signalflow program text for the chart. More info[in the SignalFx docs](https://developers.signalfx.com/signalflow_analytics/signalflow_overview.html#_signalflow_programming_language).\n"
                },
                "refreshInterval": {
                    "type": "integer",
                    "description": "How often (in seconds) to refresh the values of the list.\n"
                },
                "secondaryVisualization": {
                    "type": "string",
                    "description": "The type of secondary visualization. Can be `None`, `Radial`, `Linear`, or `Sparkline`. If unset, the SignalFx default is used (`Sparkline`).\n"
                },
                "sortBy": {
                    "type": "string",
                    "description": "The property to use when sorting the elements. Use `value` if you want to sort by value. Must be prepended with `+` for ascending or `-` for descending (e.g. `-foo`). Note there are some special values for some of the options provided in the UX: `\"value\"` for Value, `\"sf_originatingMetric\"` for Metric, and `\"sf_metric\"` for plot.\n"
                },
                "startTime": {
                    "type": "integer",
                    "description": "Seconds since epoch. Used for visualization. Conflicts with `time_range`.\n"
                },
                "timeRange": {
                    "type": "integer",
                    "description": "How many seconds ago from which to display data. For example, the last hour would be `3600`, etc. Conflicts with `start_time` and `end_time`.\n"
                },
                "timezone": {
                    "type": "string",
                    "description": "The property value is a string that denotes the geographic region associated with the time zone, (default UTC).\n"
                },
                "unitPrefix": {
                    "type": "string",
                    "description": "Must be `\"Metric\"` or `\"Binary`\". `\"Metric\"` by default.\n"
                },
                "url": {
                    "type": "string",
                    "description": "The URL of the chart.\n"
                },
                "vizOptions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/signalfx:index/ListChartVizOption:ListChartVizOption"
                    },
                    "description": "Plot-level customization options, associated with a publish statement.\n"
                }
            },
            "required": [
                "name",
                "programText",
                "url"
            ],
            "inputProperties": {
                "colorBy": {
                    "type": "string",
                    "description": "Must be one of `\"Scale\"`, `\"Dimension\"` or `\"Metric\"`. `\"Dimension\"` by default.\n"
                },
                "colorScales": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/signalfx:index/ListChartColorScale:ListChartColorScale"
                    },
                    "description": "Single color range including both the color to display for that range and the borders of the range. Example: `[{ gt = 60, color = \"blue\" }, { lte = 60, color = \"yellow\" }]`. Look at this [link](https://docs.signalfx.com/en/latest/charts/chart-options-tab.html).\n"
                },
                "description": {
                    "type": "string",
                    "description": "Description of the chart.\n"
                },
                "disableSampling": {
                    "type": "boolean",
                    "description": "If `false`, samples a subset of the output MTS, which improves UI performance. `false` by default.\n"
                },
                "endTime": {
                    "type": "integer",
                    "description": "Seconds since epoch. Used for visualization. Conflicts with `time_range`.\n"
                },
                "hideMissingValues": {
                    "type": "boolean",
                    "description": "Determines whether to hide missing data points in the chart. If `true`, missing data points in the chart would be hidden. `false` by default.\n"
                },
                "legendFieldsToHides": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of properties that should not be displayed in the chart legend (i.e. dimension names). All the properties are visible by default. Deprecated, please use `legend_options_fields`.\n",
                    "deprecationMessage": "Please use legend_options_fields"
                },
                "legendOptionsFields": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/signalfx:index/ListChartLegendOptionsField:ListChartLegendOptionsField"
                    },
                    "description": "List of property names and enabled flags that should be displayed in the data table for the chart, in the order provided. This option cannot be used with `legend_fields_to_hide`.\n"
                },
                "maxDelay": {
                    "type": "integer",
                    "description": "How long (in seconds) to wait for late datapoints.\n"
                },
                "maxPrecision": {
                    "type": "integer",
                    "description": "Maximum number of digits to display when rounding values up or down.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the chart.\n"
                },
                "programText": {
                    "type": "string",
                    "description": "Signalflow program text for the chart. More info[in the SignalFx docs](https://developers.signalfx.com/signalflow_analytics/signalflow_overview.html#_signalflow_programming_language).\n"
                },
                "refreshInterval": {
                    "type": "integer",
                    "description": "How often (in seconds) to refresh the values of the list.\n"
                },
                "secondaryVisualization": {
                    "type": "string",
                    "description": "The type of secondary visualization. Can be `None`, `Radial`, `Linear`, or `Sparkline`. If unset, the SignalFx default is used (`Sparkline`).\n"
                },
                "sortBy": {
                    "type": "string",
                    "description": "The property to use when sorting the elements. Use `value` if you want to sort by value. Must be prepended with `+` for ascending or `-` for descending (e.g. `-foo`). Note there are some special values for some of the options provided in the UX: `\"value\"` for Value, `\"sf_originatingMetric\"` for Metric, and `\"sf_metric\"` for plot.\n"
                },
                "startTime": {
                    "type": "integer",
                    "description": "Seconds since epoch. Used for visualization. Conflicts with `time_range`.\n"
                },
                "timeRange": {
                    "type": "integer",
                    "description": "How many seconds ago from which to display data. For example, the last hour would be `3600`, etc. Conflicts with `start_time` and `end_time`.\n"
                },
                "timezone": {
                    "type": "string",
                    "description": "The property value is a string that denotes the geographic region associated with the time zone, (default UTC).\n"
                },
                "unitPrefix": {
                    "type": "string",
                    "description": "Must be `\"Metric\"` or `\"Binary`\". `\"Metric\"` by default.\n"
                },
                "vizOptions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/signalfx:index/ListChartVizOption:ListChartVizOption"
                    },
                    "description": "Plot-level customization options, associated with a publish statement.\n"
                }
            },
            "requiredInputs": [
                "programText"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering ListChart resources.\n",
                "properties": {
                    "colorBy": {
                        "type": "string",
                        "description": "Must be one of `\"Scale\"`, `\"Dimension\"` or `\"Metric\"`. `\"Dimension\"` by default.\n"
                    },
                    "colorScales": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/signalfx:index/ListChartColorScale:ListChartColorScale"
                        },
                        "description": "Single color range including both the color to display for that range and the borders of the range. Example: `[{ gt = 60, color = \"blue\" }, { lte = 60, color = \"yellow\" }]`. Look at this [link](https://docs.signalfx.com/en/latest/charts/chart-options-tab.html).\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "Description of the chart.\n"
                    },
                    "disableSampling": {
                        "type": "boolean",
                        "description": "If `false`, samples a subset of the output MTS, which improves UI performance. `false` by default.\n"
                    },
                    "endTime": {
                        "type": "integer",
                        "description": "Seconds since epoch. Used for visualization. Conflicts with `time_range`.\n"
                    },
                    "hideMissingValues": {
                        "type": "boolean",
                        "description": "Determines whether to hide missing data points in the chart. If `true`, missing data points in the chart would be hidden. `false` by default.\n"
                    },
                    "legendFieldsToHides": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "List of properties that should not be displayed in the chart legend (i.e. dimension names). All the properties are visible by default. Deprecated, please use `legend_options_fields`.\n",
                        "deprecationMessage": "Please use legend_options_fields"
                    },
                    "legendOptionsFields": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/signalfx:index/ListChartLegendOptionsField:ListChartLegendOptionsField"
                        },
                        "description": "List of property names and enabled flags that should be displayed in the data table for the chart, in the order provided. This option cannot be used with `legend_fields_to_hide`.\n"
                    },
                    "maxDelay": {
                        "type": "integer",
                        "description": "How long (in seconds) to wait for late datapoints.\n"
                    },
                    "maxPrecision": {
                        "type": "integer",
                        "description": "Maximum number of digits to display when rounding values up or down.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the chart.\n"
                    },
                    "programText": {
                        "type": "string",
                        "description": "Signalflow program text for the chart. More info[in the SignalFx docs](https://developers.signalfx.com/signalflow_analytics/signalflow_overview.html#_signalflow_programming_language).\n"
                    },
                    "refreshInterval": {
                        "type": "integer",
                        "description": "How often (in seconds) to refresh the values of the list.\n"
                    },
                    "secondaryVisualization": {
                        "type": "string",
                        "description": "The type of secondary visualization. Can be `None`, `Radial`, `Linear`, or `Sparkline`. If unset, the SignalFx default is used (`Sparkline`).\n"
                    },
                    "sortBy": {
                        "type": "string",
                        "description": "The property to use when sorting the elements. Use `value` if you want to sort by value. Must be prepended with `+` for ascending or `-` for descending (e.g. `-foo`). Note there are some special values for some of the options provided in the UX: `\"value\"` for Value, `\"sf_originatingMetric\"` for Metric, and `\"sf_metric\"` for plot.\n"
                    },
                    "startTime": {
                        "type": "integer",
                        "description": "Seconds since epoch. Used for visualization. Conflicts with `time_range`.\n"
                    },
                    "timeRange": {
                        "type": "integer",
                        "description": "How many seconds ago from which to display data. For example, the last hour would be `3600`, etc. Conflicts with `start_time` and `end_time`.\n"
                    },
                    "timezone": {
                        "type": "string",
                        "description": "The property value is a string that denotes the geographic region associated with the time zone, (default UTC).\n"
                    },
                    "unitPrefix": {
                        "type": "string",
                        "description": "Must be `\"Metric\"` or `\"Binary`\". `\"Metric\"` by default.\n"
                    },
                    "url": {
                        "type": "string",
                        "description": "The URL of the chart.\n"
                    },
                    "vizOptions": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/signalfx:index/ListChartVizOption:ListChartVizOption"
                        },
                        "description": "Plot-level customization options, associated with a publish statement.\n"
                    }
                },
                "type": "object"
            }
        },
        "signalfx:index/orgToken:OrgToken": {
            "description": "Manage SignalFx org tokens.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as signalfx from \"@pulumi/signalfx\";\n\nconst myteamkey0 = new signalfx.OrgToken(\"myteamkey0\", {\n    description: \"My team's rad key\",\n    hostOrUsageLimits: {\n        containerLimit: 200,\n        containerNotificationThreshold: 180,\n        customMetricsLimit: 1000,\n        customMetricsNotificationThreshold: 900,\n        highResMetricsLimit: 1000,\n        highResMetricsNotificationThreshold: 900,\n        hostLimit: 100,\n        hostNotificationThreshold: 90,\n    },\n    notifications: [\"Email,foo-alerts@bar.com\"],\n});\n```\n```python\nimport pulumi\nimport pulumi_signalfx as signalfx\n\nmyteamkey0 = signalfx.OrgToken(\"myteamkey0\",\n    description=\"My team's rad key\",\n    host_or_usage_limits=signalfx.OrgTokenHostOrUsageLimitsArgs(\n        container_limit=200,\n        container_notification_threshold=180,\n        custom_metrics_limit=1000,\n        custom_metrics_notification_threshold=900,\n        high_res_metrics_limit=1000,\n        high_res_metrics_notification_threshold=900,\n        host_limit=100,\n        host_notification_threshold=90,\n    ),\n    notifications=[\"Email,foo-alerts@bar.com\"])\n```\n```csharp\nusing Pulumi;\nusing SignalFx = Pulumi.SignalFx;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var myteamkey0 = new SignalFx.OrgToken(\"myteamkey0\", new SignalFx.OrgTokenArgs\n        {\n            Description = \"My team's rad key\",\n            HostOrUsageLimits = new SignalFx.Inputs.OrgTokenHostOrUsageLimitsArgs\n            {\n                ContainerLimit = 200,\n                ContainerNotificationThreshold = 180,\n                CustomMetricsLimit = 1000,\n                CustomMetricsNotificationThreshold = 900,\n                HighResMetricsLimit = 1000,\n                HighResMetricsNotificationThreshold = 900,\n                HostLimit = 100,\n                HostNotificationThreshold = 90,\n            },\n            Notifications = \n            {\n                \"Email,foo-alerts@bar.com\",\n            },\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-signalfx/sdk/v4/go/signalfx\"\n\t\"github.com/pulumi/pulumi-signalfx/sdk/v4/go/signalfx/\"\n\t\"github.com/pulumi/pulumi/sdk/v2/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := signalfx.NewOrgToken(ctx, \"myteamkey0\", \u0026signalfx.OrgTokenArgs{\n\t\t\tDescription: pulumi.String(\"My team's rad key\"),\n\t\t\tHostOrUsageLimits: \u0026signalfx.OrgTokenHostOrUsageLimitsArgs{\n\t\t\t\tContainerLimit:                      pulumi.Int(200),\n\t\t\t\tContainerNotificationThreshold:      pulumi.Int(180),\n\t\t\t\tCustomMetricsLimit:                  pulumi.Int(1000),\n\t\t\t\tCustomMetricsNotificationThreshold:  pulumi.Int(900),\n\t\t\t\tHighResMetricsLimit:                 pulumi.Int(1000),\n\t\t\t\tHighResMetricsNotificationThreshold: pulumi.Int(900),\n\t\t\t\tHostLimit:                           pulumi.Int(100),\n\t\t\t\tHostNotificationThreshold:           pulumi.Int(90),\n\t\t\t},\n\t\t\tNotifications: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"Email,foo-alerts@bar.com\"),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}",
            "properties": {
                "description": {
                    "type": "string",
                    "description": "Description of the token.\n"
                },
                "disabled": {
                    "type": "boolean",
                    "description": "Flag that controls enabling the token. If set to `true`, the token is disabled, and you can't use it for authentication. Defaults to `false`.\n"
                },
                "dpmLimits": {
                    "$ref": "#/types/signalfx:index/OrgTokenDpmLimits:OrgTokenDpmLimits",
                    "description": "Specify DPM-based limits for this token.\n"
                },
                "hostOrUsageLimits": {
                    "$ref": "#/types/signalfx:index/OrgTokenHostOrUsageLimits:OrgTokenHostOrUsageLimits",
                    "description": "Specify Usage-based limits for this token.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the token.\n"
                },
                "notifications": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of strings specifying where notifications will be sent when an incident occurs. See\nhttps://developers.signalfx.com/v2/docs/detector-model#notifications-models for more info\n"
                },
                "secret": {
                    "type": "string",
                    "description": "The secret token created by the API. You cannot set this value.\n"
                }
            },
            "required": [
                "name",
                "secret"
            ],
            "inputProperties": {
                "description": {
                    "type": "string",
                    "description": "Description of the token.\n"
                },
                "disabled": {
                    "type": "boolean",
                    "description": "Flag that controls enabling the token. If set to `true`, the token is disabled, and you can't use it for authentication. Defaults to `false`.\n"
                },
                "dpmLimits": {
                    "$ref": "#/types/signalfx:index/OrgTokenDpmLimits:OrgTokenDpmLimits",
                    "description": "Specify DPM-based limits for this token.\n"
                },
                "hostOrUsageLimits": {
                    "$ref": "#/types/signalfx:index/OrgTokenHostOrUsageLimits:OrgTokenHostOrUsageLimits",
                    "description": "Specify Usage-based limits for this token.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the token.\n"
                },
                "notifications": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of strings specifying where notifications will be sent when an incident occurs. See\nhttps://developers.signalfx.com/v2/docs/detector-model#notifications-models for more info\n"
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering OrgToken resources.\n",
                "properties": {
                    "description": {
                        "type": "string",
                        "description": "Description of the token.\n"
                    },
                    "disabled": {
                        "type": "boolean",
                        "description": "Flag that controls enabling the token. If set to `true`, the token is disabled, and you can't use it for authentication. Defaults to `false`.\n"
                    },
                    "dpmLimits": {
                        "$ref": "#/types/signalfx:index/OrgTokenDpmLimits:OrgTokenDpmLimits",
                        "description": "Specify DPM-based limits for this token.\n"
                    },
                    "hostOrUsageLimits": {
                        "$ref": "#/types/signalfx:index/OrgTokenHostOrUsageLimits:OrgTokenHostOrUsageLimits",
                        "description": "Specify Usage-based limits for this token.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the token.\n"
                    },
                    "notifications": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "List of strings specifying where notifications will be sent when an incident occurs. See\nhttps://developers.signalfx.com/v2/docs/detector-model#notifications-models for more info\n"
                    },
                    "secret": {
                        "type": "string",
                        "description": "The secret token created by the API. You cannot set this value.\n"
                    }
                },
                "type": "object"
            }
        },
        "signalfx:index/singleValueChart:SingleValueChart": {
            "description": "This chart type displays a single number in a large font, representing the current value of a single metric on a plot line.\n\nIf the time period is in the past, the number represents the value of the metric near the end of the time period.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as signalfx from \"@pulumi/signalfx\";\n\nconst mysvchart0 = new signalfx.SingleValueChart(\"mysvchart0\", {\n    colorBy: \"Dimension\",\n    description: \"Very cool Single Value Chart\",\n    isTimestampHidden: true,\n    maxDelay: 2,\n    maxPrecision: 2,\n    programText: `myfilters = filter(\"cluster_name\", \"prod\") and filter(\"role\", \"search\")\ndata(\"cpu.total.idle\", filter=myfilters).publish()\n`,\n    refreshInterval: 1,\n});\n```\n```python\nimport pulumi\nimport pulumi_signalfx as signalfx\n\nmysvchart0 = signalfx.SingleValueChart(\"mysvchart0\",\n    color_by=\"Dimension\",\n    description=\"Very cool Single Value Chart\",\n    is_timestamp_hidden=True,\n    max_delay=2,\n    max_precision=2,\n    program_text=\"\"\"myfilters = filter(\"cluster_name\", \"prod\") and filter(\"role\", \"search\")\ndata(\"cpu.total.idle\", filter=myfilters).publish()\n\n\"\"\",\n    refresh_interval=1)\n```\n```csharp\nusing Pulumi;\nusing SignalFx = Pulumi.SignalFx;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var mysvchart0 = new SignalFx.SingleValueChart(\"mysvchart0\", new SignalFx.SingleValueChartArgs\n        {\n            ColorBy = \"Dimension\",\n            Description = \"Very cool Single Value Chart\",\n            IsTimestampHidden = true,\n            MaxDelay = 2,\n            MaxPrecision = 2,\n            ProgramText = @\"myfilters = filter(\"\"cluster_name\"\", \"\"prod\"\") and filter(\"\"role\"\", \"\"search\"\")\ndata(\"\"cpu.total.idle\"\", filter=myfilters).publish()\n\n\",\n            RefreshInterval = 1,\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"fmt\"\n\n\t\"github.com/pulumi/pulumi-signalfx/sdk/v4/go/signalfx/\"\n\t\"github.com/pulumi/pulumi/sdk/v2/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := signalfx.NewSingleValueChart(ctx, \"mysvchart0\", \u0026signalfx.SingleValueChartArgs{\n\t\t\tColorBy:           pulumi.String(\"Dimension\"),\n\t\t\tDescription:       pulumi.String(\"Very cool Single Value Chart\"),\n\t\t\tIsTimestampHidden: pulumi.Bool(true),\n\t\t\tMaxDelay:          pulumi.Int(2),\n\t\t\tMaxPrecision:      pulumi.Int(2),\n\t\t\tProgramText:       pulumi.String(fmt.Sprintf(\"%v%v%v\", \"myfilters = filter(\\\"cluster_name\\\", \\\"prod\\\") and filter(\\\"role\\\", \\\"search\\\")\\n\", \"data(\\\"cpu.total.idle\\\", filter=myfilters).publish()\\n\", \"\\n\")),\n\t\t\tRefreshInterval:   pulumi.Int(1),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}",
            "properties": {
                "colorBy": {
                    "type": "string",
                    "description": "Must be `\"Dimension\"`, `\"Scale\"` or `\"Metric\"`. `\"Dimension\"` by default.\n"
                },
                "colorScales": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/signalfx:index/SingleValueChartColorScale:SingleValueChartColorScale"
                    },
                    "description": "Single color range including both the color to display for that range and the borders of the range. Example: `[{ gt = 60, color = \"blue\" }, { lte = 60, color = \"yellow\" }]`. Look at this [link](https://docs.signalfx.com/en/latest/charts/chart-options-tab.html).\n"
                },
                "description": {
                    "type": "string",
                    "description": "Description of the chart.\n"
                },
                "isTimestampHidden": {
                    "type": "boolean",
                    "description": "Whether to hide the timestamp in the chart. `false` by default.\n"
                },
                "maxDelay": {
                    "type": "integer",
                    "description": "How long (in seconds) to wait for late datapoints\n"
                },
                "maxPrecision": {
                    "type": "integer",
                    "description": "The maximum precision to for value displayed.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the chart.\n"
                },
                "programText": {
                    "type": "string",
                    "description": "Signalflow program text for the chart. More info [in the SignalFx docs](https://developers.signalfx.com/signalflow_analytics/signalflow_overview.html#_signalflow_programming_language).\n"
                },
                "refreshInterval": {
                    "type": "integer",
                    "description": "How often (in seconds) to refresh the value.\n"
                },
                "secondaryVisualization": {
                    "type": "string",
                    "description": "The type of secondary visualization. Can be `None`, `Radial`, `Linear`, or `Sparkline`. If unset, the SignalFx default is used (`None`).\n"
                },
                "showSparkLine": {
                    "type": "boolean",
                    "description": "Whether to show a trend line below the current value. `false` by default.\n"
                },
                "timezone": {
                    "type": "string",
                    "description": "The property value is a string that denotes the geographic region associated with the time zone, (e.g. Australia/Sydney)\n"
                },
                "unitPrefix": {
                    "type": "string",
                    "description": "Must be `\"Metric\"` or `\"Binary\"`. `\"Metric\"` by default.\n"
                },
                "url": {
                    "type": "string",
                    "description": "The URL of the chart.\n"
                },
                "vizOptions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/signalfx:index/SingleValueChartVizOption:SingleValueChartVizOption"
                    },
                    "description": "Plot-level customization options, associated with a publish statement.\n"
                }
            },
            "required": [
                "name",
                "programText",
                "url"
            ],
            "inputProperties": {
                "colorBy": {
                    "type": "string",
                    "description": "Must be `\"Dimension\"`, `\"Scale\"` or `\"Metric\"`. `\"Dimension\"` by default.\n"
                },
                "colorScales": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/signalfx:index/SingleValueChartColorScale:SingleValueChartColorScale"
                    },
                    "description": "Single color range including both the color to display for that range and the borders of the range. Example: `[{ gt = 60, color = \"blue\" }, { lte = 60, color = \"yellow\" }]`. Look at this [link](https://docs.signalfx.com/en/latest/charts/chart-options-tab.html).\n"
                },
                "description": {
                    "type": "string",
                    "description": "Description of the chart.\n"
                },
                "isTimestampHidden": {
                    "type": "boolean",
                    "description": "Whether to hide the timestamp in the chart. `false` by default.\n"
                },
                "maxDelay": {
                    "type": "integer",
                    "description": "How long (in seconds) to wait for late datapoints\n"
                },
                "maxPrecision": {
                    "type": "integer",
                    "description": "The maximum precision to for value displayed.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the chart.\n"
                },
                "programText": {
                    "type": "string",
                    "description": "Signalflow program text for the chart. More info [in the SignalFx docs](https://developers.signalfx.com/signalflow_analytics/signalflow_overview.html#_signalflow_programming_language).\n"
                },
                "refreshInterval": {
                    "type": "integer",
                    "description": "How often (in seconds) to refresh the value.\n"
                },
                "secondaryVisualization": {
                    "type": "string",
                    "description": "The type of secondary visualization. Can be `None`, `Radial`, `Linear`, or `Sparkline`. If unset, the SignalFx default is used (`None`).\n"
                },
                "showSparkLine": {
                    "type": "boolean",
                    "description": "Whether to show a trend line below the current value. `false` by default.\n"
                },
                "timezone": {
                    "type": "string",
                    "description": "The property value is a string that denotes the geographic region associated with the time zone, (e.g. Australia/Sydney)\n"
                },
                "unitPrefix": {
                    "type": "string",
                    "description": "Must be `\"Metric\"` or `\"Binary\"`. `\"Metric\"` by default.\n"
                },
                "vizOptions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/signalfx:index/SingleValueChartVizOption:SingleValueChartVizOption"
                    },
                    "description": "Plot-level customization options, associated with a publish statement.\n"
                }
            },
            "requiredInputs": [
                "programText"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering SingleValueChart resources.\n",
                "properties": {
                    "colorBy": {
                        "type": "string",
                        "description": "Must be `\"Dimension\"`, `\"Scale\"` or `\"Metric\"`. `\"Dimension\"` by default.\n"
                    },
                    "colorScales": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/signalfx:index/SingleValueChartColorScale:SingleValueChartColorScale"
                        },
                        "description": "Single color range including both the color to display for that range and the borders of the range. Example: `[{ gt = 60, color = \"blue\" }, { lte = 60, color = \"yellow\" }]`. Look at this [link](https://docs.signalfx.com/en/latest/charts/chart-options-tab.html).\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "Description of the chart.\n"
                    },
                    "isTimestampHidden": {
                        "type": "boolean",
                        "description": "Whether to hide the timestamp in the chart. `false` by default.\n"
                    },
                    "maxDelay": {
                        "type": "integer",
                        "description": "How long (in seconds) to wait for late datapoints\n"
                    },
                    "maxPrecision": {
                        "type": "integer",
                        "description": "The maximum precision to for value displayed.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the chart.\n"
                    },
                    "programText": {
                        "type": "string",
                        "description": "Signalflow program text for the chart. More info [in the SignalFx docs](https://developers.signalfx.com/signalflow_analytics/signalflow_overview.html#_signalflow_programming_language).\n"
                    },
                    "refreshInterval": {
                        "type": "integer",
                        "description": "How often (in seconds) to refresh the value.\n"
                    },
                    "secondaryVisualization": {
                        "type": "string",
                        "description": "The type of secondary visualization. Can be `None`, `Radial`, `Linear`, or `Sparkline`. If unset, the SignalFx default is used (`None`).\n"
                    },
                    "showSparkLine": {
                        "type": "boolean",
                        "description": "Whether to show a trend line below the current value. `false` by default.\n"
                    },
                    "timezone": {
                        "type": "string",
                        "description": "The property value is a string that denotes the geographic region associated with the time zone, (e.g. Australia/Sydney)\n"
                    },
                    "unitPrefix": {
                        "type": "string",
                        "description": "Must be `\"Metric\"` or `\"Binary\"`. `\"Metric\"` by default.\n"
                    },
                    "url": {
                        "type": "string",
                        "description": "The URL of the chart.\n"
                    },
                    "vizOptions": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/signalfx:index/SingleValueChartVizOption:SingleValueChartVizOption"
                        },
                        "description": "Plot-level customization options, associated with a publish statement.\n"
                    }
                },
                "type": "object"
            }
        },
        "signalfx:index/team:Team": {
            "description": "Handles management of SignalFx teams.\n\nYou can configure [team notification policies](https://docs.signalfx.com/en/latest/managing/teams/team-notifications.html) using this resource and the various `notifications_*` properties.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as signalfx from \"@pulumi/signalfx\";\n\nconst myteam0 = new signalfx.Team(\"myteam0\", {\n    description: \"Super great team no jerks definitely\",\n    members: [\n        \"userid1\",\n        \"userid2\",\n    ],\n    notificationsCriticals: [\"PagerDuty,credentialId\"],\n    notificationsInfos: [\"Email,notify@example.com\"],\n});\n```\n```python\nimport pulumi\nimport pulumi_signalfx as signalfx\n\nmyteam0 = signalfx.Team(\"myteam0\",\n    description=\"Super great team no jerks definitely\",\n    members=[\n        \"userid1\",\n        \"userid2\",\n    ],\n    notifications_criticals=[\"PagerDuty,credentialId\"],\n    notifications_infos=[\"Email,notify@example.com\"])\n```\n```csharp\nusing Pulumi;\nusing SignalFx = Pulumi.SignalFx;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var myteam0 = new SignalFx.Team(\"myteam0\", new SignalFx.TeamArgs\n        {\n            Description = \"Super great team no jerks definitely\",\n            Members = \n            {\n                \"userid1\",\n                \"userid2\",\n            },\n            NotificationsCriticals = \n            {\n                \"PagerDuty,credentialId\",\n            },\n            NotificationsInfos = \n            {\n                \"Email,notify@example.com\",\n            },\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-signalfx/sdk/v4/go/signalfx/\"\n\t\"github.com/pulumi/pulumi/sdk/v2/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := signalfx.NewTeam(ctx, \"myteam0\", \u0026signalfx.TeamArgs{\n\t\t\tDescription: pulumi.String(\"Super great team no jerks definitely\"),\n\t\t\tMembers: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"userid1\"),\n\t\t\t\tpulumi.String(\"userid2\"),\n\t\t\t},\n\t\t\tNotificationsCriticals: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"PagerDuty,credentialId\"),\n\t\t\t},\n\t\t\tNotificationsInfos: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"Email,notify@example.com\"),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}",
            "properties": {
                "description": {
                    "type": "string",
                    "description": "Description of the team.\n"
                },
                "members": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of user IDs to include in the team.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the team.\n"
                },
                "notificationsCriticals": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Where to send notifications for critical alerts\n"
                },
                "notificationsDefaults": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Where to send notifications for default alerts\n"
                },
                "notificationsInfos": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Where to send notifications for info alerts\n"
                },
                "notificationsMajors": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Where to send notifications for major alerts\n"
                },
                "notificationsMinors": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Where to send notifications for minor alerts\n"
                },
                "notificationsWarnings": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Where to send notifications for warning alerts\n"
                },
                "url": {
                    "type": "string",
                    "description": "The URL of the team.\n"
                }
            },
            "required": [
                "name",
                "url"
            ],
            "inputProperties": {
                "description": {
                    "type": "string",
                    "description": "Description of the team.\n"
                },
                "members": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of user IDs to include in the team.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the team.\n"
                },
                "notificationsCriticals": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Where to send notifications for critical alerts\n"
                },
                "notificationsDefaults": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Where to send notifications for default alerts\n"
                },
                "notificationsInfos": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Where to send notifications for info alerts\n"
                },
                "notificationsMajors": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Where to send notifications for major alerts\n"
                },
                "notificationsMinors": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Where to send notifications for minor alerts\n"
                },
                "notificationsWarnings": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Where to send notifications for warning alerts\n"
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Team resources.\n",
                "properties": {
                    "description": {
                        "type": "string",
                        "description": "Description of the team.\n"
                    },
                    "members": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "List of user IDs to include in the team.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the team.\n"
                    },
                    "notificationsCriticals": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Where to send notifications for critical alerts\n"
                    },
                    "notificationsDefaults": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Where to send notifications for default alerts\n"
                    },
                    "notificationsInfos": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Where to send notifications for info alerts\n"
                    },
                    "notificationsMajors": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Where to send notifications for major alerts\n"
                    },
                    "notificationsMinors": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Where to send notifications for minor alerts\n"
                    },
                    "notificationsWarnings": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Where to send notifications for warning alerts\n"
                    },
                    "url": {
                        "type": "string",
                        "description": "The URL of the team.\n"
                    }
                },
                "type": "object"
            }
        },
        "signalfx:index/textChart:TextChart": {
            "description": "This special type of chart doesn’t display any metric data. Rather, it lets you place a text note on the dashboard.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as signalfx from \"@pulumi/signalfx\";\n\nconst mynote0 = new signalfx.TextChart(\"mynote0\", {\n    description: \"Lorem ipsum dolor sit amet, laudem tibique iracundia at mea. Nam posse dolores ex, nec cu adhuc putent honestatis\",\n    markdown: `    1. First ordered list item\n    2. Another item\n      * Unordered sub-list.\n    1. Actual numbers don't matter, just that it's a number\n      1. Ordered sub-list\n    4. And another item.\n\n       You can have properly indented paragraphs within list items. Notice the blank line above, and the leading spaces (at least one, but we'll use three here to also align the raw Markdown).\n\n       To have a line break without a paragraph, you will need to use two trailing spaces.⋅⋅\n       Note that this line is separate, but within the same paragraph.⋅⋅\n       (This is contrary to the typical GFM line break behaviour, where trailing spaces are not required.)\n\n    * Unordered list can use asterisks\n    - Or minuses\n    + Or pluses\n`,\n});\n```\n```python\nimport pulumi\nimport pulumi_signalfx as signalfx\n\nmynote0 = signalfx.TextChart(\"mynote0\",\n    description=\"Lorem ipsum dolor sit amet, laudem tibique iracundia at mea. Nam posse dolores ex, nec cu adhuc putent honestatis\",\n    markdown=\"\"\"    1. First ordered list item\n    2. Another item\n      * Unordered sub-list.\n    1. Actual numbers don't matter, just that it's a number\n      1. Ordered sub-list\n    4. And another item.\n\n       You can have properly indented paragraphs within list items. Notice the blank line above, and the leading spaces (at least one, but we'll use three here to also align the raw Markdown).\n\n       To have a line break without a paragraph, you will need to use two trailing spaces.⋅⋅\n       Note that this line is separate, but within the same paragraph.⋅⋅\n       (This is contrary to the typical GFM line break behaviour, where trailing spaces are not required.)\n\n    * Unordered list can use asterisks\n    - Or minuses\n    + Or pluses\n\n\"\"\")\n```\n```csharp\nusing Pulumi;\nusing SignalFx = Pulumi.SignalFx;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var mynote0 = new SignalFx.TextChart(\"mynote0\", new SignalFx.TextChartArgs\n        {\n            Description = \"Lorem ipsum dolor sit amet, laudem tibique iracundia at mea. Nam posse dolores ex, nec cu adhuc putent honestatis\",\n            Markdown = @\"    1. First ordered list item\n    2. Another item\n      * Unordered sub-list.\n    1. Actual numbers don't matter, just that it's a number\n      1. Ordered sub-list\n    4. And another item.\n\n       You can have properly indented paragraphs within list items. Notice the blank line above, and the leading spaces (at least one, but we'll use three here to also align the raw Markdown).\n\n       To have a line break without a paragraph, you will need to use two trailing spaces.⋅⋅\n       Note that this line is separate, but within the same paragraph.⋅⋅\n       (This is contrary to the typical GFM line break behaviour, where trailing spaces are not required.)\n\n    * Unordered list can use asterisks\n    - Or minuses\n    + Or pluses\n\n\",\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"fmt\"\n\n\t\"github.com/pulumi/pulumi-signalfx/sdk/v4/go/signalfx/\"\n\t\"github.com/pulumi/pulumi/sdk/v2/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := signalfx.NewTextChart(ctx, \"mynote0\", \u0026signalfx.TextChartArgs{\n\t\t\tDescription: pulumi.String(\"Lorem ipsum dolor sit amet, laudem tibique iracundia at mea. Nam posse dolores ex, nec cu adhuc putent honestatis\"),\n\t\t\tMarkdown:    pulumi.String(fmt.Sprintf(\"%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v\", \"    1. First ordered list item\\n\", \"    2. Another item\\n\", \"      * Unordered sub-list.\\n\", \"    1. Actual numbers don't matter, just that it's a number\\n\", \"      1. Ordered sub-list\\n\", \"    4. And another item.\\n\", \"\\n\", \"       You can have properly indented paragraphs within list items. Notice the blank line above, and the leading spaces (at least one, but we'll use three here to also align the raw Markdown).\\n\", \"\\n\", \"       To have a line break without a paragraph, you will need to use two trailing spaces.⋅⋅\\n\", \"       Note that this line is separate, but within the same paragraph.⋅⋅\\n\", \"       (This is contrary to the typical GFM line break behaviour, where trailing spaces are not required.)\\n\", \"\\n\", \"    * Unordered list can use asterisks\\n\", \"    - Or minuses\\n\", \"    + Or pluses\\n\", \"\\n\")),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}",
            "properties": {
                "description": {
                    "type": "string",
                    "description": "Description of the text note.\n"
                },
                "markdown": {
                    "type": "string",
                    "description": "Markdown text to display.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the text note.\n"
                },
                "url": {
                    "type": "string",
                    "description": "The URL of the chart.\n"
                }
            },
            "required": [
                "markdown",
                "name",
                "url"
            ],
            "inputProperties": {
                "description": {
                    "type": "string",
                    "description": "Description of the text note.\n"
                },
                "markdown": {
                    "type": "string",
                    "description": "Markdown text to display.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the text note.\n"
                }
            },
            "requiredInputs": [
                "markdown"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering TextChart resources.\n",
                "properties": {
                    "description": {
                        "type": "string",
                        "description": "Description of the text note.\n"
                    },
                    "markdown": {
                        "type": "string",
                        "description": "Markdown text to display.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the text note.\n"
                    },
                    "url": {
                        "type": "string",
                        "description": "The URL of the chart.\n"
                    }
                },
                "type": "object"
            }
        },
        "signalfx:index/timeChart:TimeChart": {
            "description": "Provides a SignalFx time chart resource. This can be used to create and manage the different types of time charts.\n\nTime charts display data points over a period of time.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as signalfx from \"@pulumi/signalfx\";\n\nconst mychart0 = new signalfx.TimeChart(\"mychart0\", {\n    axisLeft: {\n        label: \"CPU Total Idle\",\n        lowWatermark: 1000,\n    },\n    legendOptionsFields: [\n        {\n            enabled: false,\n            property: \"collector\",\n        },\n        {\n            enabled: false,\n            property: \"hostname\",\n        },\n    ],\n    plotType: \"LineChart\",\n    programText: \"data(\\\"cpu.total.idle\\\").publish(label=\\\"CPU Idle\\\")\\n\",\n    showDataMarkers: true,\n    timeRange: 3600,\n    vizOptions: [{\n        axis: \"left\",\n        color: \"orange\",\n        label: \"CPU Idle\",\n    }],\n});\n```\n```python\nimport pulumi\nimport pulumi_signalfx as signalfx\n\nmychart0 = signalfx.TimeChart(\"mychart0\",\n    axis_left=signalfx.TimeChartAxisLeftArgs(\n        label=\"CPU Total Idle\",\n        low_watermark=1000,\n    ),\n    legend_options_fields=[\n        signalfx.TimeChartLegendOptionsFieldArgs(\n            enabled=False,\n            property=\"collector\",\n        ),\n        signalfx.TimeChartLegendOptionsFieldArgs(\n            enabled=False,\n            property=\"hostname\",\n        ),\n    ],\n    plot_type=\"LineChart\",\n    program_text=\"\"\"data(\"cpu.total.idle\").publish(label=\"CPU Idle\")\n\n\"\"\",\n    show_data_markers=True,\n    time_range=3600,\n    viz_options=[signalfx.TimeChartVizOptionArgs(\n        axis=\"left\",\n        color=\"orange\",\n        label=\"CPU Idle\",\n    )])\n```\n```csharp\nusing Pulumi;\nusing SignalFx = Pulumi.SignalFx;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var mychart0 = new SignalFx.TimeChart(\"mychart0\", new SignalFx.TimeChartArgs\n        {\n            AxisLeft = new SignalFx.Inputs.TimeChartAxisLeftArgs\n            {\n                Label = \"CPU Total Idle\",\n                LowWatermark = 1000,\n            },\n            LegendOptionsFields = \n            {\n                new SignalFx.Inputs.TimeChartLegendOptionsFieldArgs\n                {\n                    Enabled = false,\n                    Property = \"collector\",\n                },\n                new SignalFx.Inputs.TimeChartLegendOptionsFieldArgs\n                {\n                    Enabled = false,\n                    Property = \"hostname\",\n                },\n            },\n            PlotType = \"LineChart\",\n            ProgramText = @\"data(\"\"cpu.total.idle\"\").publish(label=\"\"CPU Idle\"\")\n\n\",\n            ShowDataMarkers = true,\n            TimeRange = 3600,\n            VizOptions = \n            {\n                new SignalFx.Inputs.TimeChartVizOptionArgs\n                {\n                    Axis = \"left\",\n                    Color = \"orange\",\n                    Label = \"CPU Idle\",\n                },\n            },\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"fmt\"\n\n\t\"github.com/pulumi/pulumi-signalfx/sdk/v4/go/signalfx\"\n\t\"github.com/pulumi/pulumi-signalfx/sdk/v4/go/signalfx/\"\n\t\"github.com/pulumi/pulumi/sdk/v2/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := signalfx.NewTimeChart(ctx, \"mychart0\", \u0026signalfx.TimeChartArgs{\n\t\t\tAxisLeft: \u0026signalfx.TimeChartAxisLeftArgs{\n\t\t\t\tLabel:        pulumi.String(\"CPU Total Idle\"),\n\t\t\t\tLowWatermark: pulumi.Float64(1000),\n\t\t\t},\n\t\t\tLegendOptionsFields: signalfx.TimeChartLegendOptionsFieldArray{\n\t\t\t\t\u0026signalfx.TimeChartLegendOptionsFieldArgs{\n\t\t\t\t\tEnabled:  pulumi.Bool(false),\n\t\t\t\t\tProperty: pulumi.String(\"collector\"),\n\t\t\t\t},\n\t\t\t\t\u0026signalfx.TimeChartLegendOptionsFieldArgs{\n\t\t\t\t\tEnabled:  pulumi.Bool(false),\n\t\t\t\t\tProperty: pulumi.String(\"hostname\"),\n\t\t\t\t},\n\t\t\t},\n\t\t\tPlotType:        pulumi.String(\"LineChart\"),\n\t\t\tProgramText:     pulumi.String(fmt.Sprintf(\"%v%v\", \"data(\\\"cpu.total.idle\\\").publish(label=\\\"CPU Idle\\\")\\n\", \"\\n\")),\n\t\t\tShowDataMarkers: pulumi.Bool(true),\n\t\t\tTimeRange:       pulumi.Int(3600),\n\t\t\tVizOptions: signalfx.TimeChartVizOptionArray{\n\t\t\t\t\u0026signalfx.TimeChartVizOptionArgs{\n\t\t\t\t\tAxis:  pulumi.String(\"left\"),\n\t\t\t\t\tColor: pulumi.String(\"orange\"),\n\t\t\t\t\tLabel: pulumi.String(\"CPU Idle\"),\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}",
            "properties": {
                "axesIncludeZero": {
                    "type": "boolean",
                    "description": "Force the chart to display zero on the y-axes, even if none of the data is near zero.\n"
                },
                "axesPrecision": {
                    "type": "integer",
                    "description": "Specifies the digits SignalFx displays for values plotted on the chart. Defaults to `3`.\n"
                },
                "axisLeft": {
                    "$ref": "#/types/signalfx:index/TimeChartAxisLeft:TimeChartAxisLeft",
                    "description": "Set of axis options.\n"
                },
                "axisRight": {
                    "$ref": "#/types/signalfx:index/TimeChartAxisRight:TimeChartAxisRight",
                    "description": "Set of axis options.\n"
                },
                "colorBy": {
                    "type": "string",
                    "description": "Must be `\"Dimension\"` or `\"Metric\"`. `\"Dimension\"` by default.\n"
                },
                "description": {
                    "type": "string",
                    "description": "Description of the chart.\n"
                },
                "disableSampling": {
                    "type": "boolean",
                    "description": "If `false`, samples a subset of the output MTS, which improves UI performance. `false` by default\n"
                },
                "endTime": {
                    "type": "integer",
                    "description": "Seconds since epoch. Used for visualization. Conflicts with `time_range`.\n"
                },
                "eventOptions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/signalfx:index/TimeChartEventOption:TimeChartEventOption"
                    },
                    "description": "Event customization options, associated with a publish statement. You will need to use this to change settings for any `events(…)` statements you use.\n"
                },
                "histogramOptions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/signalfx:index/TimeChartHistogramOption:TimeChartHistogramOption"
                    },
                    "description": "Only used when `plot_type` is `\"Histogram\"`. Histogram specific options.\n"
                },
                "legendFieldsToHides": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of properties that should not be displayed in the chart legend (i.e. dimension names). All the properties are visible by default. Deprecated, please use `legend_options_fields`.\n",
                    "deprecationMessage": "Please use legend_options_fields"
                },
                "legendOptionsFields": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/signalfx:index/TimeChartLegendOptionsField:TimeChartLegendOptionsField"
                    },
                    "description": "List of property names and enabled flags that should be displayed in the data table for the chart, in the order provided. This option cannot be used with `legend_fields_to_hide`.\n"
                },
                "maxDelay": {
                    "type": "integer",
                    "description": "How long (in seconds) to wait for late datapoints.\n"
                },
                "minimumResolution": {
                    "type": "integer",
                    "description": "The minimum resolution (in seconds) to use for computing the underlying program.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the chart.\n"
                },
                "onChartLegendDimension": {
                    "type": "string",
                    "description": "Dimensions to show in the on-chart legend. On-chart legend is off unless a dimension is specified. Allowed: `\"metric\"`, `\"plot_label\"` and any dimension.\n"
                },
                "plotType": {
                    "type": "string",
                    "description": "The visualization style to use. Must be `\"LineChart\"`, `\"AreaChart\"`, `\"ColumnChart\"`, or `\"Histogram\"`. Chart level `plot_type` by default.\n"
                },
                "programText": {
                    "type": "string",
                    "description": "Signalflow program text for the chart. More info [in the SignalFx docs](https://developers.signalfx.com/signalflow_analytics/signalflow_overview.html#_signalflow_programming_language).\n"
                },
                "showDataMarkers": {
                    "type": "boolean",
                    "description": "Show markers (circles) for each datapoint used to draw line or area charts. `false` by default.\n"
                },
                "showEventLines": {
                    "type": "boolean",
                    "description": "Whether vertical highlight lines should be drawn in the visualizations at times when events occurred. `false` by default.\n"
                },
                "stacked": {
                    "type": "boolean",
                    "description": "Whether area and bar charts in the visualization should be stacked. `false` by default.\n"
                },
                "startTime": {
                    "type": "integer",
                    "description": "Seconds since epoch. Used for visualization. Conflicts with `time_range`.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Tags associated with the chart\n",
                    "deprecationMessage": "signalfx_time_chart.tags is being removed in the next release"
                },
                "timeRange": {
                    "type": "integer",
                    "description": "How many seconds ago from which to display data. For example, the last hour would be `3600`, etc. Conflicts with `start_time` and `end_time`.\n"
                },
                "timezone": {
                    "type": "string",
                    "description": "Time zone that SignalFlow uses as the basis of calendar window transformation methods. For example, if you set \"timezone\": \"Europe/Paris\" and then use the transformation sum(cycle=\"week\", cycle_start=\"Monday\") in your chart's SignalFlow program, the calendar window starts on Monday, Paris time. See the [full list of timezones for more](https://developers.signalfx.com/signalflow_analytics/signalflow_overview.html#_supported_signalflow_time_zones). `\"UTC\"` by default.\n"
                },
                "unitPrefix": {
                    "type": "string",
                    "description": "Must be `\"Metric\"` or `\"Binary`\". `\"Metric\"` by default.\n"
                },
                "url": {
                    "type": "string",
                    "description": "The URL of the chart.\n"
                },
                "vizOptions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/signalfx:index/TimeChartVizOption:TimeChartVizOption"
                    },
                    "description": "Plot-level customization options, associated with a publish statement.\n"
                }
            },
            "required": [
                "name",
                "programText",
                "url"
            ],
            "inputProperties": {
                "axesIncludeZero": {
                    "type": "boolean",
                    "description": "Force the chart to display zero on the y-axes, even if none of the data is near zero.\n"
                },
                "axesPrecision": {
                    "type": "integer",
                    "description": "Specifies the digits SignalFx displays for values plotted on the chart. Defaults to `3`.\n"
                },
                "axisLeft": {
                    "$ref": "#/types/signalfx:index/TimeChartAxisLeft:TimeChartAxisLeft",
                    "description": "Set of axis options.\n"
                },
                "axisRight": {
                    "$ref": "#/types/signalfx:index/TimeChartAxisRight:TimeChartAxisRight",
                    "description": "Set of axis options.\n"
                },
                "colorBy": {
                    "type": "string",
                    "description": "Must be `\"Dimension\"` or `\"Metric\"`. `\"Dimension\"` by default.\n"
                },
                "description": {
                    "type": "string",
                    "description": "Description of the chart.\n"
                },
                "disableSampling": {
                    "type": "boolean",
                    "description": "If `false`, samples a subset of the output MTS, which improves UI performance. `false` by default\n"
                },
                "endTime": {
                    "type": "integer",
                    "description": "Seconds since epoch. Used for visualization. Conflicts with `time_range`.\n"
                },
                "eventOptions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/signalfx:index/TimeChartEventOption:TimeChartEventOption"
                    },
                    "description": "Event customization options, associated with a publish statement. You will need to use this to change settings for any `events(…)` statements you use.\n"
                },
                "histogramOptions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/signalfx:index/TimeChartHistogramOption:TimeChartHistogramOption"
                    },
                    "description": "Only used when `plot_type` is `\"Histogram\"`. Histogram specific options.\n"
                },
                "legendFieldsToHides": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of properties that should not be displayed in the chart legend (i.e. dimension names). All the properties are visible by default. Deprecated, please use `legend_options_fields`.\n",
                    "deprecationMessage": "Please use legend_options_fields"
                },
                "legendOptionsFields": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/signalfx:index/TimeChartLegendOptionsField:TimeChartLegendOptionsField"
                    },
                    "description": "List of property names and enabled flags that should be displayed in the data table for the chart, in the order provided. This option cannot be used with `legend_fields_to_hide`.\n"
                },
                "maxDelay": {
                    "type": "integer",
                    "description": "How long (in seconds) to wait for late datapoints.\n"
                },
                "minimumResolution": {
                    "type": "integer",
                    "description": "The minimum resolution (in seconds) to use for computing the underlying program.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the chart.\n"
                },
                "onChartLegendDimension": {
                    "type": "string",
                    "description": "Dimensions to show in the on-chart legend. On-chart legend is off unless a dimension is specified. Allowed: `\"metric\"`, `\"plot_label\"` and any dimension.\n"
                },
                "plotType": {
                    "type": "string",
                    "description": "The visualization style to use. Must be `\"LineChart\"`, `\"AreaChart\"`, `\"ColumnChart\"`, or `\"Histogram\"`. Chart level `plot_type` by default.\n"
                },
                "programText": {
                    "type": "string",
                    "description": "Signalflow program text for the chart. More info [in the SignalFx docs](https://developers.signalfx.com/signalflow_analytics/signalflow_overview.html#_signalflow_programming_language).\n"
                },
                "showDataMarkers": {
                    "type": "boolean",
                    "description": "Show markers (circles) for each datapoint used to draw line or area charts. `false` by default.\n"
                },
                "showEventLines": {
                    "type": "boolean",
                    "description": "Whether vertical highlight lines should be drawn in the visualizations at times when events occurred. `false` by default.\n"
                },
                "stacked": {
                    "type": "boolean",
                    "description": "Whether area and bar charts in the visualization should be stacked. `false` by default.\n"
                },
                "startTime": {
                    "type": "integer",
                    "description": "Seconds since epoch. Used for visualization. Conflicts with `time_range`.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Tags associated with the chart\n",
                    "deprecationMessage": "signalfx_time_chart.tags is being removed in the next release"
                },
                "timeRange": {
                    "type": "integer",
                    "description": "How many seconds ago from which to display data. For example, the last hour would be `3600`, etc. Conflicts with `start_time` and `end_time`.\n"
                },
                "timezone": {
                    "type": "string",
                    "description": "Time zone that SignalFlow uses as the basis of calendar window transformation methods. For example, if you set \"timezone\": \"Europe/Paris\" and then use the transformation sum(cycle=\"week\", cycle_start=\"Monday\") in your chart's SignalFlow program, the calendar window starts on Monday, Paris time. See the [full list of timezones for more](https://developers.signalfx.com/signalflow_analytics/signalflow_overview.html#_supported_signalflow_time_zones). `\"UTC\"` by default.\n"
                },
                "unitPrefix": {
                    "type": "string",
                    "description": "Must be `\"Metric\"` or `\"Binary`\". `\"Metric\"` by default.\n"
                },
                "vizOptions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/signalfx:index/TimeChartVizOption:TimeChartVizOption"
                    },
                    "description": "Plot-level customization options, associated with a publish statement.\n"
                }
            },
            "requiredInputs": [
                "programText"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering TimeChart resources.\n",
                "properties": {
                    "axesIncludeZero": {
                        "type": "boolean",
                        "description": "Force the chart to display zero on the y-axes, even if none of the data is near zero.\n"
                    },
                    "axesPrecision": {
                        "type": "integer",
                        "description": "Specifies the digits SignalFx displays for values plotted on the chart. Defaults to `3`.\n"
                    },
                    "axisLeft": {
                        "$ref": "#/types/signalfx:index/TimeChartAxisLeft:TimeChartAxisLeft",
                        "description": "Set of axis options.\n"
                    },
                    "axisRight": {
                        "$ref": "#/types/signalfx:index/TimeChartAxisRight:TimeChartAxisRight",
                        "description": "Set of axis options.\n"
                    },
                    "colorBy": {
                        "type": "string",
                        "description": "Must be `\"Dimension\"` or `\"Metric\"`. `\"Dimension\"` by default.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "Description of the chart.\n"
                    },
                    "disableSampling": {
                        "type": "boolean",
                        "description": "If `false`, samples a subset of the output MTS, which improves UI performance. `false` by default\n"
                    },
                    "endTime": {
                        "type": "integer",
                        "description": "Seconds since epoch. Used for visualization. Conflicts with `time_range`.\n"
                    },
                    "eventOptions": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/signalfx:index/TimeChartEventOption:TimeChartEventOption"
                        },
                        "description": "Event customization options, associated with a publish statement. You will need to use this to change settings for any `events(…)` statements you use.\n"
                    },
                    "histogramOptions": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/signalfx:index/TimeChartHistogramOption:TimeChartHistogramOption"
                        },
                        "description": "Only used when `plot_type` is `\"Histogram\"`. Histogram specific options.\n"
                    },
                    "legendFieldsToHides": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "List of properties that should not be displayed in the chart legend (i.e. dimension names). All the properties are visible by default. Deprecated, please use `legend_options_fields`.\n",
                        "deprecationMessage": "Please use legend_options_fields"
                    },
                    "legendOptionsFields": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/signalfx:index/TimeChartLegendOptionsField:TimeChartLegendOptionsField"
                        },
                        "description": "List of property names and enabled flags that should be displayed in the data table for the chart, in the order provided. This option cannot be used with `legend_fields_to_hide`.\n"
                    },
                    "maxDelay": {
                        "type": "integer",
                        "description": "How long (in seconds) to wait for late datapoints.\n"
                    },
                    "minimumResolution": {
                        "type": "integer",
                        "description": "The minimum resolution (in seconds) to use for computing the underlying program.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the chart.\n"
                    },
                    "onChartLegendDimension": {
                        "type": "string",
                        "description": "Dimensions to show in the on-chart legend. On-chart legend is off unless a dimension is specified. Allowed: `\"metric\"`, `\"plot_label\"` and any dimension.\n"
                    },
                    "plotType": {
                        "type": "string",
                        "description": "The visualization style to use. Must be `\"LineChart\"`, `\"AreaChart\"`, `\"ColumnChart\"`, or `\"Histogram\"`. Chart level `plot_type` by default.\n"
                    },
                    "programText": {
                        "type": "string",
                        "description": "Signalflow program text for the chart. More info [in the SignalFx docs](https://developers.signalfx.com/signalflow_analytics/signalflow_overview.html#_signalflow_programming_language).\n"
                    },
                    "showDataMarkers": {
                        "type": "boolean",
                        "description": "Show markers (circles) for each datapoint used to draw line or area charts. `false` by default.\n"
                    },
                    "showEventLines": {
                        "type": "boolean",
                        "description": "Whether vertical highlight lines should be drawn in the visualizations at times when events occurred. `false` by default.\n"
                    },
                    "stacked": {
                        "type": "boolean",
                        "description": "Whether area and bar charts in the visualization should be stacked. `false` by default.\n"
                    },
                    "startTime": {
                        "type": "integer",
                        "description": "Seconds since epoch. Used for visualization. Conflicts with `time_range`.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Tags associated with the chart\n",
                        "deprecationMessage": "signalfx_time_chart.tags is being removed in the next release"
                    },
                    "timeRange": {
                        "type": "integer",
                        "description": "How many seconds ago from which to display data. For example, the last hour would be `3600`, etc. Conflicts with `start_time` and `end_time`.\n"
                    },
                    "timezone": {
                        "type": "string",
                        "description": "Time zone that SignalFlow uses as the basis of calendar window transformation methods. For example, if you set \"timezone\": \"Europe/Paris\" and then use the transformation sum(cycle=\"week\", cycle_start=\"Monday\") in your chart's SignalFlow program, the calendar window starts on Monday, Paris time. See the [full list of timezones for more](https://developers.signalfx.com/signalflow_analytics/signalflow_overview.html#_supported_signalflow_time_zones). `\"UTC\"` by default.\n"
                    },
                    "unitPrefix": {
                        "type": "string",
                        "description": "Must be `\"Metric\"` or `\"Binary`\". `\"Metric\"` by default.\n"
                    },
                    "url": {
                        "type": "string",
                        "description": "The URL of the chart.\n"
                    },
                    "vizOptions": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/signalfx:index/TimeChartVizOption:TimeChartVizOption"
                        },
                        "description": "Plot-level customization options, associated with a publish statement.\n"
                    }
                },
                "type": "object"
            }
        },
        "signalfx:index/webhookIntegration:WebhookIntegration": {
            "description": "SignalFx Webhook integration.\n\n\u003e **NOTE** When managing integrations you'll need to use an admin token to authenticate the SignalFx provider. Otherwise you'll receive a 4xx error.\n",
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Whether the integration is enabled.\n"
                },
                "headers": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/signalfx:index/WebhookIntegrationHeader:WebhookIntegrationHeader"
                    },
                    "description": "A header to send with the request\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the integration.\n"
                },
                "sharedSecret": {
                    "type": "string"
                },
                "url": {
                    "type": "string",
                    "description": "The URL to request\n"
                }
            },
            "required": [
                "enabled",
                "name"
            ],
            "inputProperties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Whether the integration is enabled.\n"
                },
                "headers": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/signalfx:index/WebhookIntegrationHeader:WebhookIntegrationHeader"
                    },
                    "description": "A header to send with the request\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the integration.\n"
                },
                "sharedSecret": {
                    "type": "string"
                },
                "url": {
                    "type": "string",
                    "description": "The URL to request\n"
                }
            },
            "requiredInputs": [
                "enabled"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering WebhookIntegration resources.\n",
                "properties": {
                    "enabled": {
                        "type": "boolean",
                        "description": "Whether the integration is enabled.\n"
                    },
                    "headers": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/signalfx:index/WebhookIntegrationHeader:WebhookIntegrationHeader"
                        },
                        "description": "A header to send with the request\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the integration.\n"
                    },
                    "sharedSecret": {
                        "type": "string"
                    },
                    "url": {
                        "type": "string",
                        "description": "The URL to request\n"
                    }
                },
                "type": "object"
            }
        },
        "signalfx:jira/integration:Integration": {
            "description": "SignalFx Jira integrations. For help with this integration see [Integration with Jira](https://docs.signalfx.com/en/latest/admin-guide/integrate-notifications.html#integrate-with-jira).\n\n\u003e **NOTE** When managing integrations you'll need to use an admin token to authenticate the SignalFx provider. Otherwise you'll receive a 4xx error.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as signalfx from \"@pulumi/signalfx\";\n\nconst jiraMyteamXX = new signalfx.jira.Integration(\"jira_myteamXX\", {\n    assigneeDisplayName: \"Testy Testerson\",\n    assigneeName: \"testytesterson\",\n    authMethod: \"UsernameAndPassword\",\n    baseUrl: \"https://www.example.com\",\n    enabled: false,\n    issueType: \"Story\",\n    password: \"paasword\",\n    projectKey: \"TEST\",\n    username: \"yoosername\",\n});\n```\n```python\nimport pulumi\nimport pulumi_signalfx as signalfx\n\njira_myteam_xx = signalfx.jira.Integration(\"jiraMyteamXX\",\n    assignee_display_name=\"Testy Testerson\",\n    assignee_name=\"testytesterson\",\n    auth_method=\"UsernameAndPassword\",\n    base_url=\"https://www.example.com\",\n    enabled=False,\n    issue_type=\"Story\",\n    password=\"paasword\",\n    project_key=\"TEST\",\n    username=\"yoosername\")\n```\n```csharp\nusing Pulumi;\nusing SignalFx = Pulumi.SignalFx;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var jiraMyteamXX = new SignalFx.Jira.Integration(\"jiraMyteamXX\", new SignalFx.Jira.IntegrationArgs\n        {\n            AssigneeDisplayName = \"Testy Testerson\",\n            AssigneeName = \"testytesterson\",\n            AuthMethod = \"UsernameAndPassword\",\n            BaseUrl = \"https://www.example.com\",\n            Enabled = false,\n            IssueType = \"Story\",\n            Password = \"paasword\",\n            ProjectKey = \"TEST\",\n            Username = \"yoosername\",\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-signalfx/sdk/v4/go/signalfx/jira\"\n\t\"github.com/pulumi/pulumi/sdk/v2/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := jira.NewIntegration(ctx, \"jiraMyteamXX\", \u0026jira.IntegrationArgs{\n\t\t\tAssigneeDisplayName: pulumi.String(\"Testy Testerson\"),\n\t\t\tAssigneeName:        pulumi.String(\"testytesterson\"),\n\t\t\tAuthMethod:          pulumi.String(\"UsernameAndPassword\"),\n\t\t\tBaseUrl:             pulumi.String(\"https://www.example.com\"),\n\t\t\tEnabled:             pulumi.Bool(false),\n\t\t\tIssueType:           pulumi.String(\"Story\"),\n\t\t\tPassword:            pulumi.String(\"paasword\"),\n\t\t\tProjectKey:          pulumi.String(\"TEST\"),\n\t\t\tUsername:            pulumi.String(\"yoosername\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}",
            "properties": {
                "apiToken": {
                    "type": "string",
                    "description": "The API token for the user email\n"
                },
                "assigneeDisplayName": {
                    "type": "string",
                    "description": "Jira display name for the assignee.\n"
                },
                "assigneeName": {
                    "type": "string",
                    "description": "Jira user name for the assignee.\n"
                },
                "authMethod": {
                    "type": "string",
                    "description": "Authentication method used when creating the Jira integration. One of `EmailAndToken` (using `user_email` and `api_token`) or `UsernameAndPassword` (using `username` and `password`).\n"
                },
                "baseUrl": {
                    "type": "string",
                    "description": "Base URL of the Jira instance that's integrated with SignalFx.\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "Whether the integration is enabled.\n"
                },
                "issueType": {
                    "type": "string",
                    "description": "Issue type (for example, Story) for tickets that Jira creates for detector notifications. SignalFx validates issue types, so you must specify a type that's valid for the Jira project specified in `projectKey`.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the integration.\n"
                },
                "password": {
                    "type": "string",
                    "description": "Password used to authenticate the Jira integration.\n"
                },
                "projectKey": {
                    "type": "string",
                    "description": "Jira key of an existing project. When Jira creates a new ticket for a detector notification, the ticket is assigned to this project.\n"
                },
                "userEmail": {
                    "type": "string",
                    "description": "Email address used to authenticate the Jira integration.\n"
                },
                "username": {
                    "type": "string",
                    "description": "User name used to authenticate the Jira integration.\n"
                }
            },
            "required": [
                "assigneeName",
                "authMethod",
                "baseUrl",
                "enabled",
                "issueType",
                "name",
                "projectKey"
            ],
            "inputProperties": {
                "apiToken": {
                    "type": "string",
                    "description": "The API token for the user email\n"
                },
                "assigneeDisplayName": {
                    "type": "string",
                    "description": "Jira display name for the assignee.\n"
                },
                "assigneeName": {
                    "type": "string",
                    "description": "Jira user name for the assignee.\n"
                },
                "authMethod": {
                    "type": "string",
                    "description": "Authentication method used when creating the Jira integration. One of `EmailAndToken` (using `user_email` and `api_token`) or `UsernameAndPassword` (using `username` and `password`).\n"
                },
                "baseUrl": {
                    "type": "string",
                    "description": "Base URL of the Jira instance that's integrated with SignalFx.\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "Whether the integration is enabled.\n"
                },
                "issueType": {
                    "type": "string",
                    "description": "Issue type (for example, Story) for tickets that Jira creates for detector notifications. SignalFx validates issue types, so you must specify a type that's valid for the Jira project specified in `projectKey`.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the integration.\n"
                },
                "password": {
                    "type": "string",
                    "description": "Password used to authenticate the Jira integration.\n"
                },
                "projectKey": {
                    "type": "string",
                    "description": "Jira key of an existing project. When Jira creates a new ticket for a detector notification, the ticket is assigned to this project.\n"
                },
                "userEmail": {
                    "type": "string",
                    "description": "Email address used to authenticate the Jira integration.\n"
                },
                "username": {
                    "type": "string",
                    "description": "User name used to authenticate the Jira integration.\n"
                }
            },
            "requiredInputs": [
                "assigneeName",
                "authMethod",
                "baseUrl",
                "enabled",
                "issueType",
                "projectKey"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Integration resources.\n",
                "properties": {
                    "apiToken": {
                        "type": "string",
                        "description": "The API token for the user email\n"
                    },
                    "assigneeDisplayName": {
                        "type": "string",
                        "description": "Jira display name for the assignee.\n"
                    },
                    "assigneeName": {
                        "type": "string",
                        "description": "Jira user name for the assignee.\n"
                    },
                    "authMethod": {
                        "type": "string",
                        "description": "Authentication method used when creating the Jira integration. One of `EmailAndToken` (using `user_email` and `api_token`) or `UsernameAndPassword` (using `username` and `password`).\n"
                    },
                    "baseUrl": {
                        "type": "string",
                        "description": "Base URL of the Jira instance that's integrated with SignalFx.\n"
                    },
                    "enabled": {
                        "type": "boolean",
                        "description": "Whether the integration is enabled.\n"
                    },
                    "issueType": {
                        "type": "string",
                        "description": "Issue type (for example, Story) for tickets that Jira creates for detector notifications. SignalFx validates issue types, so you must specify a type that's valid for the Jira project specified in `projectKey`.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the integration.\n"
                    },
                    "password": {
                        "type": "string",
                        "description": "Password used to authenticate the Jira integration.\n"
                    },
                    "projectKey": {
                        "type": "string",
                        "description": "Jira key of an existing project. When Jira creates a new ticket for a detector notification, the ticket is assigned to this project.\n"
                    },
                    "userEmail": {
                        "type": "string",
                        "description": "Email address used to authenticate the Jira integration.\n"
                    },
                    "username": {
                        "type": "string",
                        "description": "User name used to authenticate the Jira integration.\n"
                    }
                },
                "type": "object"
            }
        },
        "signalfx:opsgenie/integration:Integration": {
            "description": "SignalFx Opsgenie integration.\n\n\u003e **NOTE** When managing integrations you'll need to use an admin token to authenticate the SignalFx provider. Otherwise you'll receive a 4xx error.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as signalfx from \"@pulumi/signalfx\";\n\nconst opgenieMyteam = new signalfx.opsgenie.Integration(\"opgenie_myteam\", {\n    apiKey: \"farts\",\n    apiUrl: \"https://api.opsgenie.com\",\n    enabled: true,\n});\n```\n```python\nimport pulumi\nimport pulumi_signalfx as signalfx\n\nopgenie_myteam = signalfx.opsgenie.Integration(\"opgenieMyteam\",\n    api_key=\"farts\",\n    api_url=\"https://api.opsgenie.com\",\n    enabled=True)\n```\n```csharp\nusing Pulumi;\nusing SignalFx = Pulumi.SignalFx;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var opgenieMyteam = new SignalFx.Opsgenie.Integration(\"opgenieMyteam\", new SignalFx.Opsgenie.IntegrationArgs\n        {\n            ApiKey = \"farts\",\n            ApiUrl = \"https://api.opsgenie.com\",\n            Enabled = true,\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-signalfx/sdk/v4/go/signalfx/opsgenie\"\n\t\"github.com/pulumi/pulumi/sdk/v2/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := opsgenie.NewIntegration(ctx, \"opgenieMyteam\", \u0026opsgenie.IntegrationArgs{\n\t\t\tApiKey:  pulumi.String(\"farts\"),\n\t\t\tApiUrl:  pulumi.String(\"https://api.opsgenie.com\"),\n\t\t\tEnabled: pulumi.Bool(true),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}",
            "properties": {
                "apiKey": {
                    "type": "string",
                    "description": "The API key\n"
                },
                "apiUrl": {
                    "type": "string",
                    "description": "Opsgenie API URL. Will default to `https://api.opsgenie.com`. You might also want `https://api.eu.opsgenie.com`.\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "Whether the integration is enabled.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the integration.\n"
                }
            },
            "required": [
                "apiKey",
                "enabled",
                "name"
            ],
            "inputProperties": {
                "apiKey": {
                    "type": "string",
                    "description": "The API key\n"
                },
                "apiUrl": {
                    "type": "string",
                    "description": "Opsgenie API URL. Will default to `https://api.opsgenie.com`. You might also want `https://api.eu.opsgenie.com`.\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "Whether the integration is enabled.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the integration.\n"
                }
            },
            "requiredInputs": [
                "apiKey",
                "enabled"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Integration resources.\n",
                "properties": {
                    "apiKey": {
                        "type": "string",
                        "description": "The API key\n"
                    },
                    "apiUrl": {
                        "type": "string",
                        "description": "Opsgenie API URL. Will default to `https://api.opsgenie.com`. You might also want `https://api.eu.opsgenie.com`.\n"
                    },
                    "enabled": {
                        "type": "boolean",
                        "description": "Whether the integration is enabled.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the integration.\n"
                    }
                },
                "type": "object"
            }
        },
        "signalfx:pagerduty/integration:Integration": {
            "description": "SignalFx PagerDuty integrations\n\n\u003e **NOTE** When managing integrations you'll need to use an admin token to authenticate the SignalFx provider. Otherwise you'll receive a 4xx error.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as signalfx from \"@pulumi/signalfx\";\n\nconst pagerdutyMyteam = new signalfx.pagerduty.Integration(\"pagerduty_myteam\", {\n    apiKey: \"1234567890\",\n    enabled: true,\n});\n```\n```python\nimport pulumi\nimport pulumi_signalfx as signalfx\n\npagerduty_myteam = signalfx.pagerduty.Integration(\"pagerdutyMyteam\",\n    api_key=\"1234567890\",\n    enabled=True)\n```\n```csharp\nusing Pulumi;\nusing SignalFx = Pulumi.SignalFx;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var pagerdutyMyteam = new SignalFx.PagerDuty.Integration(\"pagerdutyMyteam\", new SignalFx.PagerDuty.IntegrationArgs\n        {\n            ApiKey = \"1234567890\",\n            Enabled = true,\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-signalfx/sdk/v4/go/signalfx/pagerduty\"\n\t\"github.com/pulumi/pulumi/sdk/v2/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := pagerduty.NewIntegration(ctx, \"pagerdutyMyteam\", \u0026pagerduty.IntegrationArgs{\n\t\t\tApiKey:  pulumi.String(\"1234567890\"),\n\t\t\tEnabled: pulumi.Bool(true),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}",
            "properties": {
                "apiKey": {
                    "type": "string",
                    "description": "PagerDuty API key.\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "Whether the integration is enabled.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the integration.\n"
                }
            },
            "required": [
                "enabled",
                "name"
            ],
            "inputProperties": {
                "apiKey": {
                    "type": "string",
                    "description": "PagerDuty API key.\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "Whether the integration is enabled.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the integration.\n"
                }
            },
            "requiredInputs": [
                "enabled"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Integration resources.\n",
                "properties": {
                    "apiKey": {
                        "type": "string",
                        "description": "PagerDuty API key.\n"
                    },
                    "enabled": {
                        "type": "boolean",
                        "description": "Whether the integration is enabled.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the integration.\n"
                    }
                },
                "type": "object"
            }
        },
        "signalfx:slack/integration:Integration": {
            "description": "SignalFx Slack integration.\n\n\u003e **NOTE** When managing integrations you'll need to use an admin token to authenticate the SignalFx provider. Otherwise you'll receive a 4xx error.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as signalfx from \"@pulumi/signalfx\";\n\nconst slackMyteam = new signalfx.slack.Integration(\"slack_myteam\", {\n    enabled: true,\n    webhookUrl: \"http://example.com\",\n});\n```\n```python\nimport pulumi\nimport pulumi_signalfx as signalfx\n\nslack_myteam = signalfx.slack.Integration(\"slackMyteam\",\n    enabled=True,\n    webhook_url=\"http://example.com\")\n```\n```csharp\nusing Pulumi;\nusing SignalFx = Pulumi.SignalFx;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var slackMyteam = new SignalFx.Slack.Integration(\"slackMyteam\", new SignalFx.Slack.IntegrationArgs\n        {\n            Enabled = true,\n            WebhookUrl = \"http://example.com\",\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-signalfx/sdk/v4/go/signalfx/slack\"\n\t\"github.com/pulumi/pulumi/sdk/v2/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := slack.NewIntegration(ctx, \"slackMyteam\", \u0026slack.IntegrationArgs{\n\t\t\tEnabled:    pulumi.Bool(true),\n\t\t\tWebhookUrl: pulumi.String(\"http://example.com\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}",
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Whether the integration is enabled.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the integration.\n"
                },
                "webhookUrl": {
                    "type": "string",
                    "description": "Slack incoming webhook URL.\n"
                }
            },
            "required": [
                "enabled",
                "name",
                "webhookUrl"
            ],
            "inputProperties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Whether the integration is enabled.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the integration.\n"
                },
                "webhookUrl": {
                    "type": "string",
                    "description": "Slack incoming webhook URL.\n"
                }
            },
            "requiredInputs": [
                "enabled",
                "webhookUrl"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Integration resources.\n",
                "properties": {
                    "enabled": {
                        "type": "boolean",
                        "description": "Whether the integration is enabled.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the integration.\n"
                    },
                    "webhookUrl": {
                        "type": "string",
                        "description": "Slack incoming webhook URL.\n"
                    }
                },
                "type": "object"
            }
        },
        "signalfx:victorops/integration:Integration": {
            "description": "SignalFx VictorOps integration.\n\n\u003e **NOTE** When managing integrations you'll need to use an admin token to authenticate the SignalFx provider. Otherwise you'll receive a 4xx error.\n",
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Whether the integration is enabled.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the integration.\n"
                },
                "postUrl": {
                    "type": "string",
                    "description": "Victor Ops REST API URL.\n"
                }
            },
            "required": [
                "enabled",
                "name"
            ],
            "inputProperties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Whether the integration is enabled.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the integration.\n"
                },
                "postUrl": {
                    "type": "string",
                    "description": "Victor Ops REST API URL.\n"
                }
            },
            "requiredInputs": [
                "enabled"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Integration resources.\n",
                "properties": {
                    "enabled": {
                        "type": "boolean",
                        "description": "Whether the integration is enabled.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the integration.\n"
                    },
                    "postUrl": {
                        "type": "string",
                        "description": "Victor Ops REST API URL.\n"
                    }
                },
                "type": "object"
            }
        }
    },
    "functions": {
        "signalfx:aws/getServices:getServices": {
            "description": "Use this data source to get a list of AWS service names.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as signalfx from \"@pulumi/signalfx\";\n\nconst awsServices = signalfx.aws.getServices({});\n// Leaves out most of the integration bits, see the docs\n// for signalfx_aws_integration for more\n// …\nconst awsMyteam = new signalfx.aws.Integration(\"awsMyteam\", {services: [awsServices.then(awsServices =\u003e awsServices.services)].map(__item =\u003e __item?.name)});\n```\n```csharp\nusing System.Linq;\nusing Pulumi;\nusing SignalFx = Pulumi.SignalFx;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var awsServices = Output.Create(SignalFx.Aws.GetServices.InvokeAsync());\n        // Leaves out most of the integration bits, see the docs\n        // for signalfx_aws_integration for more\n        // …\n        var awsMyteam = new SignalFx.Aws.Integration(\"awsMyteam\", new SignalFx.Aws.IntegrationArgs\n        {\n            Services = \n            {\n                awsServices.Apply(awsServices =\u003e awsServices.Services),\n            }.Select(__item =\u003e __item?.Name).ToList(),\n        });\n    }\n\n}\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getServices.\n",
                "properties": {
                    "services": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/signalfx:aws/getServicesService:getServicesService"
                        }
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getServices.\n",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "services": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/signalfx:aws/getServicesService:getServicesService"
                        }
                    }
                },
                "type": "object",
                "required": [
                    "id"
                ]
            }
        },
        "signalfx:azure/getServices:getServices": {
            "description": "Use this data source to get a list of Azure service names.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as signalfx from \"@pulumi/signalfx\";\n\nconst azureServices = signalfx.azure.getServices({});\n// Leaves out most of the integration bits, see the docs\n// for signalfx_azure_integration for more\n// …\nconst azureMyteam = new signalfx.azure.Integration(\"azureMyteam\", {services: [azureServices.then(azureServices =\u003e azureServices.services)].map(__item =\u003e __item?.name)});\n```\n```csharp\nusing System.Linq;\nusing Pulumi;\nusing SignalFx = Pulumi.SignalFx;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var azureServices = Output.Create(SignalFx.Azure.GetServices.InvokeAsync());\n        // Leaves out most of the integration bits, see the docs\n        // for signalfx_azure_integration for more\n        // …\n        var azureMyteam = new SignalFx.Azure.Integration(\"azureMyteam\", new SignalFx.Azure.IntegrationArgs\n        {\n            Services = \n            {\n                azureServices.Apply(azureServices =\u003e azureServices.Services),\n            }.Select(__item =\u003e __item?.Name).ToList(),\n        });\n    }\n\n}\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getServices.\n",
                "properties": {
                    "services": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/signalfx:azure/getServicesService:getServicesService"
                        }
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getServices.\n",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "services": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/signalfx:azure/getServicesService:getServicesService"
                        }
                    }
                },
                "type": "object",
                "required": [
                    "id"
                ]
            }
        },
        "signalfx:gcp/getServices:getServices": {
            "description": "Use this data source to get a list of GCP service names.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as signalfx from \"@pulumi/signalfx\";\n\nconst gcpServices = signalfx.gcp.getServices({});\n// Leaves out most of the integration bits, see the docs\n// for signalfx_gcp_integration for more\n// …\nconst gcpMyteam = new signalfx.gcp.Integration(\"gcpMyteam\", {services: [gcpServices.then(gcpServices =\u003e gcpServices.services)].map(__item =\u003e __item?.name)});\n```\n```csharp\nusing System.Linq;\nusing Pulumi;\nusing SignalFx = Pulumi.SignalFx;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var gcpServices = Output.Create(SignalFx.Gcp.GetServices.InvokeAsync());\n        // Leaves out most of the integration bits, see the docs\n        // for signalfx_gcp_integration for more\n        // …\n        var gcpMyteam = new SignalFx.Gcp.Integration(\"gcpMyteam\", new SignalFx.Gcp.IntegrationArgs\n        {\n            Services = \n            {\n                gcpServices.Apply(gcpServices =\u003e gcpServices.Services),\n            }.Select(__item =\u003e __item?.Name).ToList(),\n        });\n    }\n\n}\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getServices.\n",
                "properties": {
                    "services": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/signalfx:gcp/getServicesService:getServicesService"
                        }
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getServices.\n",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "services": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/signalfx:gcp/getServicesService:getServicesService"
                        }
                    }
                },
                "type": "object",
                "required": [
                    "id"
                ]
            }
        },
        "signalfx:index/getAwsServices:getAwsServices": {
            "inputs": {
                "description": "A collection of arguments for invoking getAwsServices.\n",
                "properties": {
                    "services": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/signalfx:index/getAwsServicesService:getAwsServicesService"
                        }
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getAwsServices.\n",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "services": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/signalfx:index/getAwsServicesService:getAwsServicesService"
                        }
                    }
                },
                "type": "object",
                "required": [
                    "id"
                ]
            },
            "deprecationMessage": "signalfx.getAwsServices has been deprecated in favor of signalfx.aws.getServices"
        },
        "signalfx:index/getAzureServices:getAzureServices": {
            "inputs": {
                "description": "A collection of arguments for invoking getAzureServices.\n",
                "properties": {
                    "services": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/signalfx:index/getAzureServicesService:getAzureServicesService"
                        }
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getAzureServices.\n",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "services": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/signalfx:index/getAzureServicesService:getAzureServicesService"
                        }
                    }
                },
                "type": "object",
                "required": [
                    "id"
                ]
            },
            "deprecationMessage": "signalfx.getAzureServices has been deprecated in favor of signalfx.azure.getServices"
        },
        "signalfx:index/getDimensionValues:getDimensionValues": {
            "description": "Use this data source to get a list of dimension values matching the provided query.\n\n\u003e **NOTE** This data source only allows 1000 values, as it's kinda nuts to make anything with `for_each` that big in SignalFx. This is negotiable.\n",
            "inputs": {
                "description": "A collection of arguments for invoking getDimensionValues.\n",
                "properties": {
                    "query": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "query"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getDimensionValues.\n",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "query": {
                        "type": "string"
                    },
                    "values": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    }
                },
                "type": "object",
                "required": [
                    "query",
                    "values",
                    "id"
                ]
            }
        },
        "signalfx:pagerduty/getIntegration:getIntegration": {
            "description": "Use this data source to get information on an existing PagerDuty integration.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as signalfx from \"@pulumi/signalfx\";\n\nconst pdIntegration = pulumi.output(signalfx.pagerduty.getIntegration({\n    name: \"PD-Integration\",\n}, { async: true }));\n```\n```python\nimport pulumi\nimport pulumi_signalfx as signalfx\n\npd_integration = signalfx.pagerduty.get_integration(name=\"PD-Integration\")\n```\n```csharp\nusing Pulumi;\nusing SignalFx = Pulumi.SignalFx;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var pdIntegration = Output.Create(SignalFx.PagerDuty.GetIntegration.InvokeAsync(new SignalFx.PagerDuty.GetIntegrationArgs\n        {\n            Name = \"PD-Integration\",\n        }));\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-signalfx/sdk/v4/go/signalfx/pagerduty\"\n\t\"github.com/pulumi/pulumi/sdk/v2/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := pagerduty.LookupIntegration(ctx, \u0026pagerduty.LookupIntegrationArgs{\n\t\t\tName: \"PD-Integration\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getIntegration.\n",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "Specify the exact name of the desired PagerDuty integration\n"
                    }
                },
                "type": "object",
                "required": [
                    "name"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getIntegration.\n",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the integration.\n"
                    }
                },
                "type": "object",
                "required": [
                    "name",
                    "id"
                ]
            }
        }
    },
    "language": {
        "csharp": {
            "namespaces": {
                "aws": "Aws",
                "azure": "Azure",
                "gcp": "Gcp",
                "index": "index",
                "jira": "Jira",
                "opsgenie": "Opsgenie",
                "pagerduty": "PagerDuty",
                "signalfx": "SignalFx",
                "slack": "Slack",
                "victorops": "VictorOps"
            },
            "packageReferences": {
                "Pulumi": "2.*",
                "System.Collections.Immutable": "1.6.0"
            }
        },
        "go": {
            "generateResourceContainerTypes": true,
            "importBasePath": "github.com/pulumi/pulumi-signalfx/sdk/v4/go/signalfx"
        },
        "nodejs": {
            "dependencies": {
                "@pulumi/pulumi": "^2.15.0"
            },
            "devDependencies": {
                "@types/mime": "^2.0.0",
                "@types/node": "^8.0.25"
            },
            "disableUnionOutputTypes": true,
            "packageDescription": "A Pulumi package for creating and managing SignalFx resources.",
            "packageName": "",
            "readme": "\u003e This provider is a derived work of the [Terraform Provider](https://github.com/splunk-terraform/terraform-provider-signalfx)\n\u003e distributed under [MPL 2.0](https://www.mozilla.org/en-US/MPL/2.0/). If you encounter a bug or missing feature,\n\u003e first check the [`pulumi/pulumi-signalfx` repo](https://github.com/pulumi/pulumi-signalfx/issues); however, if that doesn't turn up anything,\n\u003e please consult the source [`splunk-terraform/terraform-provider-signalfx` repo](https://github.com/splunk-terraform/terraform-provider-signalfx/issues).",
            "typescriptVersion": ""
        },
        "python": {
            "readme": "\u003e This provider is a derived work of the [Terraform Provider](https://github.com/splunk-terraform/terraform-provider-signalfx)\n\u003e distributed under [MPL 2.0](https://www.mozilla.org/en-US/MPL/2.0/). If you encounter a bug or missing feature,\n\u003e first check the [`pulumi/pulumi-signalfx` repo](https://github.com/pulumi/pulumi-signalfx/issues); however, if that doesn't turn up anything,\n\u003e please consult the source [`splunk-terraform/terraform-provider-signalfx` repo](https://github.com/splunk-terraform/terraform-provider-signalfx/issues).",
            "requires": {
                "pulumi": "\u003e=2.15.0,\u003c3.0.0"
            }
        }
    }
}