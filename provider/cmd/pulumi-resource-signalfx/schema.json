{
    "name": "signalfx",
    "description": "A Pulumi package for creating and managing SignalFx resources.",
    "keywords": [
        "pulumi",
        "signalfx"
    ],
    "homepage": "https://pulumi.io",
    "license": "Apache-2.0",
    "attribution": "This Pulumi package is based on the [`signalfx` Terraform Provider](https://github.com/splunk-terraform/terraform-provider-signalfx).",
    "repository": "https://github.com/pulumi/pulumi-signalfx",
    "meta": {
        "moduleFormat": "(.*)(?:/[^/]*)"
    },
    "language": {
        "csharp": {
            "packageReferences": {
                "Pulumi": "3.*"
            },
            "namespaces": {
                "aws": "Aws",
                "azure": "Azure",
                "gcp": "Gcp",
                "index": "index",
                "jira": "Jira",
                "log": "Log",
                "opsgenie": "Opsgenie",
                "pagerduty": "PagerDuty",
                "servicenow": "ServiceNow",
                "signalfx": "SignalFx",
                "slack": "Slack",
                "victorops": "VictorOps"
            },
            "compatibility": "tfbridge20"
        },
        "go": {
            "importBasePath": "github.com/pulumi/pulumi-signalfx/sdk/v7/go/signalfx",
            "generateResourceContainerTypes": true,
            "generateExtraInputTypes": true
        },
        "nodejs": {
            "packageDescription": "A Pulumi package for creating and managing SignalFx resources.",
            "readme": "\u003e This provider is a derived work of the [Terraform Provider](https://github.com/splunk-terraform/terraform-provider-signalfx)\n\u003e distributed under [MPL 2.0](https://www.mozilla.org/en-US/MPL/2.0/). If you encounter a bug or missing feature,\n\u003e first check the [`pulumi-signalfx` repo](https://github.com/pulumi/pulumi-signalfx/issues); however, if that doesn't turn up anything,\n\u003e please consult the source [`terraform-provider-signalfx` repo](https://github.com/splunk-terraform/terraform-provider-signalfx/issues).",
            "dependencies": {
                "@pulumi/pulumi": "^3.0.0"
            },
            "devDependencies": {
                "@types/mime": "^2.0.0",
                "@types/node": "^10.0.0"
            },
            "compatibility": "tfbridge20",
            "disableUnionOutputTypes": true
        },
        "python": {
            "requires": {
                "pulumi": "\u003e=3.0.0,\u003c4.0.0"
            },
            "readme": "\u003e This provider is a derived work of the [Terraform Provider](https://github.com/splunk-terraform/terraform-provider-signalfx)\n\u003e distributed under [MPL 2.0](https://www.mozilla.org/en-US/MPL/2.0/). If you encounter a bug or missing feature,\n\u003e first check the [`pulumi-signalfx` repo](https://github.com/pulumi/pulumi-signalfx/issues); however, if that doesn't turn up anything,\n\u003e please consult the source [`terraform-provider-signalfx` repo](https://github.com/splunk-terraform/terraform-provider-signalfx/issues).",
            "compatibility": "tfbridge20",
            "pyproject": {
                "enabled": true
            }
        }
    },
    "config": {
        "variables": {
            "apiUrl": {
                "type": "string",
                "description": "API URL for your Splunk Observability Cloud org, may include a realm\n"
            },
            "authToken": {
                "type": "string",
                "description": "Splunk Observability Cloud auth token\n"
            },
            "customAppUrl": {
                "type": "string",
                "description": "Application URL for your Splunk Observability Cloud org, often customized for organizations using SSO\n"
            },
            "retryMaxAttempts": {
                "type": "integer",
                "description": "Max retries for a single HTTP call. Defaults to 4\n"
            },
            "retryWaitMaxSeconds": {
                "type": "integer",
                "description": "Maximum retry wait for a single HTTP call in seconds. Defaults to 30\n"
            },
            "retryWaitMinSeconds": {
                "type": "integer",
                "description": "Minimum retry wait for a single HTTP call in seconds. Defaults to 1\n"
            },
            "timeoutSeconds": {
                "type": "integer",
                "description": "Timeout duration for a single HTTP call in seconds. Defaults to 120\n"
            }
        }
    },
    "types": {
        "signalfx:aws/IntegrationCustomNamespaceSyncRule:IntegrationCustomNamespaceSyncRule": {
            "properties": {
                "defaultAction": {
                    "type": "string",
                    "description": "Controls the Splunk Observability default behavior for processing data from an AWS namespace. Splunk Observability ignores this property unless you specify the `filter_action` and `filter_source` properties. If you do specify them, use this property to control how Splunk Observability treats data that doesn't match the filter. The available actions are one of \"Include\" or \"Exclude\".\n"
                },
                "filterAction": {
                    "type": "string",
                    "description": "Controls how Splunk Observability processes data from a custom AWS namespace. The available actions are one of \"Include\" or \"Exclude\".\n"
                },
                "filterSource": {
                    "type": "string",
                    "description": "Expression that selects the data that Splunk Observability should sync for the custom namespace associated with this sync rule. The expression uses the syntax defined for the SignalFlow `filter()` function; it can be any valid SignalFlow filter expression.\n"
                },
                "namespace": {
                    "type": "string",
                    "description": "An AWS custom namespace having custom AWS metrics that you want to sync with Splunk Observability. See the AWS documentation on publishing metrics for more information.\n"
                }
            },
            "type": "object",
            "required": [
                "namespace"
            ]
        },
        "signalfx:aws/IntegrationMetricStatsToSync:IntegrationMetricStatsToSync": {
            "properties": {
                "metric": {
                    "type": "string",
                    "description": "AWS metric that you want to pick statistics for\n"
                },
                "namespace": {
                    "type": "string",
                    "description": "An AWS namespace having AWS metric that you want to pick statistics for\n"
                },
                "stats": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "AWS statistics you want to collect\n"
                }
            },
            "type": "object",
            "required": [
                "metric",
                "namespace",
                "stats"
            ]
        },
        "signalfx:aws/IntegrationNamespaceSyncRule:IntegrationNamespaceSyncRule": {
            "properties": {
                "defaultAction": {
                    "type": "string",
                    "description": "Controls the Splunk Observability default behavior for processing data from an AWS namespace. Splunk Observability ignores this property unless you specify the `filter_action` and `filter_source` properties. If you do specify them, use this property to control how Splunk Observability treats data that doesn't match the filter. The available actions are one of \"Include\" or \"Exclude\".\n"
                },
                "filterAction": {
                    "type": "string",
                    "description": "Controls how Splunk Observability processes data from a custom AWS namespace. The available actions are one of \"Include\" or \"Exclude\".\n"
                },
                "filterSource": {
                    "type": "string",
                    "description": "Expression that selects the data that Splunk Observability should sync for the custom namespace associated with this sync rule. The expression uses the syntax defined for the SignalFlow `filter()` function; it can be any valid SignalFlow filter expression.\n"
                },
                "namespace": {
                    "type": "string",
                    "description": "An AWS namespace having custom AWS metrics that you want to sync with Splunk Observability. See the AWS documentation on publishing metrics for more information.\n"
                }
            },
            "type": "object",
            "required": [
                "namespace"
            ]
        },
        "signalfx:azure/IntegrationCustomNamespacesPerService:IntegrationCustomNamespacesPerService": {
            "properties": {
                "namespaces": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The namespaces to sync\n"
                },
                "service": {
                    "type": "string",
                    "description": "The name of the service\n"
                }
            },
            "type": "object",
            "required": [
                "namespaces",
                "service"
            ]
        },
        "signalfx:azure/IntegrationResourceFilterRule:IntegrationResourceFilterRule": {
            "properties": {
                "filterSource": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "filterSource"
            ]
        },
        "signalfx:gcp/IntegrationProjectServiceKey:IntegrationProjectServiceKey": {
            "properties": {
                "projectId": {
                    "type": "string"
                },
                "projectKey": {
                    "type": "string",
                    "secret": true
                }
            },
            "type": "object",
            "required": [
                "projectId",
                "projectKey"
            ]
        },
        "signalfx:index/AlertMutingRuleFilter:AlertMutingRuleFilter": {
            "properties": {
                "negated": {
                    "type": "boolean",
                    "description": "(false by default) whether this filter should be a \"not\" filter\n"
                },
                "property": {
                    "type": "string",
                    "description": "the property to filter by\n"
                },
                "propertyValue": {
                    "type": "string",
                    "description": "the value of the property to filter by\n"
                }
            },
            "type": "object",
            "required": [
                "property",
                "propertyValue"
            ]
        },
        "signalfx:index/DashboardChart:DashboardChart": {
            "properties": {
                "chartId": {
                    "type": "string",
                    "description": "ID of the chart to display\n"
                },
                "column": {
                    "type": "integer",
                    "description": "The column to show the chart in (zero-based); this value always represents the leftmost column of the chart. (between 0 and 11)\n"
                },
                "height": {
                    "type": "integer",
                    "description": "How many rows the chart should take up. (greater than or equal to 1)\n"
                },
                "row": {
                    "type": "integer",
                    "description": "The row to show the chart in (zero-based); if height \u003e 1, this value represents the topmost row of the chart. (greater than or equal to 0)\n"
                },
                "width": {
                    "type": "integer",
                    "description": "How many columns (out of a total of 12, one-based) the chart should take up. (between 1 and 12)\n"
                }
            },
            "type": "object",
            "required": [
                "chartId"
            ]
        },
        "signalfx:index/DashboardColumn:DashboardColumn": {
            "properties": {
                "chartIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Charts to use for the column\n"
                },
                "column": {
                    "type": "integer",
                    "description": "The column to show the chart in (zero-based); this value always represents the leftmost column of the chart. (between 0 and 11)\n"
                },
                "height": {
                    "type": "integer",
                    "description": "How many rows each chart should take up. (greater than or equal to 1)\n"
                },
                "width": {
                    "type": "integer",
                    "description": "Number of columns (out of a total of 12) each chart should take up. (between 1 and 12)\n"
                }
            },
            "type": "object",
            "required": [
                "chartIds"
            ]
        },
        "signalfx:index/DashboardEventOverlay:DashboardEventOverlay": {
            "properties": {
                "color": {
                    "type": "string",
                    "description": "Color to use\n"
                },
                "label": {
                    "type": "string",
                    "description": "The text displaying in the dropdown menu used to select this event overlay as an active overlay for the dashboard.\n"
                },
                "line": {
                    "type": "boolean",
                    "description": "(false by default) Whether a vertical line should be displayed in the plot at the time the event occurs\n"
                },
                "signal": {
                    "type": "string",
                    "description": "Search term used to define events\n"
                },
                "sources": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/signalfx:index/DashboardEventOverlaySource:DashboardEventOverlaySource"
                    }
                },
                "type": {
                    "type": "string",
                    "description": "Source for this event's data. Can be \"eventTimeSeries\" (default) or \"detectorEvents\".\n"
                }
            },
            "type": "object",
            "required": [
                "signal"
            ]
        },
        "signalfx:index/DashboardEventOverlaySource:DashboardEventOverlaySource": {
            "properties": {
                "negated": {
                    "type": "boolean",
                    "description": "(false by default) Whether this filter should be a \"not\" filter\n"
                },
                "property": {
                    "type": "string",
                    "description": "A metric time series dimension or property name\n"
                },
                "values": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of strings (which will be treated as an OR filter on the property)\n"
                }
            },
            "type": "object",
            "required": [
                "property",
                "values"
            ]
        },
        "signalfx:index/DashboardFilter:DashboardFilter": {
            "properties": {
                "applyIfExist": {
                    "type": "boolean",
                    "description": "If true, this filter will also match data that does not have the specified property\n"
                },
                "negated": {
                    "type": "boolean",
                    "description": "(false by default) Whether this filter should be a \"not\" filter\n"
                },
                "property": {
                    "type": "string",
                    "description": "A metric time series dimension or property name\n"
                },
                "values": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of strings (which will be treated as an OR filter on the property)\n"
                }
            },
            "type": "object",
            "required": [
                "property",
                "values"
            ]
        },
        "signalfx:index/DashboardGrid:DashboardGrid": {
            "properties": {
                "chartIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Charts to use for the grid\n"
                },
                "height": {
                    "type": "integer",
                    "description": "How many rows each chart should take up. (greater than or equal to 1)\n"
                },
                "width": {
                    "type": "integer",
                    "description": "Number of columns (out of a total of 12, one-based) each chart should take up. (between 1 and 12)\n"
                }
            },
            "type": "object",
            "required": [
                "chartIds"
            ]
        },
        "signalfx:index/DashboardGroupDashboard:DashboardGroupDashboard": {
            "properties": {
                "configId": {
                    "type": "string",
                    "description": "Unique identifier of an association between a dashboard group and a dashboard\n"
                },
                "dashboardId": {
                    "type": "string",
                    "description": "The label used in the publish statement that displays the plot (metric time series data) you want to customize\n"
                },
                "descriptionOverride": {
                    "type": "string",
                    "description": "String that provides a description override for a mirrored dashboard\n"
                },
                "filterOverrides": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/signalfx:index/DashboardGroupDashboardFilterOverride:DashboardGroupDashboardFilterOverride"
                    },
                    "description": "Filter to apply to each chart in the dashboard\n"
                },
                "nameOverride": {
                    "type": "string",
                    "description": "String that provides a name override for a mirrored dashboard\n"
                },
                "variableOverrides": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/signalfx:index/DashboardGroupDashboardVariableOverride:DashboardGroupDashboardVariableOverride"
                    },
                    "description": "Dashboard variable to apply to each chart in the dashboard\n"
                }
            },
            "type": "object",
            "required": [
                "dashboardId"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "configId",
                        "dashboardId"
                    ]
                }
            }
        },
        "signalfx:index/DashboardGroupDashboardFilterOverride:DashboardGroupDashboardFilterOverride": {
            "properties": {
                "negated": {
                    "type": "boolean",
                    "description": "(false by default) Whether this filter should be a \"not\" filter\n"
                },
                "property": {
                    "type": "string",
                    "description": "A metric time series dimension or property name\n"
                },
                "values": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of strings (which will be treated as an OR filter on the property)\n"
                }
            },
            "type": "object",
            "required": [
                "property",
                "values"
            ]
        },
        "signalfx:index/DashboardGroupDashboardVariableOverride:DashboardGroupDashboardVariableOverride": {
            "properties": {
                "property": {
                    "type": "string",
                    "description": "A metric time series dimension or property name\n"
                },
                "values": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of strings (which will be treated as an OR filter on the property)\n"
                },
                "valuesSuggesteds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of strings of suggested values for this variable; these suggestions will receive priority when values are autosuggested for this variable\n"
                }
            },
            "type": "object",
            "required": [
                "property"
            ]
        },
        "signalfx:index/DashboardGroupImportQualifier:DashboardGroupImportQualifier": {
            "properties": {
                "filters": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/signalfx:index/DashboardGroupImportQualifierFilter:DashboardGroupImportQualifierFilter"
                    },
                    "description": "Filter to apply to each chart in the dashboard\n"
                },
                "metric": {
                    "type": "string"
                }
            },
            "type": "object"
        },
        "signalfx:index/DashboardGroupImportQualifierFilter:DashboardGroupImportQualifierFilter": {
            "properties": {
                "negated": {
                    "type": "boolean",
                    "description": "(false by default) Whether this filter should be a \"not\" filter\n"
                },
                "property": {
                    "type": "string",
                    "description": "A metric time series dimension or property name\n"
                },
                "values": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of strings (which will be treated as an OR filter on the property)\n"
                }
            },
            "type": "object",
            "required": [
                "property",
                "values"
            ]
        },
        "signalfx:index/DashboardGroupPermission:DashboardGroupPermission": {
            "properties": {
                "actions": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Actions level, possible values: READ, WRITE\n"
                },
                "principalId": {
                    "type": "string",
                    "description": "ID of the principal with access\n"
                },
                "principalType": {
                    "type": "string",
                    "description": "Type of principal, possible values: ORG, TEAM, USER\n"
                }
            },
            "type": "object",
            "required": [
                "principalId",
                "principalType"
            ]
        },
        "signalfx:index/DashboardPermissions:DashboardPermissions": {
            "properties": {
                "acls": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/signalfx:index/DashboardPermissionsAcl:DashboardPermissionsAcl"
                    },
                    "description": "The custom access control list for this dashboard\n"
                },
                "parent": {
                    "type": "string",
                    "description": "The ID of the dashboard group that this dashboard inherits permissions from\n"
                }
            },
            "type": "object"
        },
        "signalfx:index/DashboardPermissionsAcl:DashboardPermissionsAcl": {
            "properties": {
                "actions": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Actions level, possible values: READ, WRITE\n"
                },
                "principalId": {
                    "type": "string",
                    "description": "ID of the principal with access\n"
                },
                "principalType": {
                    "type": "string",
                    "description": "Type of principal, possible values: ORG, TEAM, USER\n"
                }
            },
            "type": "object",
            "required": [
                "principalId",
                "principalType"
            ]
        },
        "signalfx:index/DashboardSelectedEventOverlay:DashboardSelectedEventOverlay": {
            "properties": {
                "signal": {
                    "type": "string",
                    "description": "Search term used to define events\n"
                },
                "sources": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/signalfx:index/DashboardSelectedEventOverlaySource:DashboardSelectedEventOverlaySource"
                    }
                },
                "type": {
                    "type": "string",
                    "description": "Source for this event's data. Can be \"eventTimeSeries\" (default) or \"detectorEvents\".\n"
                }
            },
            "type": "object",
            "required": [
                "signal"
            ]
        },
        "signalfx:index/DashboardSelectedEventOverlaySource:DashboardSelectedEventOverlaySource": {
            "properties": {
                "negated": {
                    "type": "boolean",
                    "description": "(false by default) Whether this filter should be a \"not\" filter\n"
                },
                "property": {
                    "type": "string",
                    "description": "A metric time series dimension or property name\n"
                },
                "values": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of strings (which will be treated as an OR filter on the property)\n"
                }
            },
            "type": "object",
            "required": [
                "property",
                "values"
            ]
        },
        "signalfx:index/DashboardVariable:DashboardVariable": {
            "properties": {
                "alias": {
                    "type": "string",
                    "description": "An alias for the dashboard variable. This text will appear as the label for the dropdown field on the dashboard\n"
                },
                "applyIfExist": {
                    "type": "boolean",
                    "description": "If true, this variable will also match data that does not have the specified property\n"
                },
                "description": {
                    "type": "string",
                    "description": "Variable description\n"
                },
                "property": {
                    "type": "string",
                    "description": "A metric time series dimension or property name\n"
                },
                "replaceOnly": {
                    "type": "boolean",
                    "description": "If true, this variable will only apply to charts with a filter on the named property.\n"
                },
                "restrictedSuggestions": {
                    "type": "boolean",
                    "description": "If true, this variable may only be set to the values listed in preferredSuggestions. and only these values will appear in autosuggestion menus. false by default\n"
                },
                "valueRequired": {
                    "type": "boolean",
                    "description": "Determines whether a value is required for this variable (and therefore whether it will be possible to view this dashboard without this filter applied). false by default\n"
                },
                "values": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of strings (which will be treated as an OR filter on the property)\n"
                },
                "valuesSuggesteds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of strings of suggested values for this variable; these suggestions will receive priority when values are autosuggested for this variable\n"
                }
            },
            "type": "object",
            "required": [
                "alias",
                "property"
            ]
        },
        "signalfx:index/DataLinkTargetExternalUrl:DataLinkTargetExternalUrl": {
            "properties": {
                "minimumTimeWindow": {
                    "type": "string",
                    "description": "The minimum time window for a search sent to an external site. Depends on the value set for `time_format`.\n"
                },
                "name": {
                    "type": "string",
                    "description": "User-assigned target name. Use this value to differentiate between the link targets for a data link object.\n"
                },
                "propertyKeyMapping": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Describes the relationship between Splunk Observability Cloud metadata keys and external system properties when the key names are different\n"
                },
                "timeFormat": {
                    "type": "string",
                    "description": "Designates the format of minimumTimeWindow in the same data link target object.\n"
                },
                "url": {
                    "type": "string",
                    "description": "URL string for a Splunk instance or external system data link target.\n"
                }
            },
            "type": "object",
            "required": [
                "name",
                "url"
            ]
        },
        "signalfx:index/DataLinkTargetSignalfxDashboard:DataLinkTargetSignalfxDashboard": {
            "properties": {
                "dashboardGroupId": {
                    "type": "string",
                    "description": "SignalFx-assigned ID of the dashboard link target's dashboard group\n"
                },
                "dashboardId": {
                    "type": "string",
                    "description": "SignalFx-assigned ID of the dashboard link target\n"
                },
                "isDefault": {
                    "type": "boolean",
                    "description": "Flag that designates a target as the default for a data link object.\n"
                },
                "name": {
                    "type": "string",
                    "description": "User-assigned target name. Use this value to differentiate between the link targets for a data link object.\n"
                }
            },
            "type": "object",
            "required": [
                "dashboardGroupId",
                "dashboardId",
                "name"
            ]
        },
        "signalfx:index/DataLinkTargetSplunk:DataLinkTargetSplunk": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "User-assigned target name. Use this value to differentiate between the link targets for a data link object.\n"
                },
                "propertyKeyMapping": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Describes the relationship between Splunk Observability Cloud metadata keys and external system properties when the key names are different\n"
                }
            },
            "type": "object",
            "required": [
                "name"
            ]
        },
        "signalfx:index/DetectorRule:DetectorRule": {
            "properties": {
                "description": {
                    "type": "string",
                    "description": "Description of the rule\n"
                },
                "detectLabel": {
                    "type": "string",
                    "description": "A detect label which matches a detect label within the program text\n"
                },
                "disabled": {
                    "type": "boolean",
                    "description": "(default: false) When true, notifications and events will not be generated for the detect label\n"
                },
                "notifications": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of strings specifying where notifications will be sent when an incident occurs. See https://developers.signalfx.com/v2/docs/detector-model#notifications-models for more info\n"
                },
                "parameterizedBody": {
                    "type": "string",
                    "description": "Custom notification message body when an alert is triggered. See https://developers.signalfx.com/v2/reference#detector-model for more info\n"
                },
                "parameterizedSubject": {
                    "type": "string",
                    "description": "Custom notification message subject when an alert is triggered. See https://d    evelopers.signalfx.com/v2/reference#detector-model for more info\n"
                },
                "runbookUrl": {
                    "type": "string",
                    "description": "URL of page to consult when an alert is triggered\n"
                },
                "severity": {
                    "type": "string",
                    "description": "The severity of the rule, must be one of: Critical, Warning, Major, Minor, Info\n"
                },
                "tip": {
                    "type": "string",
                    "description": "Plain text suggested first course of action, such as a command to execute.\n"
                }
            },
            "type": "object",
            "required": [
                "detectLabel",
                "severity"
            ]
        },
        "signalfx:index/DetectorVizOption:DetectorVizOption": {
            "properties": {
                "color": {
                    "type": "string",
                    "description": "Color to use\n"
                },
                "displayName": {
                    "type": "string",
                    "description": "Specifies an alternate value for the Plot Name column of the Data Table associated with the chart.\n"
                },
                "label": {
                    "type": "string",
                    "description": "The label used in the publish statement that displays the plot (metric time series data) you want to customize\n"
                },
                "valuePrefix": {
                    "type": "string",
                    "description": "An arbitrary prefix to display with the value of this plot\n"
                },
                "valueSuffix": {
                    "type": "string",
                    "description": "An arbitrary suffix to display with the value of this plot\n"
                },
                "valueUnit": {
                    "type": "string",
                    "description": "A unit to attach to this plot. Units support automatic scaling (eg thousands of bytes will be displayed as kilobytes)\n"
                }
            },
            "type": "object",
            "required": [
                "label"
            ]
        },
        "signalfx:index/HeatmapChartColorRange:HeatmapChartColorRange": {
            "properties": {
                "color": {
                    "type": "string",
                    "description": "The color range to use. The starting hex color value for data values in a heatmap chart. Specify the value as a 6-character hexadecimal value preceded by the '#' character, for example \"#ea1849\" (grass green).\n"
                },
                "maxValue": {
                    "type": "number",
                    "description": "The maximum value within the coloring range\n"
                },
                "minValue": {
                    "type": "number",
                    "description": "The minimum value within the coloring range\n"
                }
            },
            "type": "object",
            "required": [
                "color"
            ]
        },
        "signalfx:index/HeatmapChartColorScale:HeatmapChartColorScale": {
            "properties": {
                "color": {
                    "type": "string",
                    "description": "The color to use. Must be one of gray, blue, light_blue, navy, dark_orange, orange, dark_yellow, magenta, cerise, pink, violet, purple, gray_blue, dark_green, green, aquamarine, red, yellow, vivid_yellow, light_green, or lime_green.\n"
                },
                "gt": {
                    "type": "number",
                    "description": "Indicates the lower threshold non-inclusive value for this range\n"
                },
                "gte": {
                    "type": "number",
                    "description": "Indicates the lower threshold inclusive value for this range\n"
                },
                "lt": {
                    "type": "number",
                    "description": "Indicates the upper threshold non-inculsive value for this range\n"
                },
                "lte": {
                    "type": "number",
                    "description": "Indicates the upper threshold inclusive value for this range\n"
                }
            },
            "type": "object",
            "required": [
                "color"
            ]
        },
        "signalfx:index/ListChartColorScale:ListChartColorScale": {
            "properties": {
                "color": {
                    "type": "string",
                    "description": "The color to use. Must be one of gray, blue, light_blue, navy, dark_orange, orange, dark_yellow, magenta, cerise, pink, violet, purple, gray_blue, dark_green, green, aquamarine, red, yellow, vivid_yellow, light_green, or lime_green.\n"
                },
                "gt": {
                    "type": "number",
                    "description": "Indicates the lower threshold non-inclusive value for this range\n"
                },
                "gte": {
                    "type": "number",
                    "description": "Indicates the lower threshold inclusive value for this range\n"
                },
                "lt": {
                    "type": "number",
                    "description": "Indicates the upper threshold non-inculsive value for this range\n"
                },
                "lte": {
                    "type": "number",
                    "description": "Indicates the upper threshold inclusive value for this range\n"
                }
            },
            "type": "object",
            "required": [
                "color"
            ]
        },
        "signalfx:index/ListChartLegendOptionsField:ListChartLegendOptionsField": {
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "description": "(true by default) Determines if this property is displayed in the data table.\n"
                },
                "property": {
                    "type": "string",
                    "description": "The name of a property to hide or show in the data table.\n"
                }
            },
            "type": "object",
            "required": [
                "property"
            ]
        },
        "signalfx:index/ListChartVizOption:ListChartVizOption": {
            "properties": {
                "color": {
                    "type": "string",
                    "description": "Color to use\n"
                },
                "displayName": {
                    "type": "string",
                    "description": "Specifies an alternate value for the Plot Name column of the Data Table associated with the chart.\n"
                },
                "label": {
                    "type": "string",
                    "description": "The label used in the publish statement that displays the plot (metric time series data) you want to customize\n"
                },
                "valuePrefix": {
                    "type": "string",
                    "description": "An arbitrary prefix to display with the value of this plot\n"
                },
                "valueSuffix": {
                    "type": "string",
                    "description": "An arbitrary suffix to display with the value of this plot\n"
                },
                "valueUnit": {
                    "type": "string",
                    "description": "A unit to attach to this plot. Units support automatic scaling (eg thousands of bytes will be displayed as kilobytes)\n"
                }
            },
            "type": "object",
            "required": [
                "label"
            ]
        },
        "signalfx:index/MetricRulesetAggregationRule:MetricRulesetAggregationRule": {
            "properties": {
                "aggregators": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/signalfx:index/MetricRulesetAggregationRuleAggregator:MetricRulesetAggregationRuleAggregator"
                    },
                    "description": "The aggregator for this rule\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "Status of this aggregation rule\n"
                },
                "matchers": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/signalfx:index/MetricRulesetAggregationRuleMatcher:MetricRulesetAggregationRuleMatcher"
                    },
                    "description": "The matcher for this rule\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of this aggregation rule\n"
                }
            },
            "type": "object",
            "required": [
                "aggregators",
                "enabled",
                "matchers"
            ]
        },
        "signalfx:index/MetricRulesetAggregationRuleAggregator:MetricRulesetAggregationRuleAggregator": {
            "properties": {
                "dimensions": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of dimensions to keep or drop in aggregated metric\n"
                },
                "dropDimensions": {
                    "type": "boolean",
                    "description": "Flag specifying to keep or drop given dimensions\n"
                },
                "outputName": {
                    "type": "string",
                    "description": "The aggregated metric name\n"
                },
                "type": {
                    "type": "string",
                    "description": "The type of the aggregator\n"
                }
            },
            "type": "object",
            "required": [
                "dimensions",
                "dropDimensions",
                "outputName",
                "type"
            ]
        },
        "signalfx:index/MetricRulesetAggregationRuleMatcher:MetricRulesetAggregationRuleMatcher": {
            "properties": {
                "filters": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/signalfx:index/MetricRulesetAggregationRuleMatcherFilter:MetricRulesetAggregationRuleMatcherFilter"
                    },
                    "description": "List of filters to match on\n"
                },
                "type": {
                    "type": "string",
                    "description": "The type of the matcher\n"
                }
            },
            "type": "object",
            "required": [
                "type"
            ]
        },
        "signalfx:index/MetricRulesetAggregationRuleMatcherFilter:MetricRulesetAggregationRuleMatcherFilter": {
            "properties": {
                "not": {
                    "type": "boolean",
                    "description": "Flag specifying equals or not equals\n"
                },
                "property": {
                    "type": "string",
                    "description": "Name of dimension to match\n"
                },
                "propertyValues": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of property values to match\n"
                }
            },
            "type": "object",
            "required": [
                "not",
                "property",
                "propertyValues"
            ]
        },
        "signalfx:index/MetricRulesetRoutingRule:MetricRulesetRoutingRule": {
            "properties": {
                "destination": {
                    "type": "string",
                    "description": "Destination to send the input metric\n"
                }
            },
            "type": "object",
            "required": [
                "destination"
            ]
        },
        "signalfx:index/OrgTokenDpmLimits:OrgTokenDpmLimits": {
            "properties": {
                "dpmLimit": {
                    "type": "integer",
                    "description": "The datapoints per minute (dpm) limit for this token. If you exceed this limit, Splunk Observability Cloud sends out an alert.\n"
                },
                "dpmNotificationThreshold": {
                    "type": "integer",
                    "description": "DPM level at which Splunk Observability Cloud sends the notification for this token. If you don't specify a notification, Splunk Observability Cloud sends the generic notification.\n"
                }
            },
            "type": "object",
            "required": [
                "dpmLimit"
            ]
        },
        "signalfx:index/OrgTokenHostOrUsageLimits:OrgTokenHostOrUsageLimits": {
            "properties": {
                "containerLimit": {
                    "type": "integer",
                    "description": "Max number of containers that can use this token\n"
                },
                "containerNotificationThreshold": {
                    "type": "integer",
                    "description": "Notification threshold for containers\n"
                },
                "customMetricsLimit": {
                    "type": "integer",
                    "description": "Max number of custom metrics that can be sent with this token\n"
                },
                "customMetricsNotificationThreshold": {
                    "type": "integer",
                    "description": "Notification threshold for custom metrics\n"
                },
                "highResMetricsLimit": {
                    "type": "integer",
                    "description": "Max number of high-res metrics that can be sent with this token\n"
                },
                "highResMetricsNotificationThreshold": {
                    "type": "integer",
                    "description": "Notification threshold for high-res metrics\n"
                },
                "hostLimit": {
                    "type": "integer",
                    "description": "Max number of hosts that can use this token\n"
                },
                "hostNotificationThreshold": {
                    "type": "integer",
                    "description": "Notification threshold for hosts\n"
                }
            },
            "type": "object"
        },
        "signalfx:index/SingleValueChartColorScale:SingleValueChartColorScale": {
            "properties": {
                "color": {
                    "type": "string",
                    "description": "The color to use. Must be one of gray, blue, light_blue, navy, dark_orange, orange, dark_yellow, magenta, cerise, pink, violet, purple, gray_blue, dark_green, green, aquamarine, red, yellow, vivid_yellow, light_green, or lime_green.\n"
                },
                "gt": {
                    "type": "number",
                    "description": "Indicates the lower threshold non-inclusive value for this range\n"
                },
                "gte": {
                    "type": "number",
                    "description": "Indicates the lower threshold inclusive value for this range\n"
                },
                "lt": {
                    "type": "number",
                    "description": "Indicates the upper threshold non-inculsive value for this range\n"
                },
                "lte": {
                    "type": "number",
                    "description": "Indicates the upper threshold inclusive value for this range\n"
                }
            },
            "type": "object",
            "required": [
                "color"
            ]
        },
        "signalfx:index/SingleValueChartVizOption:SingleValueChartVizOption": {
            "properties": {
                "color": {
                    "type": "string",
                    "description": "Color to use\n"
                },
                "displayName": {
                    "type": "string",
                    "description": "Specifies an alternate value for the Plot Name column of the Data Table associated with the chart.\n"
                },
                "label": {
                    "type": "string",
                    "description": "The label used in the publish statement that displays the plot (metric time series data) you want to customize\n"
                },
                "valuePrefix": {
                    "type": "string",
                    "description": "An arbitrary prefix to display with the value of this plot\n"
                },
                "valueSuffix": {
                    "type": "string",
                    "description": "An arbitrary suffix to display with the value of this plot\n"
                },
                "valueUnit": {
                    "type": "string",
                    "description": "A unit to attach to this plot. Units support automatic scaling (eg thousands of bytes will be displayed as kilobytes)\n"
                }
            },
            "type": "object",
            "required": [
                "label"
            ]
        },
        "signalfx:index/TableChartVizOption:TableChartVizOption": {
            "properties": {
                "color": {
                    "type": "string",
                    "description": "Color to use\n"
                },
                "displayName": {
                    "type": "string",
                    "description": "Specifies an alternate value for the Plot Name column of the Data Table associated with the chart.\n"
                },
                "label": {
                    "type": "string",
                    "description": "The label used in the publish statement that displays the plot (metric time series data) you want to customize\n"
                },
                "valuePrefix": {
                    "type": "string",
                    "description": "An arbitrary prefix to display with the value of this plot\n"
                },
                "valueSuffix": {
                    "type": "string",
                    "description": "An arbitrary suffix to display with the value of this plot\n"
                },
                "valueUnit": {
                    "type": "string",
                    "description": "A unit to attach to this plot. Units support automatic scaling (eg thousands of bytes will be displayed as kilobytes)\n"
                }
            },
            "type": "object",
            "required": [
                "label"
            ]
        },
        "signalfx:index/TimeChartAxisLeft:TimeChartAxisLeft": {
            "properties": {
                "highWatermark": {
                    "type": "number",
                    "description": "A line to draw as a high watermark\n"
                },
                "highWatermarkLabel": {
                    "type": "string",
                    "description": "A label to attach to the high watermark line\n"
                },
                "label": {
                    "type": "string",
                    "description": "Label of the left axis\n"
                },
                "lowWatermark": {
                    "type": "number",
                    "description": "A line to draw as a low watermark\n"
                },
                "lowWatermarkLabel": {
                    "type": "string",
                    "description": "A label to attach to the low watermark line\n"
                },
                "maxValue": {
                    "type": "number",
                    "description": "The maximum value for the left axis\n"
                },
                "minValue": {
                    "type": "number",
                    "description": "The minimum value for the left axis\n"
                },
                "watermarks": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/signalfx:index/TimeChartAxisLeftWatermark:TimeChartAxisLeftWatermark"
                    }
                }
            },
            "type": "object"
        },
        "signalfx:index/TimeChartAxisLeftWatermark:TimeChartAxisLeftWatermark": {
            "properties": {
                "label": {
                    "type": "string",
                    "description": "Label to display associated with the watermark line\n"
                },
                "value": {
                    "type": "number",
                    "description": "Axis value where the watermark line will be displayed\n"
                }
            },
            "type": "object",
            "required": [
                "value"
            ]
        },
        "signalfx:index/TimeChartAxisRight:TimeChartAxisRight": {
            "properties": {
                "highWatermark": {
                    "type": "number",
                    "description": "A line to draw as a high watermark\n"
                },
                "highWatermarkLabel": {
                    "type": "string",
                    "description": "A label to attach to the high watermark line\n"
                },
                "label": {
                    "type": "string",
                    "description": "Label of the right axis\n"
                },
                "lowWatermark": {
                    "type": "number",
                    "description": "A line to draw as a low watermark\n"
                },
                "lowWatermarkLabel": {
                    "type": "string",
                    "description": "A label to attach to the low watermark line\n"
                },
                "maxValue": {
                    "type": "number",
                    "description": "The maximum value for the right axis\n"
                },
                "minValue": {
                    "type": "number",
                    "description": "The minimum value for the right axis\n"
                },
                "watermarks": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/signalfx:index/TimeChartAxisRightWatermark:TimeChartAxisRightWatermark"
                    }
                }
            },
            "type": "object"
        },
        "signalfx:index/TimeChartAxisRightWatermark:TimeChartAxisRightWatermark": {
            "properties": {
                "label": {
                    "type": "string",
                    "description": "Label to display associated with the watermark line\n"
                },
                "value": {
                    "type": "number",
                    "description": "Axis value where the watermark line will be displayed\n"
                }
            },
            "type": "object",
            "required": [
                "value"
            ]
        },
        "signalfx:index/TimeChartEventOption:TimeChartEventOption": {
            "properties": {
                "color": {
                    "type": "string",
                    "description": "Color to use\n"
                },
                "displayName": {
                    "type": "string",
                    "description": "Specifies an alternate value for the Plot Name column of the Data Table associated with the chart.\n"
                },
                "label": {
                    "type": "string",
                    "description": "The label used in the publish statement that displays the events you want to customize\n"
                }
            },
            "type": "object",
            "required": [
                "label"
            ]
        },
        "signalfx:index/TimeChartHistogramOption:TimeChartHistogramOption": {
            "properties": {
                "colorTheme": {
                    "type": "string",
                    "description": "Base color theme to use for the graph.\n"
                }
            },
            "type": "object"
        },
        "signalfx:index/TimeChartLegendOptionsField:TimeChartLegendOptionsField": {
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "description": "(true by default) Determines if this property is displayed in the data table.\n"
                },
                "property": {
                    "type": "string",
                    "description": "The name of a property to hide or show in the data table.\n"
                }
            },
            "type": "object",
            "required": [
                "property"
            ]
        },
        "signalfx:index/TimeChartVizOption:TimeChartVizOption": {
            "properties": {
                "axis": {
                    "type": "string",
                    "description": "The Y-axis associated with values for this plot. Must be either \"right\" or \"left\". Defaults to \"left\".\n"
                },
                "color": {
                    "type": "string",
                    "description": "Color to use\n"
                },
                "displayName": {
                    "type": "string",
                    "description": "Specifies an alternate value for the Plot Name column of the Data Table associated with the chart.\n"
                },
                "label": {
                    "type": "string",
                    "description": "The label used in the publish statement that displays the plot (metric time series data) you want to customize\n"
                },
                "plotType": {
                    "type": "string",
                    "description": "(Chart plot_type by default) The visualization style to use. Must be \"LineChart\", \"AreaChart\", \"ColumnChart\", or \"Histogram\"\n"
                },
                "valuePrefix": {
                    "type": "string",
                    "description": "An arbitrary prefix to display with the value of this plot\n"
                },
                "valueSuffix": {
                    "type": "string",
                    "description": "An arbitrary suffix to display with the value of this plot\n"
                },
                "valueUnit": {
                    "type": "string",
                    "description": "A unit to attach to this plot. Units support automatic scaling (eg thousands of bytes will be displayed as kilobytes)\n"
                }
            },
            "type": "object",
            "required": [
                "label"
            ]
        },
        "signalfx:index/WebhookIntegrationHeader:WebhookIntegrationHeader": {
            "properties": {
                "headerKey": {
                    "type": "string"
                },
                "headerValue": {
                    "type": "string",
                    "secret": true
                }
            },
            "type": "object",
            "required": [
                "headerKey",
                "headerValue"
            ]
        },
        "signalfx:log/ViewColumn:ViewColumn": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "Name of the column\n"
                }
            },
            "type": "object",
            "required": [
                "name"
            ]
        },
        "signalfx:log/ViewSortOption:ViewSortOption": {
            "properties": {
                "descending": {
                    "type": "boolean",
                    "description": "Name of the column\n"
                },
                "field": {
                    "type": "string",
                    "description": "Name of the column\n"
                }
            },
            "type": "object",
            "required": [
                "descending",
                "field"
            ]
        }
    },
    "provider": {
        "description": "The provider type for the signalfx package. By default, resources use package-wide configuration\nsettings, however an explicit `Provider` instance may be created and passed during resource\nconstruction to achieve fine-grained programmatic control over provider settings. See the\n[documentation](https://www.pulumi.com/docs/reference/programming-model/#providers) for more information.\n",
        "properties": {
            "apiUrl": {
                "type": "string",
                "description": "API URL for your Splunk Observability Cloud org, may include a realm\n"
            },
            "authToken": {
                "type": "string",
                "description": "Splunk Observability Cloud auth token\n"
            },
            "customAppUrl": {
                "type": "string",
                "description": "Application URL for your Splunk Observability Cloud org, often customized for organizations using SSO\n"
            },
            "retryMaxAttempts": {
                "type": "integer",
                "description": "Max retries for a single HTTP call. Defaults to 4\n"
            },
            "retryWaitMaxSeconds": {
                "type": "integer",
                "description": "Maximum retry wait for a single HTTP call in seconds. Defaults to 30\n"
            },
            "retryWaitMinSeconds": {
                "type": "integer",
                "description": "Minimum retry wait for a single HTTP call in seconds. Defaults to 1\n"
            },
            "timeoutSeconds": {
                "type": "integer",
                "description": "Timeout duration for a single HTTP call in seconds. Defaults to 120\n"
            }
        },
        "inputProperties": {
            "apiUrl": {
                "type": "string",
                "description": "API URL for your Splunk Observability Cloud org, may include a realm\n"
            },
            "authToken": {
                "type": "string",
                "description": "Splunk Observability Cloud auth token\n"
            },
            "customAppUrl": {
                "type": "string",
                "description": "Application URL for your Splunk Observability Cloud org, often customized for organizations using SSO\n"
            },
            "retryMaxAttempts": {
                "type": "integer",
                "description": "Max retries for a single HTTP call. Defaults to 4\n"
            },
            "retryWaitMaxSeconds": {
                "type": "integer",
                "description": "Maximum retry wait for a single HTTP call in seconds. Defaults to 30\n"
            },
            "retryWaitMinSeconds": {
                "type": "integer",
                "description": "Minimum retry wait for a single HTTP call in seconds. Defaults to 1\n"
            },
            "timeoutSeconds": {
                "type": "integer",
                "description": "Timeout duration for a single HTTP call in seconds. Defaults to 120\n"
            }
        }
    },
    "resources": {
        "signalfx:aws/externalIntegration:ExternalIntegration": {
            "description": "Splunk Observability AWS CloudWatch integrations using Role ARNs. For help with this integration see [Connect to AWS CloudWatch](https://docs.splunk.com/observability/en/gdi/get-data-in/connect/aws/aws-apiconfig.html).\n\n\u003e **NOTE** When managing integrations, use a session token of an administrator to authenticate the Splunk Observability provider. See [Operations that require a session token for an administrator](https://dev.splunk.com/observability/docs/administration/authtokens#Operations-that-require-a-session-token-for-an-administrator).\n\n\u003e **WARNING** This resource implements part of a workflow. Use it with `signalfx.aws.Integration`. Check with Splunk support for your realm's AWS account id.\n\n## Example\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as aws from \"@pulumi/aws\";\nimport * as signalfx from \"@pulumi/signalfx\";\n\nconst awsMyteamExtern = new signalfx.aws.ExternalIntegration(\"awsMyteamExtern\", {});\nconst signalfxAssumePolicy = aws.iam.getPolicyDocumentOutput({\n    statements: [{\n        actions: [\"sts:AssumeRole\"],\n        principals: [{\n            type: \"AWS\",\n            identifiers: [awsMyteamExtern.signalfxAwsAccount],\n        }],\n        conditions: [{\n            test: \"StringEquals\",\n            variable: \"sts:ExternalId\",\n            values: [awsMyteamExtern.externalId],\n        }],\n    }],\n});\nconst awsSplunkRole = new aws.iam.Role(\"awsSplunkRole\", {\n    description: \"Splunk Observability Cloud integration to read out data and send it to signalfxs aws account\",\n    assumeRolePolicy: signalfxAssumePolicy.apply(signalfxAssumePolicy =\u003e signalfxAssumePolicy.json),\n});\nconst awsSplunkPolicy = new aws.iam.Policy(\"awsSplunkPolicy\", {\n    description: \"AWS permissions required by the Splunk Observability Cloud\",\n    policy: `{\n  \"Version\": \"2012-10-17\",\n  \"Statement\": [\n    {\n      \"Effect\": \"Allow\",\n      \"Action\": [\n        \"apigateway:GET\",\n        \"autoscaling:DescribeAutoScalingGroups\",\n        \"cloudfront:GetDistributionConfig\",\n        \"cloudfront:ListDistributions\",\n        \"cloudfront:ListTagsForResource\",\n        \"cloudwatch:DescribeAlarms\",\n        \"cloudwatch:GetMetricData\",\n        \"cloudwatch:GetMetricStatistics\",\n        \"cloudwatch:ListMetrics\",\n        \"directconnect:DescribeConnections\",\n        \"dynamodb:DescribeTable\",\n        \"dynamodb:ListTables\",\n        \"dynamodb:ListTagsOfResource\",\n        \"ec2:DescribeInstances\",\n        \"ec2:DescribeInstanceStatus\",\n        \"ec2:DescribeRegions\",\n        \"ec2:DescribeReservedInstances\",\n        \"ec2:DescribeReservedInstancesModifications\",\n        \"ec2:DescribeTags\",\n        \"ec2:DescribeVolumes\",\n        \"ecs:DescribeClusters\",\n        \"ecs:DescribeServices\",\n        \"ecs:DescribeTasks\",\n        \"ecs:ListClusters\",\n        \"ecs:ListServices\",\n        \"ecs:ListTagsForResource\",\n        \"ecs:ListTaskDefinitions\",\n        \"ecs:ListTasks\",\n        \"elasticache:DescribeCacheClusters\",\n        \"elasticloadbalancing:DescribeLoadBalancerAttributes\",\n        \"elasticloadbalancing:DescribeLoadBalancers\",\n        \"elasticloadbalancing:DescribeTags\",\n        \"elasticloadbalancing:DescribeTargetGroups\",\n        \"elasticmapreduce:DescribeCluster\",\n        \"elasticmapreduce:ListClusters\",\n        \"es:DescribeElasticsearchDomain\",\n        \"es:ListDomainNames\",\n        \"kinesis:DescribeStream\",\n        \"kinesis:ListShards\",\n        \"kinesis:ListStreams\",\n        \"kinesis:ListTagsForStream\",\n        \"lambda:GetAlias\",\n        \"lambda:ListFunctions\",\n        \"lambda:ListTags\",\n        \"logs:DeleteSubscriptionFilter\",\n        \"logs:DescribeLogGroups\",\n        \"logs:DescribeSubscriptionFilters\",\n        \"logs:PutSubscriptionFilter\",\n        \"organizations:DescribeOrganization\",\n        \"rds:DescribeDBClusters\",\n        \"rds:DescribeDBInstances\",\n        \"rds:ListTagsForResource\",\n        \"redshift:DescribeClusters\",\n        \"redshift:DescribeLoggingStatus\",\n        \"s3:GetBucketLocation\",\n        \"s3:GetBucketLogging\",\n        \"s3:GetBucketNotification\",\n        \"s3:GetBucketTagging\",\n        \"s3:ListAllMyBuckets\",\n        \"s3:ListBucket\",\n        \"s3:PutBucketNotification\",\n        \"sqs:GetQueueAttributes\",\n        \"sqs:ListQueues\",\n        \"sqs:ListQueueTags\",\n        \"states:ListStateMachines\",\n        \"tag:GetResources\",\n        \"workspaces:DescribeWorkspaces\"\n      ],\n      \"Resource\": \"*\"\n    }\n  ]\n}\n`,\n});\nconst splunkRolePolicyAttach = new aws.iam.RolePolicyAttachment(\"splunkRolePolicyAttach\", {\n    role: awsSplunkRole.name,\n    policyArn: awsSplunkPolicy.arn,\n});\nconst awsMyteam = new signalfx.aws.Integration(\"awsMyteam\", {\n    enabled: true,\n    integrationId: awsMyteamExtern.id,\n    externalId: awsMyteamExtern.externalId,\n    roleArn: awsSplunkRole.arn,\n    regions: [\"us-east-1\"],\n    pollRate: 300,\n    importCloudWatch: true,\n    enableAwsUsage: true,\n});\n```\n```python\nimport pulumi\nimport pulumi_aws as aws\nimport pulumi_signalfx as signalfx\n\naws_myteam_extern = signalfx.aws.ExternalIntegration(\"awsMyteamExtern\")\nsignalfx_assume_policy = aws.iam.get_policy_document_output(statements=[aws.iam.GetPolicyDocumentStatementArgs(\n    actions=[\"sts:AssumeRole\"],\n    principals=[aws.iam.GetPolicyDocumentStatementPrincipalArgs(\n        type=\"AWS\",\n        identifiers=[aws_myteam_extern.signalfx_aws_account],\n    )],\n    conditions=[aws.iam.GetPolicyDocumentStatementConditionArgs(\n        test=\"StringEquals\",\n        variable=\"sts:ExternalId\",\n        values=[aws_myteam_extern.external_id],\n    )],\n)])\naws_splunk_role = aws.iam.Role(\"awsSplunkRole\",\n    description=\"Splunk Observability Cloud integration to read out data and send it to signalfxs aws account\",\n    assume_role_policy=signalfx_assume_policy.json)\naws_splunk_policy = aws.iam.Policy(\"awsSplunkPolicy\",\n    description=\"AWS permissions required by the Splunk Observability Cloud\",\n    policy=\"\"\"{\n  \"Version\": \"2012-10-17\",\n  \"Statement\": [\n    {\n      \"Effect\": \"Allow\",\n      \"Action\": [\n        \"apigateway:GET\",\n        \"autoscaling:DescribeAutoScalingGroups\",\n        \"cloudfront:GetDistributionConfig\",\n        \"cloudfront:ListDistributions\",\n        \"cloudfront:ListTagsForResource\",\n        \"cloudwatch:DescribeAlarms\",\n        \"cloudwatch:GetMetricData\",\n        \"cloudwatch:GetMetricStatistics\",\n        \"cloudwatch:ListMetrics\",\n        \"directconnect:DescribeConnections\",\n        \"dynamodb:DescribeTable\",\n        \"dynamodb:ListTables\",\n        \"dynamodb:ListTagsOfResource\",\n        \"ec2:DescribeInstances\",\n        \"ec2:DescribeInstanceStatus\",\n        \"ec2:DescribeRegions\",\n        \"ec2:DescribeReservedInstances\",\n        \"ec2:DescribeReservedInstancesModifications\",\n        \"ec2:DescribeTags\",\n        \"ec2:DescribeVolumes\",\n        \"ecs:DescribeClusters\",\n        \"ecs:DescribeServices\",\n        \"ecs:DescribeTasks\",\n        \"ecs:ListClusters\",\n        \"ecs:ListServices\",\n        \"ecs:ListTagsForResource\",\n        \"ecs:ListTaskDefinitions\",\n        \"ecs:ListTasks\",\n        \"elasticache:DescribeCacheClusters\",\n        \"elasticloadbalancing:DescribeLoadBalancerAttributes\",\n        \"elasticloadbalancing:DescribeLoadBalancers\",\n        \"elasticloadbalancing:DescribeTags\",\n        \"elasticloadbalancing:DescribeTargetGroups\",\n        \"elasticmapreduce:DescribeCluster\",\n        \"elasticmapreduce:ListClusters\",\n        \"es:DescribeElasticsearchDomain\",\n        \"es:ListDomainNames\",\n        \"kinesis:DescribeStream\",\n        \"kinesis:ListShards\",\n        \"kinesis:ListStreams\",\n        \"kinesis:ListTagsForStream\",\n        \"lambda:GetAlias\",\n        \"lambda:ListFunctions\",\n        \"lambda:ListTags\",\n        \"logs:DeleteSubscriptionFilter\",\n        \"logs:DescribeLogGroups\",\n        \"logs:DescribeSubscriptionFilters\",\n        \"logs:PutSubscriptionFilter\",\n        \"organizations:DescribeOrganization\",\n        \"rds:DescribeDBClusters\",\n        \"rds:DescribeDBInstances\",\n        \"rds:ListTagsForResource\",\n        \"redshift:DescribeClusters\",\n        \"redshift:DescribeLoggingStatus\",\n        \"s3:GetBucketLocation\",\n        \"s3:GetBucketLogging\",\n        \"s3:GetBucketNotification\",\n        \"s3:GetBucketTagging\",\n        \"s3:ListAllMyBuckets\",\n        \"s3:ListBucket\",\n        \"s3:PutBucketNotification\",\n        \"sqs:GetQueueAttributes\",\n        \"sqs:ListQueues\",\n        \"sqs:ListQueueTags\",\n        \"states:ListStateMachines\",\n        \"tag:GetResources\",\n        \"workspaces:DescribeWorkspaces\"\n      ],\n      \"Resource\": \"*\"\n    }\n  ]\n}\n\"\"\")\nsplunk_role_policy_attach = aws.iam.RolePolicyAttachment(\"splunkRolePolicyAttach\",\n    role=aws_splunk_role.name,\n    policy_arn=aws_splunk_policy.arn)\naws_myteam = signalfx.aws.Integration(\"awsMyteam\",\n    enabled=True,\n    integration_id=aws_myteam_extern.id,\n    external_id=aws_myteam_extern.external_id,\n    role_arn=aws_splunk_role.arn,\n    regions=[\"us-east-1\"],\n    poll_rate=300,\n    import_cloud_watch=True,\n    enable_aws_usage=True)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Aws = Pulumi.Aws;\nusing SignalFx = Pulumi.SignalFx;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var awsMyteamExtern = new SignalFx.Aws.ExternalIntegration(\"awsMyteamExtern\");\n\n    var signalfxAssumePolicy = Aws.Iam.GetPolicyDocument.Invoke(new()\n    {\n        Statements = new[]\n        {\n            new Aws.Iam.Inputs.GetPolicyDocumentStatementInputArgs\n            {\n                Actions = new[]\n                {\n                    \"sts:AssumeRole\",\n                },\n                Principals = new[]\n                {\n                    new Aws.Iam.Inputs.GetPolicyDocumentStatementPrincipalInputArgs\n                    {\n                        Type = \"AWS\",\n                        Identifiers = new[]\n                        {\n                            awsMyteamExtern.SignalfxAwsAccount,\n                        },\n                    },\n                },\n                Conditions = new[]\n                {\n                    new Aws.Iam.Inputs.GetPolicyDocumentStatementConditionInputArgs\n                    {\n                        Test = \"StringEquals\",\n                        Variable = \"sts:ExternalId\",\n                        Values = new[]\n                        {\n                            awsMyteamExtern.ExternalId,\n                        },\n                    },\n                },\n            },\n        },\n    });\n\n    var awsSplunkRole = new Aws.Iam.Role(\"awsSplunkRole\", new()\n    {\n        Description = \"Splunk Observability Cloud integration to read out data and send it to signalfxs aws account\",\n        AssumeRolePolicy = signalfxAssumePolicy.Apply(getPolicyDocumentResult =\u003e getPolicyDocumentResult.Json),\n    });\n\n    var awsSplunkPolicy = new Aws.Iam.Policy(\"awsSplunkPolicy\", new()\n    {\n        Description = \"AWS permissions required by the Splunk Observability Cloud\",\n        PolicyDocument = @\"{\n  \"\"Version\"\": \"\"2012-10-17\"\",\n  \"\"Statement\"\": [\n    {\n      \"\"Effect\"\": \"\"Allow\"\",\n      \"\"Action\"\": [\n        \"\"apigateway:GET\"\",\n        \"\"autoscaling:DescribeAutoScalingGroups\"\",\n        \"\"cloudfront:GetDistributionConfig\"\",\n        \"\"cloudfront:ListDistributions\"\",\n        \"\"cloudfront:ListTagsForResource\"\",\n        \"\"cloudwatch:DescribeAlarms\"\",\n        \"\"cloudwatch:GetMetricData\"\",\n        \"\"cloudwatch:GetMetricStatistics\"\",\n        \"\"cloudwatch:ListMetrics\"\",\n        \"\"directconnect:DescribeConnections\"\",\n        \"\"dynamodb:DescribeTable\"\",\n        \"\"dynamodb:ListTables\"\",\n        \"\"dynamodb:ListTagsOfResource\"\",\n        \"\"ec2:DescribeInstances\"\",\n        \"\"ec2:DescribeInstanceStatus\"\",\n        \"\"ec2:DescribeRegions\"\",\n        \"\"ec2:DescribeReservedInstances\"\",\n        \"\"ec2:DescribeReservedInstancesModifications\"\",\n        \"\"ec2:DescribeTags\"\",\n        \"\"ec2:DescribeVolumes\"\",\n        \"\"ecs:DescribeClusters\"\",\n        \"\"ecs:DescribeServices\"\",\n        \"\"ecs:DescribeTasks\"\",\n        \"\"ecs:ListClusters\"\",\n        \"\"ecs:ListServices\"\",\n        \"\"ecs:ListTagsForResource\"\",\n        \"\"ecs:ListTaskDefinitions\"\",\n        \"\"ecs:ListTasks\"\",\n        \"\"elasticache:DescribeCacheClusters\"\",\n        \"\"elasticloadbalancing:DescribeLoadBalancerAttributes\"\",\n        \"\"elasticloadbalancing:DescribeLoadBalancers\"\",\n        \"\"elasticloadbalancing:DescribeTags\"\",\n        \"\"elasticloadbalancing:DescribeTargetGroups\"\",\n        \"\"elasticmapreduce:DescribeCluster\"\",\n        \"\"elasticmapreduce:ListClusters\"\",\n        \"\"es:DescribeElasticsearchDomain\"\",\n        \"\"es:ListDomainNames\"\",\n        \"\"kinesis:DescribeStream\"\",\n        \"\"kinesis:ListShards\"\",\n        \"\"kinesis:ListStreams\"\",\n        \"\"kinesis:ListTagsForStream\"\",\n        \"\"lambda:GetAlias\"\",\n        \"\"lambda:ListFunctions\"\",\n        \"\"lambda:ListTags\"\",\n        \"\"logs:DeleteSubscriptionFilter\"\",\n        \"\"logs:DescribeLogGroups\"\",\n        \"\"logs:DescribeSubscriptionFilters\"\",\n        \"\"logs:PutSubscriptionFilter\"\",\n        \"\"organizations:DescribeOrganization\"\",\n        \"\"rds:DescribeDBClusters\"\",\n        \"\"rds:DescribeDBInstances\"\",\n        \"\"rds:ListTagsForResource\"\",\n        \"\"redshift:DescribeClusters\"\",\n        \"\"redshift:DescribeLoggingStatus\"\",\n        \"\"s3:GetBucketLocation\"\",\n        \"\"s3:GetBucketLogging\"\",\n        \"\"s3:GetBucketNotification\"\",\n        \"\"s3:GetBucketTagging\"\",\n        \"\"s3:ListAllMyBuckets\"\",\n        \"\"s3:ListBucket\"\",\n        \"\"s3:PutBucketNotification\"\",\n        \"\"sqs:GetQueueAttributes\"\",\n        \"\"sqs:ListQueues\"\",\n        \"\"sqs:ListQueueTags\"\",\n        \"\"states:ListStateMachines\"\",\n        \"\"tag:GetResources\"\",\n        \"\"workspaces:DescribeWorkspaces\"\"\n      ],\n      \"\"Resource\"\": \"\"*\"\"\n    }\n  ]\n}\n\",\n    });\n\n    var splunkRolePolicyAttach = new Aws.Iam.RolePolicyAttachment(\"splunkRolePolicyAttach\", new()\n    {\n        Role = awsSplunkRole.Name,\n        PolicyArn = awsSplunkPolicy.Arn,\n    });\n\n    var awsMyteam = new SignalFx.Aws.Integration(\"awsMyteam\", new()\n    {\n        Enabled = true,\n        IntegrationId = awsMyteamExtern.Id,\n        ExternalId = awsMyteamExtern.ExternalId,\n        RoleArn = awsSplunkRole.Arn,\n        Regions = new[]\n        {\n            \"us-east-1\",\n        },\n        PollRate = 300,\n        ImportCloudWatch = true,\n        EnableAwsUsage = true,\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-aws/sdk/v4/go/aws/iam\"\n\t\"github.com/pulumi/pulumi-signalfx/sdk/v7/go/signalfx/aws\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tawsMyteamExtern, err := aws.NewExternalIntegration(ctx, \"awsMyteamExtern\", nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tsignalfxAssumePolicy := iam.GetPolicyDocumentOutput(ctx, iam.GetPolicyDocumentOutputArgs{\n\t\t\tStatements: iam.GetPolicyDocumentStatementArray{\n\t\t\t\t\u0026iam.GetPolicyDocumentStatementArgs{\n\t\t\t\t\tActions: pulumi.StringArray{\n\t\t\t\t\t\tpulumi.String(\"sts:AssumeRole\"),\n\t\t\t\t\t},\n\t\t\t\t\tPrincipals: iam.GetPolicyDocumentStatementPrincipalArray{\n\t\t\t\t\t\t\u0026iam.GetPolicyDocumentStatementPrincipalArgs{\n\t\t\t\t\t\t\tType: pulumi.String(\"AWS\"),\n\t\t\t\t\t\t\tIdentifiers: pulumi.StringArray{\n\t\t\t\t\t\t\t\tawsMyteamExtern.SignalfxAwsAccount,\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t\tConditions: iam.GetPolicyDocumentStatementConditionArray{\n\t\t\t\t\t\t\u0026iam.GetPolicyDocumentStatementConditionArgs{\n\t\t\t\t\t\t\tTest:     pulumi.String(\"StringEquals\"),\n\t\t\t\t\t\t\tVariable: pulumi.String(\"sts:ExternalId\"),\n\t\t\t\t\t\t\tValues: pulumi.StringArray{\n\t\t\t\t\t\t\t\tawsMyteamExtern.ExternalId,\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t}, nil)\n\t\tawsSplunkRole, err := iam.NewRole(ctx, \"awsSplunkRole\", \u0026iam.RoleArgs{\n\t\t\tDescription: pulumi.String(\"Splunk Observability Cloud integration to read out data and send it to signalfxs aws account\"),\n\t\t\tAssumeRolePolicy: signalfxAssumePolicy.ApplyT(func(signalfxAssumePolicy iam.GetPolicyDocumentResult) (*string, error) {\n\t\t\t\treturn \u0026signalfxAssumePolicy.Json, nil\n\t\t\t}).(pulumi.StringPtrOutput),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tawsSplunkPolicy, err := iam.NewPolicy(ctx, \"awsSplunkPolicy\", \u0026iam.PolicyArgs{\n\t\t\tDescription: pulumi.String(\"AWS permissions required by the Splunk Observability Cloud\"),\n\t\t\tPolicy: pulumi.Any(`{\n  \"Version\": \"2012-10-17\",\n  \"Statement\": [\n    {\n      \"Effect\": \"Allow\",\n      \"Action\": [\n        \"apigateway:GET\",\n        \"autoscaling:DescribeAutoScalingGroups\",\n        \"cloudfront:GetDistributionConfig\",\n        \"cloudfront:ListDistributions\",\n        \"cloudfront:ListTagsForResource\",\n        \"cloudwatch:DescribeAlarms\",\n        \"cloudwatch:GetMetricData\",\n        \"cloudwatch:GetMetricStatistics\",\n        \"cloudwatch:ListMetrics\",\n        \"directconnect:DescribeConnections\",\n        \"dynamodb:DescribeTable\",\n        \"dynamodb:ListTables\",\n        \"dynamodb:ListTagsOfResource\",\n        \"ec2:DescribeInstances\",\n        \"ec2:DescribeInstanceStatus\",\n        \"ec2:DescribeRegions\",\n        \"ec2:DescribeReservedInstances\",\n        \"ec2:DescribeReservedInstancesModifications\",\n        \"ec2:DescribeTags\",\n        \"ec2:DescribeVolumes\",\n        \"ecs:DescribeClusters\",\n        \"ecs:DescribeServices\",\n        \"ecs:DescribeTasks\",\n        \"ecs:ListClusters\",\n        \"ecs:ListServices\",\n        \"ecs:ListTagsForResource\",\n        \"ecs:ListTaskDefinitions\",\n        \"ecs:ListTasks\",\n        \"elasticache:DescribeCacheClusters\",\n        \"elasticloadbalancing:DescribeLoadBalancerAttributes\",\n        \"elasticloadbalancing:DescribeLoadBalancers\",\n        \"elasticloadbalancing:DescribeTags\",\n        \"elasticloadbalancing:DescribeTargetGroups\",\n        \"elasticmapreduce:DescribeCluster\",\n        \"elasticmapreduce:ListClusters\",\n        \"es:DescribeElasticsearchDomain\",\n        \"es:ListDomainNames\",\n        \"kinesis:DescribeStream\",\n        \"kinesis:ListShards\",\n        \"kinesis:ListStreams\",\n        \"kinesis:ListTagsForStream\",\n        \"lambda:GetAlias\",\n        \"lambda:ListFunctions\",\n        \"lambda:ListTags\",\n        \"logs:DeleteSubscriptionFilter\",\n        \"logs:DescribeLogGroups\",\n        \"logs:DescribeSubscriptionFilters\",\n        \"logs:PutSubscriptionFilter\",\n        \"organizations:DescribeOrganization\",\n        \"rds:DescribeDBClusters\",\n        \"rds:DescribeDBInstances\",\n        \"rds:ListTagsForResource\",\n        \"redshift:DescribeClusters\",\n        \"redshift:DescribeLoggingStatus\",\n        \"s3:GetBucketLocation\",\n        \"s3:GetBucketLogging\",\n        \"s3:GetBucketNotification\",\n        \"s3:GetBucketTagging\",\n        \"s3:ListAllMyBuckets\",\n        \"s3:ListBucket\",\n        \"s3:PutBucketNotification\",\n        \"sqs:GetQueueAttributes\",\n        \"sqs:ListQueues\",\n        \"sqs:ListQueueTags\",\n        \"states:ListStateMachines\",\n        \"tag:GetResources\",\n        \"workspaces:DescribeWorkspaces\"\n      ],\n      \"Resource\": \"*\"\n    }\n  ]\n}\n`),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = iam.NewRolePolicyAttachment(ctx, \"splunkRolePolicyAttach\", \u0026iam.RolePolicyAttachmentArgs{\n\t\t\tRole:      awsSplunkRole.Name,\n\t\t\tPolicyArn: awsSplunkPolicy.Arn,\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = aws.NewIntegration(ctx, \"awsMyteam\", \u0026aws.IntegrationArgs{\n\t\t\tEnabled:       pulumi.Bool(true),\n\t\t\tIntegrationId: awsMyteamExtern.ID(),\n\t\t\tExternalId:    awsMyteamExtern.ExternalId,\n\t\t\tRoleArn:       awsSplunkRole.Arn,\n\t\t\tRegions: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"us-east-1\"),\n\t\t\t},\n\t\t\tPollRate:         pulumi.Int(300),\n\t\t\tImportCloudWatch: pulumi.Bool(true),\n\t\t\tEnableAwsUsage:   pulumi.Bool(true),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.signalfx.aws.ExternalIntegration;\nimport com.pulumi.aws.iam.IamFunctions;\nimport com.pulumi.aws.iam.inputs.GetPolicyDocumentArgs;\nimport com.pulumi.aws.iam.Role;\nimport com.pulumi.aws.iam.RoleArgs;\nimport com.pulumi.aws.iam.Policy;\nimport com.pulumi.aws.iam.PolicyArgs;\nimport com.pulumi.aws.iam.RolePolicyAttachment;\nimport com.pulumi.aws.iam.RolePolicyAttachmentArgs;\nimport com.pulumi.signalfx.aws.Integration;\nimport com.pulumi.signalfx.aws.IntegrationArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var awsMyteamExtern = new ExternalIntegration(\"awsMyteamExtern\");\n\n        final var signalfxAssumePolicy = IamFunctions.getPolicyDocument(GetPolicyDocumentArgs.builder()\n            .statements(GetPolicyDocumentStatementArgs.builder()\n                .actions(\"sts:AssumeRole\")\n                .principals(GetPolicyDocumentStatementPrincipalArgs.builder()\n                    .type(\"AWS\")\n                    .identifiers(awsMyteamExtern.signalfxAwsAccount())\n                    .build())\n                .conditions(GetPolicyDocumentStatementConditionArgs.builder()\n                    .test(\"StringEquals\")\n                    .variable(\"sts:ExternalId\")\n                    .values(awsMyteamExtern.externalId())\n                    .build())\n                .build())\n            .build());\n\n        var awsSplunkRole = new Role(\"awsSplunkRole\", RoleArgs.builder()        \n            .description(\"Splunk Observability Cloud integration to read out data and send it to signalfxs aws account\")\n            .assumeRolePolicy(signalfxAssumePolicy.applyValue(getPolicyDocumentResult -\u003e getPolicyDocumentResult).applyValue(signalfxAssumePolicy -\u003e signalfxAssumePolicy.applyValue(getPolicyDocumentResult -\u003e getPolicyDocumentResult.json())))\n            .build());\n\n        var awsSplunkPolicy = new Policy(\"awsSplunkPolicy\", PolicyArgs.builder()        \n            .description(\"AWS permissions required by the Splunk Observability Cloud\")\n            .policy(\"\"\"\n{\n  \"Version\": \"2012-10-17\",\n  \"Statement\": [\n    {\n      \"Effect\": \"Allow\",\n      \"Action\": [\n        \"apigateway:GET\",\n        \"autoscaling:DescribeAutoScalingGroups\",\n        \"cloudfront:GetDistributionConfig\",\n        \"cloudfront:ListDistributions\",\n        \"cloudfront:ListTagsForResource\",\n        \"cloudwatch:DescribeAlarms\",\n        \"cloudwatch:GetMetricData\",\n        \"cloudwatch:GetMetricStatistics\",\n        \"cloudwatch:ListMetrics\",\n        \"directconnect:DescribeConnections\",\n        \"dynamodb:DescribeTable\",\n        \"dynamodb:ListTables\",\n        \"dynamodb:ListTagsOfResource\",\n        \"ec2:DescribeInstances\",\n        \"ec2:DescribeInstanceStatus\",\n        \"ec2:DescribeRegions\",\n        \"ec2:DescribeReservedInstances\",\n        \"ec2:DescribeReservedInstancesModifications\",\n        \"ec2:DescribeTags\",\n        \"ec2:DescribeVolumes\",\n        \"ecs:DescribeClusters\",\n        \"ecs:DescribeServices\",\n        \"ecs:DescribeTasks\",\n        \"ecs:ListClusters\",\n        \"ecs:ListServices\",\n        \"ecs:ListTagsForResource\",\n        \"ecs:ListTaskDefinitions\",\n        \"ecs:ListTasks\",\n        \"elasticache:DescribeCacheClusters\",\n        \"elasticloadbalancing:DescribeLoadBalancerAttributes\",\n        \"elasticloadbalancing:DescribeLoadBalancers\",\n        \"elasticloadbalancing:DescribeTags\",\n        \"elasticloadbalancing:DescribeTargetGroups\",\n        \"elasticmapreduce:DescribeCluster\",\n        \"elasticmapreduce:ListClusters\",\n        \"es:DescribeElasticsearchDomain\",\n        \"es:ListDomainNames\",\n        \"kinesis:DescribeStream\",\n        \"kinesis:ListShards\",\n        \"kinesis:ListStreams\",\n        \"kinesis:ListTagsForStream\",\n        \"lambda:GetAlias\",\n        \"lambda:ListFunctions\",\n        \"lambda:ListTags\",\n        \"logs:DeleteSubscriptionFilter\",\n        \"logs:DescribeLogGroups\",\n        \"logs:DescribeSubscriptionFilters\",\n        \"logs:PutSubscriptionFilter\",\n        \"organizations:DescribeOrganization\",\n        \"rds:DescribeDBClusters\",\n        \"rds:DescribeDBInstances\",\n        \"rds:ListTagsForResource\",\n        \"redshift:DescribeClusters\",\n        \"redshift:DescribeLoggingStatus\",\n        \"s3:GetBucketLocation\",\n        \"s3:GetBucketLogging\",\n        \"s3:GetBucketNotification\",\n        \"s3:GetBucketTagging\",\n        \"s3:ListAllMyBuckets\",\n        \"s3:ListBucket\",\n        \"s3:PutBucketNotification\",\n        \"sqs:GetQueueAttributes\",\n        \"sqs:ListQueues\",\n        \"sqs:ListQueueTags\",\n        \"states:ListStateMachines\",\n        \"tag:GetResources\",\n        \"workspaces:DescribeWorkspaces\"\n      ],\n      \"Resource\": \"*\"\n    }\n  ]\n}\n            \"\"\")\n            .build());\n\n        var splunkRolePolicyAttach = new RolePolicyAttachment(\"splunkRolePolicyAttach\", RolePolicyAttachmentArgs.builder()        \n            .role(awsSplunkRole.name())\n            .policyArn(awsSplunkPolicy.arn())\n            .build());\n\n        var awsMyteam = new Integration(\"awsMyteam\", IntegrationArgs.builder()        \n            .enabled(true)\n            .integrationId(awsMyteamExtern.id())\n            .externalId(awsMyteamExtern.externalId())\n            .roleArn(awsSplunkRole.arn())\n            .regions(\"us-east-1\")\n            .pollRate(300)\n            .importCloudWatch(true)\n            .enableAwsUsage(true)\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  awsMyteamExtern:\n    type: signalfx:aws:ExternalIntegration\n  awsSplunkRole:\n    type: aws:iam:Role\n    properties:\n      description: Splunk Observability Cloud integration to read out data and send it to signalfxs aws account\n      assumeRolePolicy: ${signalfxAssumePolicy.json}\n  awsSplunkPolicy:\n    type: aws:iam:Policy\n    properties:\n      description: AWS permissions required by the Splunk Observability Cloud\n      policy: |\n        {\n          \"Version\": \"2012-10-17\",\n          \"Statement\": [\n            {\n              \"Effect\": \"Allow\",\n              \"Action\": [\n                \"apigateway:GET\",\n                \"autoscaling:DescribeAutoScalingGroups\",\n                \"cloudfront:GetDistributionConfig\",\n                \"cloudfront:ListDistributions\",\n                \"cloudfront:ListTagsForResource\",\n                \"cloudwatch:DescribeAlarms\",\n                \"cloudwatch:GetMetricData\",\n                \"cloudwatch:GetMetricStatistics\",\n                \"cloudwatch:ListMetrics\",\n                \"directconnect:DescribeConnections\",\n                \"dynamodb:DescribeTable\",\n                \"dynamodb:ListTables\",\n                \"dynamodb:ListTagsOfResource\",\n                \"ec2:DescribeInstances\",\n                \"ec2:DescribeInstanceStatus\",\n                \"ec2:DescribeRegions\",\n                \"ec2:DescribeReservedInstances\",\n                \"ec2:DescribeReservedInstancesModifications\",\n                \"ec2:DescribeTags\",\n                \"ec2:DescribeVolumes\",\n                \"ecs:DescribeClusters\",\n                \"ecs:DescribeServices\",\n                \"ecs:DescribeTasks\",\n                \"ecs:ListClusters\",\n                \"ecs:ListServices\",\n                \"ecs:ListTagsForResource\",\n                \"ecs:ListTaskDefinitions\",\n                \"ecs:ListTasks\",\n                \"elasticache:DescribeCacheClusters\",\n                \"elasticloadbalancing:DescribeLoadBalancerAttributes\",\n                \"elasticloadbalancing:DescribeLoadBalancers\",\n                \"elasticloadbalancing:DescribeTags\",\n                \"elasticloadbalancing:DescribeTargetGroups\",\n                \"elasticmapreduce:DescribeCluster\",\n                \"elasticmapreduce:ListClusters\",\n                \"es:DescribeElasticsearchDomain\",\n                \"es:ListDomainNames\",\n                \"kinesis:DescribeStream\",\n                \"kinesis:ListShards\",\n                \"kinesis:ListStreams\",\n                \"kinesis:ListTagsForStream\",\n                \"lambda:GetAlias\",\n                \"lambda:ListFunctions\",\n                \"lambda:ListTags\",\n                \"logs:DeleteSubscriptionFilter\",\n                \"logs:DescribeLogGroups\",\n                \"logs:DescribeSubscriptionFilters\",\n                \"logs:PutSubscriptionFilter\",\n                \"organizations:DescribeOrganization\",\n                \"rds:DescribeDBClusters\",\n                \"rds:DescribeDBInstances\",\n                \"rds:ListTagsForResource\",\n                \"redshift:DescribeClusters\",\n                \"redshift:DescribeLoggingStatus\",\n                \"s3:GetBucketLocation\",\n                \"s3:GetBucketLogging\",\n                \"s3:GetBucketNotification\",\n                \"s3:GetBucketTagging\",\n                \"s3:ListAllMyBuckets\",\n                \"s3:ListBucket\",\n                \"s3:PutBucketNotification\",\n                \"sqs:GetQueueAttributes\",\n                \"sqs:ListQueues\",\n                \"sqs:ListQueueTags\",\n                \"states:ListStateMachines\",\n                \"tag:GetResources\",\n                \"workspaces:DescribeWorkspaces\"\n              ],\n              \"Resource\": \"*\"\n            }\n          ]\n        }\n  splunkRolePolicyAttach:\n    type: aws:iam:RolePolicyAttachment\n    properties:\n      role: ${awsSplunkRole.name}\n      policyArn: ${awsSplunkPolicy.arn}\n  awsMyteam:\n    type: signalfx:aws:Integration\n    properties:\n      enabled: true\n      integrationId: ${awsMyteamExtern.id}\n      externalId: ${awsMyteamExtern.externalId}\n      roleArn: ${awsSplunkRole.arn}\n      # token = \"abc123\"\n      #   # key = \"abc123\"\n      regions:\n        - us-east-1\n      pollRate: 300\n      importCloudWatch: true\n      enableAwsUsage: true\nvariables:\n  signalfxAssumePolicy:\n    fn::invoke:\n      Function: aws:iam:getPolicyDocument\n      Arguments:\n        statements:\n          - actions:\n              - sts:AssumeRole\n            principals:\n              - type: AWS\n                identifiers:\n                  - ${awsMyteamExtern.signalfxAwsAccount}\n            conditions:\n              - test: StringEquals\n                variable: sts:ExternalId\n                values:\n                  - ${awsMyteamExtern.externalId}\n```\n\n## Arguments\n\n* `name` - (Required) The name of this integration\n\n## Attributes\n\nIn addition to all arguments above, the following attributes are exported:\n\n* `id` - The ID of this integration, used with `signalfx.aws.Integration`\n* `external_id` - The external ID to use with your IAM role and with `signalfx.aws.Integration`.\n* `signalfx_aws_account` - The AWS Account ARN to use with your policies/roles, provided by Splunk Observability Cloud.\n",
            "properties": {
                "externalId": {
                    "type": "string",
                    "description": "The AWS external ID generated by Splunk Observability to use with an AWS integration.\n",
                    "secret": true
                },
                "name": {
                    "type": "string",
                    "description": "Name of the integration\n"
                },
                "signalfxAwsAccount": {
                    "type": "string",
                    "description": "The Splunk Observability AWS account ID to use with an AWS role.\n",
                    "secret": true
                }
            },
            "required": [
                "externalId",
                "name",
                "signalfxAwsAccount"
            ],
            "inputProperties": {
                "name": {
                    "type": "string",
                    "description": "Name of the integration\n",
                    "willReplaceOnChanges": true
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering ExternalIntegration resources.\n",
                "properties": {
                    "externalId": {
                        "type": "string",
                        "description": "The AWS external ID generated by Splunk Observability to use with an AWS integration.\n",
                        "secret": true
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the integration\n",
                        "willReplaceOnChanges": true
                    },
                    "signalfxAwsAccount": {
                        "type": "string",
                        "description": "The Splunk Observability AWS account ID to use with an AWS role.\n",
                        "secret": true
                    }
                },
                "type": "object"
            }
        },
        "signalfx:aws/integration:Integration": {
            "description": "AWS CloudWatch integrations for Splunk Observability Cloud. For help with this integration see [Monitoring Amazon Web Services](https://docs.splunk.com/observability/en/gdi/get-data-in/connect/aws/get-awstoc.html).\n\nThis resource implements a part of a workflow. Use it with one of either `signalfx.aws.ExternalIntegration` or `signalfx.aws.TokenIntegration`.\n\n\u003e **NOTE** When managing integrations, use a session token of an administrator to authenticate the Splunk Observability provider. See [Operations that require a session token for an administrator](https://dev.splunk.com/observability/docs/administration/authtokens#Operations-that-require-a-session-token-for-an-administrator).\n\n## Example\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as aws from \"@pulumi/aws\";\nimport * as signalfx from \"@pulumi/signalfx\";\n\n// This resource returns an account id in `external_id`…\nconst awsMyteamExternal = new signalfx.aws.ExternalIntegration(\"awsMyteamExternal\", {});\n// Make yourself an AWS IAM role here, use `signalfx_aws_external_integration.aws_myteam_external.external_id`\nconst awsSfxRole = new aws.iam.Role(\"awsSfxRole\", {});\n// Stuff here that uses the external and account ID\nconst awsMyteam = new signalfx.aws.Integration(\"awsMyteam\", {\n    enabled: true,\n    integrationId: awsMyteamExternal.id,\n    externalId: awsMyteamExternal.externalId,\n    roleArn: awsSfxRole.arn,\n    regions: [\"us-east-1\"],\n    pollRate: 300,\n    importCloudWatch: true,\n    enableAwsUsage: true,\n    customNamespaceSyncRules: [{\n        defaultAction: \"Exclude\",\n        filterAction: \"Include\",\n        filterSource: \"filter('code', '200')\",\n        namespace: \"my-custom-namespace\",\n    }],\n    namespaceSyncRules: [{\n        defaultAction: \"Exclude\",\n        filterAction: \"Include\",\n        filterSource: \"filter('code', '200')\",\n        namespace: \"AWS/EC2\",\n    }],\n    metricStatsToSyncs: [{\n        namespace: \"AWS/EC2\",\n        metric: \"NetworkPacketsIn\",\n        stats: [\"upper\"],\n    }],\n});\n```\n```python\nimport pulumi\nimport pulumi_aws as aws\nimport pulumi_signalfx as signalfx\n\n# This resource returns an account id in `external_id`…\naws_myteam_external = signalfx.aws.ExternalIntegration(\"awsMyteamExternal\")\n# Make yourself an AWS IAM role here, use `signalfx_aws_external_integration.aws_myteam_external.external_id`\naws_sfx_role = aws.iam.Role(\"awsSfxRole\")\n# Stuff here that uses the external and account ID\naws_myteam = signalfx.aws.Integration(\"awsMyteam\",\n    enabled=True,\n    integration_id=aws_myteam_external.id,\n    external_id=aws_myteam_external.external_id,\n    role_arn=aws_sfx_role.arn,\n    regions=[\"us-east-1\"],\n    poll_rate=300,\n    import_cloud_watch=True,\n    enable_aws_usage=True,\n    custom_namespace_sync_rules=[signalfx.aws.IntegrationCustomNamespaceSyncRuleArgs(\n        default_action=\"Exclude\",\n        filter_action=\"Include\",\n        filter_source=\"filter('code', '200')\",\n        namespace=\"my-custom-namespace\",\n    )],\n    namespace_sync_rules=[signalfx.aws.IntegrationNamespaceSyncRuleArgs(\n        default_action=\"Exclude\",\n        filter_action=\"Include\",\n        filter_source=\"filter('code', '200')\",\n        namespace=\"AWS/EC2\",\n    )],\n    metric_stats_to_syncs=[signalfx.aws.IntegrationMetricStatsToSyncArgs(\n        namespace=\"AWS/EC2\",\n        metric=\"NetworkPacketsIn\",\n        stats=[\"upper\"],\n    )])\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Aws = Pulumi.Aws;\nusing SignalFx = Pulumi.SignalFx;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    // This resource returns an account id in `external_id`…\n    var awsMyteamExternal = new SignalFx.Aws.ExternalIntegration(\"awsMyteamExternal\");\n\n    // Make yourself an AWS IAM role here, use `signalfx_aws_external_integration.aws_myteam_external.external_id`\n    var awsSfxRole = new Aws.Iam.Role(\"awsSfxRole\");\n\n    // Stuff here that uses the external and account ID\n    var awsMyteam = new SignalFx.Aws.Integration(\"awsMyteam\", new()\n    {\n        Enabled = true,\n        IntegrationId = awsMyteamExternal.Id,\n        ExternalId = awsMyteamExternal.ExternalId,\n        RoleArn = awsSfxRole.Arn,\n        Regions = new[]\n        {\n            \"us-east-1\",\n        },\n        PollRate = 300,\n        ImportCloudWatch = true,\n        EnableAwsUsage = true,\n        CustomNamespaceSyncRules = new[]\n        {\n            new SignalFx.Aws.Inputs.IntegrationCustomNamespaceSyncRuleArgs\n            {\n                DefaultAction = \"Exclude\",\n                FilterAction = \"Include\",\n                FilterSource = \"filter('code', '200')\",\n                Namespace = \"my-custom-namespace\",\n            },\n        },\n        NamespaceSyncRules = new[]\n        {\n            new SignalFx.Aws.Inputs.IntegrationNamespaceSyncRuleArgs\n            {\n                DefaultAction = \"Exclude\",\n                FilterAction = \"Include\",\n                FilterSource = \"filter('code', '200')\",\n                Namespace = \"AWS/EC2\",\n            },\n        },\n        MetricStatsToSyncs = new[]\n        {\n            new SignalFx.Aws.Inputs.IntegrationMetricStatsToSyncArgs\n            {\n                Namespace = \"AWS/EC2\",\n                Metric = \"NetworkPacketsIn\",\n                Stats = new[]\n                {\n                    \"upper\",\n                },\n            },\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-aws/sdk/v4/go/aws/iam\"\n\t\"github.com/pulumi/pulumi-signalfx/sdk/v7/go/signalfx/aws\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tawsMyteamExternal, err := aws.NewExternalIntegration(ctx, \"awsMyteamExternal\", nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tawsSfxRole, err := iam.NewRole(ctx, \"awsSfxRole\", nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = aws.NewIntegration(ctx, \"awsMyteam\", \u0026aws.IntegrationArgs{\n\t\t\tEnabled:       pulumi.Bool(true),\n\t\t\tIntegrationId: awsMyteamExternal.ID(),\n\t\t\tExternalId:    awsMyteamExternal.ExternalId,\n\t\t\tRoleArn:       awsSfxRole.Arn,\n\t\t\tRegions: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"us-east-1\"),\n\t\t\t},\n\t\t\tPollRate:         pulumi.Int(300),\n\t\t\tImportCloudWatch: pulumi.Bool(true),\n\t\t\tEnableAwsUsage:   pulumi.Bool(true),\n\t\t\tCustomNamespaceSyncRules: aws.IntegrationCustomNamespaceSyncRuleArray{\n\t\t\t\t\u0026aws.IntegrationCustomNamespaceSyncRuleArgs{\n\t\t\t\t\tDefaultAction: pulumi.String(\"Exclude\"),\n\t\t\t\t\tFilterAction:  pulumi.String(\"Include\"),\n\t\t\t\t\tFilterSource:  pulumi.String(\"filter('code', '200')\"),\n\t\t\t\t\tNamespace:     pulumi.String(\"my-custom-namespace\"),\n\t\t\t\t},\n\t\t\t},\n\t\t\tNamespaceSyncRules: aws.IntegrationNamespaceSyncRuleArray{\n\t\t\t\t\u0026aws.IntegrationNamespaceSyncRuleArgs{\n\t\t\t\t\tDefaultAction: pulumi.String(\"Exclude\"),\n\t\t\t\t\tFilterAction:  pulumi.String(\"Include\"),\n\t\t\t\t\tFilterSource:  pulumi.String(\"filter('code', '200')\"),\n\t\t\t\t\tNamespace:     pulumi.String(\"AWS/EC2\"),\n\t\t\t\t},\n\t\t\t},\n\t\t\tMetricStatsToSyncs: aws.IntegrationMetricStatsToSyncArray{\n\t\t\t\t\u0026aws.IntegrationMetricStatsToSyncArgs{\n\t\t\t\t\tNamespace: pulumi.String(\"AWS/EC2\"),\n\t\t\t\t\tMetric:    pulumi.String(\"NetworkPacketsIn\"),\n\t\t\t\t\tStats: pulumi.StringArray{\n\t\t\t\t\t\tpulumi.String(\"upper\"),\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.signalfx.aws.ExternalIntegration;\nimport com.pulumi.aws.iam.Role;\nimport com.pulumi.signalfx.aws.Integration;\nimport com.pulumi.signalfx.aws.IntegrationArgs;\nimport com.pulumi.signalfx.aws.inputs.IntegrationCustomNamespaceSyncRuleArgs;\nimport com.pulumi.signalfx.aws.inputs.IntegrationNamespaceSyncRuleArgs;\nimport com.pulumi.signalfx.aws.inputs.IntegrationMetricStatsToSyncArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var awsMyteamExternal = new ExternalIntegration(\"awsMyteamExternal\");\n\n        var awsSfxRole = new Role(\"awsSfxRole\");\n\n        var awsMyteam = new Integration(\"awsMyteam\", IntegrationArgs.builder()        \n            .enabled(true)\n            .integrationId(awsMyteamExternal.id())\n            .externalId(awsMyteamExternal.externalId())\n            .roleArn(awsSfxRole.arn())\n            .regions(\"us-east-1\")\n            .pollRate(300)\n            .importCloudWatch(true)\n            .enableAwsUsage(true)\n            .customNamespaceSyncRules(IntegrationCustomNamespaceSyncRuleArgs.builder()\n                .defaultAction(\"Exclude\")\n                .filterAction(\"Include\")\n                .filterSource(\"filter('code', '200')\")\n                .namespace(\"my-custom-namespace\")\n                .build())\n            .namespaceSyncRules(IntegrationNamespaceSyncRuleArgs.builder()\n                .defaultAction(\"Exclude\")\n                .filterAction(\"Include\")\n                .filterSource(\"filter('code', '200')\")\n                .namespace(\"AWS/EC2\")\n                .build())\n            .metricStatsToSyncs(IntegrationMetricStatsToSyncArgs.builder()\n                .namespace(\"AWS/EC2\")\n                .metric(\"NetworkPacketsIn\")\n                .stats(\"upper\")\n                .build())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  # This resource returns an account id in `external_id`…\n  awsMyteamExternal:\n    type: signalfx:aws:ExternalIntegration\n  # Make yourself an AWS IAM role here, use `signalfx_aws_external_integration.aws_myteam_external.external_id`\n  awsSfxRole:\n    type: aws:iam:Role\n  awsMyteam:\n    type: signalfx:aws:Integration\n    properties:\n      enabled: true\n      integrationId: ${awsMyteamExternal.id}\n      externalId: ${awsMyteamExternal.externalId}\n      roleArn: ${awsSfxRole.arn}\n      regions:\n        - us-east-1\n      pollRate: 300\n      importCloudWatch: true\n      enableAwsUsage: true\n      customNamespaceSyncRules:\n        - defaultAction: Exclude\n          filterAction: Include\n          filterSource: filter('code', '200')\n          namespace: my-custom-namespace\n      namespaceSyncRules:\n        - defaultAction: Exclude\n          filterAction: Include\n          filterSource: filter('code', '200')\n          namespace: AWS/EC2\n      metricStatsToSyncs:\n        - namespace: AWS/EC2\n          metric: NetworkPacketsIn\n          stats:\n            - upper\n```\n\n## Arguments\n\n* `enable_aws_usage` - (Optional) Flag that controls how Splunk Observability Cloud imports usage metrics from AWS to use with AWS Cost Optimizer. If `true`, Splunk Observability Cloud imports the metrics.\n* `enable_check_large_volume` - (Optional) Controls how Splunk Observability Cloud checks for large amounts of data for this AWS integration. If `true`, Splunk Observability Cloud monitors the amount of data coming in from the integration.\n* `enable_logs_sync` - (Optional) Enable the AWS logs synchronization. Note that this requires the inclusion of `\"logs:DescribeLogGroups\"`,  `\"logs:DeleteSubscriptionFilter\"`, `\"logs:DescribeSubscriptionFilters\"`, `\"logs:PutSubscriptionFilter\"`, and `\"s3:GetBucketLogging\"`,  `\"s3:GetBucketNotification\"`, `\"s3:PutBucketNotification\"` permissions. Additional permissions may be required to capture logs from specific AWS services.\n* `enabled` - (Required) Whether the integration is enabled.\n* `external_id` - (Required) The `external_id` property from one of a `signalfx.aws.ExternalIntegration` or `signalfx.aws.TokenIntegration`\n* `custom_cloudwatch_namespaces` - (Optional) List of custom AWS CloudWatch namespaces to monitor. Custom namespaces contain custom metrics that you define in AWS; Splunk Observability Cloud imports the metrics so you can monitor them.\n* `custom_namespace_sync_rule` - (Optional) Each element controls the data collected by Splunk Observability Cloud for the specified namespace. Conflicts with the `custom_cloudwatch_namespaces` property.\n  * `default_action` - (Optional) Controls the Splunk Observability Cloud default behavior for processing data from an AWS namespace. Splunk Observability Cloud ignores this property unless you specify the `filter_action` and `filter_source` properties. If you do specify them, use this property to control how Splunk Observability Cloud treats data that doesn't match the filter. The available actions are one of `\"Include\"` or `\"Exclude\"`.\n  * `filter_action` - (Optional) Controls how Splunk Observability Cloud processes data from a custom AWS namespace. The available actions are one of `\"Include\"` or `\"Exclude\"`.\n  * `filter_source` - (Optional) Expression that selects the data that Splunk Observability Cloud should sync for the custom namespace associated with this sync rule. The expression uses the syntax defined for the SignalFlow `filter()` function; it can be any valid SignalFlow filter expression.\n  * `namespace` - (Required) An AWS custom namespace having custom AWS metrics that you want to sync with Splunk Observability Cloud. See the AWS documentation on publishing metrics for more information.\n* `import_cloud_watch` - (Optional) Flag that controls how Splunk Observability Cloud imports Cloud Watch metrics. If true, Splunk Observability Cloud imports Cloud Watch metrics from AWS.\n* `integration_id` - (Required) The id of one of a `signalfx.aws.ExternalIntegration` or `signalfx.aws.TokenIntegration`.\n* `key` - (Optional) If you specify `auth_method = \\\"SecurityToken\\\"` in your request to create an AWS integration object, use this property to specify the key (this is typically equivalent to the `AWS_SECRET_ACCESS_KEY` environment variable).\n* `metric_stats_to_sync` - (Optional) Each element in the array is an object that contains an AWS namespace name, AWS metric name and a list of statistics that Splunk Observability Cloud collects for this metric. If you specify this property, Splunk Observability Cloud retrieves only specified AWS statistics when AWS metric streams are not used. When AWS metric streams are used this property specifies additional extended statistics to collect (please note that AWS metric streams API supports percentile stats only; other stats are ignored). If you don't specify this property, Splunk Observability Cloud retrieves the AWS standard set of statistics.\n  * `metric` - (Required) AWS metric that you want to pick statistics for\n  * `namespace` - (Required) An AWS namespace having AWS metric that you want to pick statistics for\n  * `stats` - (Required) AWS statistics you want to collect\n* `name` - (Required) Name of the integration.\n* `named_token` - (Optional) Name of the org token to be used for data ingestion. If not specified then default access token is used.\n* `namespace_sync_rule` - (Optional) Each element in the array is an object that contains an AWS namespace name and a filter that controls the data that Splunk Observability Cloud collects for the namespace. Conflicts with the `services` property. If you don't specify either property, Splunk Observability Cloud syncs all data in all AWS namespaces.\n  * `default_action` - (Optional) Controls the Splunk Observability Cloud default behavior for processing data from an AWS namespace. Splunk Observability Cloud ignores this property unless you specify the `filter_action` and `filter_source` properties. If you do specify them, use this property to control how Splunk Observability Cloud treats data that doesn't match the filter. The available actions are one of `\"Include\"` or `\"Exclude\"`.\n  * `filter_action` - (Optional) Controls how Splunk Observability Cloud processes data from a custom AWS namespace. The available actions are one of `\"Include\"` or `\"Exclude\"`.\n  * `filter_source` - (Optional) Expression that selects the data that Splunk Observability Cloud should sync for the custom namespace associated with this sync rule. The expression uses the syntax defined for the SignalFlow `filter()` function; it can be any valid SignalFlow filter expression.\n  * `namespace` - (Required) An AWS custom namespace having custom AWS metrics that you want to sync with Splunk Observability Cloud. See `services` field description below for additional information.\n* `poll_rate` - (Optional) AWS poll rate (in seconds). Value between `60` and `600`. Default: `300`.\n* `regions` - (Required) List of AWS regions that Splunk Observability Cloud should monitor. It cannot be empty.\n* `role_arn` - (Optional) Role ARN that you add to an existing AWS integration object. **Note**: Ensure you use the `arn` property of your role, not the id!\n* `services` - (Optional) List of AWS services that you want Splunk Observability Cloud to monitor. Each element is a string designating an AWS service. Can be an empty list to import data for all supported services. Conflicts with `namespace_sync_rule`. See [Amazon Web Services](https://docs.splunk.com/Observability/gdi/get-data-in/integrations.html#amazon-web-services) for a list of valid values.\n* `sync_custom_namespaces_only` - (Optional) Indicates that Splunk Observability Cloud should sync metrics and metadata from custom AWS namespaces only (see the `custom_namespace_sync_rule` above). Defaults to `false`.\n* `token` - (Optional) If you specify `auth_method = \\\"SecurityToken\\\"` in your request to create an AWS integration object, use this property to specify the token (this is typically equivalent to the `AWS_ACCESS_KEY_ID` environment variable).\n* `use_metric_streams_sync` - (Optional) Enable the use of Amazon Cloudwatch Metric Streams for ingesting metrics.\u003cbr\u003e\n  Note that this requires the inclusion of `\"cloudwatch:ListMetricStreams\"`,`\"cloudwatch:GetMetricStream\"`, `\"cloudwatch:PutMetricStream\"`, `\"cloudwatch:DeleteMetricStream\"`, `\"cloudwatch:StartMetricStreams\"`, `\"cloudwatch:StopMetricStreams\"` and `\"iam:PassRole\"` permissions.\u003cbr\u003e\n  Note you need to deploy additional resources on your AWS account to enable CloudWatch metrics streaming. Select one of the [CloudFormation templates](https://docs.splunk.com/Observability/gdi/get-data-in/connect/aws/aws-cloudformation.html) to deploy all the required resources.\n",
            "properties": {
                "authMethod": {
                    "type": "string",
                    "description": "The mechanism used to authenticate with AWS. Use one of `signalfx_aws_external_integration` or\n`signalfx_aws_token_integration` to define this\n"
                },
                "customCloudwatchNamespaces": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of custom AWS CloudWatch namespaces to monitor. Custom namespaces contain custom metrics that you define in AWS;\nSplunk Observability imports the metrics so you can monitor them.\n"
                },
                "customNamespaceSyncRules": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/signalfx:aws/IntegrationCustomNamespaceSyncRule:IntegrationCustomNamespaceSyncRule"
                    },
                    "description": "Each element controls the data collected by Splunk Observability for the specified namespace. If you specify this\nproperty, Splunk Observability ignores values in the \"custom_cloudwatch_namespaces\" property.\n"
                },
                "enableAwsUsage": {
                    "type": "boolean",
                    "description": "Flag that controls how Splunk Observability imports usage metrics from AWS to use with AWS Cost Optimizer. If `true`,\nSplunk Observability imports the metrics.\n"
                },
                "enableCheckLargeVolume": {
                    "type": "boolean",
                    "description": "Controls how Splunk Observability checks for large amounts of data for this AWS integration. If true, Splunk\nObservability monitors the amount of data coming in from the integration.\n"
                },
                "enableLogsSync": {
                    "type": "boolean",
                    "description": "Enables AWS logs synchronization.\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "Whether the integration is enabled or not\n"
                },
                "externalId": {
                    "type": "string",
                    "description": "Used with `signalfx_aws_external_integration`. Use this property to specify the external id.\n",
                    "secret": true
                },
                "importCloudWatch": {
                    "type": "boolean",
                    "description": "Flag that controls how Splunk Observability imports Cloud Watch metrics. If true, Splunk Observability imports Cloud\nWatch metrics from AWS.\n"
                },
                "integrationId": {
                    "type": "string",
                    "description": "The ID of this integration\n"
                },
                "key": {
                    "type": "string",
                    "description": "Used with `signalfx_aws_token_integration`. Use this property to specify the token.\n",
                    "secret": true
                },
                "metricStatsToSyncs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/signalfx:aws/IntegrationMetricStatsToSync:IntegrationMetricStatsToSync"
                    },
                    "description": "Each element in the array is an object that contains an AWS namespace name, AWS metric name and a list of statistics\nthat Splunk Observability collects for this metric. If you specify this property, Splunk Observability retrieves only\nspecified AWS statistics. If you don't specify this property, Splunk Observability retrieves the AWS standard set of\nstatistics.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the integration. Please specify the name in `signalfx_aws_external_integration` or\n`signalfx_aws_integration_token`\n"
                },
                "namedToken": {
                    "type": "string",
                    "description": "A named token to use for ingest\n"
                },
                "namespaceSyncRules": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/signalfx:aws/IntegrationNamespaceSyncRule:IntegrationNamespaceSyncRule"
                    },
                    "description": "Each element in the array is an object that contains an AWS namespace name and a filter that controls the data that\nSplunk Observability collects for the namespace. If you specify this property, Splunk Observability ignores the values\nin the AWS CloudWatch Integration Model \"services\" property. If you don't specify either property, Splunk Observability\nsyncs all data in all AWS namespaces.\n"
                },
                "pollRate": {
                    "type": "integer",
                    "description": "AWS poll rate (in seconds). Between `60` and `600`.\n"
                },
                "regions": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of AWS regions that Splunk Observability should monitor.\n"
                },
                "roleArn": {
                    "type": "string",
                    "description": "Used with `signalfx_aws_external_integration`. Use this property to specify the AIM role ARN.\n"
                },
                "services": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of AWS services that you want Splunk Observability to monitor. Each element is a string designating an AWS service.\n"
                },
                "syncCustomNamespacesOnly": {
                    "type": "boolean",
                    "description": "Indicates that Splunk Observability should sync metrics and metadata from custom AWS namespaces only (see the\n`custom_namespace_sync_rule` field for details). Defaults to `false`.\n"
                },
                "token": {
                    "type": "string",
                    "description": "Used with `signalfx_aws_token_integration`. Use this property to specify the token.\n"
                },
                "useMetricStreamsSync": {
                    "type": "boolean",
                    "description": "Enables the use of Cloudwatch Metric Streams for metrics synchronization.\n"
                }
            },
            "required": [
                "authMethod",
                "enableLogsSync",
                "enabled",
                "integrationId",
                "name",
                "regions",
                "useMetricStreamsSync"
            ],
            "inputProperties": {
                "customCloudwatchNamespaces": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of custom AWS CloudWatch namespaces to monitor. Custom namespaces contain custom metrics that you define in AWS;\nSplunk Observability imports the metrics so you can monitor them.\n"
                },
                "customNamespaceSyncRules": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/signalfx:aws/IntegrationCustomNamespaceSyncRule:IntegrationCustomNamespaceSyncRule"
                    },
                    "description": "Each element controls the data collected by Splunk Observability for the specified namespace. If you specify this\nproperty, Splunk Observability ignores values in the \"custom_cloudwatch_namespaces\" property.\n"
                },
                "enableAwsUsage": {
                    "type": "boolean",
                    "description": "Flag that controls how Splunk Observability imports usage metrics from AWS to use with AWS Cost Optimizer. If `true`,\nSplunk Observability imports the metrics.\n"
                },
                "enableCheckLargeVolume": {
                    "type": "boolean",
                    "description": "Controls how Splunk Observability checks for large amounts of data for this AWS integration. If true, Splunk\nObservability monitors the amount of data coming in from the integration.\n"
                },
                "enableLogsSync": {
                    "type": "boolean",
                    "description": "Enables AWS logs synchronization.\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "Whether the integration is enabled or not\n"
                },
                "externalId": {
                    "type": "string",
                    "description": "Used with `signalfx_aws_external_integration`. Use this property to specify the external id.\n",
                    "secret": true
                },
                "importCloudWatch": {
                    "type": "boolean",
                    "description": "Flag that controls how Splunk Observability imports Cloud Watch metrics. If true, Splunk Observability imports Cloud\nWatch metrics from AWS.\n"
                },
                "integrationId": {
                    "type": "string",
                    "description": "The ID of this integration\n",
                    "willReplaceOnChanges": true
                },
                "key": {
                    "type": "string",
                    "description": "Used with `signalfx_aws_token_integration`. Use this property to specify the token.\n",
                    "secret": true
                },
                "metricStatsToSyncs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/signalfx:aws/IntegrationMetricStatsToSync:IntegrationMetricStatsToSync"
                    },
                    "description": "Each element in the array is an object that contains an AWS namespace name, AWS metric name and a list of statistics\nthat Splunk Observability collects for this metric. If you specify this property, Splunk Observability retrieves only\nspecified AWS statistics. If you don't specify this property, Splunk Observability retrieves the AWS standard set of\nstatistics.\n"
                },
                "namedToken": {
                    "type": "string",
                    "description": "A named token to use for ingest\n"
                },
                "namespaceSyncRules": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/signalfx:aws/IntegrationNamespaceSyncRule:IntegrationNamespaceSyncRule"
                    },
                    "description": "Each element in the array is an object that contains an AWS namespace name and a filter that controls the data that\nSplunk Observability collects for the namespace. If you specify this property, Splunk Observability ignores the values\nin the AWS CloudWatch Integration Model \"services\" property. If you don't specify either property, Splunk Observability\nsyncs all data in all AWS namespaces.\n"
                },
                "pollRate": {
                    "type": "integer",
                    "description": "AWS poll rate (in seconds). Between `60` and `600`.\n"
                },
                "regions": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of AWS regions that Splunk Observability should monitor.\n"
                },
                "roleArn": {
                    "type": "string",
                    "description": "Used with `signalfx_aws_external_integration`. Use this property to specify the AIM role ARN.\n"
                },
                "services": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of AWS services that you want Splunk Observability to monitor. Each element is a string designating an AWS service.\n"
                },
                "syncCustomNamespacesOnly": {
                    "type": "boolean",
                    "description": "Indicates that Splunk Observability should sync metrics and metadata from custom AWS namespaces only (see the\n`custom_namespace_sync_rule` field for details). Defaults to `false`.\n"
                },
                "token": {
                    "type": "string",
                    "description": "Used with `signalfx_aws_token_integration`. Use this property to specify the token.\n"
                },
                "useMetricStreamsSync": {
                    "type": "boolean",
                    "description": "Enables the use of Cloudwatch Metric Streams for metrics synchronization.\n"
                }
            },
            "requiredInputs": [
                "enabled",
                "integrationId",
                "regions"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Integration resources.\n",
                "properties": {
                    "authMethod": {
                        "type": "string",
                        "description": "The mechanism used to authenticate with AWS. Use one of `signalfx_aws_external_integration` or\n`signalfx_aws_token_integration` to define this\n"
                    },
                    "customCloudwatchNamespaces": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "List of custom AWS CloudWatch namespaces to monitor. Custom namespaces contain custom metrics that you define in AWS;\nSplunk Observability imports the metrics so you can monitor them.\n"
                    },
                    "customNamespaceSyncRules": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/signalfx:aws/IntegrationCustomNamespaceSyncRule:IntegrationCustomNamespaceSyncRule"
                        },
                        "description": "Each element controls the data collected by Splunk Observability for the specified namespace. If you specify this\nproperty, Splunk Observability ignores values in the \"custom_cloudwatch_namespaces\" property.\n"
                    },
                    "enableAwsUsage": {
                        "type": "boolean",
                        "description": "Flag that controls how Splunk Observability imports usage metrics from AWS to use with AWS Cost Optimizer. If `true`,\nSplunk Observability imports the metrics.\n"
                    },
                    "enableCheckLargeVolume": {
                        "type": "boolean",
                        "description": "Controls how Splunk Observability checks for large amounts of data for this AWS integration. If true, Splunk\nObservability monitors the amount of data coming in from the integration.\n"
                    },
                    "enableLogsSync": {
                        "type": "boolean",
                        "description": "Enables AWS logs synchronization.\n"
                    },
                    "enabled": {
                        "type": "boolean",
                        "description": "Whether the integration is enabled or not\n"
                    },
                    "externalId": {
                        "type": "string",
                        "description": "Used with `signalfx_aws_external_integration`. Use this property to specify the external id.\n",
                        "secret": true
                    },
                    "importCloudWatch": {
                        "type": "boolean",
                        "description": "Flag that controls how Splunk Observability imports Cloud Watch metrics. If true, Splunk Observability imports Cloud\nWatch metrics from AWS.\n"
                    },
                    "integrationId": {
                        "type": "string",
                        "description": "The ID of this integration\n",
                        "willReplaceOnChanges": true
                    },
                    "key": {
                        "type": "string",
                        "description": "Used with `signalfx_aws_token_integration`. Use this property to specify the token.\n",
                        "secret": true
                    },
                    "metricStatsToSyncs": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/signalfx:aws/IntegrationMetricStatsToSync:IntegrationMetricStatsToSync"
                        },
                        "description": "Each element in the array is an object that contains an AWS namespace name, AWS metric name and a list of statistics\nthat Splunk Observability collects for this metric. If you specify this property, Splunk Observability retrieves only\nspecified AWS statistics. If you don't specify this property, Splunk Observability retrieves the AWS standard set of\nstatistics.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the integration. Please specify the name in `signalfx_aws_external_integration` or\n`signalfx_aws_integration_token`\n"
                    },
                    "namedToken": {
                        "type": "string",
                        "description": "A named token to use for ingest\n"
                    },
                    "namespaceSyncRules": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/signalfx:aws/IntegrationNamespaceSyncRule:IntegrationNamespaceSyncRule"
                        },
                        "description": "Each element in the array is an object that contains an AWS namespace name and a filter that controls the data that\nSplunk Observability collects for the namespace. If you specify this property, Splunk Observability ignores the values\nin the AWS CloudWatch Integration Model \"services\" property. If you don't specify either property, Splunk Observability\nsyncs all data in all AWS namespaces.\n"
                    },
                    "pollRate": {
                        "type": "integer",
                        "description": "AWS poll rate (in seconds). Between `60` and `600`.\n"
                    },
                    "regions": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "List of AWS regions that Splunk Observability should monitor.\n"
                    },
                    "roleArn": {
                        "type": "string",
                        "description": "Used with `signalfx_aws_external_integration`. Use this property to specify the AIM role ARN.\n"
                    },
                    "services": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "List of AWS services that you want Splunk Observability to monitor. Each element is a string designating an AWS service.\n"
                    },
                    "syncCustomNamespacesOnly": {
                        "type": "boolean",
                        "description": "Indicates that Splunk Observability should sync metrics and metadata from custom AWS namespaces only (see the\n`custom_namespace_sync_rule` field for details). Defaults to `false`.\n"
                    },
                    "token": {
                        "type": "string",
                        "description": "Used with `signalfx_aws_token_integration`. Use this property to specify the token.\n"
                    },
                    "useMetricStreamsSync": {
                        "type": "boolean",
                        "description": "Enables the use of Cloudwatch Metric Streams for metrics synchronization.\n"
                    }
                },
                "type": "object"
            }
        },
        "signalfx:aws/tokenIntegration:TokenIntegration": {
            "description": "Splunk Observability AWS CloudWatch integrations using security tokens. For help with this integration see [Connect to AWS CloudWatch](https://docs.signalfx.com/en/latest/integrations/amazon-web-services.html#connect-to-aws).\n\n\u003e **NOTE** When managing integrations, use a session token of an administrator to authenticate the Splunk Observabilit Cloud provider. See [Operations that require a session token for an administrator](https://dev.splunk.com/observability/docs/administration/authtokens#Operations-that-require-a-session-token-for-an-administrator).\n\n\u003e **WARNING** This resource implements a part of a workflow. You must use it with `signalfx.aws.Integration`.\n\n## Example\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as aws from \"@pulumi/aws\";\nimport * as signalfx from \"@pulumi/signalfx\";\n\nconst awsMyteamToken = new signalfx.aws.TokenIntegration(\"awsMyteamToken\", {});\n// Make yourself an AWS IAM role here\nconst awsSfxRole = new aws.iam.Role(\"awsSfxRole\", {});\n// Stuff here that uses the external and account ID\nconst awsMyteam = new signalfx.aws.Integration(\"awsMyteam\", {\n    enabled: true,\n    integrationId: awsMyteamToken.id,\n    token: \"put_your_token_here\",\n    key: \"put_your_key_here\",\n    regions: [\"us-east-1\"],\n    pollRate: 300,\n    importCloudWatch: true,\n    enableAwsUsage: true,\n    customNamespaceSyncRules: [{\n        defaultAction: \"Exclude\",\n        filterAction: \"Include\",\n        filterSource: \"filter('code', '200')\",\n        namespace: \"my-custom-namespace\",\n    }],\n    namespaceSyncRules: [{\n        defaultAction: \"Exclude\",\n        filterAction: \"Include\",\n        filterSource: \"filter('code', '200')\",\n        namespace: \"AWS/EC2\",\n    }],\n});\n```\n```python\nimport pulumi\nimport pulumi_aws as aws\nimport pulumi_signalfx as signalfx\n\naws_myteam_token = signalfx.aws.TokenIntegration(\"awsMyteamToken\")\n# Make yourself an AWS IAM role here\naws_sfx_role = aws.iam.Role(\"awsSfxRole\")\n# Stuff here that uses the external and account ID\naws_myteam = signalfx.aws.Integration(\"awsMyteam\",\n    enabled=True,\n    integration_id=aws_myteam_token.id,\n    token=\"put_your_token_here\",\n    key=\"put_your_key_here\",\n    regions=[\"us-east-1\"],\n    poll_rate=300,\n    import_cloud_watch=True,\n    enable_aws_usage=True,\n    custom_namespace_sync_rules=[signalfx.aws.IntegrationCustomNamespaceSyncRuleArgs(\n        default_action=\"Exclude\",\n        filter_action=\"Include\",\n        filter_source=\"filter('code', '200')\",\n        namespace=\"my-custom-namespace\",\n    )],\n    namespace_sync_rules=[signalfx.aws.IntegrationNamespaceSyncRuleArgs(\n        default_action=\"Exclude\",\n        filter_action=\"Include\",\n        filter_source=\"filter('code', '200')\",\n        namespace=\"AWS/EC2\",\n    )])\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Aws = Pulumi.Aws;\nusing SignalFx = Pulumi.SignalFx;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var awsMyteamToken = new SignalFx.Aws.TokenIntegration(\"awsMyteamToken\");\n\n    // Make yourself an AWS IAM role here\n    var awsSfxRole = new Aws.Iam.Role(\"awsSfxRole\");\n\n    // Stuff here that uses the external and account ID\n    var awsMyteam = new SignalFx.Aws.Integration(\"awsMyteam\", new()\n    {\n        Enabled = true,\n        IntegrationId = awsMyteamToken.Id,\n        Token = \"put_your_token_here\",\n        Key = \"put_your_key_here\",\n        Regions = new[]\n        {\n            \"us-east-1\",\n        },\n        PollRate = 300,\n        ImportCloudWatch = true,\n        EnableAwsUsage = true,\n        CustomNamespaceSyncRules = new[]\n        {\n            new SignalFx.Aws.Inputs.IntegrationCustomNamespaceSyncRuleArgs\n            {\n                DefaultAction = \"Exclude\",\n                FilterAction = \"Include\",\n                FilterSource = \"filter('code', '200')\",\n                Namespace = \"my-custom-namespace\",\n            },\n        },\n        NamespaceSyncRules = new[]\n        {\n            new SignalFx.Aws.Inputs.IntegrationNamespaceSyncRuleArgs\n            {\n                DefaultAction = \"Exclude\",\n                FilterAction = \"Include\",\n                FilterSource = \"filter('code', '200')\",\n                Namespace = \"AWS/EC2\",\n            },\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-aws/sdk/v4/go/aws/iam\"\n\t\"github.com/pulumi/pulumi-signalfx/sdk/v7/go/signalfx/aws\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tawsMyteamToken, err := aws.NewTokenIntegration(ctx, \"awsMyteamToken\", nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = iam.NewRole(ctx, \"awsSfxRole\", nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = aws.NewIntegration(ctx, \"awsMyteam\", \u0026aws.IntegrationArgs{\n\t\t\tEnabled:       pulumi.Bool(true),\n\t\t\tIntegrationId: awsMyteamToken.ID(),\n\t\t\tToken:         pulumi.String(\"put_your_token_here\"),\n\t\t\tKey:           pulumi.String(\"put_your_key_here\"),\n\t\t\tRegions: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"us-east-1\"),\n\t\t\t},\n\t\t\tPollRate:         pulumi.Int(300),\n\t\t\tImportCloudWatch: pulumi.Bool(true),\n\t\t\tEnableAwsUsage:   pulumi.Bool(true),\n\t\t\tCustomNamespaceSyncRules: aws.IntegrationCustomNamespaceSyncRuleArray{\n\t\t\t\t\u0026aws.IntegrationCustomNamespaceSyncRuleArgs{\n\t\t\t\t\tDefaultAction: pulumi.String(\"Exclude\"),\n\t\t\t\t\tFilterAction:  pulumi.String(\"Include\"),\n\t\t\t\t\tFilterSource:  pulumi.String(\"filter('code', '200')\"),\n\t\t\t\t\tNamespace:     pulumi.String(\"my-custom-namespace\"),\n\t\t\t\t},\n\t\t\t},\n\t\t\tNamespaceSyncRules: aws.IntegrationNamespaceSyncRuleArray{\n\t\t\t\t\u0026aws.IntegrationNamespaceSyncRuleArgs{\n\t\t\t\t\tDefaultAction: pulumi.String(\"Exclude\"),\n\t\t\t\t\tFilterAction:  pulumi.String(\"Include\"),\n\t\t\t\t\tFilterSource:  pulumi.String(\"filter('code', '200')\"),\n\t\t\t\t\tNamespace:     pulumi.String(\"AWS/EC2\"),\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.signalfx.aws.TokenIntegration;\nimport com.pulumi.aws.iam.Role;\nimport com.pulumi.signalfx.aws.Integration;\nimport com.pulumi.signalfx.aws.IntegrationArgs;\nimport com.pulumi.signalfx.aws.inputs.IntegrationCustomNamespaceSyncRuleArgs;\nimport com.pulumi.signalfx.aws.inputs.IntegrationNamespaceSyncRuleArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var awsMyteamToken = new TokenIntegration(\"awsMyteamToken\");\n\n        var awsSfxRole = new Role(\"awsSfxRole\");\n\n        var awsMyteam = new Integration(\"awsMyteam\", IntegrationArgs.builder()        \n            .enabled(true)\n            .integrationId(awsMyteamToken.id())\n            .token(\"put_your_token_here\")\n            .key(\"put_your_key_here\")\n            .regions(\"us-east-1\")\n            .pollRate(300)\n            .importCloudWatch(true)\n            .enableAwsUsage(true)\n            .customNamespaceSyncRules(IntegrationCustomNamespaceSyncRuleArgs.builder()\n                .defaultAction(\"Exclude\")\n                .filterAction(\"Include\")\n                .filterSource(\"filter('code', '200')\")\n                .namespace(\"my-custom-namespace\")\n                .build())\n            .namespaceSyncRules(IntegrationNamespaceSyncRuleArgs.builder()\n                .defaultAction(\"Exclude\")\n                .filterAction(\"Include\")\n                .filterSource(\"filter('code', '200')\")\n                .namespace(\"AWS/EC2\")\n                .build())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  awsMyteamToken:\n    type: signalfx:aws:TokenIntegration\n  # Make yourself an AWS IAM role here\n  awsSfxRole:\n    type: aws:iam:Role\n  awsMyteam:\n    type: signalfx:aws:Integration\n    properties:\n      enabled: true\n      integrationId: ${awsMyteamToken.id}\n      token: put_your_token_here\n      key: put_your_key_here\n      regions:\n        - us-east-1\n      pollRate: 300\n      importCloudWatch: true\n      enableAwsUsage: true\n      customNamespaceSyncRules:\n        - defaultAction: Exclude\n          filterAction: Include\n          filterSource: filter('code', '200')\n          namespace: my-custom-namespace\n      namespaceSyncRules:\n        - defaultAction: Exclude\n          filterAction: Include\n          filterSource: filter('code', '200')\n          namespace: AWS/EC2\n```\n\n## Arguments\n\n* `name` - (Required) The name of this integration\n\n## Attributes\n\nIn addition to all arguments above, the following attributes are exported:\n\n* `id` - The ID of the integration to use with `signalfx.aws.Integration`\n* `signalfx_aws_account` - The AWS Account ARN to use with your policies/roles, provided by Splunk Observability Cloud.\n",
            "properties": {
                "name": {
                    "type": "string",
                    "description": "Name of the integration\n"
                },
                "signalfxAwsAccount": {
                    "type": "string",
                    "description": "The Splunk Observability AWS account ID to use with an AWS role.\n",
                    "secret": true
                },
                "tokenId": {
                    "type": "string",
                    "description": "The SignalFx-generated AWS token to use with an AWS integration.\n",
                    "secret": true
                }
            },
            "required": [
                "name",
                "signalfxAwsAccount",
                "tokenId"
            ],
            "inputProperties": {
                "name": {
                    "type": "string",
                    "description": "Name of the integration\n",
                    "willReplaceOnChanges": true
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering TokenIntegration resources.\n",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "Name of the integration\n",
                        "willReplaceOnChanges": true
                    },
                    "signalfxAwsAccount": {
                        "type": "string",
                        "description": "The Splunk Observability AWS account ID to use with an AWS role.\n",
                        "secret": true
                    },
                    "tokenId": {
                        "type": "string",
                        "description": "The SignalFx-generated AWS token to use with an AWS integration.\n",
                        "secret": true
                    }
                },
                "type": "object"
            }
        },
        "signalfx:azure/integration:Integration": {
            "description": "Splunk Observability Cloud Azure integrations. For help with this integration see [Monitoring Microsoft Azure](https://docs.splunk.com/observability/en/gdi/get-data-in/connect/azure/azure.html).\n\n\u003e **NOTE** When managing integrations, use a session token of an administrator to authenticate the Splunk Observability Cloud provider. See [Operations that require a session token for an administrator](https://dev.splunk.com/observability/docs/administration/authtokens#Operations-that-require-a-session-token-for-an-administrator). Otherwise you'll receive a 4xx error.\n\n## Example\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as signalfx from \"@pulumi/signalfx\";\n\nconst azureMyteam = new signalfx.azure.Integration(\"azureMyteam\", {\n    additionalServices: [\n        \"some/service\",\n        \"another/service\",\n    ],\n    appId: \"YYY\",\n    customNamespacesPerServices: [{\n        namespaces: [\n            \"monitoringAgent\",\n            \"customNamespace\",\n        ],\n        service: \"Microsoft.Compute/virtualMachines\",\n    }],\n    enabled: true,\n    environment: \"azure\",\n    pollRate: 300,\n    resourceFilterRules: [\n        {\n            filterSource: \"filter('azure_tag_service', 'payment') and (filter('azure_tag_env', 'prod-us') or filter('azure_tag_env', 'prod-eu'))\",\n        },\n        {\n            filterSource: \"filter('azure_tag_service', 'notification') and (filter('azure_tag_env', 'prod-us') or filter('azure_tag_env', 'prod-eu'))\",\n        },\n    ],\n    secretKey: \"XXX\",\n    services: [\"microsoft.sql/servers/elasticpools\"],\n    subscriptions: [\"sub-guid-here\"],\n    tenantId: \"ZZZ\",\n});\n```\n```python\nimport pulumi\nimport pulumi_signalfx as signalfx\n\nazure_myteam = signalfx.azure.Integration(\"azureMyteam\",\n    additional_services=[\n        \"some/service\",\n        \"another/service\",\n    ],\n    app_id=\"YYY\",\n    custom_namespaces_per_services=[signalfx.azure.IntegrationCustomNamespacesPerServiceArgs(\n        namespaces=[\n            \"monitoringAgent\",\n            \"customNamespace\",\n        ],\n        service=\"Microsoft.Compute/virtualMachines\",\n    )],\n    enabled=True,\n    environment=\"azure\",\n    poll_rate=300,\n    resource_filter_rules=[\n        signalfx.azure.IntegrationResourceFilterRuleArgs(\n            filter_source=\"filter('azure_tag_service', 'payment') and (filter('azure_tag_env', 'prod-us') or filter('azure_tag_env', 'prod-eu'))\",\n        ),\n        signalfx.azure.IntegrationResourceFilterRuleArgs(\n            filter_source=\"filter('azure_tag_service', 'notification') and (filter('azure_tag_env', 'prod-us') or filter('azure_tag_env', 'prod-eu'))\",\n        ),\n    ],\n    secret_key=\"XXX\",\n    services=[\"microsoft.sql/servers/elasticpools\"],\n    subscriptions=[\"sub-guid-here\"],\n    tenant_id=\"ZZZ\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing SignalFx = Pulumi.SignalFx;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var azureMyteam = new SignalFx.Azure.Integration(\"azureMyteam\", new()\n    {\n        AdditionalServices = new[]\n        {\n            \"some/service\",\n            \"another/service\",\n        },\n        AppId = \"YYY\",\n        CustomNamespacesPerServices = new[]\n        {\n            new SignalFx.Azure.Inputs.IntegrationCustomNamespacesPerServiceArgs\n            {\n                Namespaces = new[]\n                {\n                    \"monitoringAgent\",\n                    \"customNamespace\",\n                },\n                Service = \"Microsoft.Compute/virtualMachines\",\n            },\n        },\n        Enabled = true,\n        Environment = \"azure\",\n        PollRate = 300,\n        ResourceFilterRules = new[]\n        {\n            new SignalFx.Azure.Inputs.IntegrationResourceFilterRuleArgs\n            {\n                FilterSource = \"filter('azure_tag_service', 'payment') and (filter('azure_tag_env', 'prod-us') or filter('azure_tag_env', 'prod-eu'))\",\n            },\n            new SignalFx.Azure.Inputs.IntegrationResourceFilterRuleArgs\n            {\n                FilterSource = \"filter('azure_tag_service', 'notification') and (filter('azure_tag_env', 'prod-us') or filter('azure_tag_env', 'prod-eu'))\",\n            },\n        },\n        SecretKey = \"XXX\",\n        Services = new[]\n        {\n            \"microsoft.sql/servers/elasticpools\",\n        },\n        Subscriptions = new[]\n        {\n            \"sub-guid-here\",\n        },\n        TenantId = \"ZZZ\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-signalfx/sdk/v7/go/signalfx/azure\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := azure.NewIntegration(ctx, \"azureMyteam\", \u0026azure.IntegrationArgs{\n\t\t\tAdditionalServices: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"some/service\"),\n\t\t\t\tpulumi.String(\"another/service\"),\n\t\t\t},\n\t\t\tAppId: pulumi.String(\"YYY\"),\n\t\t\tCustomNamespacesPerServices: azure.IntegrationCustomNamespacesPerServiceArray{\n\t\t\t\t\u0026azure.IntegrationCustomNamespacesPerServiceArgs{\n\t\t\t\t\tNamespaces: pulumi.StringArray{\n\t\t\t\t\t\tpulumi.String(\"monitoringAgent\"),\n\t\t\t\t\t\tpulumi.String(\"customNamespace\"),\n\t\t\t\t\t},\n\t\t\t\t\tService: pulumi.String(\"Microsoft.Compute/virtualMachines\"),\n\t\t\t\t},\n\t\t\t},\n\t\t\tEnabled:     pulumi.Bool(true),\n\t\t\tEnvironment: pulumi.String(\"azure\"),\n\t\t\tPollRate:    pulumi.Int(300),\n\t\t\tResourceFilterRules: azure.IntegrationResourceFilterRuleArray{\n\t\t\t\t\u0026azure.IntegrationResourceFilterRuleArgs{\n\t\t\t\t\tFilterSource: pulumi.String(\"filter('azure_tag_service', 'payment') and (filter('azure_tag_env', 'prod-us') or filter('azure_tag_env', 'prod-eu'))\"),\n\t\t\t\t},\n\t\t\t\t\u0026azure.IntegrationResourceFilterRuleArgs{\n\t\t\t\t\tFilterSource: pulumi.String(\"filter('azure_tag_service', 'notification') and (filter('azure_tag_env', 'prod-us') or filter('azure_tag_env', 'prod-eu'))\"),\n\t\t\t\t},\n\t\t\t},\n\t\t\tSecretKey: pulumi.String(\"XXX\"),\n\t\t\tServices: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"microsoft.sql/servers/elasticpools\"),\n\t\t\t},\n\t\t\tSubscriptions: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"sub-guid-here\"),\n\t\t\t},\n\t\t\tTenantId: pulumi.String(\"ZZZ\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.signalfx.azure.Integration;\nimport com.pulumi.signalfx.azure.IntegrationArgs;\nimport com.pulumi.signalfx.azure.inputs.IntegrationCustomNamespacesPerServiceArgs;\nimport com.pulumi.signalfx.azure.inputs.IntegrationResourceFilterRuleArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var azureMyteam = new Integration(\"azureMyteam\", IntegrationArgs.builder()        \n            .additionalServices(            \n                \"some/service\",\n                \"another/service\")\n            .appId(\"YYY\")\n            .customNamespacesPerServices(IntegrationCustomNamespacesPerServiceArgs.builder()\n                .namespaces(                \n                    \"monitoringAgent\",\n                    \"customNamespace\")\n                .service(\"Microsoft.Compute/virtualMachines\")\n                .build())\n            .enabled(true)\n            .environment(\"azure\")\n            .pollRate(300)\n            .resourceFilterRules(            \n                IntegrationResourceFilterRuleArgs.builder()\n                    .filterSource(\"filter('azure_tag_service', 'payment') and (filter('azure_tag_env', 'prod-us') or filter('azure_tag_env', 'prod-eu'))\")\n                    .build(),\n                IntegrationResourceFilterRuleArgs.builder()\n                    .filterSource(\"filter('azure_tag_service', 'notification') and (filter('azure_tag_env', 'prod-us') or filter('azure_tag_env', 'prod-eu'))\")\n                    .build())\n            .secretKey(\"XXX\")\n            .services(\"microsoft.sql/servers/elasticpools\")\n            .subscriptions(\"sub-guid-here\")\n            .tenantId(\"ZZZ\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  azureMyteam:\n    type: signalfx:azure:Integration\n    properties:\n      # Optional\n      additionalServices:\n        - some/service\n        - another/service\n      appId: YYY\n      # Optional\n      customNamespacesPerServices:\n        - namespaces:\n            - monitoringAgent\n            - customNamespace\n          service: Microsoft.Compute/virtualMachines\n      enabled: true\n      environment: azure\n      pollRate: 300\n      resourceFilterRules:\n        - filterSource: filter('azure_tag_service', 'payment') and (filter('azure_tag_env', 'prod-us') or filter('azure_tag_env', 'prod-eu'))\n        - filterSource: filter('azure_tag_service', 'notification') and (filter('azure_tag_env', 'prod-us') or filter('azure_tag_env', 'prod-eu'))\n      secretKey: XXX\n      services:\n        - microsoft.sql/servers/elasticpools\n      subscriptions:\n        - sub-guid-here\n      tenantId: ZZZ\n```\n\n## Arguments\n\n* `app_id` - (Required) Azure application ID for the Splunk Observability Cloud app. To learn how to get this ID, see the topic [Connect to Microsoft Azure](https://docs.splunk.com/observability/en/gdi/get-data-in/connect/azure/azure.html) in the product documentation.\n* `enabled` - (Required) Whether the integration is enabled.\n* `custom_namespaces_per_service` - (Optional) Allows for more fine-grained control of syncing of custom namespaces, should the boolean convenience parameter `sync_guest_os_namespaces` be not enough. The customer may specify a map of services to custom namespaces. If they do so, for each service which is a key in this map, we will attempt to sync metrics from namespaces in the value list in addition to the default namespaces.\n  * `namespaces` - (Required) The additional namespaces.\n  * `service` - (Required) The name of the service.\n* `environment` (Optional) What type of Azure integration this is. The allowed values are `\\\"azure_us_government\\\"` and `\\\"azure\\\"`. Defaults to `\\\"azure\\\"`.\n* `name` - (Required) Name of the integration.\n* `named_token` - (Optional) Name of the org token to be used for data ingestion. If not specified then default access token is used.\n* `poll_rate` - (Optional) Azure poll rate (in seconds). Value between `60` and `600`. Default: `300`.\n* `resource_filter_rules` - (Optional) List of rules for filtering Azure resources by their tags. \n  * `filter_source` - (Required) Expression that selects the data that Splunk Observability Cloud should sync for the resource associated with this sync rule. The expression uses the syntax defined for the SignalFlow `filter()` function. The source of each filter rule must be in the form filter('key', 'value'). You can join multiple filter statements using the and and or operators. Referenced keys are limited to tags and must start with the azure_tag_ prefix.\n* `secret_key` - (Required) Azure secret key that associates the Splunk Observability Cloud app in Azure with the Azure tenant ID. To learn how to get this ID, see the topic [Connect to Microsoft Azure](https://docs.splunk.com/observability/en/gdi/get-data-in/connect/azure/azure.html) in the product documentation.\n* `services` - (Required) List of Microsoft Azure service names for the Azure services you want Splunk Observability Cloud to monitor. Can be an empty list to import data for all supported services. See [Microsoft Azure services](https://docs.splunk.com/Observability/gdi/get-data-in/integrations.html#azure-integrations) for a list of valid values.\n* `subscriptions` - (Required) List of Azure subscriptions that Splunk Observability Cloud should monitor.\n* `sync_guest_os_namespaces` - (Optional) If enabled, Splunk Observability Cloud will try to sync additional namespaces for VMs (including VMs in scale sets): telegraf/mem, telegraf/cpu, azure.vm.windows.guest (these are namespaces recommended by Azure when enabling their Diagnostic Extension). If there are no metrics there, no new datapoints will be ingested. Defaults to false.\n* `import_azure_monitor` - (Optional) If enabled, Splunk Observability Cloud will sync also Azure Monitor data. If disabled, Splunk Observability Cloud will import only metadata. Defaults to true.\n* `tenant_id` (Required) Azure ID of the Azure tenant. To learn how to get this ID, see the topic [Connect to Microsoft Azure](https://docs.splunk.com/observability/en/gdi/get-data-in/connect/azure/azure.html) in the product documentation.\n\n## Attributes\n\nIn a addition to all arguments above, the following attributes are exported:\n\n* `id` - The ID of the integration.\n",
            "properties": {
                "additionalServices": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Additional Azure resource types that you want to sync with Observability Cloud.\n"
                },
                "appId": {
                    "type": "string",
                    "description": "Azure application ID for the Splunk Observability Cloud app.\n",
                    "secret": true
                },
                "customNamespacesPerServices": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/signalfx:azure/IntegrationCustomNamespacesPerService:IntegrationCustomNamespacesPerService"
                    },
                    "description": "Allows for more fine-grained control of syncing of custom namespaces, should the boolean convenience parameter\n`sync_guest_os_namespaces` be not enough. The customer may specify a map of services to custom namespaces. If they do\nso, for each service which is a key in this map, we will attempt to sync metrics from namespaces in the value list in\naddition to the default namespaces.\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "Whether the integration is enabled or not\n"
                },
                "environment": {
                    "type": "string",
                    "description": "what type of Azure integration this is. The allowed values are `\"azure_us_government\"` and `\"azure\"`. Defaults to\n`\"azure\"`\n",
                    "secret": true
                },
                "importAzureMonitor": {
                    "type": "boolean",
                    "description": "If enabled, Splunk Observability Cloud will sync also Azure Monitor data. If disabled, Splunk Observability Cloud will\nimport only metadata. Defaults to true.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the integration\n"
                },
                "namedToken": {
                    "type": "string",
                    "description": "A named token to use for ingest\n"
                },
                "pollRate": {
                    "type": "integer",
                    "description": "Azure poll rate (in seconds). Between `60` and `600`.\n"
                },
                "resourceFilterRules": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/signalfx:azure/IntegrationResourceFilterRule:IntegrationResourceFilterRule"
                    },
                    "description": "List of rules for filtering Azure resources by their tags. The source of each filter rule must be in the form\nfilter('key', 'value'). You can join multiple filter statements using the and and or operators. Referenced keys are\nlimited to tags and must start with the azure_tag_ prefix..\n"
                },
                "secretKey": {
                    "type": "string",
                    "description": "Azure secret key that associates the Splunk Observability Cloud app in Azure with the Azure tenant.\n",
                    "secret": true
                },
                "services": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of Microsoft Azure service names for the Azure services you want Splunk Observability Cloud to monitor. Splunk\nObservability Cloud only supports certain services, and if you specify an unsupported one, you receive an API error.\n"
                },
                "subscriptions": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of Azure subscriptions that Splunk Observability Cloud should monitor.\n"
                },
                "syncGuestOsNamespaces": {
                    "type": "boolean",
                    "description": "If enabled, Splunk Observability Cloud will try to sync additional namespaces for VMs (including VMs in scale sets):\ntelegraf/mem, telegraf/cpu, azure.vm.windows.guest (these are namespaces recommended by Azure when enabling their\nDiagnostic Extension). If there are no metrics there, no new datapoints will be ingested.\n"
                },
                "tenantId": {
                    "type": "string",
                    "description": "Azure ID of the Azure tenant.\n"
                }
            },
            "required": [
                "appId",
                "enabled",
                "name",
                "secretKey",
                "services",
                "subscriptions",
                "tenantId"
            ],
            "inputProperties": {
                "additionalServices": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Additional Azure resource types that you want to sync with Observability Cloud.\n"
                },
                "appId": {
                    "type": "string",
                    "description": "Azure application ID for the Splunk Observability Cloud app.\n",
                    "secret": true
                },
                "customNamespacesPerServices": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/signalfx:azure/IntegrationCustomNamespacesPerService:IntegrationCustomNamespacesPerService"
                    },
                    "description": "Allows for more fine-grained control of syncing of custom namespaces, should the boolean convenience parameter\n`sync_guest_os_namespaces` be not enough. The customer may specify a map of services to custom namespaces. If they do\nso, for each service which is a key in this map, we will attempt to sync metrics from namespaces in the value list in\naddition to the default namespaces.\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "Whether the integration is enabled or not\n"
                },
                "environment": {
                    "type": "string",
                    "description": "what type of Azure integration this is. The allowed values are `\"azure_us_government\"` and `\"azure\"`. Defaults to\n`\"azure\"`\n",
                    "secret": true
                },
                "importAzureMonitor": {
                    "type": "boolean",
                    "description": "If enabled, Splunk Observability Cloud will sync also Azure Monitor data. If disabled, Splunk Observability Cloud will\nimport only metadata. Defaults to true.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the integration\n"
                },
                "namedToken": {
                    "type": "string",
                    "description": "A named token to use for ingest\n",
                    "willReplaceOnChanges": true
                },
                "pollRate": {
                    "type": "integer",
                    "description": "Azure poll rate (in seconds). Between `60` and `600`.\n"
                },
                "resourceFilterRules": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/signalfx:azure/IntegrationResourceFilterRule:IntegrationResourceFilterRule"
                    },
                    "description": "List of rules for filtering Azure resources by their tags. The source of each filter rule must be in the form\nfilter('key', 'value'). You can join multiple filter statements using the and and or operators. Referenced keys are\nlimited to tags and must start with the azure_tag_ prefix..\n"
                },
                "secretKey": {
                    "type": "string",
                    "description": "Azure secret key that associates the Splunk Observability Cloud app in Azure with the Azure tenant.\n",
                    "secret": true
                },
                "services": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of Microsoft Azure service names for the Azure services you want Splunk Observability Cloud to monitor. Splunk\nObservability Cloud only supports certain services, and if you specify an unsupported one, you receive an API error.\n"
                },
                "subscriptions": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of Azure subscriptions that Splunk Observability Cloud should monitor.\n"
                },
                "syncGuestOsNamespaces": {
                    "type": "boolean",
                    "description": "If enabled, Splunk Observability Cloud will try to sync additional namespaces for VMs (including VMs in scale sets):\ntelegraf/mem, telegraf/cpu, azure.vm.windows.guest (these are namespaces recommended by Azure when enabling their\nDiagnostic Extension). If there are no metrics there, no new datapoints will be ingested.\n"
                },
                "tenantId": {
                    "type": "string",
                    "description": "Azure ID of the Azure tenant.\n"
                }
            },
            "requiredInputs": [
                "appId",
                "enabled",
                "secretKey",
                "services",
                "subscriptions",
                "tenantId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Integration resources.\n",
                "properties": {
                    "additionalServices": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Additional Azure resource types that you want to sync with Observability Cloud.\n"
                    },
                    "appId": {
                        "type": "string",
                        "description": "Azure application ID for the Splunk Observability Cloud app.\n",
                        "secret": true
                    },
                    "customNamespacesPerServices": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/signalfx:azure/IntegrationCustomNamespacesPerService:IntegrationCustomNamespacesPerService"
                        },
                        "description": "Allows for more fine-grained control of syncing of custom namespaces, should the boolean convenience parameter\n`sync_guest_os_namespaces` be not enough. The customer may specify a map of services to custom namespaces. If they do\nso, for each service which is a key in this map, we will attempt to sync metrics from namespaces in the value list in\naddition to the default namespaces.\n"
                    },
                    "enabled": {
                        "type": "boolean",
                        "description": "Whether the integration is enabled or not\n"
                    },
                    "environment": {
                        "type": "string",
                        "description": "what type of Azure integration this is. The allowed values are `\"azure_us_government\"` and `\"azure\"`. Defaults to\n`\"azure\"`\n",
                        "secret": true
                    },
                    "importAzureMonitor": {
                        "type": "boolean",
                        "description": "If enabled, Splunk Observability Cloud will sync also Azure Monitor data. If disabled, Splunk Observability Cloud will\nimport only metadata. Defaults to true.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the integration\n"
                    },
                    "namedToken": {
                        "type": "string",
                        "description": "A named token to use for ingest\n",
                        "willReplaceOnChanges": true
                    },
                    "pollRate": {
                        "type": "integer",
                        "description": "Azure poll rate (in seconds). Between `60` and `600`.\n"
                    },
                    "resourceFilterRules": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/signalfx:azure/IntegrationResourceFilterRule:IntegrationResourceFilterRule"
                        },
                        "description": "List of rules for filtering Azure resources by their tags. The source of each filter rule must be in the form\nfilter('key', 'value'). You can join multiple filter statements using the and and or operators. Referenced keys are\nlimited to tags and must start with the azure_tag_ prefix..\n"
                    },
                    "secretKey": {
                        "type": "string",
                        "description": "Azure secret key that associates the Splunk Observability Cloud app in Azure with the Azure tenant.\n",
                        "secret": true
                    },
                    "services": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "List of Microsoft Azure service names for the Azure services you want Splunk Observability Cloud to monitor. Splunk\nObservability Cloud only supports certain services, and if you specify an unsupported one, you receive an API error.\n"
                    },
                    "subscriptions": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "List of Azure subscriptions that Splunk Observability Cloud should monitor.\n"
                    },
                    "syncGuestOsNamespaces": {
                        "type": "boolean",
                        "description": "If enabled, Splunk Observability Cloud will try to sync additional namespaces for VMs (including VMs in scale sets):\ntelegraf/mem, telegraf/cpu, azure.vm.windows.guest (these are namespaces recommended by Azure when enabling their\nDiagnostic Extension). If there are no metrics there, no new datapoints will be ingested.\n"
                    },
                    "tenantId": {
                        "type": "string",
                        "description": "Azure ID of the Azure tenant.\n"
                    }
                },
                "type": "object"
            }
        },
        "signalfx:gcp/integration:Integration": {
            "description": "Splunk Observability Cloud GCP Integration.\n\n\u003e **NOTE** When managing integrations, use a session token of an administrator to authenticate the Splunk  Observability Cloud provider. See [Operations that require a session token for an administrator](https://dev.splunk.com/observability/docs/administration/authtokens#Operations-that-require-a-session-token-for-an-administrator). Otherwise you'll receive a 4xx error.\n\n## Example\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as fs from \"fs\";\nimport * as signalfx from \"@pulumi/signalfx\";\n\nconst gcpMyteam = new signalfx.gcp.Integration(\"gcpMyteam\", {\n    customMetricTypeDomains: [\"istio.io\"],\n    enabled: true,\n    importGcpMetrics: true,\n    pollRate: 300,\n    projectServiceKeys: [\n        {\n            projectId: \"gcp_project_id_1\",\n            projectKey: fs.readFileSync(\"/path/to/gcp_credentials_1.json\", \"utf8\"),\n        },\n        {\n            projectId: \"gcp_project_id_2\",\n            projectKey: fs.readFileSync(\"/path/to/gcp_credentials_2.json\", \"utf8\"),\n        },\n    ],\n    services: [\"compute\"],\n});\n```\n```python\nimport pulumi\nimport pulumi_signalfx as signalfx\n\ngcp_myteam = signalfx.gcp.Integration(\"gcpMyteam\",\n    custom_metric_type_domains=[\"istio.io\"],\n    enabled=True,\n    import_gcp_metrics=True,\n    poll_rate=300,\n    project_service_keys=[\n        signalfx.gcp.IntegrationProjectServiceKeyArgs(\n            project_id=\"gcp_project_id_1\",\n            project_key=(lambda path: open(path).read())(\"/path/to/gcp_credentials_1.json\"),\n        ),\n        signalfx.gcp.IntegrationProjectServiceKeyArgs(\n            project_id=\"gcp_project_id_2\",\n            project_key=(lambda path: open(path).read())(\"/path/to/gcp_credentials_2.json\"),\n        ),\n    ],\n    services=[\"compute\"])\n```\n```csharp\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nusing Pulumi;\nusing SignalFx = Pulumi.SignalFx;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var gcpMyteam = new SignalFx.Gcp.Integration(\"gcpMyteam\", new()\n    {\n        CustomMetricTypeDomains = new[]\n        {\n            \"istio.io\",\n        },\n        Enabled = true,\n        ImportGcpMetrics = true,\n        PollRate = 300,\n        ProjectServiceKeys = new[]\n        {\n            new SignalFx.Gcp.Inputs.IntegrationProjectServiceKeyArgs\n            {\n                ProjectId = \"gcp_project_id_1\",\n                ProjectKey = File.ReadAllText(\"/path/to/gcp_credentials_1.json\"),\n            },\n            new SignalFx.Gcp.Inputs.IntegrationProjectServiceKeyArgs\n            {\n                ProjectId = \"gcp_project_id_2\",\n                ProjectKey = File.ReadAllText(\"/path/to/gcp_credentials_2.json\"),\n            },\n        },\n        Services = new[]\n        {\n            \"compute\",\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"os\"\n\n\t\"github.com/pulumi/pulumi-signalfx/sdk/v7/go/signalfx/gcp\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc readFileOrPanic(path string) pulumi.StringPtrInput {\n\tdata, err := os.ReadFile(path)\n\tif err != nil {\n\t\tpanic(err.Error())\n\t}\n\treturn pulumi.String(string(data))\n}\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := gcp.NewIntegration(ctx, \"gcpMyteam\", \u0026gcp.IntegrationArgs{\n\t\t\tCustomMetricTypeDomains: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"istio.io\"),\n\t\t\t},\n\t\t\tEnabled:          pulumi.Bool(true),\n\t\t\tImportGcpMetrics: pulumi.Bool(true),\n\t\t\tPollRate:         pulumi.Int(300),\n\t\t\tProjectServiceKeys: gcp.IntegrationProjectServiceKeyArray{\n\t\t\t\t\u0026gcp.IntegrationProjectServiceKeyArgs{\n\t\t\t\t\tProjectId:  pulumi.String(\"gcp_project_id_1\"),\n\t\t\t\t\tProjectKey: readFileOrPanic(\"/path/to/gcp_credentials_1.json\"),\n\t\t\t\t},\n\t\t\t\t\u0026gcp.IntegrationProjectServiceKeyArgs{\n\t\t\t\t\tProjectId:  pulumi.String(\"gcp_project_id_2\"),\n\t\t\t\t\tProjectKey: readFileOrPanic(\"/path/to/gcp_credentials_2.json\"),\n\t\t\t\t},\n\t\t\t},\n\t\t\tServices: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"compute\"),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.signalfx.gcp.Integration;\nimport com.pulumi.signalfx.gcp.IntegrationArgs;\nimport com.pulumi.signalfx.gcp.inputs.IntegrationProjectServiceKeyArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var gcpMyteam = new Integration(\"gcpMyteam\", IntegrationArgs.builder()        \n            .customMetricTypeDomains(\"istio.io\")\n            .enabled(true)\n            .importGcpMetrics(true)\n            .pollRate(300)\n            .projectServiceKeys(            \n                IntegrationProjectServiceKeyArgs.builder()\n                    .projectId(\"gcp_project_id_1\")\n                    .projectKey(Files.readString(Paths.get(\"/path/to/gcp_credentials_1.json\")))\n                    .build(),\n                IntegrationProjectServiceKeyArgs.builder()\n                    .projectId(\"gcp_project_id_2\")\n                    .projectKey(Files.readString(Paths.get(\"/path/to/gcp_credentials_2.json\")))\n                    .build())\n            .services(\"compute\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  gcpMyteam:\n    type: signalfx:gcp:Integration\n    properties:\n      customMetricTypeDomains:\n        - istio.io\n      enabled: true\n      importGcpMetrics: true\n      pollRate: 300\n      projectServiceKeys:\n        - projectId: gcp_project_id_1\n          projectKey:\n            fn::readFile: /path/to/gcp_credentials_1.json\n        - projectId: gcp_project_id_2\n          projectKey:\n            fn::readFile: /path/to/gcp_credentials_2.json\n      services:\n        - compute\n```\n\n## Arguments\n\n* `custom_metric_type_domains` - (Optional) List of additional GCP service domain names that Splunk Observability Cloud will monitor. See [Custom Metric Type Domains documentation](https://dev.splunk.com/observability/docs/integrations/gcp_integration_overview/#Custom-metric-type-domains)\n* `enabled` - (Required) Whether the integration is enabled.\n* `import_gcp_metrics` - (Optional) If enabled, Splunk Observability Cloud will sync also Google Cloud Monitoring data. If disabled, Splunk Observability Cloud will import only metadata. Defaults to true.\n* `include_list` - (Optional) [Compute Metadata Include List](https://dev.splunk.com/observability/docs/integrations/gcp_integration_overview/).\n* `name` - (Required) Name of the integration.\n* `named_token` - (Optional) Name of the org token to be used for data ingestion. If not specified then default access token is used.\n* `poll_rate` - (Optional) GCP integration poll rate (in seconds). Value between `60` and `600`. Default: `300`.\n* `project_service_keys` - (Required) GCP projects to add.\n* `services` - (Optional) GCP service metrics to import. Can be an empty list, or not included, to import 'All services'. See [Google Cloud Platform services](https://docs.splunk.com/Observability/gdi/get-data-in/integrations.html#google-cloud-platform-services) for a list of valid values.\n* `use_metric_source_project_for_quota` - (Optional) When this value is set to true Observability Cloud will force usage of a quota from the project where metrics are stored. For this to work the service account provided for the project needs to be provided with serviceusage.services.use permission or Service Usage Consumer role in this project. When set to false default quota settings are used.\n\n## Attributes\n\nIn addition to all arguments above, the following attributes are exported:\n\n* `id` - The ID of the integration.\n",
            "properties": {
                "customMetricTypeDomains": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of additional GCP service domain names that you want to monitor\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "Whether the integration is enabled or not\n"
                },
                "importGcpMetrics": {
                    "type": "boolean",
                    "description": "If enabled, Splunk Observability Cloud will sync also Google Cloud Metrics data. If disabled, Splunk Observability Cloud\nwill import only metadata. Defaults to true.\n"
                },
                "includeLists": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of custom metadata keys that you want Observability Cloud to collect for Compute Engine instances.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the integration\n"
                },
                "namedToken": {
                    "type": "string",
                    "description": "A named token to use for ingest\n"
                },
                "pollRate": {
                    "type": "integer",
                    "description": "GCP poll rate (in seconds). Between `60` and `600`.\n"
                },
                "projectServiceKeys": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/signalfx:gcp/IntegrationProjectServiceKey:IntegrationProjectServiceKey"
                    },
                    "description": "GCP project service keys\n",
                    "secret": true
                },
                "services": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "GCP enabled services\n"
                },
                "useMetricSourceProjectForQuota": {
                    "type": "boolean",
                    "description": "When this value is set to true Observability Cloud will force usage of a quota from the project where metrics are\nstored. For this to work the service account provided for the project needs to be provided with\nserviceusage.services.use permission or Service Usage Consumer role in this project. When set to false default quota\nsettings are used.\n"
                }
            },
            "required": [
                "enabled",
                "name"
            ],
            "inputProperties": {
                "customMetricTypeDomains": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of additional GCP service domain names that you want to monitor\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "Whether the integration is enabled or not\n"
                },
                "importGcpMetrics": {
                    "type": "boolean",
                    "description": "If enabled, Splunk Observability Cloud will sync also Google Cloud Metrics data. If disabled, Splunk Observability Cloud\nwill import only metadata. Defaults to true.\n"
                },
                "includeLists": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of custom metadata keys that you want Observability Cloud to collect for Compute Engine instances.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the integration\n"
                },
                "namedToken": {
                    "type": "string",
                    "description": "A named token to use for ingest\n",
                    "willReplaceOnChanges": true
                },
                "pollRate": {
                    "type": "integer",
                    "description": "GCP poll rate (in seconds). Between `60` and `600`.\n"
                },
                "projectServiceKeys": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/signalfx:gcp/IntegrationProjectServiceKey:IntegrationProjectServiceKey"
                    },
                    "description": "GCP project service keys\n",
                    "secret": true
                },
                "services": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "GCP enabled services\n"
                },
                "useMetricSourceProjectForQuota": {
                    "type": "boolean",
                    "description": "When this value is set to true Observability Cloud will force usage of a quota from the project where metrics are\nstored. For this to work the service account provided for the project needs to be provided with\nserviceusage.services.use permission or Service Usage Consumer role in this project. When set to false default quota\nsettings are used.\n"
                }
            },
            "requiredInputs": [
                "enabled"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Integration resources.\n",
                "properties": {
                    "customMetricTypeDomains": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "List of additional GCP service domain names that you want to monitor\n"
                    },
                    "enabled": {
                        "type": "boolean",
                        "description": "Whether the integration is enabled or not\n"
                    },
                    "importGcpMetrics": {
                        "type": "boolean",
                        "description": "If enabled, Splunk Observability Cloud will sync also Google Cloud Metrics data. If disabled, Splunk Observability Cloud\nwill import only metadata. Defaults to true.\n"
                    },
                    "includeLists": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "List of custom metadata keys that you want Observability Cloud to collect for Compute Engine instances.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the integration\n"
                    },
                    "namedToken": {
                        "type": "string",
                        "description": "A named token to use for ingest\n",
                        "willReplaceOnChanges": true
                    },
                    "pollRate": {
                        "type": "integer",
                        "description": "GCP poll rate (in seconds). Between `60` and `600`.\n"
                    },
                    "projectServiceKeys": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/signalfx:gcp/IntegrationProjectServiceKey:IntegrationProjectServiceKey"
                        },
                        "description": "GCP project service keys\n",
                        "secret": true
                    },
                    "services": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "GCP enabled services\n"
                    },
                    "useMetricSourceProjectForQuota": {
                        "type": "boolean",
                        "description": "When this value is set to true Observability Cloud will force usage of a quota from the project where metrics are\nstored. For this to work the service account provided for the project needs to be provided with\nserviceusage.services.use permission or Service Usage Consumer role in this project. When set to false default quota\nsettings are used.\n"
                    }
                },
                "type": "object"
            }
        },
        "signalfx:index/alertMutingRule:AlertMutingRule": {
            "description": "Provides a Splunk Observability Cloud resource for managing alert muting rules. See [Mute Notifications](https://docs.splunk.com/Observability/alerts-detectors-notifications/mute-notifications.html) for more information.\n\nSplunk Observability Cloud currently allows linking an alert muting rule with only one detector ID. Specifying multiple detector IDs makes the muting rule obsolete.\n\n\u003e **WARNING** Splunk Observability Cloud does not allow the start time of a **currently active** muting rule to be modified. Attempting to modify a currently active rule destroys the existing rule and creates a new rule. This might result in the emission of notifications.\n\n## Example\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as signalfx from \"@pulumi/signalfx\";\n\nconst roolMooterOne = new signalfx.AlertMutingRule(\"roolMooterOne\", {\n    description: \"mooted it NEW\",\n    startTime: 1573063243,\n    stopTime: 0,\n    detectors: [signalfx_detector.some_detector_id],\n    filters: [{\n        property: \"foo\",\n        propertyValue: \"bar\",\n    }],\n});\n```\n```python\nimport pulumi\nimport pulumi_signalfx as signalfx\n\nrool_mooter_one = signalfx.AlertMutingRule(\"roolMooterOne\",\n    description=\"mooted it NEW\",\n    start_time=1573063243,\n    stop_time=0,\n    detectors=[signalfx_detector[\"some_detector_id\"]],\n    filters=[signalfx.AlertMutingRuleFilterArgs(\n        property=\"foo\",\n        property_value=\"bar\",\n    )])\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing SignalFx = Pulumi.SignalFx;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var roolMooterOne = new SignalFx.AlertMutingRule(\"roolMooterOne\", new()\n    {\n        Description = \"mooted it NEW\",\n        StartTime = 1573063243,\n        StopTime = 0,\n        Detectors = new[]\n        {\n            signalfx_detector.Some_detector_id,\n        },\n        Filters = new[]\n        {\n            new SignalFx.Inputs.AlertMutingRuleFilterArgs\n            {\n                Property = \"foo\",\n                PropertyValue = \"bar\",\n            },\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-signalfx/sdk/v7/go/signalfx\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := signalfx.NewAlertMutingRule(ctx, \"roolMooterOne\", \u0026signalfx.AlertMutingRuleArgs{\n\t\t\tDescription: pulumi.String(\"mooted it NEW\"),\n\t\t\tStartTime:   pulumi.Int(1573063243),\n\t\t\tStopTime:    pulumi.Int(0),\n\t\t\tDetectors: pulumi.StringArray{\n\t\t\t\tsignalfx_detector.Some_detector_id,\n\t\t\t},\n\t\t\tFilters: signalfx.AlertMutingRuleFilterArray{\n\t\t\t\t\u0026signalfx.AlertMutingRuleFilterArgs{\n\t\t\t\t\tProperty:      pulumi.String(\"foo\"),\n\t\t\t\t\tPropertyValue: pulumi.String(\"bar\"),\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.signalfx.AlertMutingRule;\nimport com.pulumi.signalfx.AlertMutingRuleArgs;\nimport com.pulumi.signalfx.inputs.AlertMutingRuleFilterArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var roolMooterOne = new AlertMutingRule(\"roolMooterOne\", AlertMutingRuleArgs.builder()        \n            .description(\"mooted it NEW\")\n            .startTime(1573063243)\n            .stopTime(0)\n            .detectors(signalfx_detector.some_detector_id())\n            .filters(AlertMutingRuleFilterArgs.builder()\n                .property(\"foo\")\n                .propertyValue(\"bar\")\n                .build())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  roolMooterOne:\n    type: signalfx:AlertMutingRule\n    properties:\n      description: mooted it NEW\n      startTime: 1.573063243e+09\n      stopTime: 0 # Defaults to 0\n      detectors:\n        - ${signalfx_detector.some_detector_id}\n      filters:\n        - property: foo\n          propertyValue: bar\n```\n\n## Arguments\n\n* `description` - (Required) The description for this muting rule\n* `start_time` - (Required) Starting time of an alert muting rule as a Unit time stamp in seconds.\n* `stop_time` - (Optional) Stop time of an alert muting rule as a Unix time stamp in seconds.\n* `detectors` - (Optional) A convenience attribute that associated this muting rule with specific detector IDs. Currently, only one ID is supported.\n* `filter` - (Optional) Filters for this rule. See [Creating muting rules from scratch](https://docs.splunk.com/Observability/alerts-detectors-notifications/mute-notifications.html#rule-from-scratch) for more information.\n  * `property` - (Required) The property to filter.\n  * `property_value` - (Required) The property value to filter.\n  * `negated` - (Optional) Determines if this is a \"not\" filter. Defaults to `false`.\n\n## Attributes\n\nIn a addition to all arguments above, the following attributes are exported:\n\n* `id` - The ID of the alert muting rule.\n* `effective_start_time`\n",
            "properties": {
                "description": {
                    "type": "string",
                    "description": "description of the rule\n"
                },
                "detectors": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "detectors to which this muting rule applies\n"
                },
                "effectiveStartTime": {
                    "type": "integer"
                },
                "filters": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/signalfx:index/AlertMutingRuleFilter:AlertMutingRuleFilter"
                    },
                    "description": "list of alert muting filters for this rule\n"
                },
                "startTime": {
                    "type": "integer",
                    "description": "starting time of an alert muting rule as a Unix timestamp, in seconds\n"
                },
                "stopTime": {
                    "type": "integer",
                    "description": "stop time of an alert muting rule as a Unix timestamp, in seconds\n"
                }
            },
            "required": [
                "description",
                "effectiveStartTime",
                "startTime"
            ],
            "inputProperties": {
                "description": {
                    "type": "string",
                    "description": "description of the rule\n"
                },
                "detectors": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "detectors to which this muting rule applies\n"
                },
                "filters": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/signalfx:index/AlertMutingRuleFilter:AlertMutingRuleFilter"
                    },
                    "description": "list of alert muting filters for this rule\n"
                },
                "startTime": {
                    "type": "integer",
                    "description": "starting time of an alert muting rule as a Unix timestamp, in seconds\n",
                    "willReplaceOnChanges": true
                },
                "stopTime": {
                    "type": "integer",
                    "description": "stop time of an alert muting rule as a Unix timestamp, in seconds\n"
                }
            },
            "requiredInputs": [
                "description",
                "startTime"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering AlertMutingRule resources.\n",
                "properties": {
                    "description": {
                        "type": "string",
                        "description": "description of the rule\n"
                    },
                    "detectors": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "detectors to which this muting rule applies\n"
                    },
                    "effectiveStartTime": {
                        "type": "integer"
                    },
                    "filters": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/signalfx:index/AlertMutingRuleFilter:AlertMutingRuleFilter"
                        },
                        "description": "list of alert muting filters for this rule\n"
                    },
                    "startTime": {
                        "type": "integer",
                        "description": "starting time of an alert muting rule as a Unix timestamp, in seconds\n",
                        "willReplaceOnChanges": true
                    },
                    "stopTime": {
                        "type": "integer",
                        "description": "stop time of an alert muting rule as a Unix timestamp, in seconds\n"
                    }
                },
                "type": "object"
            }
        },
        "signalfx:index/dashboard:Dashboard": {
            "properties": {
                "authorizedWriterTeams": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Team IDs that have write access to this dashboard\n",
                    "deprecationMessage": "Please use permissions_* fields now"
                },
                "authorizedWriterUsers": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "User IDs that have write access to this dashboard\n",
                    "deprecationMessage": "Please use permissions fields now"
                },
                "charts": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/signalfx:index/DashboardChart:DashboardChart"
                    },
                    "description": "Chart ID and layout information for the charts in the dashboard\n"
                },
                "chartsResolution": {
                    "type": "string",
                    "description": "Specifies the chart data display resolution for charts in this dashboard. Value can be one of \"default\", \"low\", \"high\",\nor \"highest\". default by default\n"
                },
                "columns": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/signalfx:index/DashboardColumn:DashboardColumn"
                    },
                    "description": "Column layout. Charts listed, will be placed in a single column with the same width and height\n"
                },
                "dashboardGroup": {
                    "type": "string",
                    "description": "The ID of the dashboard group that contains the dashboard. If an ID is not provided during creation, the dashboard will\nbe placed in a newly created dashboard group\n"
                },
                "description": {
                    "type": "string",
                    "description": "Description of the dashboard (Optional)\n"
                },
                "discoveryOptionsQuery": {
                    "type": "string"
                },
                "discoveryOptionsSelectors": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "endTime": {
                    "type": "integer",
                    "description": "Seconds since epoch to end the visualization\n"
                },
                "eventOverlays": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/signalfx:index/DashboardEventOverlay:DashboardEventOverlay"
                    },
                    "description": "Event overlay to add to charts\n"
                },
                "filters": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/signalfx:index/DashboardFilter:DashboardFilter"
                    },
                    "description": "Filter to apply to each chart in the dashboard\n"
                },
                "grids": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/signalfx:index/DashboardGrid:DashboardGrid"
                    },
                    "description": "Grid dashboard layout. Charts listed will be placed in a grid by row with the same width and height. If a chart can't\nfit in a row, it will be placed automatically in the next row\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the dashboard\n"
                },
                "permissions": {
                    "$ref": "#/types/signalfx:index/DashboardPermissions:DashboardPermissions"
                },
                "selectedEventOverlays": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/signalfx:index/DashboardSelectedEventOverlay:DashboardSelectedEventOverlay"
                    },
                    "description": "Event overlay added to charts by default to charts\n"
                },
                "startTime": {
                    "type": "integer",
                    "description": "Seconds since epoch to start the visualization\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Tags of the dashboard\n"
                },
                "timeRange": {
                    "type": "string",
                    "description": "From when to display data. Splunk Observability Cloud time syntax (e.g. -5m, -1h)\n"
                },
                "url": {
                    "type": "string",
                    "description": "URL of the dashboard\n"
                },
                "variables": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/signalfx:index/DashboardVariable:DashboardVariable"
                    },
                    "description": "Dashboard variable to apply to each chart in the dashboard\n"
                }
            },
            "required": [
                "dashboardGroup",
                "name",
                "permissions",
                "url"
            ],
            "inputProperties": {
                "authorizedWriterTeams": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Team IDs that have write access to this dashboard\n",
                    "deprecationMessage": "Please use permissions_* fields now"
                },
                "authorizedWriterUsers": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "User IDs that have write access to this dashboard\n",
                    "deprecationMessage": "Please use permissions fields now"
                },
                "charts": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/signalfx:index/DashboardChart:DashboardChart"
                    },
                    "description": "Chart ID and layout information for the charts in the dashboard\n"
                },
                "chartsResolution": {
                    "type": "string",
                    "description": "Specifies the chart data display resolution for charts in this dashboard. Value can be one of \"default\", \"low\", \"high\",\nor \"highest\". default by default\n"
                },
                "columns": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/signalfx:index/DashboardColumn:DashboardColumn"
                    },
                    "description": "Column layout. Charts listed, will be placed in a single column with the same width and height\n"
                },
                "dashboardGroup": {
                    "type": "string",
                    "description": "The ID of the dashboard group that contains the dashboard. If an ID is not provided during creation, the dashboard will\nbe placed in a newly created dashboard group\n"
                },
                "description": {
                    "type": "string",
                    "description": "Description of the dashboard (Optional)\n"
                },
                "discoveryOptionsQuery": {
                    "type": "string"
                },
                "discoveryOptionsSelectors": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "endTime": {
                    "type": "integer",
                    "description": "Seconds since epoch to end the visualization\n"
                },
                "eventOverlays": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/signalfx:index/DashboardEventOverlay:DashboardEventOverlay"
                    },
                    "description": "Event overlay to add to charts\n"
                },
                "filters": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/signalfx:index/DashboardFilter:DashboardFilter"
                    },
                    "description": "Filter to apply to each chart in the dashboard\n"
                },
                "grids": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/signalfx:index/DashboardGrid:DashboardGrid"
                    },
                    "description": "Grid dashboard layout. Charts listed will be placed in a grid by row with the same width and height. If a chart can't\nfit in a row, it will be placed automatically in the next row\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the dashboard\n"
                },
                "permissions": {
                    "$ref": "#/types/signalfx:index/DashboardPermissions:DashboardPermissions"
                },
                "selectedEventOverlays": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/signalfx:index/DashboardSelectedEventOverlay:DashboardSelectedEventOverlay"
                    },
                    "description": "Event overlay added to charts by default to charts\n"
                },
                "startTime": {
                    "type": "integer",
                    "description": "Seconds since epoch to start the visualization\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Tags of the dashboard\n"
                },
                "timeRange": {
                    "type": "string",
                    "description": "From when to display data. Splunk Observability Cloud time syntax (e.g. -5m, -1h)\n"
                },
                "variables": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/signalfx:index/DashboardVariable:DashboardVariable"
                    },
                    "description": "Dashboard variable to apply to each chart in the dashboard\n"
                }
            },
            "requiredInputs": [
                "dashboardGroup"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Dashboard resources.\n",
                "properties": {
                    "authorizedWriterTeams": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Team IDs that have write access to this dashboard\n",
                        "deprecationMessage": "Please use permissions_* fields now"
                    },
                    "authorizedWriterUsers": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "User IDs that have write access to this dashboard\n",
                        "deprecationMessage": "Please use permissions fields now"
                    },
                    "charts": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/signalfx:index/DashboardChart:DashboardChart"
                        },
                        "description": "Chart ID and layout information for the charts in the dashboard\n"
                    },
                    "chartsResolution": {
                        "type": "string",
                        "description": "Specifies the chart data display resolution for charts in this dashboard. Value can be one of \"default\", \"low\", \"high\",\nor \"highest\". default by default\n"
                    },
                    "columns": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/signalfx:index/DashboardColumn:DashboardColumn"
                        },
                        "description": "Column layout. Charts listed, will be placed in a single column with the same width and height\n"
                    },
                    "dashboardGroup": {
                        "type": "string",
                        "description": "The ID of the dashboard group that contains the dashboard. If an ID is not provided during creation, the dashboard will\nbe placed in a newly created dashboard group\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "Description of the dashboard (Optional)\n"
                    },
                    "discoveryOptionsQuery": {
                        "type": "string"
                    },
                    "discoveryOptionsSelectors": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "endTime": {
                        "type": "integer",
                        "description": "Seconds since epoch to end the visualization\n"
                    },
                    "eventOverlays": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/signalfx:index/DashboardEventOverlay:DashboardEventOverlay"
                        },
                        "description": "Event overlay to add to charts\n"
                    },
                    "filters": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/signalfx:index/DashboardFilter:DashboardFilter"
                        },
                        "description": "Filter to apply to each chart in the dashboard\n"
                    },
                    "grids": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/signalfx:index/DashboardGrid:DashboardGrid"
                        },
                        "description": "Grid dashboard layout. Charts listed will be placed in a grid by row with the same width and height. If a chart can't\nfit in a row, it will be placed automatically in the next row\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the dashboard\n"
                    },
                    "permissions": {
                        "$ref": "#/types/signalfx:index/DashboardPermissions:DashboardPermissions"
                    },
                    "selectedEventOverlays": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/signalfx:index/DashboardSelectedEventOverlay:DashboardSelectedEventOverlay"
                        },
                        "description": "Event overlay added to charts by default to charts\n"
                    },
                    "startTime": {
                        "type": "integer",
                        "description": "Seconds since epoch to start the visualization\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Tags of the dashboard\n"
                    },
                    "timeRange": {
                        "type": "string",
                        "description": "From when to display data. Splunk Observability Cloud time syntax (e.g. -5m, -1h)\n"
                    },
                    "url": {
                        "type": "string",
                        "description": "URL of the dashboard\n"
                    },
                    "variables": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/signalfx:index/DashboardVariable:DashboardVariable"
                        },
                        "description": "Dashboard variable to apply to each chart in the dashboard\n"
                    }
                },
                "type": "object"
            }
        },
        "signalfx:index/dashboardGroup:DashboardGroup": {
            "description": "In the Splunk Observability Cloud web UI, a [dashboard group](https://developers.signalfx.com/dashboard_groups_reference.html) is a collection of dashboards.\n\nDashboard groups cannot be accessed directly. You can access them through a dashboard within a group.\n\n\u003e **NOTE** When you want to change or remove write permissions for a user other than yourself regarding dashboard groups, use a session token of an administrator to authenticate the Splunk Observability Cloud provider. See [Operations that require a session token for an administrator](https://dev.splunk.com/observability/docs/administration/authtokens#Operations-that-require-a-session-token-for-an-administrator). \n\n## Example\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as signalfx from \"@pulumi/signalfx\";\n\nconst mydashboardgroup0 = new signalfx.DashboardGroup(\"mydashboardgroup0\", {\n    description: \"Cool dashboard group\",\n    authorizedWriterTeams: [signalfx_team.mycoolteam.id],\n    authorizedWriterUsers: [\"abc123\"],\n});\n```\n```python\nimport pulumi\nimport pulumi_signalfx as signalfx\n\nmydashboardgroup0 = signalfx.DashboardGroup(\"mydashboardgroup0\",\n    description=\"Cool dashboard group\",\n    authorized_writer_teams=[signalfx_team[\"mycoolteam\"][\"id\"]],\n    authorized_writer_users=[\"abc123\"])\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing SignalFx = Pulumi.SignalFx;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var mydashboardgroup0 = new SignalFx.DashboardGroup(\"mydashboardgroup0\", new()\n    {\n        Description = \"Cool dashboard group\",\n        AuthorizedWriterTeams = new[]\n        {\n            signalfx_team.Mycoolteam.Id,\n        },\n        AuthorizedWriterUsers = new[]\n        {\n            \"abc123\",\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-signalfx/sdk/v7/go/signalfx\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := signalfx.NewDashboardGroup(ctx, \"mydashboardgroup0\", \u0026signalfx.DashboardGroupArgs{\n\t\t\tDescription: pulumi.String(\"Cool dashboard group\"),\n\t\t\tAuthorizedWriterTeams: pulumi.StringArray{\n\t\t\t\tsignalfx_team.Mycoolteam.Id,\n\t\t\t},\n\t\t\tAuthorizedWriterUsers: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"abc123\"),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.signalfx.DashboardGroup;\nimport com.pulumi.signalfx.DashboardGroupArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var mydashboardgroup0 = new DashboardGroup(\"mydashboardgroup0\", DashboardGroupArgs.builder()        \n            .description(\"Cool dashboard group\")\n            .authorizedWriterTeams(signalfx_team.mycoolteam().id())\n            .authorizedWriterUsers(\"abc123\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  mydashboardgroup0:\n    type: signalfx:DashboardGroup\n    properties:\n      description: Cool dashboard group\n      # Note that if you use these features, you must use a user's\n      #   # admin key to authenticate the provider, lest Terraform not be able\n      #   # to modify the dashboard group in the future!\n      authorizedWriterTeams:\n        - ${signalfx_team.mycoolteam.id}\n      authorizedWriterUsers:\n        - abc123\n```\n\n## Example with permissions\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as signalfx from \"@pulumi/signalfx\";\n\nconst mydashboardgroupWithpermissions = new signalfx.DashboardGroup(\"mydashboardgroupWithpermissions\", {\n    description: \"Cool dashboard group\",\n    permissions: [\n        {\n            actions: [\"READ\"],\n            principalId: \"abc123\",\n            principalType: \"ORG\",\n        },\n        {\n            actions: [\n                \"READ\",\n                \"WRITE\",\n            ],\n            principalId: \"abc456\",\n            principalType: \"USER\",\n        },\n    ],\n});\n```\n```python\nimport pulumi\nimport pulumi_signalfx as signalfx\n\nmydashboardgroup_withpermissions = signalfx.DashboardGroup(\"mydashboardgroupWithpermissions\",\n    description=\"Cool dashboard group\",\n    permissions=[\n        signalfx.DashboardGroupPermissionArgs(\n            actions=[\"READ\"],\n            principal_id=\"abc123\",\n            principal_type=\"ORG\",\n        ),\n        signalfx.DashboardGroupPermissionArgs(\n            actions=[\n                \"READ\",\n                \"WRITE\",\n            ],\n            principal_id=\"abc456\",\n            principal_type=\"USER\",\n        ),\n    ])\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing SignalFx = Pulumi.SignalFx;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var mydashboardgroupWithpermissions = new SignalFx.DashboardGroup(\"mydashboardgroupWithpermissions\", new()\n    {\n        Description = \"Cool dashboard group\",\n        Permissions = new[]\n        {\n            new SignalFx.Inputs.DashboardGroupPermissionArgs\n            {\n                Actions = new[]\n                {\n                    \"READ\",\n                },\n                PrincipalId = \"abc123\",\n                PrincipalType = \"ORG\",\n            },\n            new SignalFx.Inputs.DashboardGroupPermissionArgs\n            {\n                Actions = new[]\n                {\n                    \"READ\",\n                    \"WRITE\",\n                },\n                PrincipalId = \"abc456\",\n                PrincipalType = \"USER\",\n            },\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-signalfx/sdk/v7/go/signalfx\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := signalfx.NewDashboardGroup(ctx, \"mydashboardgroupWithpermissions\", \u0026signalfx.DashboardGroupArgs{\n\t\t\tDescription: pulumi.String(\"Cool dashboard group\"),\n\t\t\tPermissions: signalfx.DashboardGroupPermissionArray{\n\t\t\t\t\u0026signalfx.DashboardGroupPermissionArgs{\n\t\t\t\t\tActions: pulumi.StringArray{\n\t\t\t\t\t\tpulumi.String(\"READ\"),\n\t\t\t\t\t},\n\t\t\t\t\tPrincipalId:   pulumi.String(\"abc123\"),\n\t\t\t\t\tPrincipalType: pulumi.String(\"ORG\"),\n\t\t\t\t},\n\t\t\t\t\u0026signalfx.DashboardGroupPermissionArgs{\n\t\t\t\t\tActions: pulumi.StringArray{\n\t\t\t\t\t\tpulumi.String(\"READ\"),\n\t\t\t\t\t\tpulumi.String(\"WRITE\"),\n\t\t\t\t\t},\n\t\t\t\t\tPrincipalId:   pulumi.String(\"abc456\"),\n\t\t\t\t\tPrincipalType: pulumi.String(\"USER\"),\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.signalfx.DashboardGroup;\nimport com.pulumi.signalfx.DashboardGroupArgs;\nimport com.pulumi.signalfx.inputs.DashboardGroupPermissionArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var mydashboardgroupWithpermissions = new DashboardGroup(\"mydashboardgroupWithpermissions\", DashboardGroupArgs.builder()        \n            .description(\"Cool dashboard group\")\n            .permissions(            \n                DashboardGroupPermissionArgs.builder()\n                    .actions(\"READ\")\n                    .principalId(\"abc123\")\n                    .principalType(\"ORG\")\n                    .build(),\n                DashboardGroupPermissionArgs.builder()\n                    .actions(                    \n                        \"READ\",\n                        \"WRITE\")\n                    .principalId(\"abc456\")\n                    .principalType(\"USER\")\n                    .build())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  mydashboardgroupWithpermissions:\n    type: signalfx:DashboardGroup\n    properties:\n      description: Cool dashboard group\n      permissions:\n        - actions:\n            - READ\n          principalId: abc123\n          principalType: ORG\n        - actions:\n            - READ\n            - WRITE\n          principalId: abc456\n          principalType: USER\n```\n\n## Example With mirrored dashboards\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as signalfx from \"@pulumi/signalfx\";\n\nconst mydashboardgroupWithmirrors = new signalfx.DashboardGroup(\"mydashboardgroupWithmirrors\", {\n    description: \"Cool dashboard group\",\n    dashboards: [{\n        dashboardId: signalfx_dashboard.gc_dashboard.id,\n        nameOverride: \"GC For My Service\",\n        descriptionOverride: \"Garbage Collection dashboard maintained by JVM team\",\n        filterOverrides: [{\n            property: \"service\",\n            values: [\"myservice\"],\n            negated: false,\n        }],\n        variableOverrides: [{\n            property: \"region\",\n            values: [\"us-west1\"],\n            valuesSuggesteds: [\n                \"us-west-1\",\n                \"us-east-1\",\n            ],\n        }],\n    }],\n});\n```\n```python\nimport pulumi\nimport pulumi_signalfx as signalfx\n\nmydashboardgroup_withmirrors = signalfx.DashboardGroup(\"mydashboardgroupWithmirrors\",\n    description=\"Cool dashboard group\",\n    dashboards=[signalfx.DashboardGroupDashboardArgs(\n        dashboard_id=signalfx_dashboard[\"gc_dashboard\"][\"id\"],\n        name_override=\"GC For My Service\",\n        description_override=\"Garbage Collection dashboard maintained by JVM team\",\n        filter_overrides=[signalfx.DashboardGroupDashboardFilterOverrideArgs(\n            property=\"service\",\n            values=[\"myservice\"],\n            negated=False,\n        )],\n        variable_overrides=[signalfx.DashboardGroupDashboardVariableOverrideArgs(\n            property=\"region\",\n            values=[\"us-west1\"],\n            values_suggesteds=[\n                \"us-west-1\",\n                \"us-east-1\",\n            ],\n        )],\n    )])\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing SignalFx = Pulumi.SignalFx;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var mydashboardgroupWithmirrors = new SignalFx.DashboardGroup(\"mydashboardgroupWithmirrors\", new()\n    {\n        Description = \"Cool dashboard group\",\n        Dashboards = new[]\n        {\n            new SignalFx.Inputs.DashboardGroupDashboardArgs\n            {\n                DashboardId = signalfx_dashboard.Gc_dashboard.Id,\n                NameOverride = \"GC For My Service\",\n                DescriptionOverride = \"Garbage Collection dashboard maintained by JVM team\",\n                FilterOverrides = new[]\n                {\n                    new SignalFx.Inputs.DashboardGroupDashboardFilterOverrideArgs\n                    {\n                        Property = \"service\",\n                        Values = new[]\n                        {\n                            \"myservice\",\n                        },\n                        Negated = false,\n                    },\n                },\n                VariableOverrides = new[]\n                {\n                    new SignalFx.Inputs.DashboardGroupDashboardVariableOverrideArgs\n                    {\n                        Property = \"region\",\n                        Values = new[]\n                        {\n                            \"us-west1\",\n                        },\n                        ValuesSuggesteds = new[]\n                        {\n                            \"us-west-1\",\n                            \"us-east-1\",\n                        },\n                    },\n                },\n            },\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-signalfx/sdk/v7/go/signalfx\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := signalfx.NewDashboardGroup(ctx, \"mydashboardgroupWithmirrors\", \u0026signalfx.DashboardGroupArgs{\n\t\t\tDescription: pulumi.String(\"Cool dashboard group\"),\n\t\t\tDashboards: signalfx.DashboardGroupDashboardArray{\n\t\t\t\t\u0026signalfx.DashboardGroupDashboardArgs{\n\t\t\t\t\tDashboardId:         pulumi.Any(signalfx_dashboard.Gc_dashboard.Id),\n\t\t\t\t\tNameOverride:        pulumi.String(\"GC For My Service\"),\n\t\t\t\t\tDescriptionOverride: pulumi.String(\"Garbage Collection dashboard maintained by JVM team\"),\n\t\t\t\t\tFilterOverrides: signalfx.DashboardGroupDashboardFilterOverrideArray{\n\t\t\t\t\t\t\u0026signalfx.DashboardGroupDashboardFilterOverrideArgs{\n\t\t\t\t\t\t\tProperty: pulumi.String(\"service\"),\n\t\t\t\t\t\t\tValues: pulumi.StringArray{\n\t\t\t\t\t\t\t\tpulumi.String(\"myservice\"),\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tNegated: pulumi.Bool(false),\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t\tVariableOverrides: signalfx.DashboardGroupDashboardVariableOverrideArray{\n\t\t\t\t\t\t\u0026signalfx.DashboardGroupDashboardVariableOverrideArgs{\n\t\t\t\t\t\t\tProperty: pulumi.String(\"region\"),\n\t\t\t\t\t\t\tValues: pulumi.StringArray{\n\t\t\t\t\t\t\t\tpulumi.String(\"us-west1\"),\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tValuesSuggesteds: pulumi.StringArray{\n\t\t\t\t\t\t\t\tpulumi.String(\"us-west-1\"),\n\t\t\t\t\t\t\t\tpulumi.String(\"us-east-1\"),\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.signalfx.DashboardGroup;\nimport com.pulumi.signalfx.DashboardGroupArgs;\nimport com.pulumi.signalfx.inputs.DashboardGroupDashboardArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var mydashboardgroupWithmirrors = new DashboardGroup(\"mydashboardgroupWithmirrors\", DashboardGroupArgs.builder()        \n            .description(\"Cool dashboard group\")\n            .dashboards(DashboardGroupDashboardArgs.builder()\n                .dashboardId(signalfx_dashboard.gc_dashboard().id())\n                .nameOverride(\"GC For My Service\")\n                .descriptionOverride(\"Garbage Collection dashboard maintained by JVM team\")\n                .filterOverrides(DashboardGroupDashboardFilterOverrideArgs.builder()\n                    .property(\"service\")\n                    .values(\"myservice\")\n                    .negated(false)\n                    .build())\n                .variableOverrides(DashboardGroupDashboardVariableOverrideArgs.builder()\n                    .property(\"region\")\n                    .values(\"us-west1\")\n                    .valuesSuggesteds(                    \n                        \"us-west-1\",\n                        \"us-east-1\")\n                    .build())\n                .build())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  mydashboardgroupWithmirrors:\n    type: signalfx:DashboardGroup\n    properties:\n      description: Cool dashboard group\n      # You can add as many of these as you like. Make sure your account\n      #   // supports this feature!\n      dashboards:\n        - dashboardId: ${signalfx_dashboard.gc_dashboard.id}\n          nameOverride: GC For My Service\n          descriptionOverride: Garbage Collection dashboard maintained by JVM team\n          filterOverrides:\n            - property: service\n              values:\n                - myservice\n              negated: false\n          variableOverrides:\n            - property: region\n              values:\n                - us-west1\n              valuesSuggesteds:\n                - us-west-1\n                - us-east-1\n```\n\n## Arguments\n\nThe following arguments are supported in the resource block:\n\n* `name` - (Required) Name of the dashboard group.\n* `description` - (Required) Description of the dashboard group.\n* `teams` - (Optional) Team IDs to associate the dashboard group to.\n* `authorized_writer_teams` - (Optional) Team IDs that have write access to this dashboard group. Remember to use an admin's token if using this feature and to include that admin's team (or user id in `authorized_writer_teams`). **Note:** Deprecated use `permissions` instead.\n* `authorized_writer_users` - (Optional) User IDs that have write access to this dashboard group. Remember to use an admin's token if using this feature and to include that admin's user id (or team id in `authorized_writer_teams`). **Note:** Deprecated use `permissions` instead.\n* `permissions` - (Optional) [Permissions](https://docs.splunk.com/Observability/infrastructure/terms-concepts/permissions.html) List of read and write permission configuration to specify which user, team, and organization can view and/or edit your dashboard group. **Note:** This feature is not present in all accounts. Please contact support if you are unsure.\n  * `principal_id` - (Required) ID of the user, team, or organization for which you're granting permissions.\n  * `principal_type` - (Required) Clarify whether this permission configuration is for a user, a team, or an organization. Value can be one of \"USER\", \"TEAM\", or \"ORG\".\n  * `actions` - (Required) Action the user, team, or organization can take with the dashboard group. List of values (value can be \"READ\" or \"WRITE\").\n* `dashboard` - (Optional) [Mirrored dashboards](https://docs.splunk.com/observability/en/data-visualization/dashboards/dashboard-share-clone-mirror.html#mirror-dashboard) in this dashboard group. **Note:** This feature is not present in all accounts. Please contact support if you are unsure.\n  * `dashboard_id` - (Required) The dashboard id to mirror\n  * `name_override` - (Optional) The name that will override the original dashboards's name.\n  * `description_override` - (Optional) The description that will override the original dashboards's description.\n  * `filter_override` - (Optional) The description that will override the original dashboards's description.\n    * `property` - (Required) The name of a dimension to filter against.\n    * `values` - (Required) A list of values to be used with the `property`, they will be combined via `OR`.\n    * `negated` - (Optional) If true,  only data that does not match the specified value of the specified property appear in the event overlay. Defaults to `false`.\n  * `filter_override` - (Optional) The description that will override the original dashboards's description.\n    * `property` - (Required) A metric time series dimension or property name.\n    * `values` - (Optional) (Optional) List of of strings (which will be treated as an OR filter on the property).\n    * `values_suggested` - (Optional) A list of strings of suggested values for this variable; these suggestions will receive priority when values are autosuggested for this variable.\n\n## Attributes\n\nIn a addition to all arguments above, the following attributes are exported:\n\n* `id` - The ID of the integration.\n* `dashboard.config_id` - The ID of the association between the dashboard group and the dashboard\n",
            "properties": {
                "authorizedWriterTeams": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Team IDs that have write access to this dashboard\n",
                    "deprecationMessage": "Please use permissions field now"
                },
                "authorizedWriterUsers": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "User IDs that have write access to this dashboard\n",
                    "deprecationMessage": "Please use permissions field now"
                },
                "dashboards": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/signalfx:index/DashboardGroupDashboard:DashboardGroupDashboard"
                    },
                    "description": "Dashboard IDs that are members of this dashboard group. Also handles 'mirrored' dashboards.\n"
                },
                "description": {
                    "type": "string",
                    "description": "Description of the dashboard group\n"
                },
                "importQualifiers": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/signalfx:index/DashboardGroupImportQualifier:DashboardGroupImportQualifier"
                    }
                },
                "name": {
                    "type": "string",
                    "description": "Name of the dashboard group\n"
                },
                "permissions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/signalfx:index/DashboardGroupPermission:DashboardGroupPermission"
                    },
                    "description": "The custom access control list for this dashboard\n"
                },
                "teams": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Team IDs to associate the dashboard group to\n"
                }
            },
            "required": [
                "name",
                "permissions"
            ],
            "inputProperties": {
                "authorizedWriterTeams": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Team IDs that have write access to this dashboard\n",
                    "deprecationMessage": "Please use permissions field now"
                },
                "authorizedWriterUsers": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "User IDs that have write access to this dashboard\n",
                    "deprecationMessage": "Please use permissions field now"
                },
                "dashboards": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/signalfx:index/DashboardGroupDashboard:DashboardGroupDashboard"
                    },
                    "description": "Dashboard IDs that are members of this dashboard group. Also handles 'mirrored' dashboards.\n"
                },
                "description": {
                    "type": "string",
                    "description": "Description of the dashboard group\n"
                },
                "importQualifiers": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/signalfx:index/DashboardGroupImportQualifier:DashboardGroupImportQualifier"
                    }
                },
                "name": {
                    "type": "string",
                    "description": "Name of the dashboard group\n"
                },
                "permissions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/signalfx:index/DashboardGroupPermission:DashboardGroupPermission"
                    },
                    "description": "The custom access control list for this dashboard\n"
                },
                "teams": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Team IDs to associate the dashboard group to\n"
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering DashboardGroup resources.\n",
                "properties": {
                    "authorizedWriterTeams": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Team IDs that have write access to this dashboard\n",
                        "deprecationMessage": "Please use permissions field now"
                    },
                    "authorizedWriterUsers": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "User IDs that have write access to this dashboard\n",
                        "deprecationMessage": "Please use permissions field now"
                    },
                    "dashboards": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/signalfx:index/DashboardGroupDashboard:DashboardGroupDashboard"
                        },
                        "description": "Dashboard IDs that are members of this dashboard group. Also handles 'mirrored' dashboards.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "Description of the dashboard group\n"
                    },
                    "importQualifiers": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/signalfx:index/DashboardGroupImportQualifier:DashboardGroupImportQualifier"
                        }
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the dashboard group\n"
                    },
                    "permissions": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/signalfx:index/DashboardGroupPermission:DashboardGroupPermission"
                        },
                        "description": "The custom access control list for this dashboard\n"
                    },
                    "teams": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Team IDs to associate the dashboard group to\n"
                    }
                },
                "type": "object"
            }
        },
        "signalfx:index/dataLink:DataLink": {
            "description": "Manage Splunk Observability Cloud [Data Links](https://docs.signalfx.com/en/latest/managing/data-links.html).\n\n## Example\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as signalfx from \"@pulumi/signalfx\";\n\n// A global link to Splunk Observability Cloud dashboard.\nconst myDataLink = new signalfx.DataLink(\"myDataLink\", {\n    propertyName: \"pname\",\n    propertyValue: \"pvalue\",\n    targetSignalfxDashboards: [{\n        isDefault: true,\n        name: \"sfx_dash\",\n        dashboardGroupId: signalfx_dashboard_group.mydashboardgroup0.id,\n        dashboardId: signalfx_dashboard.mydashboard0.id,\n    }],\n});\n// A dashboard-specific link to an external URL\nconst myDataLinkDash = new signalfx.DataLink(\"myDataLinkDash\", {\n    contextDashboardId: signalfx_dashboard.mydashboard0.id,\n    propertyName: \"pname2\",\n    propertyValue: \"pvalue\",\n    targetExternalUrls: [{\n        name: \"ex_url\",\n        timeFormat: \"ISO8601\",\n        url: \"https://www.example.com\",\n        propertyKeyMapping: {\n            foo: \"bar\",\n        },\n    }],\n});\n```\n```python\nimport pulumi\nimport pulumi_signalfx as signalfx\n\n# A global link to Splunk Observability Cloud dashboard.\nmy_data_link = signalfx.DataLink(\"myDataLink\",\n    property_name=\"pname\",\n    property_value=\"pvalue\",\n    target_signalfx_dashboards=[signalfx.DataLinkTargetSignalfxDashboardArgs(\n        is_default=True,\n        name=\"sfx_dash\",\n        dashboard_group_id=signalfx_dashboard_group[\"mydashboardgroup0\"][\"id\"],\n        dashboard_id=signalfx_dashboard[\"mydashboard0\"][\"id\"],\n    )])\n# A dashboard-specific link to an external URL\nmy_data_link_dash = signalfx.DataLink(\"myDataLinkDash\",\n    context_dashboard_id=signalfx_dashboard[\"mydashboard0\"][\"id\"],\n    property_name=\"pname2\",\n    property_value=\"pvalue\",\n    target_external_urls=[signalfx.DataLinkTargetExternalUrlArgs(\n        name=\"ex_url\",\n        time_format=\"ISO8601\",\n        url=\"https://www.example.com\",\n        property_key_mapping={\n            \"foo\": \"bar\",\n        },\n    )])\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing SignalFx = Pulumi.SignalFx;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    // A global link to Splunk Observability Cloud dashboard.\n    var myDataLink = new SignalFx.DataLink(\"myDataLink\", new()\n    {\n        PropertyName = \"pname\",\n        PropertyValue = \"pvalue\",\n        TargetSignalfxDashboards = new[]\n        {\n            new SignalFx.Inputs.DataLinkTargetSignalfxDashboardArgs\n            {\n                IsDefault = true,\n                Name = \"sfx_dash\",\n                DashboardGroupId = signalfx_dashboard_group.Mydashboardgroup0.Id,\n                DashboardId = signalfx_dashboard.Mydashboard0.Id,\n            },\n        },\n    });\n\n    // A dashboard-specific link to an external URL\n    var myDataLinkDash = new SignalFx.DataLink(\"myDataLinkDash\", new()\n    {\n        ContextDashboardId = signalfx_dashboard.Mydashboard0.Id,\n        PropertyName = \"pname2\",\n        PropertyValue = \"pvalue\",\n        TargetExternalUrls = new[]\n        {\n            new SignalFx.Inputs.DataLinkTargetExternalUrlArgs\n            {\n                Name = \"ex_url\",\n                TimeFormat = \"ISO8601\",\n                Url = \"https://www.example.com\",\n                PropertyKeyMapping = \n                {\n                    { \"foo\", \"bar\" },\n                },\n            },\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-signalfx/sdk/v7/go/signalfx\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := signalfx.NewDataLink(ctx, \"myDataLink\", \u0026signalfx.DataLinkArgs{\n\t\t\tPropertyName:  pulumi.String(\"pname\"),\n\t\t\tPropertyValue: pulumi.String(\"pvalue\"),\n\t\t\tTargetSignalfxDashboards: signalfx.DataLinkTargetSignalfxDashboardArray{\n\t\t\t\t\u0026signalfx.DataLinkTargetSignalfxDashboardArgs{\n\t\t\t\t\tIsDefault:        pulumi.Bool(true),\n\t\t\t\t\tName:             pulumi.String(\"sfx_dash\"),\n\t\t\t\t\tDashboardGroupId: pulumi.Any(signalfx_dashboard_group.Mydashboardgroup0.Id),\n\t\t\t\t\tDashboardId:      pulumi.Any(signalfx_dashboard.Mydashboard0.Id),\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = signalfx.NewDataLink(ctx, \"myDataLinkDash\", \u0026signalfx.DataLinkArgs{\n\t\t\tContextDashboardId: pulumi.Any(signalfx_dashboard.Mydashboard0.Id),\n\t\t\tPropertyName:       pulumi.String(\"pname2\"),\n\t\t\tPropertyValue:      pulumi.String(\"pvalue\"),\n\t\t\tTargetExternalUrls: signalfx.DataLinkTargetExternalUrlArray{\n\t\t\t\t\u0026signalfx.DataLinkTargetExternalUrlArgs{\n\t\t\t\t\tName:       pulumi.String(\"ex_url\"),\n\t\t\t\t\tTimeFormat: pulumi.String(\"ISO8601\"),\n\t\t\t\t\tUrl:        pulumi.String(\"https://www.example.com\"),\n\t\t\t\t\tPropertyKeyMapping: pulumi.StringMap{\n\t\t\t\t\t\t\"foo\": pulumi.String(\"bar\"),\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.signalfx.DataLink;\nimport com.pulumi.signalfx.DataLinkArgs;\nimport com.pulumi.signalfx.inputs.DataLinkTargetSignalfxDashboardArgs;\nimport com.pulumi.signalfx.inputs.DataLinkTargetExternalUrlArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var myDataLink = new DataLink(\"myDataLink\", DataLinkArgs.builder()        \n            .propertyName(\"pname\")\n            .propertyValue(\"pvalue\")\n            .targetSignalfxDashboards(DataLinkTargetSignalfxDashboardArgs.builder()\n                .isDefault(true)\n                .name(\"sfx_dash\")\n                .dashboardGroupId(signalfx_dashboard_group.mydashboardgroup0().id())\n                .dashboardId(signalfx_dashboard.mydashboard0().id())\n                .build())\n            .build());\n\n        var myDataLinkDash = new DataLink(\"myDataLinkDash\", DataLinkArgs.builder()        \n            .contextDashboardId(signalfx_dashboard.mydashboard0().id())\n            .propertyName(\"pname2\")\n            .propertyValue(\"pvalue\")\n            .targetExternalUrls(DataLinkTargetExternalUrlArgs.builder()\n                .name(\"ex_url\")\n                .timeFormat(\"ISO8601\")\n                .url(\"https://www.example.com\")\n                .propertyKeyMapping(Map.of(\"foo\", \"bar\"))\n                .build())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  # A global link to Splunk Observability Cloud dashboard.\n  myDataLink:\n    type: signalfx:DataLink\n    properties:\n      propertyName: pname\n      propertyValue: pvalue\n      targetSignalfxDashboards:\n        - isDefault: true\n          name: sfx_dash\n          dashboardGroupId: ${signalfx_dashboard_group.mydashboardgroup0.id}\n          dashboardId: ${signalfx_dashboard.mydashboard0.id}\n  # A dashboard-specific link to an external URL\n  myDataLinkDash:\n    type: signalfx:DataLink\n    properties:\n      contextDashboardId: ${signalfx_dashboard.mydashboard0.id}\n      propertyName: pname2\n      propertyValue: pvalue\n      targetExternalUrls:\n        - name: ex_url\n          timeFormat: ISO8601\n          url: https://www.example.com\n          propertyKeyMapping:\n            foo: bar\n```\n\n## Arguments\n\nThe following arguments are supported in the resource block:\n\n* `property_name` - (Optional) Name (key) of the metadata that's the trigger of a data link. If you specify `property_value`, you must specify `property_name`.\n* `property_value` - (Optional) Value of the metadata that's the trigger of a data link. If you specify this property, you must also specify `property_name`.\n* `context_dashboard_id` - (Optional) If provided, scopes this data link to the supplied dashboard id. If omitted then the link will be global.\n* `target_external_url` - (Optional) Link to an external URL\n  * `name` (Required) User-assigned target name. Use this value to differentiate between the link targets for a data link object.\n  * `url`- (Required) URL string for a Splunk instance or external system data link target. [See the supported template variables](https://dev.splunk.com/observability/docs/administration/datalinks/).\n  * `time_format` - (Optional) [Designates the format](https://dev.splunk.com/observability/docs/administration/datalinks/) of `minimum_time_window` in the same data link target object. Must be one of `\"ISO8601\"`, `\"EpochSeconds\"` or `\"Epoch\"` (which is milliseconds). Defaults to `\"ISO8601\"`.\n  * `minimum_time_window` - (Optional) The [minimum time window](https://dev.splunk.com/observability/docs/administration/datalinks/) for a search sent to an external site. Defaults to `6000`\n  * `property_key_mapping` - Describes the relationship between Splunk Observability Cloud metadata keys and external system properties when the key names are different.\n* `target_signalfx_dashboard` - (Optional) Link to a Splunk Observability Cloud dashboard\n  * `name` (Required) User-assigned target name. Use this value to differentiate between the link targets for a data link object.\n  * `is_default` - (Optional) Flag that designates a target as the default for a data link object. `true` by default\n  * `dashboard_id` - (Required) SignalFx-assigned ID of the dashboard link target\n  * `dashboard_group_id` - (Required) SignalFx-assigned ID of the dashboard link target's dashboard group\n* `target_splunk` - (Optional) Link to an external URL\n  * `name` (Required) User-assigned target name. Use this value to differentiate between the link targets for a data link object.\n  * `property_key_mapping` - Describes the relationship between Splunk Observability Cloud metadata keys and external system properties when the key names are different.\n\n## Attributes\n\nIn a addition to all arguments above, the following attributes are exported:\n\n* `id` - The ID of the link.\n",
            "properties": {
                "contextDashboardId": {
                    "type": "string",
                    "description": "The dashobard ID to which this data link will be applied\n"
                },
                "propertyName": {
                    "type": "string",
                    "description": "Name (key) of the metadata that's the trigger of a data link. If you specify `property_value`, you must specify\n`property_name`.\n"
                },
                "propertyValue": {
                    "type": "string",
                    "description": "Value of the metadata that's the trigger of a data link. If you specify this property, you must also specify\n`property_name`.\n"
                },
                "targetExternalUrls": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/signalfx:index/DataLinkTargetExternalUrl:DataLinkTargetExternalUrl"
                    },
                    "description": "Link to an external URL\n"
                },
                "targetSignalfxDashboards": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/signalfx:index/DataLinkTargetSignalfxDashboard:DataLinkTargetSignalfxDashboard"
                    },
                    "description": "Link to a Splunk Observability Cloud dashboard\n"
                },
                "targetSplunks": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/signalfx:index/DataLinkTargetSplunk:DataLinkTargetSplunk"
                    },
                    "description": "Link to a Splunk instance\n"
                }
            },
            "inputProperties": {
                "contextDashboardId": {
                    "type": "string",
                    "description": "The dashobard ID to which this data link will be applied\n"
                },
                "propertyName": {
                    "type": "string",
                    "description": "Name (key) of the metadata that's the trigger of a data link. If you specify `property_value`, you must specify\n`property_name`.\n"
                },
                "propertyValue": {
                    "type": "string",
                    "description": "Value of the metadata that's the trigger of a data link. If you specify this property, you must also specify\n`property_name`.\n"
                },
                "targetExternalUrls": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/signalfx:index/DataLinkTargetExternalUrl:DataLinkTargetExternalUrl"
                    },
                    "description": "Link to an external URL\n"
                },
                "targetSignalfxDashboards": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/signalfx:index/DataLinkTargetSignalfxDashboard:DataLinkTargetSignalfxDashboard"
                    },
                    "description": "Link to a Splunk Observability Cloud dashboard\n"
                },
                "targetSplunks": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/signalfx:index/DataLinkTargetSplunk:DataLinkTargetSplunk"
                    },
                    "description": "Link to a Splunk instance\n"
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering DataLink resources.\n",
                "properties": {
                    "contextDashboardId": {
                        "type": "string",
                        "description": "The dashobard ID to which this data link will be applied\n"
                    },
                    "propertyName": {
                        "type": "string",
                        "description": "Name (key) of the metadata that's the trigger of a data link. If you specify `property_value`, you must specify\n`property_name`.\n"
                    },
                    "propertyValue": {
                        "type": "string",
                        "description": "Value of the metadata that's the trigger of a data link. If you specify this property, you must also specify\n`property_name`.\n"
                    },
                    "targetExternalUrls": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/signalfx:index/DataLinkTargetExternalUrl:DataLinkTargetExternalUrl"
                        },
                        "description": "Link to an external URL\n"
                    },
                    "targetSignalfxDashboards": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/signalfx:index/DataLinkTargetSignalfxDashboard:DataLinkTargetSignalfxDashboard"
                        },
                        "description": "Link to a Splunk Observability Cloud dashboard\n"
                    },
                    "targetSplunks": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/signalfx:index/DataLinkTargetSplunk:DataLinkTargetSplunk"
                        },
                        "description": "Link to a Splunk instance\n"
                    }
                },
                "type": "object"
            }
        },
        "signalfx:index/detector:Detector": {
            "description": "Provides a Splunk Observability Cloud detector resource. This can be used to create and manage detectors.\n\nIf you're interested in using Splunk Observability Cloud detector features such as Historical Anomaly, Resource Running Out, or others, consider building them in the UI first and then use the \"Show SignalFlow\" feature to extract the value for `program_text`. You can also see the [documentation for detector functions in signalflow-library](https://github.com/signalfx/signalflow-library/tree/master/library/signalfx/detectors).\n\n\u003e **NOTE** When you want to change or remove write permissions for a user other than yourself regarding detectors, use a session token of an administrator to authenticate the Splunk Observability Cloud provider. See [Operations that require a session token for an administrator](https://dev.splunk.com/observability/docs/administration/authtokens#Operations-that-require-a-session-token-for-an-administrator). \n\n## Example\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as signalfx from \"@pulumi/signalfx\";\n\nconst config = new pulumi.Config();\nconst clusters = config.getObject(\"clusters\") || [\n    \"clusterA\",\n    \"clusterB\",\n];\nconst applicationDelay: signalfx.Detector[] = [];\nfor (const range = {value: 0}; range.value \u003c clusters.length; range.value++) {\n    applicationDelay.push(new signalfx.Detector(`applicationDelay-${range.value}`, {\n        description: `your application is slow - ${clusters[range.value]}`,\n        maxDelay: 30,\n        tags: [\n            \"app-backend\",\n            \"staging\",\n        ],\n        authorizedWriterTeams: [signalfx_team.mycoolteam.id],\n        authorizedWriterUsers: [\"abc123\"],\n        programText: `signal = data('app.delay', filter('cluster','${clusters[range.value]}'), extrapolation='last_value', maxExtrapolations=5).max()\ndetect(when(signal \u003e 60, '5m')).publish('Processing old messages 5m')\ndetect(when(signal \u003e 60, '30m')).publish('Processing old messages 30m')\n`,\n        rules: [\n            {\n                description: \"maximum \u003e 60 for 5m\",\n                severity: \"Warning\",\n                detectLabel: \"Processing old messages 5m\",\n                notifications: [\"Email,foo-alerts@bar.com\"],\n            },\n            {\n                description: \"maximum \u003e 60 for 30m\",\n                severity: \"Critical\",\n                detectLabel: \"Processing old messages 30m\",\n                notifications: [\"Email,foo-alerts@bar.com\"],\n            },\n        ],\n    }));\n}\n```\n```python\nimport pulumi\nimport pulumi_signalfx as signalfx\n\nconfig = pulumi.Config()\nclusters = config.get_object(\"clusters\")\nif clusters is None:\n    clusters = [\n        \"clusterA\",\n        \"clusterB\",\n    ]\napplication_delay = []\nfor range in [{\"value\": i} for i in range(0, len(clusters))]:\n    application_delay.append(signalfx.Detector(f\"applicationDelay-{range['value']}\",\n        description=f\"your application is slow - {clusters[range['value']]}\",\n        max_delay=30,\n        tags=[\n            \"app-backend\",\n            \"staging\",\n        ],\n        authorized_writer_teams=[signalfx_team[\"mycoolteam\"][\"id\"]],\n        authorized_writer_users=[\"abc123\"],\n        program_text=f\"\"\"signal = data('app.delay', filter('cluster','{clusters[range[\"value\"]]}'), extrapolation='last_value', maxExtrapolations=5).max()\ndetect(when(signal \u003e 60, '5m')).publish('Processing old messages 5m')\ndetect(when(signal \u003e 60, '30m')).publish('Processing old messages 30m')\n\"\"\",\n        rules=[\n            signalfx.DetectorRuleArgs(\n                description=\"maximum \u003e 60 for 5m\",\n                severity=\"Warning\",\n                detect_label=\"Processing old messages 5m\",\n                notifications=[\"Email,foo-alerts@bar.com\"],\n            ),\n            signalfx.DetectorRuleArgs(\n                description=\"maximum \u003e 60 for 30m\",\n                severity=\"Critical\",\n                detect_label=\"Processing old messages 30m\",\n                notifications=[\"Email,foo-alerts@bar.com\"],\n            ),\n        ]))\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing SignalFx = Pulumi.SignalFx;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var config = new Config();\n    var clusters = config.GetObject\u003cdynamic\u003e(\"clusters\") ?? new[]\n    {\n        \"clusterA\",\n        \"clusterB\",\n    };\n    var applicationDelay = new List\u003cSignalFx.Detector\u003e();\n    for (var rangeIndex = 0; rangeIndex \u003c clusters.Length; rangeIndex++)\n    {\n        var range = new { Value = rangeIndex };\n        applicationDelay.Add(new SignalFx.Detector($\"applicationDelay-{range.Value}\", new()\n        {\n            Description = $\"your application is slow - {clusters[range.Value]}\",\n            MaxDelay = 30,\n            Tags = new[]\n            {\n                \"app-backend\",\n                \"staging\",\n            },\n            AuthorizedWriterTeams = new[]\n            {\n                signalfx_team.Mycoolteam.Id,\n            },\n            AuthorizedWriterUsers = new[]\n            {\n                \"abc123\",\n            },\n            ProgramText = @$\"signal = data('app.delay', filter('cluster','{clusters[range.Value]}'), extrapolation='last_value', maxExtrapolations=5).max()\ndetect(when(signal \u003e 60, '5m')).publish('Processing old messages 5m')\ndetect(when(signal \u003e 60, '30m')).publish('Processing old messages 30m')\n\",\n            Rules = new[]\n            {\n                new SignalFx.Inputs.DetectorRuleArgs\n                {\n                    Description = \"maximum \u003e 60 for 5m\",\n                    Severity = \"Warning\",\n                    DetectLabel = \"Processing old messages 5m\",\n                    Notifications = new[]\n                    {\n                        \"Email,foo-alerts@bar.com\",\n                    },\n                },\n                new SignalFx.Inputs.DetectorRuleArgs\n                {\n                    Description = \"maximum \u003e 60 for 30m\",\n                    Severity = \"Critical\",\n                    DetectLabel = \"Processing old messages 30m\",\n                    Notifications = new[]\n                    {\n                        \"Email,foo-alerts@bar.com\",\n                    },\n                },\n            },\n        }));\n    }\n});\n```\n```go\npackage main\n\nimport (\n\t\"fmt\"\n\n\t\"github.com/pulumi/pulumi-signalfx/sdk/v7/go/signalfx\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi/config\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tcfg := config.New(ctx, \"\")\n\t\tclusters := []string{\n\t\t\t\"clusterA\",\n\t\t\t\"clusterB\",\n\t\t}\n\t\tif param := cfg.GetObject(\"clusters\"); param != nil {\n\t\t\tclusters = param\n\t\t}\n\t\tvar applicationDelay []*signalfx.Detector\n\t\tfor index := 0; index \u003c len(clusters); index++ {\n\t\t\tkey0 := index\n\t\t\tval0 := index\n\t\t\t__res, err := signalfx.NewDetector(ctx, fmt.Sprintf(\"applicationDelay-%v\", key0), \u0026signalfx.DetectorArgs{\n\t\t\t\tDescription: pulumi.String(fmt.Sprintf(\"your application is slow - %v\", clusters[val0])),\n\t\t\t\tMaxDelay:    pulumi.Int(30),\n\t\t\t\tTags: pulumi.StringArray{\n\t\t\t\t\tpulumi.String(\"app-backend\"),\n\t\t\t\t\tpulumi.String(\"staging\"),\n\t\t\t\t},\n\t\t\t\tAuthorizedWriterTeams: pulumi.StringArray{\n\t\t\t\t\tsignalfx_team.Mycoolteam.Id,\n\t\t\t\t},\n\t\t\t\tAuthorizedWriterUsers: pulumi.StringArray{\n\t\t\t\t\tpulumi.String(\"abc123\"),\n\t\t\t\t},\n\t\t\t\tProgramText: pulumi.String(fmt.Sprintf(\"signal = data('app.delay', filter('cluster','%v'), extrapolation='last_value', maxExtrapolations=5).max()\\ndetect(when(signal \u003e 60, '5m')).publish('Processing old messages 5m')\\ndetect(when(signal \u003e 60, '30m')).publish('Processing old messages 30m')\\n\", clusters[val0])),\n\t\t\t\tRules: signalfx.DetectorRuleArray{\n\t\t\t\t\t\u0026signalfx.DetectorRuleArgs{\n\t\t\t\t\t\tDescription: pulumi.String(\"maximum \u003e 60 for 5m\"),\n\t\t\t\t\t\tSeverity:    pulumi.String(\"Warning\"),\n\t\t\t\t\t\tDetectLabel: pulumi.String(\"Processing old messages 5m\"),\n\t\t\t\t\t\tNotifications: pulumi.StringArray{\n\t\t\t\t\t\t\tpulumi.String(\"Email,foo-alerts@bar.com\"),\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t\t\u0026signalfx.DetectorRuleArgs{\n\t\t\t\t\t\tDescription: pulumi.String(\"maximum \u003e 60 for 30m\"),\n\t\t\t\t\t\tSeverity:    pulumi.String(\"Critical\"),\n\t\t\t\t\t\tDetectLabel: pulumi.String(\"Processing old messages 30m\"),\n\t\t\t\t\t\tNotifications: pulumi.StringArray{\n\t\t\t\t\t\t\tpulumi.String(\"Email,foo-alerts@bar.com\"),\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t})\n\t\t\tif err != nil {\n\t\t\t\treturn err\n\t\t\t}\n\t\t\tapplicationDelay = append(applicationDelay, __res)\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.signalfx.Detector;\nimport com.pulumi.signalfx.DetectorArgs;\nimport com.pulumi.signalfx.inputs.DetectorRuleArgs;\nimport com.pulumi.codegen.internal.KeyedValue;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var config = ctx.config();\n        final var clusters = config.get(\"clusters\").orElse(        \n            \"clusterA\",\n            \"clusterB\");\n        for (var i = 0; i \u003c clusters.length(); i++) {\n            new Detector(\"applicationDelay-\" + i, DetectorArgs.builder()            \n                .description(String.format(\"your application is slow - %s\", clusters[range.value()]))\n                .maxDelay(30)\n                .tags(                \n                    \"app-backend\",\n                    \"staging\")\n                .authorizedWriterTeams(signalfx_team.mycoolteam().id())\n                .authorizedWriterUsers(\"abc123\")\n                .programText(\"\"\"\nsignal = data('app.delay', filter('cluster','%s'), extrapolation='last_value', maxExtrapolations=5).max()\ndetect(when(signal \u003e 60, '5m')).publish('Processing old messages 5m')\ndetect(when(signal \u003e 60, '30m')).publish('Processing old messages 30m')\n\", clusters[range.value()]))\n                .rules(                \n                    DetectorRuleArgs.builder()\n                        .description(\"maximum \u003e 60 for 5m\")\n                        .severity(\"Warning\")\n                        .detectLabel(\"Processing old messages 5m\")\n                        .notifications(\"Email,foo-alerts@bar.com\")\n                        .build(),\n                    DetectorRuleArgs.builder()\n                        .description(\"maximum \u003e 60 for 30m\")\n                        .severity(\"Critical\")\n                        .detectLabel(\"Processing old messages 30m\")\n                        .notifications(\"Email,foo-alerts@bar.com\")\n                        .build())\n                .build());\n\n        \n}\n    }\n}\n```\n\n## Notification format\n\nAs Splunk Observability Cloud supports different notification mechanisms, use a comma-delimited string to provide inputs. If you want to specify multiple notifications, each must be a member in the list, like so:\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\n```\n```python\nimport pulumi\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n    }\n}\n```\n```yaml\n{}\n```\n\nSee [Splunk Observability Cloud Docs](https://dev.splunk.com/observability/reference/api/detectors/latest) for more information.\n\nHere are some example of how to configure each notification type:\n\n### Email\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\n```\n```python\nimport pulumi\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n    }\n}\n```\n```yaml\n{}\n```\n\n### Jira\n\nNote that the `credentialId` is the Splunk-provided ID shown after setting up your Jira integration. See also `signalfx.jira.Integration`.\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\n```\n```python\nimport pulumi\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n    }\n}\n```\n```yaml\n{}\n```\n\n### OpsGenie\n\nNote that the `credentialId` is the Splunk-provided ID shown after setting up your Opsgenie integration. `Team` here is hardcoded as the `responderType` as that is the only acceptable type as per the API docs.\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\n```\n```python\nimport pulumi\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n    }\n}\n```\n```yaml\n{}\n```\n\n### PagerDuty\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\n```\n```python\nimport pulumi\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n    }\n}\n```\n```yaml\n{}\n```\n\n### Slack\n\nExclude the `#` on the channel name:\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\n```\n```python\nimport pulumi\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n    }\n}\n```\n```yaml\n{}\n```\n\n### Team\n\nSends [notifications to a team](https://docs.signalfx.com/en/latest/managing/teams/team-notifications.html).\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\n```\n```python\nimport pulumi\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n    }\n}\n```\n```yaml\n{}\n```\n\n### TeamEmail\n\nSends an email to every member of a team.\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\n```\n```python\nimport pulumi\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n    }\n}\n```\n```yaml\n{}\n```\n\n### Splunk On-Call (formerly VictorOps)\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\n```\n```python\nimport pulumi\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n    }\n}\n```\n```yaml\n{}\n```\n\n### Webhooks\n\nYou need to include all the commas even if you only use a credential id.\n\nYou can either configure a Webhook to use an existing integration's credential id:\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\n```\n```python\nimport pulumi\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n    }\n}\n```\n```yaml\n{}\n```\n\nOr configure one inline:\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\n```\n```python\nimport pulumi\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n    }\n}\n```\n```yaml\n{}\n```\n\n## Arguments\n\n* `name` - (Required) Name of the detector.\n* `program_text` - (Required) Signalflow program text for the detector. More info [in the Splunk Observability Cloud docs](https://dev.splunk.com/observability/docs/signalflow/).\n* `description` - (Optional) Description of the detector.\n* `authorized_writer_teams` - (Optional) Team IDs that have write access to this detector. Remember to use an admin's token if using this feature and to include that admin's team id (or user id in `authorized_writer_users`).\n* `authorized_writer_users` - (Optional) User IDs that have write access to this detector. Remember to use an admin's token if using this feature and to include that admin's user id (or team id in `authorized_writer_teams`).\n* `max_delay` - (Optional) How long (in seconds) to wait for late datapoints. See [Delayed Datapoints](https://docs.splunk.com/observability/en/data-visualization/charts/chart-builder.html#delayed-datapoints) for more info. Max value is `900` seconds (15 minutes). `Auto` (as little as possible) by default.\n* `min_delay` - (Optional) How long (in seconds) to wait even if the datapoints are arriving in a timely fashion. Max value is 900 (15m).\n* `show_data_markers` - (Optional) When `true`, markers will be drawn for each datapoint within the visualization. `true` by default.\n* `show_event_lines` - (Optional) When `true`, the visualization will display a vertical line for each event trigger. `false` by default.\n* `disable_sampling` - (Optional) When `false`, the visualization may sample the output timeseries rather than displaying them all. `false` by default.\n* `time_range` - (Optional) Seconds to display in the visualization. This is a rolling range from the current time. Example: `3600` corresponds to `-1h` in web UI. `3600` by default.\n* `start_time` - (Optional) Seconds since epoch. Used for visualization. Conflicts with `time_range`.\n* `end_time` - (Optional) Seconds since epoch. Used for visualization. Conflicts with `time_range`.\n* `tags` - (Optional) Tags associated with the detector.\n* `teams` - (Optional) Team IDs to associate the detector to.\n* `rule` - (Required) Set of rules used for alerting.\n    * `detect_label` - (Required) A detect label which matches a detect label within `program_text`.\n    * `severity` - (Required) The severity of the rule, must be one of: `\"Critical\"`, `\"Major\"`, `\"Minor\"`, `\"Warning\"`, `\"Info\"`.\n    * `description` - (Optional) Description for the rule. Displays as the alert condition in the Alert Rules tab of the detector editor in the web UI.\n    * `disabled` - (Optional) When true, notifications and events will not be generated for the detect label. `false` by default.\n    * `notifications` - (Optional) List of strings specifying where notifications will be sent when an incident occurs. See [Create A Single Detector](https://dev.splunk.com/observability/reference/api/detectors/latest) for more info.\n    * `parameterized_body` - (Optional) Custom notification message body when an alert is triggered. See [Set Up Detectors to Trigger Alerts](https://docs.splunk.com/observability/en/alerts-detectors-notifications/create-detectors-for-alerts.html) for more info.\n    * `parameterized_subject` - (Optional) Custom notification message subject when an alert is triggered. See [Set Up Detectors to Trigger Alerts](https://docs.splunk.com/observability/en/alerts-detectors-notifications/create-detectors-for-alerts.html) for more info.\n    * `runbook_url` - (Optional) URL of page to consult when an alert is triggered. This can be used with custom notification messages.\n    * `tip` - (Optional) Plain text suggested first course of action, such as a command line to execute. This can be used with custom notification messages.\n* `viz_options` - (Optional) Plot-level customization options, associated with a publish statement.\n    * `label` - (Required) Label used in the publish statement that displays the plot (metric time series data) you want to customize.\n    * `display_name` - (Optional) Specifies an alternate value for the Plot Name column of the Data Table associated with the chart.\n    * `color` - (Optional) Color to use : gray, blue, azure, navy, brown, orange, yellow, iris, magenta, pink, purple, violet, lilac, emerald, green, aquamarine.\n    * `value_unit` - (Optional) A unit to attach to this plot. Units support automatic scaling (eg thousands of bytes will be displayed as kilobytes). Values values are `Bit, Kilobit, Megabit, Gigabit, Terabit, Petabit, Exabit, Zettabit, Yottabit, Byte, Kibibyte, Mebibyte, Gibibyte (note: this was previously typoed as Gigibyte), Tebibyte, Pebibyte, Exbibyte, Zebibyte, Yobibyte, Nanosecond, Microsecond, Millisecond, Second, Minute, Hour, Day, Week`.\n    * `value_prefix`, `value_suffix` - (Optional) Arbitrary prefix/suffix to display with the value of this plot.\n\n**Notes**\n\nUse both `max_delay` in your detector configuration and an `extrapolation` policy in your program text to reduce false positives and false negatives.\n\n- `max_delay` allows Splunk Observability Cloud to continue with computation if there is a lag in receiving data points.\n- `extrapolation` allows you to specify how to handle missing data. An extrapolation policy can be added to individual signals by updating the data block in your `program_text`.\n\nSee [Delayed Datapoints](https://docs.splunk.com/observability/en/data-visualization/charts/chart-builder.html#delayed-datapoints) for more info.\n\n## Attributes\n\nIn a addition to all arguments above, the following attributes are exported:\n\n* `id` - The ID of the detector.\n* `label_resolutions` - The resolutions of the detector alerts in milliseconds that indicate how often data is analyzed to determine if an alert should be triggered.\n* `url` - The URL of the detector.\n\n\n## Import\n\nDetectors can be imported using their string ID (recoverable from URL: `/#/detector/v2/abc123/edit`, e.g.\n\n```sh\n $ pulumi import signalfx:index/detector:Detector application_delay abc123\n```\n ",
            "properties": {
                "authorizedWriterTeams": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Team IDs that have write access to this dashboard\n"
                },
                "authorizedWriterUsers": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "User IDs that have write access to this dashboard\n"
                },
                "description": {
                    "type": "string",
                    "description": "Description of the detector\n"
                },
                "disableSampling": {
                    "type": "boolean",
                    "description": "(false by default) When false, samples a subset of the output MTS in the visualization.\n"
                },
                "endTime": {
                    "type": "integer",
                    "description": "Seconds since epoch. Used for visualization\n"
                },
                "labelResolutions": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "integer"
                    },
                    "description": "Resolutions of the detector alerts in milliseconds that indicate how often data is analyzed to determine if an alert\nshould be triggered\n"
                },
                "maxDelay": {
                    "type": "integer",
                    "description": "Maximum time (in seconds) to wait for late datapoints. Max value is 900 (15m)\n"
                },
                "minDelay": {
                    "type": "integer",
                    "description": "Minimum time (in seconds) for the computation to wait even if the datapoints are arriving in a timely fashion. Max value\nis 900 (15m)\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the detector\n"
                },
                "programText": {
                    "type": "string",
                    "description": "Signalflow program text for the detector. More info at \"https://developers.signalfx.com/docs/signalflow-overview\"\n"
                },
                "rules": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/signalfx:index/DetectorRule:DetectorRule"
                    },
                    "description": "Set of rules used for alerting\n"
                },
                "showDataMarkers": {
                    "type": "boolean",
                    "description": "(true by default) When true, markers will be drawn for each datapoint within the visualization.\n"
                },
                "showEventLines": {
                    "type": "boolean",
                    "description": "(false by default) When true, vertical lines will be drawn for each triggered event within the visualization.\n"
                },
                "startTime": {
                    "type": "integer",
                    "description": "Seconds since epoch. Used for visualization\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Tags associated with the detector\n"
                },
                "teams": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Team IDs to associate the detector to\n"
                },
                "timeRange": {
                    "type": "integer",
                    "description": "Seconds to display in the visualization. This is a rolling range from the current time. Example: 3600 = `-1h`. Defaults\nto 3600\n"
                },
                "timezone": {
                    "type": "string",
                    "description": "The property value is a string that denotes the geographic region associated with the time zone, (e.g. Australia/Sydney)\n"
                },
                "url": {
                    "type": "string",
                    "description": "URL of the detector\n"
                },
                "vizOptions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/signalfx:index/DetectorVizOption:DetectorVizOption"
                    },
                    "description": "Plot-level customization options, associated with a publish statement\n"
                }
            },
            "required": [
                "labelResolutions",
                "name",
                "programText",
                "rules",
                "url"
            ],
            "inputProperties": {
                "authorizedWriterTeams": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Team IDs that have write access to this dashboard\n"
                },
                "authorizedWriterUsers": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "User IDs that have write access to this dashboard\n"
                },
                "description": {
                    "type": "string",
                    "description": "Description of the detector\n"
                },
                "disableSampling": {
                    "type": "boolean",
                    "description": "(false by default) When false, samples a subset of the output MTS in the visualization.\n"
                },
                "endTime": {
                    "type": "integer",
                    "description": "Seconds since epoch. Used for visualization\n"
                },
                "maxDelay": {
                    "type": "integer",
                    "description": "Maximum time (in seconds) to wait for late datapoints. Max value is 900 (15m)\n"
                },
                "minDelay": {
                    "type": "integer",
                    "description": "Minimum time (in seconds) for the computation to wait even if the datapoints are arriving in a timely fashion. Max value\nis 900 (15m)\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the detector\n"
                },
                "programText": {
                    "type": "string",
                    "description": "Signalflow program text for the detector. More info at \"https://developers.signalfx.com/docs/signalflow-overview\"\n"
                },
                "rules": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/signalfx:index/DetectorRule:DetectorRule"
                    },
                    "description": "Set of rules used for alerting\n"
                },
                "showDataMarkers": {
                    "type": "boolean",
                    "description": "(true by default) When true, markers will be drawn for each datapoint within the visualization.\n"
                },
                "showEventLines": {
                    "type": "boolean",
                    "description": "(false by default) When true, vertical lines will be drawn for each triggered event within the visualization.\n"
                },
                "startTime": {
                    "type": "integer",
                    "description": "Seconds since epoch. Used for visualization\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Tags associated with the detector\n"
                },
                "teams": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Team IDs to associate the detector to\n"
                },
                "timeRange": {
                    "type": "integer",
                    "description": "Seconds to display in the visualization. This is a rolling range from the current time. Example: 3600 = `-1h`. Defaults\nto 3600\n"
                },
                "timezone": {
                    "type": "string",
                    "description": "The property value is a string that denotes the geographic region associated with the time zone, (e.g. Australia/Sydney)\n"
                },
                "vizOptions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/signalfx:index/DetectorVizOption:DetectorVizOption"
                    },
                    "description": "Plot-level customization options, associated with a publish statement\n"
                }
            },
            "requiredInputs": [
                "programText",
                "rules"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Detector resources.\n",
                "properties": {
                    "authorizedWriterTeams": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Team IDs that have write access to this dashboard\n"
                    },
                    "authorizedWriterUsers": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "User IDs that have write access to this dashboard\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "Description of the detector\n"
                    },
                    "disableSampling": {
                        "type": "boolean",
                        "description": "(false by default) When false, samples a subset of the output MTS in the visualization.\n"
                    },
                    "endTime": {
                        "type": "integer",
                        "description": "Seconds since epoch. Used for visualization\n"
                    },
                    "labelResolutions": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "integer"
                        },
                        "description": "Resolutions of the detector alerts in milliseconds that indicate how often data is analyzed to determine if an alert\nshould be triggered\n"
                    },
                    "maxDelay": {
                        "type": "integer",
                        "description": "Maximum time (in seconds) to wait for late datapoints. Max value is 900 (15m)\n"
                    },
                    "minDelay": {
                        "type": "integer",
                        "description": "Minimum time (in seconds) for the computation to wait even if the datapoints are arriving in a timely fashion. Max value\nis 900 (15m)\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the detector\n"
                    },
                    "programText": {
                        "type": "string",
                        "description": "Signalflow program text for the detector. More info at \"https://developers.signalfx.com/docs/signalflow-overview\"\n"
                    },
                    "rules": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/signalfx:index/DetectorRule:DetectorRule"
                        },
                        "description": "Set of rules used for alerting\n"
                    },
                    "showDataMarkers": {
                        "type": "boolean",
                        "description": "(true by default) When true, markers will be drawn for each datapoint within the visualization.\n"
                    },
                    "showEventLines": {
                        "type": "boolean",
                        "description": "(false by default) When true, vertical lines will be drawn for each triggered event within the visualization.\n"
                    },
                    "startTime": {
                        "type": "integer",
                        "description": "Seconds since epoch. Used for visualization\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Tags associated with the detector\n"
                    },
                    "teams": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Team IDs to associate the detector to\n"
                    },
                    "timeRange": {
                        "type": "integer",
                        "description": "Seconds to display in the visualization. This is a rolling range from the current time. Example: 3600 = `-1h`. Defaults\nto 3600\n"
                    },
                    "timezone": {
                        "type": "string",
                        "description": "The property value is a string that denotes the geographic region associated with the time zone, (e.g. Australia/Sydney)\n"
                    },
                    "url": {
                        "type": "string",
                        "description": "URL of the detector\n"
                    },
                    "vizOptions": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/signalfx:index/DetectorVizOption:DetectorVizOption"
                        },
                        "description": "Plot-level customization options, associated with a publish statement\n"
                    }
                },
                "type": "object"
            }
        },
        "signalfx:index/eventFeedChart:EventFeedChart": {
            "description": "Displays a listing of events as a widget in a dashboard.\n\n## Example\n\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.signalfx.EventFeedChart;\nimport com.pulumi.signalfx.EventFeedChartArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var mynote0 = new EventFeedChart(\"mynote0\", EventFeedChartArgs.builder()        \n            .description(\"Lorem ipsum dolor sit amet\")\n            .programText(\"A = events(eventType='My Event Type').publish(label='A')\")\n            .vizOptions(%!v(PANIC=Format method: runtime error: invalid memory address or nil pointer dereference))\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  mynote0:\n    type: signalfx:EventFeedChart\n    properties:\n      description: Lorem ipsum dolor sit amet\n      programText: A = events(eventType='My Event Type').publish(label='A')\n      vizOptions:\n        - color: orange\n          label: A\n```\n\n## Arguments\n\nThe following arguments are supported in the resource block:\n\n* `name` - (Required) Name of the text note.\n* `program_text` - (Required) Signalflow program text for the chart. More info[in the Splunk Observability Cloud docs](https://dev.splunk.com/observability/docs/signalflow/).\n* `description` - (Optional) Description of the text note.\n* `time_range` - (Optional) From when to display data. Splunk Observability Cloud time syntax (e.g. `\"-5m\"`, `\"-1h\"`). Conflicts with `start_time` and `end_time`.\n* `start_time` - (Optional) Seconds since epoch. Used for visualization. Conflicts with `time_range`.\n* `end_time` - (Optional) Seconds since epoch. Used for visualization. Conflicts with `time_range`.\n\n## Attributes\n\nIn a addition to all arguments above, the following attributes are exported:\n\n* `id` - The ID of the chart.\n* `url` - The URL of the chart.\n",
            "properties": {
                "description": {
                    "type": "string",
                    "description": "Description of the chart (Optional)\n"
                },
                "endTime": {
                    "type": "integer",
                    "description": "Seconds since epoch to end the visualization\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the chart\n"
                },
                "programText": {
                    "type": "string",
                    "description": "Signalflow program text for the chart. More info at \"https://developers.signalfx.com/docs/signalflow-overview\"\n"
                },
                "startTime": {
                    "type": "integer",
                    "description": "Seconds since epoch to start the visualization\n"
                },
                "timeRange": {
                    "type": "integer",
                    "description": "Seconds to display in the visualization. This is a rolling range from the current time. Example: 3600 = `-1h`\n"
                },
                "url": {
                    "type": "string",
                    "description": "URL of the chart\n"
                }
            },
            "required": [
                "name",
                "programText",
                "url"
            ],
            "inputProperties": {
                "description": {
                    "type": "string",
                    "description": "Description of the chart (Optional)\n"
                },
                "endTime": {
                    "type": "integer",
                    "description": "Seconds since epoch to end the visualization\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the chart\n"
                },
                "programText": {
                    "type": "string",
                    "description": "Signalflow program text for the chart. More info at \"https://developers.signalfx.com/docs/signalflow-overview\"\n"
                },
                "startTime": {
                    "type": "integer",
                    "description": "Seconds since epoch to start the visualization\n"
                },
                "timeRange": {
                    "type": "integer",
                    "description": "Seconds to display in the visualization. This is a rolling range from the current time. Example: 3600 = `-1h`\n"
                }
            },
            "requiredInputs": [
                "programText"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering EventFeedChart resources.\n",
                "properties": {
                    "description": {
                        "type": "string",
                        "description": "Description of the chart (Optional)\n"
                    },
                    "endTime": {
                        "type": "integer",
                        "description": "Seconds since epoch to end the visualization\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the chart\n"
                    },
                    "programText": {
                        "type": "string",
                        "description": "Signalflow program text for the chart. More info at \"https://developers.signalfx.com/docs/signalflow-overview\"\n"
                    },
                    "startTime": {
                        "type": "integer",
                        "description": "Seconds since epoch to start the visualization\n"
                    },
                    "timeRange": {
                        "type": "integer",
                        "description": "Seconds to display in the visualization. This is a rolling range from the current time. Example: 3600 = `-1h`\n"
                    },
                    "url": {
                        "type": "string",
                        "description": "URL of the chart\n"
                    }
                },
                "type": "object"
            }
        },
        "signalfx:index/heatmapChart:HeatmapChart": {
            "description": "This chart type shows the specified plot in a heat map fashion. This format is similar to the [Infrastructure Navigator](https://signalfx-product-docs.readthedocs-hosted.com/en/latest/built-in-content/infra-nav.html#infra), with squares representing each source for the selected metric, and the color of each square representing the value range of the metric.\n\n## Example\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as signalfx from \"@pulumi/signalfx\";\n\nconst myheatmapchart0 = new signalfx.HeatmapChart(\"myheatmapchart0\", {\n    colorRange: {\n        color: \"#ff0000\",\n        maxValue: 100,\n        minValue: 0,\n    },\n    colorScales: [\n        {\n            color: \"green\",\n            gte: 99,\n        },\n        {\n            color: \"yellow\",\n            gte: 95,\n            lt: 99,\n        },\n        {\n            color: \"red\",\n            lt: 95,\n        },\n    ],\n    description: \"Very cool Heatmap\",\n    disableSampling: true,\n    groupBies: [\n        \"hostname\",\n        \"host\",\n    ],\n    hideTimestamp: true,\n    programText: `myfilters = filter(\"cluster_name\", \"prod\") and filter(\"role\", \"search\")\ndata(\"cpu.total.idle\", filter=myfilters).publish()\n\n`,\n    sortBy: \"+host\",\n    timezone: \"Europe/Paris\",\n});\n```\n```python\nimport pulumi\nimport pulumi_signalfx as signalfx\n\nmyheatmapchart0 = signalfx.HeatmapChart(\"myheatmapchart0\",\n    color_range=signalfx.HeatmapChartColorRangeArgs(\n        color=\"#ff0000\",\n        max_value=100,\n        min_value=0,\n    ),\n    color_scales=[\n        signalfx.HeatmapChartColorScaleArgs(\n            color=\"green\",\n            gte=99,\n        ),\n        signalfx.HeatmapChartColorScaleArgs(\n            color=\"yellow\",\n            gte=95,\n            lt=99,\n        ),\n        signalfx.HeatmapChartColorScaleArgs(\n            color=\"red\",\n            lt=95,\n        ),\n    ],\n    description=\"Very cool Heatmap\",\n    disable_sampling=True,\n    group_bies=[\n        \"hostname\",\n        \"host\",\n    ],\n    hide_timestamp=True,\n    program_text=\"\"\"myfilters = filter(\"cluster_name\", \"prod\") and filter(\"role\", \"search\")\ndata(\"cpu.total.idle\", filter=myfilters).publish()\n\n\"\"\",\n    sort_by=\"+host\",\n    timezone=\"Europe/Paris\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing SignalFx = Pulumi.SignalFx;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var myheatmapchart0 = new SignalFx.HeatmapChart(\"myheatmapchart0\", new()\n    {\n        ColorRange = new SignalFx.Inputs.HeatmapChartColorRangeArgs\n        {\n            Color = \"#ff0000\",\n            MaxValue = 100,\n            MinValue = 0,\n        },\n        ColorScales = new[]\n        {\n            new SignalFx.Inputs.HeatmapChartColorScaleArgs\n            {\n                Color = \"green\",\n                Gte = 99,\n            },\n            new SignalFx.Inputs.HeatmapChartColorScaleArgs\n            {\n                Color = \"yellow\",\n                Gte = 95,\n                Lt = 99,\n            },\n            new SignalFx.Inputs.HeatmapChartColorScaleArgs\n            {\n                Color = \"red\",\n                Lt = 95,\n            },\n        },\n        Description = \"Very cool Heatmap\",\n        DisableSampling = true,\n        GroupBies = new[]\n        {\n            \"hostname\",\n            \"host\",\n        },\n        HideTimestamp = true,\n        ProgramText = @\"myfilters = filter(\"\"cluster_name\"\", \"\"prod\"\") and filter(\"\"role\"\", \"\"search\"\")\ndata(\"\"cpu.total.idle\"\", filter=myfilters).publish()\n\n\",\n        SortBy = \"+host\",\n        Timezone = \"Europe/Paris\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-signalfx/sdk/v7/go/signalfx\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := signalfx.NewHeatmapChart(ctx, \"myheatmapchart0\", \u0026signalfx.HeatmapChartArgs{\n\t\t\tColorRange: \u0026signalfx.HeatmapChartColorRangeArgs{\n\t\t\t\tColor:    pulumi.String(\"#ff0000\"),\n\t\t\t\tMaxValue: pulumi.Float64(100),\n\t\t\t\tMinValue: pulumi.Float64(0),\n\t\t\t},\n\t\t\tColorScales: signalfx.HeatmapChartColorScaleArray{\n\t\t\t\t\u0026signalfx.HeatmapChartColorScaleArgs{\n\t\t\t\t\tColor: pulumi.String(\"green\"),\n\t\t\t\t\tGte:   pulumi.Float64(99),\n\t\t\t\t},\n\t\t\t\t\u0026signalfx.HeatmapChartColorScaleArgs{\n\t\t\t\t\tColor: pulumi.String(\"yellow\"),\n\t\t\t\t\tGte:   pulumi.Float64(95),\n\t\t\t\t\tLt:    pulumi.Float64(99),\n\t\t\t\t},\n\t\t\t\t\u0026signalfx.HeatmapChartColorScaleArgs{\n\t\t\t\t\tColor: pulumi.String(\"red\"),\n\t\t\t\t\tLt:    pulumi.Float64(95),\n\t\t\t\t},\n\t\t\t},\n\t\t\tDescription:     pulumi.String(\"Very cool Heatmap\"),\n\t\t\tDisableSampling: pulumi.Bool(true),\n\t\t\tGroupBies: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"hostname\"),\n\t\t\t\tpulumi.String(\"host\"),\n\t\t\t},\n\t\t\tHideTimestamp: pulumi.Bool(true),\n\t\t\tProgramText:   pulumi.String(\"myfilters = filter(\\\"cluster_name\\\", \\\"prod\\\") and filter(\\\"role\\\", \\\"search\\\")\\ndata(\\\"cpu.total.idle\\\", filter=myfilters).publish()\\n\\n\"),\n\t\t\tSortBy:        pulumi.String(\"+host\"),\n\t\t\tTimezone:      pulumi.String(\"Europe/Paris\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.signalfx.HeatmapChart;\nimport com.pulumi.signalfx.HeatmapChartArgs;\nimport com.pulumi.signalfx.inputs.HeatmapChartColorRangeArgs;\nimport com.pulumi.signalfx.inputs.HeatmapChartColorScaleArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var myheatmapchart0 = new HeatmapChart(\"myheatmapchart0\", HeatmapChartArgs.builder()        \n            .colorRange(HeatmapChartColorRangeArgs.builder()\n                .color(\"#ff0000\")\n                .maxValue(100)\n                .minValue(0)\n                .build())\n            .colorScales(            \n                HeatmapChartColorScaleArgs.builder()\n                    .color(\"green\")\n                    .gte(99)\n                    .build(),\n                HeatmapChartColorScaleArgs.builder()\n                    .color(\"yellow\")\n                    .gte(95)\n                    .lt(99)\n                    .build(),\n                HeatmapChartColorScaleArgs.builder()\n                    .color(\"red\")\n                    .lt(95)\n                    .build())\n            .description(\"Very cool Heatmap\")\n            .disableSampling(true)\n            .groupBies(            \n                \"hostname\",\n                \"host\")\n            .hideTimestamp(true)\n            .programText(\"\"\"\nmyfilters = filter(\"cluster_name\", \"prod\") and filter(\"role\", \"search\")\ndata(\"cpu.total.idle\", filter=myfilters).publish()\n\n            \"\"\")\n            .sortBy(\"+host\")\n            .timezone(\"Europe/Paris\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  myheatmapchart0:\n    type: signalfx:HeatmapChart\n    properties:\n      colorRange:\n        color: '#ff0000'\n        maxValue: 100\n        minValue: 0\n      colorScales:\n        - color: green\n          gte: 99\n        - color: yellow\n          gte: 95\n          lt: 99\n        - color: red\n          lt: 95\n      description: Very cool Heatmap\n      disableSampling: true\n      groupBies:\n        - hostname\n        - host\n      hideTimestamp: true\n      programText: |+\n        myfilters = filter(\"cluster_name\", \"prod\") and filter(\"role\", \"search\")\n        data(\"cpu.total.idle\", filter=myfilters).publish()\n\n      sortBy: +host\n      timezone: Europe/Paris\n```\n\n\n## Arguments\n\nThe following arguments are supported in the resource block:\n\n* `name` - (Required) Name of the chart.\n* `program_text` - (Required) Signalflow program text for the chart. More info at \u003chttps://dev.splunk.com/observability/docs/signalflow/\u003e.\n* `description` - (Optional) Description of the chart.\n* `unit_prefix` - (Optional) Must be `\"Metric\"` or `\"Binary`\". `\"Metric\"` by default.\n* `minimum_resolution` - (Optional) The minimum resolution (in seconds) to use for computing the underlying program.\n* `max_delay` - (Optional) How long (in seconds) to wait for late datapoints.\n* `timezone` - (Optional) The property value is a string that denotes the geographic region associated with the time zone, (default UTC).\n* `refresh_interval` - (Optional) How often (in seconds) to refresh the values of the heatmap.\n* `disable_sampling` - (Optional) If `false`, samples a subset of the output MTS, which improves UI performance. `false` by default.\n* `group_by` - (Optional) Properties to group by in the heatmap (in nesting order).\n* `sort_by` - (Optional) The property to use when sorting the elements. Must be prepended with `+` for ascending or `-` for descending (e.g. `-foo`).\n* `hide_timestamp` - (Optional) Whether to show the timestamp in the chart. `false` by default.\n* `color_range` - (Optional, Default) Values and color for the color range. Example: `color_range : { min : 0, max : 100, color : \"#0000ff\" }`. Look at this [link](https://docs.splunk.com/observability/en/data-visualization/charts/chart-options.html).\n    * `min_value` - (Optional) The minimum value within the coloring range.\n    * `max_value` - (Optional) The maximum value within the coloring range.\n    * `color` - (Required) The color range to use. The starting hex color value for data values in a heatmap chart. Specify the value as a 6-character hexadecimal value preceded by the '#' character, for example \"#ea1849\" (grass green).\n* `color_scale` - (Optional.  Conflicts with `color_range`) One to N blocks, each defining a single color range including both the color to display for that range and the borders of the range. Example: `color_scale { gt = 60, color = \"blue\" } color_scale { lte = 60, color = \"yellow\" }`. Look at this [link](https://docs.splunk.com/observability/en/data-visualization/charts/chart-options.html).\n    * `gt` - (Optional) Indicates the lower threshold non-inclusive value for this range.\n    * `gte` - (Optional) Indicates the lower threshold inclusive value for this range.\n    * `lt` - (Optional) Indicates the upper threshold non-inclusive value for this range.\n    * `lte` - (Optional) Indicates the upper threshold inclusive value for this range.\n    * `color` - (Required) The color range to use. Hex values are not supported here. Must be one of gray, blue, light_blue, navy, dark_orange, orange, dark_yellow, magenta, cerise, pink, violet, purple, gray_blue, dark_green, green, aquamarine, red, yellow, vivid_yellow, light_green, or lime_green.\n\n## Attributes\n\nIn a addition to all arguments above, the following attributes are exported:\n\n* `id` - The ID of the chart.\n* `url` - The URL of the chart.\n",
            "properties": {
                "colorRange": {
                    "$ref": "#/types/signalfx:index/HeatmapChartColorRange:HeatmapChartColorRange",
                    "description": "Values and color for the color range. Example: colorRange : { min : 0, max : 100, color : \"#0000ff\" }\n"
                },
                "colorScales": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/signalfx:index/HeatmapChartColorScale:HeatmapChartColorScale"
                    },
                    "description": "Single color range including both the color to display for that range and the borders of the range\n"
                },
                "description": {
                    "type": "string",
                    "description": "Description of the chart (Optional)\n"
                },
                "disableSampling": {
                    "type": "boolean",
                    "description": "(false by default) If false, samples a subset of the output MTS, which improves UI performance\n"
                },
                "groupBies": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Properties to group by in the heatmap (in nesting order)\n"
                },
                "hideTimestamp": {
                    "type": "boolean",
                    "description": "(false by default) Whether to show the timestamp in the chart\n"
                },
                "maxDelay": {
                    "type": "integer",
                    "description": "How long (in seconds) to wait for late datapoints\n"
                },
                "minimumResolution": {
                    "type": "integer",
                    "description": "The minimum resolution (in seconds) to use for computing the underlying program\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the chart\n"
                },
                "programText": {
                    "type": "string",
                    "description": "Signalflow program text for the chart. More info at \"https://developers.signalfx.com/docs/signalflow-overview\"\n"
                },
                "refreshInterval": {
                    "type": "integer",
                    "description": "How often (in seconds) to refresh the values of the heatmap\n"
                },
                "sortBy": {
                    "type": "string",
                    "description": "The property to use when sorting the elements. Must be prepended with + for ascending or - for descending (e.g. -foo)\n"
                },
                "timezone": {
                    "type": "string",
                    "description": "The property value is a string that denotes the geographic region associated with the time zone, (e.g. Australia/Sydney)\n"
                },
                "unitPrefix": {
                    "type": "string",
                    "description": "(Metric by default) Must be \"Metric\" or \"Binary\"\n"
                },
                "url": {
                    "type": "string",
                    "description": "URL of the chart\n"
                }
            },
            "required": [
                "name",
                "programText",
                "url"
            ],
            "inputProperties": {
                "colorRange": {
                    "$ref": "#/types/signalfx:index/HeatmapChartColorRange:HeatmapChartColorRange",
                    "description": "Values and color for the color range. Example: colorRange : { min : 0, max : 100, color : \"#0000ff\" }\n"
                },
                "colorScales": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/signalfx:index/HeatmapChartColorScale:HeatmapChartColorScale"
                    },
                    "description": "Single color range including both the color to display for that range and the borders of the range\n"
                },
                "description": {
                    "type": "string",
                    "description": "Description of the chart (Optional)\n"
                },
                "disableSampling": {
                    "type": "boolean",
                    "description": "(false by default) If false, samples a subset of the output MTS, which improves UI performance\n"
                },
                "groupBies": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Properties to group by in the heatmap (in nesting order)\n"
                },
                "hideTimestamp": {
                    "type": "boolean",
                    "description": "(false by default) Whether to show the timestamp in the chart\n"
                },
                "maxDelay": {
                    "type": "integer",
                    "description": "How long (in seconds) to wait for late datapoints\n"
                },
                "minimumResolution": {
                    "type": "integer",
                    "description": "The minimum resolution (in seconds) to use for computing the underlying program\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the chart\n"
                },
                "programText": {
                    "type": "string",
                    "description": "Signalflow program text for the chart. More info at \"https://developers.signalfx.com/docs/signalflow-overview\"\n"
                },
                "refreshInterval": {
                    "type": "integer",
                    "description": "How often (in seconds) to refresh the values of the heatmap\n"
                },
                "sortBy": {
                    "type": "string",
                    "description": "The property to use when sorting the elements. Must be prepended with + for ascending or - for descending (e.g. -foo)\n"
                },
                "timezone": {
                    "type": "string",
                    "description": "The property value is a string that denotes the geographic region associated with the time zone, (e.g. Australia/Sydney)\n"
                },
                "unitPrefix": {
                    "type": "string",
                    "description": "(Metric by default) Must be \"Metric\" or \"Binary\"\n"
                }
            },
            "requiredInputs": [
                "programText"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering HeatmapChart resources.\n",
                "properties": {
                    "colorRange": {
                        "$ref": "#/types/signalfx:index/HeatmapChartColorRange:HeatmapChartColorRange",
                        "description": "Values and color for the color range. Example: colorRange : { min : 0, max : 100, color : \"#0000ff\" }\n"
                    },
                    "colorScales": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/signalfx:index/HeatmapChartColorScale:HeatmapChartColorScale"
                        },
                        "description": "Single color range including both the color to display for that range and the borders of the range\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "Description of the chart (Optional)\n"
                    },
                    "disableSampling": {
                        "type": "boolean",
                        "description": "(false by default) If false, samples a subset of the output MTS, which improves UI performance\n"
                    },
                    "groupBies": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Properties to group by in the heatmap (in nesting order)\n"
                    },
                    "hideTimestamp": {
                        "type": "boolean",
                        "description": "(false by default) Whether to show the timestamp in the chart\n"
                    },
                    "maxDelay": {
                        "type": "integer",
                        "description": "How long (in seconds) to wait for late datapoints\n"
                    },
                    "minimumResolution": {
                        "type": "integer",
                        "description": "The minimum resolution (in seconds) to use for computing the underlying program\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the chart\n"
                    },
                    "programText": {
                        "type": "string",
                        "description": "Signalflow program text for the chart. More info at \"https://developers.signalfx.com/docs/signalflow-overview\"\n"
                    },
                    "refreshInterval": {
                        "type": "integer",
                        "description": "How often (in seconds) to refresh the values of the heatmap\n"
                    },
                    "sortBy": {
                        "type": "string",
                        "description": "The property to use when sorting the elements. Must be prepended with + for ascending or - for descending (e.g. -foo)\n"
                    },
                    "timezone": {
                        "type": "string",
                        "description": "The property value is a string that denotes the geographic region associated with the time zone, (e.g. Australia/Sydney)\n"
                    },
                    "unitPrefix": {
                        "type": "string",
                        "description": "(Metric by default) Must be \"Metric\" or \"Binary\"\n"
                    },
                    "url": {
                        "type": "string",
                        "description": "URL of the chart\n"
                    }
                },
                "type": "object"
            }
        },
        "signalfx:index/listChart:ListChart": {
            "description": "This chart type displays current data values in a list format.\n\nThe name of each value in the chart reflects the name of the plot and any associated dimensions. We recommend you click the Pencil icon and give the plot a meaningful name, as in plot B from the example. Otherwise, just the raw metric name will be displayed on the chart, as in plot A from the example.\n\n## Example\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as signalfx from \"@pulumi/signalfx\";\n\nconst mylistchart0 = new signalfx.ListChart(\"mylistchart0\", {\n    colorBy: \"Metric\",\n    description: \"Very cool List Chart\",\n    disableSampling: true,\n    hideMissingValues: true,\n    legendOptionsFields: [\n        {\n            enabled: false,\n            property: \"collector\",\n        },\n        {\n            enabled: true,\n            property: \"cluster_name\",\n        },\n        {\n            enabled: true,\n            property: \"role\",\n        },\n        {\n            enabled: false,\n            property: \"collector\",\n        },\n        {\n            enabled: false,\n            property: \"host\",\n        },\n    ],\n    maxDelay: 2,\n    maxPrecision: 2,\n    programText: `myfilters = filter(\"cluster_name\", \"prod\") and filter(\"role\", \"search\")\ndata(\"cpu.total.idle\", filter=myfilters).publish()\n\n`,\n    refreshInterval: 1,\n    sortBy: \"-value\",\n    timezone: \"Europe/Paris\",\n});\n```\n```python\nimport pulumi\nimport pulumi_signalfx as signalfx\n\nmylistchart0 = signalfx.ListChart(\"mylistchart0\",\n    color_by=\"Metric\",\n    description=\"Very cool List Chart\",\n    disable_sampling=True,\n    hide_missing_values=True,\n    legend_options_fields=[\n        signalfx.ListChartLegendOptionsFieldArgs(\n            enabled=False,\n            property=\"collector\",\n        ),\n        signalfx.ListChartLegendOptionsFieldArgs(\n            enabled=True,\n            property=\"cluster_name\",\n        ),\n        signalfx.ListChartLegendOptionsFieldArgs(\n            enabled=True,\n            property=\"role\",\n        ),\n        signalfx.ListChartLegendOptionsFieldArgs(\n            enabled=False,\n            property=\"collector\",\n        ),\n        signalfx.ListChartLegendOptionsFieldArgs(\n            enabled=False,\n            property=\"host\",\n        ),\n    ],\n    max_delay=2,\n    max_precision=2,\n    program_text=\"\"\"myfilters = filter(\"cluster_name\", \"prod\") and filter(\"role\", \"search\")\ndata(\"cpu.total.idle\", filter=myfilters).publish()\n\n\"\"\",\n    refresh_interval=1,\n    sort_by=\"-value\",\n    timezone=\"Europe/Paris\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing SignalFx = Pulumi.SignalFx;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var mylistchart0 = new SignalFx.ListChart(\"mylistchart0\", new()\n    {\n        ColorBy = \"Metric\",\n        Description = \"Very cool List Chart\",\n        DisableSampling = true,\n        HideMissingValues = true,\n        LegendOptionsFields = new[]\n        {\n            new SignalFx.Inputs.ListChartLegendOptionsFieldArgs\n            {\n                Enabled = false,\n                Property = \"collector\",\n            },\n            new SignalFx.Inputs.ListChartLegendOptionsFieldArgs\n            {\n                Enabled = true,\n                Property = \"cluster_name\",\n            },\n            new SignalFx.Inputs.ListChartLegendOptionsFieldArgs\n            {\n                Enabled = true,\n                Property = \"role\",\n            },\n            new SignalFx.Inputs.ListChartLegendOptionsFieldArgs\n            {\n                Enabled = false,\n                Property = \"collector\",\n            },\n            new SignalFx.Inputs.ListChartLegendOptionsFieldArgs\n            {\n                Enabled = false,\n                Property = \"host\",\n            },\n        },\n        MaxDelay = 2,\n        MaxPrecision = 2,\n        ProgramText = @\"myfilters = filter(\"\"cluster_name\"\", \"\"prod\"\") and filter(\"\"role\"\", \"\"search\"\")\ndata(\"\"cpu.total.idle\"\", filter=myfilters).publish()\n\n\",\n        RefreshInterval = 1,\n        SortBy = \"-value\",\n        Timezone = \"Europe/Paris\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-signalfx/sdk/v7/go/signalfx\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := signalfx.NewListChart(ctx, \"mylistchart0\", \u0026signalfx.ListChartArgs{\n\t\t\tColorBy:           pulumi.String(\"Metric\"),\n\t\t\tDescription:       pulumi.String(\"Very cool List Chart\"),\n\t\t\tDisableSampling:   pulumi.Bool(true),\n\t\t\tHideMissingValues: pulumi.Bool(true),\n\t\t\tLegendOptionsFields: signalfx.ListChartLegendOptionsFieldArray{\n\t\t\t\t\u0026signalfx.ListChartLegendOptionsFieldArgs{\n\t\t\t\t\tEnabled:  pulumi.Bool(false),\n\t\t\t\t\tProperty: pulumi.String(\"collector\"),\n\t\t\t\t},\n\t\t\t\t\u0026signalfx.ListChartLegendOptionsFieldArgs{\n\t\t\t\t\tEnabled:  pulumi.Bool(true),\n\t\t\t\t\tProperty: pulumi.String(\"cluster_name\"),\n\t\t\t\t},\n\t\t\t\t\u0026signalfx.ListChartLegendOptionsFieldArgs{\n\t\t\t\t\tEnabled:  pulumi.Bool(true),\n\t\t\t\t\tProperty: pulumi.String(\"role\"),\n\t\t\t\t},\n\t\t\t\t\u0026signalfx.ListChartLegendOptionsFieldArgs{\n\t\t\t\t\tEnabled:  pulumi.Bool(false),\n\t\t\t\t\tProperty: pulumi.String(\"collector\"),\n\t\t\t\t},\n\t\t\t\t\u0026signalfx.ListChartLegendOptionsFieldArgs{\n\t\t\t\t\tEnabled:  pulumi.Bool(false),\n\t\t\t\t\tProperty: pulumi.String(\"host\"),\n\t\t\t\t},\n\t\t\t},\n\t\t\tMaxDelay:        pulumi.Int(2),\n\t\t\tMaxPrecision:    pulumi.Int(2),\n\t\t\tProgramText:     pulumi.String(\"myfilters = filter(\\\"cluster_name\\\", \\\"prod\\\") and filter(\\\"role\\\", \\\"search\\\")\\ndata(\\\"cpu.total.idle\\\", filter=myfilters).publish()\\n\\n\"),\n\t\t\tRefreshInterval: pulumi.Int(1),\n\t\t\tSortBy:          pulumi.String(\"-value\"),\n\t\t\tTimezone:        pulumi.String(\"Europe/Paris\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.signalfx.ListChart;\nimport com.pulumi.signalfx.ListChartArgs;\nimport com.pulumi.signalfx.inputs.ListChartLegendOptionsFieldArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var mylistchart0 = new ListChart(\"mylistchart0\", ListChartArgs.builder()        \n            .colorBy(\"Metric\")\n            .description(\"Very cool List Chart\")\n            .disableSampling(true)\n            .hideMissingValues(true)\n            .legendOptionsFields(            \n                ListChartLegendOptionsFieldArgs.builder()\n                    .enabled(false)\n                    .property(\"collector\")\n                    .build(),\n                ListChartLegendOptionsFieldArgs.builder()\n                    .enabled(true)\n                    .property(\"cluster_name\")\n                    .build(),\n                ListChartLegendOptionsFieldArgs.builder()\n                    .enabled(true)\n                    .property(\"role\")\n                    .build(),\n                ListChartLegendOptionsFieldArgs.builder()\n                    .enabled(false)\n                    .property(\"collector\")\n                    .build(),\n                ListChartLegendOptionsFieldArgs.builder()\n                    .enabled(false)\n                    .property(\"host\")\n                    .build())\n            .maxDelay(2)\n            .maxPrecision(2)\n            .programText(\"\"\"\nmyfilters = filter(\"cluster_name\", \"prod\") and filter(\"role\", \"search\")\ndata(\"cpu.total.idle\", filter=myfilters).publish()\n\n            \"\"\")\n            .refreshInterval(1)\n            .sortBy(\"-value\")\n            .timezone(\"Europe/Paris\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  mylistchart0:\n    type: signalfx:ListChart\n    properties:\n      colorBy: Metric\n      description: Very cool List Chart\n      disableSampling: true\n      hideMissingValues: true\n      legendOptionsFields:\n        - enabled: false\n          property: collector\n        - enabled: true\n          property: cluster_name\n        - enabled: true\n          property: role\n        - enabled: false\n          property: collector\n        - enabled: false\n          property: host\n      maxDelay: 2\n      maxPrecision: 2\n      programText: |+\n        myfilters = filter(\"cluster_name\", \"prod\") and filter(\"role\", \"search\")\n        data(\"cpu.total.idle\", filter=myfilters).publish()\n\n      refreshInterval: 1\n      sortBy: -value\n      timezone: Europe/Paris\n```\n\n## Arguments\n\nThe following arguments are supported in the resource block:\n\n* `name` - (Required) Name of the chart.\n* `program_text` - (Required) Signalflow program text for the chart. More info[in the Splunk Observability Cloud docs](https://developers.signalfx.com/signalflow_analytics/signalflow_overview.html#_signalflow_programming_language).\n* `description` - (Optional) Description of the chart.\n* `unit_prefix` - (Optional) Must be `\"Metric\"` or `\"Binary`\". `\"Metric\"` by default.\n* `color_by` - (Optional) Must be one of `\"Scale\"`, `\"Dimension\"` or `\"Metric\"`. `\"Dimension\"` by default.\n* `max_delay` - (Optional) How long (in seconds) to wait for late datapoints.\n* `timezone` - (Optional) The property value is a string that denotes the geographic region associated with the time zone, (default UTC).\n* `disable_sampling` - (Optional) If `false`, samples a subset of the output MTS, which improves UI performance. `false` by default.\n* `refresh_interval` - (Optional) How often (in seconds) to refresh the values of the list.\n* `hide_missing_values` - (Optional) Determines whether to hide missing data points in the chart. If `true`, missing data points in the chart would be hidden. `false` by default.\n* `viz_options` - (Optional) Plot-level customization options, associated with a publish statement.\n    * `label` - (Required) Label used in the publish statement that displays the plot (metric time series data) you want to customize.\n    * `display_name` - (Optional) Specifies an alternate value for the Plot Name column of the Data Table associated with the chart.\n    * `color` - (Optional) The color to use. Must be one of gray, blue, light_blue, navy, dark_orange, orange, dark_yellow, magenta, cerise, pink, violet, purple, gray_blue, dark_green, green, aquamarine, red, yellow, vivid_yellow, light_green, or lime_green.\n    * `value_unit` - (Optional) A unit to attach to this plot. Units support automatic scaling (eg thousands of bytes will be displayed as kilobytes). Values values are `Bit, Kilobit, Megabit, Gigabit, Terabit, Petabit, Exabit, Zettabit, Yottabit, Byte, Kibibyte, Mebibyte, Gibibyte (note: this was previously typoed as Gigibyte), Tebibyte, Pebibyte, Exbibyte, Zebibyte, Yobibyte, Nanosecond, Microsecond, Millisecond, Second, Minute, Hour, Day, Week`.\n    * `value_prefix`, `value_suffix` - (Optional) Arbitrary prefix/suffix to display with the value of this plot.\n* `legend_fields_to_hide` - (Optional) List of properties that should not be displayed in the chart legend (i.e. dimension names). All the properties are visible by default. Deprecated, please use `legend_options_fields`.\n* `legend_options_fields` - (Optional) List of property names and enabled flags that should be displayed in the data table for the chart, in the order provided. This option cannot be used with `legend_fields_to_hide`.\n    * `property` The name of the property to display. Note the special values of `sf_metric` (corresponding with the API's `Plot Name`) which shows the label of the time series `publish()` and `sf_originatingMetric` (corresponding with the API's `metric (sf metric)`) that shows the [name of the metric](https://dev.splunk.com/observability/docs/signalflow/functions/data_function/) for the time series being displayed.\n    * `enabled` True or False depending on if you want the property to be shown or hidden.\n* `max_precision` - (Optional) Maximum number of digits to display when rounding values up or down.\n* `secondary_visualization` - (Optional) The type of secondary visualization. Can be `None`, `Radial`, `Linear`, or `Sparkline`. If unset, the Splunk Observability Cloud default is used (`Sparkline`).\n* `color_scale` - (Optional. `color_by` must be `\"Scale\"`) Single color range including both the color to display for that range and the borders of the range. Example: `[{ gt = 60, color = \"blue\" }, { lte = 60, color = \"yellow\" }]`. Look at this [link](https://docs.splunk.com/observability/en/data-visualization/charts/chart-options.html).\n    * `gt` - (Optional) Indicates the lower threshold non-inclusive value for this range.\n    * `gte` - (Optional) Indicates the lower threshold inclusive value for this range.\n    * `lt` - (Optional) Indicates the upper threshold non-inculsive value for this range.\n    * `lte` - (Optional) Indicates the upper threshold inclusive value for this range.\n    * `color` - (Required) The color to use. Must be one of gray, blue, light_blue, navy, dark_orange, orange, dark_yellow, magenta, cerise, pink, violet, purple, gray_blue, dark_green, green, aquamarine, red, yellow, vivid_yellow, light_green, or lime_green.\n* `sort_by` - (Optional) The property to use when sorting the elements. Use `value` if you want to sort by value. Must be prepended with `+` for ascending or `-` for descending (e.g. `-foo`). Note there are some special values for some of the options provided in the UX: `\"value\"` for Value, `\"sf_originatingMetric\"` for Metric, and `\"sf_metric\"` for plot.\n* `time_range` - (Optional) How many seconds ago from which to display data. For example, the last hour would be `3600`, etc. Conflicts with `start_time` and `end_time`.\n* `start_time` - (Optional) Seconds since epoch. Used for visualization. Conflicts with `time_range`.\n* `end_time` - (Optional) Seconds since epoch. Used for visualization. Conflicts with `time_range`.\n\n## Attributes\n\nIn a addition to all arguments above, the following attributes are exported:\n\n* `id` - The ID of the chart.\n* `url` - The URL of the chart.\n",
            "properties": {
                "colorBy": {
                    "type": "string",
                    "description": "(Metric by default) Must be \"Scale\", \"Metric\" or \"Dimension\"\n"
                },
                "colorScales": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/signalfx:index/ListChartColorScale:ListChartColorScale"
                    },
                    "description": "Single color range including both the color to display for that range and the borders of the range\n"
                },
                "description": {
                    "type": "string",
                    "description": "Description of the chart (Optional)\n"
                },
                "disableSampling": {
                    "type": "boolean",
                    "description": "(false by default) If false, samples a subset of the output MTS, which improves UI performance\n"
                },
                "endTime": {
                    "type": "integer",
                    "description": "Seconds since epoch to end the visualization\n"
                },
                "hideMissingValues": {
                    "type": "boolean",
                    "description": "(false by default) If `true`, missing data points in the chart would be hidden\n"
                },
                "legendFieldsToHides": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of properties that shouldn't be displayed in the chart legend (i.e. dimension names)\n",
                    "deprecationMessage": "Please use legend_options_fields"
                },
                "legendOptionsFields": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/signalfx:index/ListChartLegendOptionsField:ListChartLegendOptionsField"
                    },
                    "description": "List of property and enabled flags to control the order and presence of datatable labels in a chart.\n"
                },
                "maxDelay": {
                    "type": "integer",
                    "description": "How long (in seconds) to wait for late datapoints\n"
                },
                "maxPrecision": {
                    "type": "integer",
                    "description": "Maximum number of digits to display when rounding values up or down\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the chart\n"
                },
                "programText": {
                    "type": "string",
                    "description": "Signalflow program text for the chart. More info at \"https://developers.signalfx.com/docs/signalflow-overview\"\n"
                },
                "refreshInterval": {
                    "type": "integer",
                    "description": "How often (in seconds) to refresh the values of the list\n"
                },
                "secondaryVisualization": {
                    "type": "string",
                    "description": "(false by default) What kind of secondary visualization to show (None, Radial, Linear, Sparkline)\n"
                },
                "sortBy": {
                    "type": "string",
                    "description": "The property to use when sorting the elements. Use 'value' if you want to sort by value. Must be prepended with + for\nascending or - for descending (e.g. -foo)\n"
                },
                "startTime": {
                    "type": "integer",
                    "description": "Seconds since epoch to start the visualization\n"
                },
                "timeRange": {
                    "type": "integer",
                    "description": "Seconds to display in the visualization. This is a rolling range from the current time. Example: 3600 = `-1h`\n"
                },
                "timezone": {
                    "type": "string",
                    "description": "The property value is a string that denotes the geographic region associated with the time zone, (e.g. Australia/Sydney)\n"
                },
                "unitPrefix": {
                    "type": "string",
                    "description": "(Metric by default) Must be \"Metric\" or \"Binary\"\n"
                },
                "url": {
                    "type": "string",
                    "description": "URL of the chart\n"
                },
                "vizOptions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/signalfx:index/ListChartVizOption:ListChartVizOption"
                    },
                    "description": "Plot-level customization options, associated with a publish statement\n"
                }
            },
            "required": [
                "name",
                "programText",
                "url"
            ],
            "inputProperties": {
                "colorBy": {
                    "type": "string",
                    "description": "(Metric by default) Must be \"Scale\", \"Metric\" or \"Dimension\"\n"
                },
                "colorScales": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/signalfx:index/ListChartColorScale:ListChartColorScale"
                    },
                    "description": "Single color range including both the color to display for that range and the borders of the range\n"
                },
                "description": {
                    "type": "string",
                    "description": "Description of the chart (Optional)\n"
                },
                "disableSampling": {
                    "type": "boolean",
                    "description": "(false by default) If false, samples a subset of the output MTS, which improves UI performance\n"
                },
                "endTime": {
                    "type": "integer",
                    "description": "Seconds since epoch to end the visualization\n"
                },
                "hideMissingValues": {
                    "type": "boolean",
                    "description": "(false by default) If `true`, missing data points in the chart would be hidden\n"
                },
                "legendFieldsToHides": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of properties that shouldn't be displayed in the chart legend (i.e. dimension names)\n",
                    "deprecationMessage": "Please use legend_options_fields"
                },
                "legendOptionsFields": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/signalfx:index/ListChartLegendOptionsField:ListChartLegendOptionsField"
                    },
                    "description": "List of property and enabled flags to control the order and presence of datatable labels in a chart.\n"
                },
                "maxDelay": {
                    "type": "integer",
                    "description": "How long (in seconds) to wait for late datapoints\n"
                },
                "maxPrecision": {
                    "type": "integer",
                    "description": "Maximum number of digits to display when rounding values up or down\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the chart\n"
                },
                "programText": {
                    "type": "string",
                    "description": "Signalflow program text for the chart. More info at \"https://developers.signalfx.com/docs/signalflow-overview\"\n"
                },
                "refreshInterval": {
                    "type": "integer",
                    "description": "How often (in seconds) to refresh the values of the list\n"
                },
                "secondaryVisualization": {
                    "type": "string",
                    "description": "(false by default) What kind of secondary visualization to show (None, Radial, Linear, Sparkline)\n"
                },
                "sortBy": {
                    "type": "string",
                    "description": "The property to use when sorting the elements. Use 'value' if you want to sort by value. Must be prepended with + for\nascending or - for descending (e.g. -foo)\n"
                },
                "startTime": {
                    "type": "integer",
                    "description": "Seconds since epoch to start the visualization\n"
                },
                "timeRange": {
                    "type": "integer",
                    "description": "Seconds to display in the visualization. This is a rolling range from the current time. Example: 3600 = `-1h`\n"
                },
                "timezone": {
                    "type": "string",
                    "description": "The property value is a string that denotes the geographic region associated with the time zone, (e.g. Australia/Sydney)\n"
                },
                "unitPrefix": {
                    "type": "string",
                    "description": "(Metric by default) Must be \"Metric\" or \"Binary\"\n"
                },
                "vizOptions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/signalfx:index/ListChartVizOption:ListChartVizOption"
                    },
                    "description": "Plot-level customization options, associated with a publish statement\n"
                }
            },
            "requiredInputs": [
                "programText"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering ListChart resources.\n",
                "properties": {
                    "colorBy": {
                        "type": "string",
                        "description": "(Metric by default) Must be \"Scale\", \"Metric\" or \"Dimension\"\n"
                    },
                    "colorScales": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/signalfx:index/ListChartColorScale:ListChartColorScale"
                        },
                        "description": "Single color range including both the color to display for that range and the borders of the range\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "Description of the chart (Optional)\n"
                    },
                    "disableSampling": {
                        "type": "boolean",
                        "description": "(false by default) If false, samples a subset of the output MTS, which improves UI performance\n"
                    },
                    "endTime": {
                        "type": "integer",
                        "description": "Seconds since epoch to end the visualization\n"
                    },
                    "hideMissingValues": {
                        "type": "boolean",
                        "description": "(false by default) If `true`, missing data points in the chart would be hidden\n"
                    },
                    "legendFieldsToHides": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "List of properties that shouldn't be displayed in the chart legend (i.e. dimension names)\n",
                        "deprecationMessage": "Please use legend_options_fields"
                    },
                    "legendOptionsFields": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/signalfx:index/ListChartLegendOptionsField:ListChartLegendOptionsField"
                        },
                        "description": "List of property and enabled flags to control the order and presence of datatable labels in a chart.\n"
                    },
                    "maxDelay": {
                        "type": "integer",
                        "description": "How long (in seconds) to wait for late datapoints\n"
                    },
                    "maxPrecision": {
                        "type": "integer",
                        "description": "Maximum number of digits to display when rounding values up or down\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the chart\n"
                    },
                    "programText": {
                        "type": "string",
                        "description": "Signalflow program text for the chart. More info at \"https://developers.signalfx.com/docs/signalflow-overview\"\n"
                    },
                    "refreshInterval": {
                        "type": "integer",
                        "description": "How often (in seconds) to refresh the values of the list\n"
                    },
                    "secondaryVisualization": {
                        "type": "string",
                        "description": "(false by default) What kind of secondary visualization to show (None, Radial, Linear, Sparkline)\n"
                    },
                    "sortBy": {
                        "type": "string",
                        "description": "The property to use when sorting the elements. Use 'value' if you want to sort by value. Must be prepended with + for\nascending or - for descending (e.g. -foo)\n"
                    },
                    "startTime": {
                        "type": "integer",
                        "description": "Seconds since epoch to start the visualization\n"
                    },
                    "timeRange": {
                        "type": "integer",
                        "description": "Seconds to display in the visualization. This is a rolling range from the current time. Example: 3600 = `-1h`\n"
                    },
                    "timezone": {
                        "type": "string",
                        "description": "The property value is a string that denotes the geographic region associated with the time zone, (e.g. Australia/Sydney)\n"
                    },
                    "unitPrefix": {
                        "type": "string",
                        "description": "(Metric by default) Must be \"Metric\" or \"Binary\"\n"
                    },
                    "url": {
                        "type": "string",
                        "description": "URL of the chart\n"
                    },
                    "vizOptions": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/signalfx:index/ListChartVizOption:ListChartVizOption"
                        },
                        "description": "Plot-level customization options, associated with a publish statement\n"
                    }
                },
                "type": "object"
            }
        },
        "signalfx:index/metricRuleset:MetricRuleset": {
            "description": "Provides an Observability Cloud resource for managing metric rulesets.\n\n\u003e **NOTE** When managing metric rulesets to drop data use a session token for an administrator to authenticate the Splunk Observability Cloud provider. See [Operations that require a session token for an administrator](https://dev.splunk.com/observability/docs/administration/authtokens#Operations-that-require-a-session-token-for-an-administrator). Otherwise you'll receive a 4xx error.\n\n## Example\n\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.signalfx.MetricRuleset;\nimport com.pulumi.signalfx.MetricRulesetArgs;\nimport com.pulumi.signalfx.inputs.MetricRulesetAggregationRuleArgs;\nimport com.pulumi.signalfx.inputs.MetricRulesetRoutingRuleArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var cpuUtilizationMetricRuleset = new MetricRuleset(\"cpuUtilizationMetricRuleset\", MetricRulesetArgs.builder()        \n            .aggregationRules(MetricRulesetAggregationRuleArgs.builder()\n                .aggregators(MetricRulesetAggregationRuleAggregatorArgs.builder()\n                    .dimensions(\"service\")\n                    .dropDimensions(false)\n                    .outputName(\"cpu.utilization.by.service.agg\")\n                    .type(\"rollup\")\n                    .build())\n                .enabled(true)\n                .matchers(MetricRulesetAggregationRuleMatcherArgs.builder()\n                    .filters(MetricRulesetAggregationRuleMatcherFilterArgs.builder()\n                        .not(false)\n                        .property(\"realm\")\n                        .propertyValue(\"us-east-1\")\n                        .build())\n                    .type(\"dimension\")\n                    .build())\n                .name(\"cpu.utilization by service rule\")\n                .build())\n            .metricName(\"cpu.utilization\")\n            .routingRules(MetricRulesetRoutingRuleArgs.builder()\n                .destination(\"RealTime\")\n                .build())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  cpuUtilizationMetricRuleset:\n    type: signalfx:MetricRuleset\n    properties:\n      aggregationRules:\n        - aggregators:\n            - dimensions:\n                - service\n              dropDimensions: false\n              outputName: cpu.utilization.by.service.agg\n              type: rollup\n          enabled: true\n          matchers:\n            - filters:\n                - not: false\n                  property: realm\n                  propertyValue:\n                    - us-east-1\n              type: dimension\n          name: cpu.utilization by service rule\n      metricName: cpu.utilization\n      routingRules:\n        - destination: RealTime\n```\n\n## Arguments\n\nThe following arguments are supported in the resource block:\n\n* `metric_name` - (Required) Name of the input metric\n* `aggregation_rules` - (Optional) List of aggregation rules for the metric\n  * `enabled` - (Required) When false, this rule will not generate aggregated MTSs\n  * `name` - (Optional) name of the aggregation rule\n  * `matcher` - (Required) Matcher object\n    * `type` - (Required) Type of matcher. Must always be \"dimension\"\n    * `filters` - (Optional) List of filters to filter the set of input MTSs\n      * `property` - (Required) - Name of the dimension\n      * `property_value` - (Required) - Value of the dimension\n      * `not` - When true, this filter will match all values not matching the property_values\n  * `aggregator` - (Required) - Aggregator object\n    * `type` - (Required) Type of aggregator. Must always be \"rollup\"\n    * `dimensions` - (Required) List of dimensions to either be kept or dropped in the new aggregated MTSs\n    * `drop_dimensions` - (Required) when true, the specified dimensions will be dropped from the aggregated MTSs\n    * `output_name` - (Required) name of the new aggregated metric\n* `routing_rule` - (Required) Routing Rule object\n  * `destination` - (Required) - end destination of the input metric. Must be `RealTime` or `Drop`\n",
            "properties": {
                "aggregationRules": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/signalfx:index/MetricRulesetAggregationRule:MetricRulesetAggregationRule"
                    },
                    "description": "Aggregation rules in the ruleset\n"
                },
                "created": {
                    "type": "string",
                    "description": "Timestamp of when the metric ruleset was created\n"
                },
                "creator": {
                    "type": "string",
                    "description": "ID of the creator of the metric ruleset\n"
                },
                "lastUpdated": {
                    "type": "string",
                    "description": "Timestamp of when the metric ruleset was last updated\n"
                },
                "lastUpdatedBy": {
                    "type": "string",
                    "description": "ID of user who last updated the metric ruleset\n"
                },
                "lastUpdatedByName": {
                    "type": "string",
                    "description": "Name of user who last updated this metric ruleset\n"
                },
                "metricName": {
                    "type": "string",
                    "description": "Name of the metric\n"
                },
                "routingRules": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/signalfx:index/MetricRulesetRoutingRule:MetricRulesetRoutingRule"
                    },
                    "description": "Location to send the input metric\n"
                },
                "version": {
                    "type": "string",
                    "description": "Version of the ruleset\n"
                }
            },
            "required": [
                "created",
                "creator",
                "lastUpdated",
                "lastUpdatedBy",
                "lastUpdatedByName",
                "metricName",
                "routingRules",
                "version"
            ],
            "inputProperties": {
                "aggregationRules": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/signalfx:index/MetricRulesetAggregationRule:MetricRulesetAggregationRule"
                    },
                    "description": "Aggregation rules in the ruleset\n"
                },
                "metricName": {
                    "type": "string",
                    "description": "Name of the metric\n"
                },
                "routingRules": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/signalfx:index/MetricRulesetRoutingRule:MetricRulesetRoutingRule"
                    },
                    "description": "Location to send the input metric\n"
                }
            },
            "requiredInputs": [
                "metricName",
                "routingRules"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering MetricRuleset resources.\n",
                "properties": {
                    "aggregationRules": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/signalfx:index/MetricRulesetAggregationRule:MetricRulesetAggregationRule"
                        },
                        "description": "Aggregation rules in the ruleset\n"
                    },
                    "created": {
                        "type": "string",
                        "description": "Timestamp of when the metric ruleset was created\n"
                    },
                    "creator": {
                        "type": "string",
                        "description": "ID of the creator of the metric ruleset\n"
                    },
                    "lastUpdated": {
                        "type": "string",
                        "description": "Timestamp of when the metric ruleset was last updated\n"
                    },
                    "lastUpdatedBy": {
                        "type": "string",
                        "description": "ID of user who last updated the metric ruleset\n"
                    },
                    "lastUpdatedByName": {
                        "type": "string",
                        "description": "Name of user who last updated this metric ruleset\n"
                    },
                    "metricName": {
                        "type": "string",
                        "description": "Name of the metric\n"
                    },
                    "routingRules": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/signalfx:index/MetricRulesetRoutingRule:MetricRulesetRoutingRule"
                        },
                        "description": "Location to send the input metric\n"
                    },
                    "version": {
                        "type": "string",
                        "description": "Version of the ruleset\n"
                    }
                },
                "type": "object"
            }
        },
        "signalfx:index/orgToken:OrgToken": {
            "description": "Manage Splunk Observability Cloud org tokens.\n\n\u003e **NOTE** When managing Org tokens, use a session token of an administrator to authenticate the Splunk Observability Cloud provider. See [Operations that require a session token for an administrator](https://dev.splunk.com/observability/docs/administration/authtokens#Operations-that-require-a-session-token-for-an-administrator).\n\n## Example\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as signalfx from \"@pulumi/signalfx\";\n\nconst myteamkey0 = new signalfx.OrgToken(\"myteamkey0\", {\n    description: \"My team's rad key\",\n    hostOrUsageLimits: {\n        containerLimit: 200,\n        containerNotificationThreshold: 180,\n        customMetricsLimit: 1000,\n        customMetricsNotificationThreshold: 900,\n        highResMetricsLimit: 1000,\n        highResMetricsNotificationThreshold: 900,\n        hostLimit: 100,\n        hostNotificationThreshold: 90,\n    },\n    notifications: [\"Email,foo-alerts@bar.com\"],\n});\n```\n```python\nimport pulumi\nimport pulumi_signalfx as signalfx\n\nmyteamkey0 = signalfx.OrgToken(\"myteamkey0\",\n    description=\"My team's rad key\",\n    host_or_usage_limits=signalfx.OrgTokenHostOrUsageLimitsArgs(\n        container_limit=200,\n        container_notification_threshold=180,\n        custom_metrics_limit=1000,\n        custom_metrics_notification_threshold=900,\n        high_res_metrics_limit=1000,\n        high_res_metrics_notification_threshold=900,\n        host_limit=100,\n        host_notification_threshold=90,\n    ),\n    notifications=[\"Email,foo-alerts@bar.com\"])\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing SignalFx = Pulumi.SignalFx;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var myteamkey0 = new SignalFx.OrgToken(\"myteamkey0\", new()\n    {\n        Description = \"My team's rad key\",\n        HostOrUsageLimits = new SignalFx.Inputs.OrgTokenHostOrUsageLimitsArgs\n        {\n            ContainerLimit = 200,\n            ContainerNotificationThreshold = 180,\n            CustomMetricsLimit = 1000,\n            CustomMetricsNotificationThreshold = 900,\n            HighResMetricsLimit = 1000,\n            HighResMetricsNotificationThreshold = 900,\n            HostLimit = 100,\n            HostNotificationThreshold = 90,\n        },\n        Notifications = new[]\n        {\n            \"Email,foo-alerts@bar.com\",\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-signalfx/sdk/v7/go/signalfx\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := signalfx.NewOrgToken(ctx, \"myteamkey0\", \u0026signalfx.OrgTokenArgs{\n\t\t\tDescription: pulumi.String(\"My team's rad key\"),\n\t\t\tHostOrUsageLimits: \u0026signalfx.OrgTokenHostOrUsageLimitsArgs{\n\t\t\t\tContainerLimit:                      pulumi.Int(200),\n\t\t\t\tContainerNotificationThreshold:      pulumi.Int(180),\n\t\t\t\tCustomMetricsLimit:                  pulumi.Int(1000),\n\t\t\t\tCustomMetricsNotificationThreshold:  pulumi.Int(900),\n\t\t\t\tHighResMetricsLimit:                 pulumi.Int(1000),\n\t\t\t\tHighResMetricsNotificationThreshold: pulumi.Int(900),\n\t\t\t\tHostLimit:                           pulumi.Int(100),\n\t\t\t\tHostNotificationThreshold:           pulumi.Int(90),\n\t\t\t},\n\t\t\tNotifications: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"Email,foo-alerts@bar.com\"),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.signalfx.OrgToken;\nimport com.pulumi.signalfx.OrgTokenArgs;\nimport com.pulumi.signalfx.inputs.OrgTokenHostOrUsageLimitsArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var myteamkey0 = new OrgToken(\"myteamkey0\", OrgTokenArgs.builder()        \n            .description(\"My team's rad key\")\n            .hostOrUsageLimits(OrgTokenHostOrUsageLimitsArgs.builder()\n                .containerLimit(200)\n                .containerNotificationThreshold(180)\n                .customMetricsLimit(1000)\n                .customMetricsNotificationThreshold(900)\n                .highResMetricsLimit(1000)\n                .highResMetricsNotificationThreshold(900)\n                .hostLimit(100)\n                .hostNotificationThreshold(90)\n                .build())\n            .notifications(\"Email,foo-alerts@bar.com\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  myteamkey0:\n    type: signalfx:OrgToken\n    properties:\n      description: My team's rad key\n      hostOrUsageLimits:\n        containerLimit: 200\n        containerNotificationThreshold: 180\n        customMetricsLimit: 1000\n        customMetricsNotificationThreshold: 900\n        highResMetricsLimit: 1000\n        highResMetricsNotificationThreshold: 900\n        hostLimit: 100\n        hostNotificationThreshold: 90\n      notifications:\n        - Email,foo-alerts@bar.com\n```\n\n## Arguments\n\nThe following arguments are supported in the resource block:\n\n* `name` - (Required) Name of the token.\n* `description` - (Optional) Description of the token.\n* `disabled` - (Optional) Flag that controls enabling the token. If set to `true`, the token is disabled, and you can't use it for authentication. Defaults to `false`.\n* `secret` - The secret token created by the API. You cannot set this value.\n* `notifications` - (Optional) Where to send notifications about this token's limits. See the Notification Format laid out in detectors.\n* `host_or_usage_limits` - (Optional) Specify Usage-based limits for this token.\n  * `host_limit` - (Optional) Max number of hosts that can use this token\n  * `host_notification_threshold` - (Optional) Notification threshold for hosts\n  * `container_limit` - (Optional) Max number of Docker containers that can use this token\n  * `container_notification_threshold` - (Optional) Notification threshold for Docker containers\n  * `custom_metrics_limit` - (Optional) Max number of custom metrics that can be sent with this token\n  * `custom_metrics_notification_threshold` - (Optional) Notification threshold for custom metrics\n  * `high_res_metrics_limit` - (Optional) Max number of hi-res metrics that can be sent with this toke\n  * `high_res_metrics_notification_threshold` - (Optional) Notification threshold for hi-res metrics\n* `dpm_limits` (Optional) Specify DPM-based limits for this token.\n  * `dpm_notification_threshold` - (Optional) DPM level at which Splunk Observability Cloud sends the notification for this token. If you don't specify a notification, Splunk Observability Cloud sends the generic notification.\n  * `dpm_limit` - (Required) The datapoints per minute (dpm) limit for this token. If you exceed this limit, Splunk Observability Cloud sends out an alert.\n\n## Attributes\n\nIn a addition to all arguments above, the following attributes are exported:\n\n* `id` - The ID of the token.\n* `secret` - The assigned token.\n",
            "properties": {
                "authScopes": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Authentication scope, ex: INGEST, API, RUM ... (Optional)\n"
                },
                "description": {
                    "type": "string",
                    "description": "Description of the token (Optional)\n"
                },
                "disabled": {
                    "type": "boolean",
                    "description": "Flag that controls enabling the token. If set to `true`, the token is disabled, and you can't use it for authentication.\nDefaults to `false`\n"
                },
                "dpmLimits": {
                    "$ref": "#/types/signalfx:index/OrgTokenDpmLimits:OrgTokenDpmLimits"
                },
                "hostOrUsageLimits": {
                    "$ref": "#/types/signalfx:index/OrgTokenHostOrUsageLimits:OrgTokenHostOrUsageLimits"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the token\n"
                },
                "notifications": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of strings specifying where notifications will be sent when an incident occurs. See\nhttps://developers.signalfx.com/v2/docs/detector-model#notifications-models for more info\n"
                },
                "secret": {
                    "type": "string",
                    "secret": true
                }
            },
            "required": [
                "authScopes",
                "name",
                "secret"
            ],
            "inputProperties": {
                "authScopes": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Authentication scope, ex: INGEST, API, RUM ... (Optional)\n"
                },
                "description": {
                    "type": "string",
                    "description": "Description of the token (Optional)\n"
                },
                "disabled": {
                    "type": "boolean",
                    "description": "Flag that controls enabling the token. If set to `true`, the token is disabled, and you can't use it for authentication.\nDefaults to `false`\n"
                },
                "dpmLimits": {
                    "$ref": "#/types/signalfx:index/OrgTokenDpmLimits:OrgTokenDpmLimits"
                },
                "hostOrUsageLimits": {
                    "$ref": "#/types/signalfx:index/OrgTokenHostOrUsageLimits:OrgTokenHostOrUsageLimits"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the token\n"
                },
                "notifications": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of strings specifying where notifications will be sent when an incident occurs. See\nhttps://developers.signalfx.com/v2/docs/detector-model#notifications-models for more info\n"
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering OrgToken resources.\n",
                "properties": {
                    "authScopes": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Authentication scope, ex: INGEST, API, RUM ... (Optional)\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "Description of the token (Optional)\n"
                    },
                    "disabled": {
                        "type": "boolean",
                        "description": "Flag that controls enabling the token. If set to `true`, the token is disabled, and you can't use it for authentication.\nDefaults to `false`\n"
                    },
                    "dpmLimits": {
                        "$ref": "#/types/signalfx:index/OrgTokenDpmLimits:OrgTokenDpmLimits"
                    },
                    "hostOrUsageLimits": {
                        "$ref": "#/types/signalfx:index/OrgTokenHostOrUsageLimits:OrgTokenHostOrUsageLimits"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the token\n"
                    },
                    "notifications": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "List of strings specifying where notifications will be sent when an incident occurs. See\nhttps://developers.signalfx.com/v2/docs/detector-model#notifications-models for more info\n"
                    },
                    "secret": {
                        "type": "string",
                        "secret": true
                    }
                },
                "type": "object"
            }
        },
        "signalfx:index/singleValueChart:SingleValueChart": {
            "description": "This chart type displays a single number in a large font, representing the current value of a single metric on a plot line.\n\nIf the time period is in the past, the number represents the value of the metric near the end of the time period.\n\n## Example\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as signalfx from \"@pulumi/signalfx\";\n\nconst mysvchart0 = new signalfx.SingleValueChart(\"mysvchart0\", {\n    colorBy: \"Dimension\",\n    description: \"Very cool Single Value Chart\",\n    isTimestampHidden: true,\n    maxDelay: 2,\n    maxPrecision: 2,\n    programText: `myfilters = filter(\"cluster_name\", \"prod\") and filter(\"role\", \"search\")\ndata(\"cpu.total.idle\", filter=myfilters).publish()\n\n`,\n    refreshInterval: 1,\n});\n```\n```python\nimport pulumi\nimport pulumi_signalfx as signalfx\n\nmysvchart0 = signalfx.SingleValueChart(\"mysvchart0\",\n    color_by=\"Dimension\",\n    description=\"Very cool Single Value Chart\",\n    is_timestamp_hidden=True,\n    max_delay=2,\n    max_precision=2,\n    program_text=\"\"\"myfilters = filter(\"cluster_name\", \"prod\") and filter(\"role\", \"search\")\ndata(\"cpu.total.idle\", filter=myfilters).publish()\n\n\"\"\",\n    refresh_interval=1)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing SignalFx = Pulumi.SignalFx;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var mysvchart0 = new SignalFx.SingleValueChart(\"mysvchart0\", new()\n    {\n        ColorBy = \"Dimension\",\n        Description = \"Very cool Single Value Chart\",\n        IsTimestampHidden = true,\n        MaxDelay = 2,\n        MaxPrecision = 2,\n        ProgramText = @\"myfilters = filter(\"\"cluster_name\"\", \"\"prod\"\") and filter(\"\"role\"\", \"\"search\"\")\ndata(\"\"cpu.total.idle\"\", filter=myfilters).publish()\n\n\",\n        RefreshInterval = 1,\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-signalfx/sdk/v7/go/signalfx\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := signalfx.NewSingleValueChart(ctx, \"mysvchart0\", \u0026signalfx.SingleValueChartArgs{\n\t\t\tColorBy:           pulumi.String(\"Dimension\"),\n\t\t\tDescription:       pulumi.String(\"Very cool Single Value Chart\"),\n\t\t\tIsTimestampHidden: pulumi.Bool(true),\n\t\t\tMaxDelay:          pulumi.Int(2),\n\t\t\tMaxPrecision:      pulumi.Int(2),\n\t\t\tProgramText:       pulumi.String(\"myfilters = filter(\\\"cluster_name\\\", \\\"prod\\\") and filter(\\\"role\\\", \\\"search\\\")\\ndata(\\\"cpu.total.idle\\\", filter=myfilters).publish()\\n\\n\"),\n\t\t\tRefreshInterval:   pulumi.Int(1),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.signalfx.SingleValueChart;\nimport com.pulumi.signalfx.SingleValueChartArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var mysvchart0 = new SingleValueChart(\"mysvchart0\", SingleValueChartArgs.builder()        \n            .colorBy(\"Dimension\")\n            .description(\"Very cool Single Value Chart\")\n            .isTimestampHidden(true)\n            .maxDelay(2)\n            .maxPrecision(2)\n            .programText(\"\"\"\nmyfilters = filter(\"cluster_name\", \"prod\") and filter(\"role\", \"search\")\ndata(\"cpu.total.idle\", filter=myfilters).publish()\n\n            \"\"\")\n            .refreshInterval(1)\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  mysvchart0:\n    type: signalfx:SingleValueChart\n    properties:\n      colorBy: Dimension\n      description: Very cool Single Value Chart\n      isTimestampHidden: true\n      maxDelay: 2\n      maxPrecision: 2\n      programText: |+\n        myfilters = filter(\"cluster_name\", \"prod\") and filter(\"role\", \"search\")\n        data(\"cpu.total.idle\", filter=myfilters).publish()\n\n      refreshInterval: 1\n```\n\n## Arguments\n\nThe following arguments are supported in the resource block:\n\n* `name` - (Required) Name of the chart.\n* `program_text` - (Required) Signalflow program text for the chart. More info [in the Splunk Observability Cloud docs](https://dev.splunk.com/observability/docs/signalflow/).\n* `description` - (Optional) Description of the chart.\n* `color_by` - (Optional) Must be `\"Dimension\"`, `\"Scale\"` or `\"Metric\"`. `\"Dimension\"` by default.\n* `color_scale` - (Optional. `color_by` must be `\"Scale\"`) Single color range including both the color to display for that range and the borders of the range. Example: `[{ gt = 60, color = \"blue\" }, { lte = 60, color = \"yellow\" }]`. Look at this [link](https://docs.signalfx.com/en/latest/charts/chart-options-tab.html).\n    * `gt` - (Optional) Indicates the lower threshold non-inclusive value for this range.\n    * `gte` - (Optional) Indicates the lower threshold inclusive value for this range.\n    * `lt` - (Optional) Indicates the upper threshold non-inculsive value for this range.\n    * `lte` - (Optional) Indicates the upper threshold inclusive value for this range.\n    * `color` - (Required) The color to use. Must be one of gray, blue, light_blue, navy, dark_orange, orange, dark_yellow, magenta, cerise, pink, violet, purple, gray_blue, dark_green, green, aquamarine, red, yellow, vivid_yellow, light_green, or lime_green.\n* `viz_options` - (Optional) Plot-level customization options, associated with a publish statement.\n    * `label` - (Required) Label used in the publish statement that displays the plot (metric time series data) you want to customize.\n    * `display_name` - (Optional) Specifies an alternate value for the Plot Name column of the Data Table associated with the chart.\n    * `color` - (Optional) The color to use. Must be one of gray, blue, light_blue, navy, dark_orange, orange, dark_yellow, magenta, cerise, pink, violet, purple, gray_blue, dark_green, green, aquamarine, red, yellow, vivid_yellow, light_green, or lime_green.\n    * `value_unit` - (Optional) A unit to attach to this plot. Units support automatic scaling (eg thousands of bytes will be displayed as kilobytes). Values values are `Bit, Kilobit, Megabit, Gigabit, Terabit, Petabit, Exabit, Zettabit, Yottabit, Byte, Kibibyte, Mebibyte, Gibibyte (note: this was previously typoed as Gigibyte), Tebibyte, Pebibyte, Exbibyte, Zebibyte, Yobibyte, Nanosecond, Microsecond, Millisecond, Second, Minute, Hour, Day, Week`.\n    * `value_prefix`, `value_suffix` - (Optional) Arbitrary prefix/suffix to display with the value of this plot.\n* `unit_prefix` - (Optional) Must be `\"Metric\"` or `\"Binary\"`. `\"Metric\"` by default.\n* `max_delay` - (Optional) How long (in seconds) to wait for late datapoints\n* `refresh_interval` - (Optional) How often (in seconds) to refresh the value.\n* `max_precision` - (Optional) The maximum precision to for value displayed.\n* `is_timestamp_hidden` - (Optional) Whether to hide the timestamp in the chart. `false` by default.\n* `secondary_visualization` - (Optional) The type of secondary visualization. Can be `None`, `Radial`, `Linear`, or `Sparkline`. If unset, the Splunk Observability Cloud default is used (`None`).\n* `show_spark_line` - (Optional) Whether to show a trend line below the current value. `false` by default.\n\n## Attributes\n\nIn a addition to all arguments above, the following attributes are exported:\n\n* `id` - The ID of the chart.\n* `url` - The URL of the chart.\n",
            "properties": {
                "colorBy": {
                    "type": "string",
                    "description": "(Metric by default) Must be \"Metric\", \"Dimension\", or \"Scale\". \"Scale\" maps to Color by Value in the UI\n"
                },
                "colorScales": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/signalfx:index/SingleValueChartColorScale:SingleValueChartColorScale"
                    },
                    "description": "Single color range including both the color to display for that range and the borders of the range\n"
                },
                "description": {
                    "type": "string",
                    "description": "Description of the chart (Optional)\n"
                },
                "isTimestampHidden": {
                    "type": "boolean",
                    "description": "(false by default) Whether to hide the timestamp in the chart\n"
                },
                "maxDelay": {
                    "type": "integer",
                    "description": "How long (in seconds) to wait for late datapoints\n"
                },
                "maxPrecision": {
                    "type": "integer",
                    "description": "The maximum precision to for values displayed in the list\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the chart\n"
                },
                "programText": {
                    "type": "string",
                    "description": "Signalflow program text for the chart. More info at \"https://developers.signalfx.com/docs/signalflow-overview\"\n"
                },
                "refreshInterval": {
                    "type": "integer",
                    "description": "How often (in seconds) to refresh the values of the list\n"
                },
                "secondaryVisualization": {
                    "type": "string",
                    "description": "(false by default) What kind of secondary visualization to show (None, Radial, Linear, Sparkline)\n"
                },
                "showSparkLine": {
                    "type": "boolean",
                    "description": "(false by default) Whether to show a trend line below the current value\n"
                },
                "timezone": {
                    "type": "string",
                    "description": "The property value is a string that denotes the geographic region associated with the time zone, (e.g. Australia/Sydney)\n"
                },
                "unitPrefix": {
                    "type": "string",
                    "description": "(Metric by default) Must be \"Metric\" or \"Binary\"\n"
                },
                "url": {
                    "type": "string",
                    "description": "URL of the chart\n"
                },
                "vizOptions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/signalfx:index/SingleValueChartVizOption:SingleValueChartVizOption"
                    },
                    "description": "Plot-level customization options, associated with a publish statement\n"
                }
            },
            "required": [
                "name",
                "programText",
                "url"
            ],
            "inputProperties": {
                "colorBy": {
                    "type": "string",
                    "description": "(Metric by default) Must be \"Metric\", \"Dimension\", or \"Scale\". \"Scale\" maps to Color by Value in the UI\n"
                },
                "colorScales": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/signalfx:index/SingleValueChartColorScale:SingleValueChartColorScale"
                    },
                    "description": "Single color range including both the color to display for that range and the borders of the range\n"
                },
                "description": {
                    "type": "string",
                    "description": "Description of the chart (Optional)\n"
                },
                "isTimestampHidden": {
                    "type": "boolean",
                    "description": "(false by default) Whether to hide the timestamp in the chart\n"
                },
                "maxDelay": {
                    "type": "integer",
                    "description": "How long (in seconds) to wait for late datapoints\n"
                },
                "maxPrecision": {
                    "type": "integer",
                    "description": "The maximum precision to for values displayed in the list\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the chart\n"
                },
                "programText": {
                    "type": "string",
                    "description": "Signalflow program text for the chart. More info at \"https://developers.signalfx.com/docs/signalflow-overview\"\n"
                },
                "refreshInterval": {
                    "type": "integer",
                    "description": "How often (in seconds) to refresh the values of the list\n"
                },
                "secondaryVisualization": {
                    "type": "string",
                    "description": "(false by default) What kind of secondary visualization to show (None, Radial, Linear, Sparkline)\n"
                },
                "showSparkLine": {
                    "type": "boolean",
                    "description": "(false by default) Whether to show a trend line below the current value\n"
                },
                "timezone": {
                    "type": "string",
                    "description": "The property value is a string that denotes the geographic region associated with the time zone, (e.g. Australia/Sydney)\n"
                },
                "unitPrefix": {
                    "type": "string",
                    "description": "(Metric by default) Must be \"Metric\" or \"Binary\"\n"
                },
                "vizOptions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/signalfx:index/SingleValueChartVizOption:SingleValueChartVizOption"
                    },
                    "description": "Plot-level customization options, associated with a publish statement\n"
                }
            },
            "requiredInputs": [
                "programText"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering SingleValueChart resources.\n",
                "properties": {
                    "colorBy": {
                        "type": "string",
                        "description": "(Metric by default) Must be \"Metric\", \"Dimension\", or \"Scale\". \"Scale\" maps to Color by Value in the UI\n"
                    },
                    "colorScales": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/signalfx:index/SingleValueChartColorScale:SingleValueChartColorScale"
                        },
                        "description": "Single color range including both the color to display for that range and the borders of the range\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "Description of the chart (Optional)\n"
                    },
                    "isTimestampHidden": {
                        "type": "boolean",
                        "description": "(false by default) Whether to hide the timestamp in the chart\n"
                    },
                    "maxDelay": {
                        "type": "integer",
                        "description": "How long (in seconds) to wait for late datapoints\n"
                    },
                    "maxPrecision": {
                        "type": "integer",
                        "description": "The maximum precision to for values displayed in the list\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the chart\n"
                    },
                    "programText": {
                        "type": "string",
                        "description": "Signalflow program text for the chart. More info at \"https://developers.signalfx.com/docs/signalflow-overview\"\n"
                    },
                    "refreshInterval": {
                        "type": "integer",
                        "description": "How often (in seconds) to refresh the values of the list\n"
                    },
                    "secondaryVisualization": {
                        "type": "string",
                        "description": "(false by default) What kind of secondary visualization to show (None, Radial, Linear, Sparkline)\n"
                    },
                    "showSparkLine": {
                        "type": "boolean",
                        "description": "(false by default) Whether to show a trend line below the current value\n"
                    },
                    "timezone": {
                        "type": "string",
                        "description": "The property value is a string that denotes the geographic region associated with the time zone, (e.g. Australia/Sydney)\n"
                    },
                    "unitPrefix": {
                        "type": "string",
                        "description": "(Metric by default) Must be \"Metric\" or \"Binary\"\n"
                    },
                    "url": {
                        "type": "string",
                        "description": "URL of the chart\n"
                    },
                    "vizOptions": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/signalfx:index/SingleValueChartVizOption:SingleValueChartVizOption"
                        },
                        "description": "Plot-level customization options, associated with a publish statement\n"
                    }
                },
                "type": "object"
            }
        },
        "signalfx:index/tableChart:TableChart": {
            "description": "This special type of chart displays a data table. This table can be grouped by a dimension.\n\n## Example\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as signalfx from \"@pulumi/signalfx\";\n\n// signalfx_list_chart.Logs-Exec_0:\nconst table0 = new signalfx.TableChart(\"table0\", {\n    description: \"beep\",\n    disableSampling: false,\n    groupBies: [\"ClusterName\"],\n    maxDelay: 0,\n    programText: \"A = data('cpu.usage.total').publish(label='CPU Total')\",\n});\n```\n```python\nimport pulumi\nimport pulumi_signalfx as signalfx\n\n# signalfx_list_chart.Logs-Exec_0:\ntable0 = signalfx.TableChart(\"table0\",\n    description=\"beep\",\n    disable_sampling=False,\n    group_bies=[\"ClusterName\"],\n    max_delay=0,\n    program_text=\"A = data('cpu.usage.total').publish(label='CPU Total')\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing SignalFx = Pulumi.SignalFx;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    // signalfx_list_chart.Logs-Exec_0:\n    var table0 = new SignalFx.TableChart(\"table0\", new()\n    {\n        Description = \"beep\",\n        DisableSampling = false,\n        GroupBies = new[]\n        {\n            \"ClusterName\",\n        },\n        MaxDelay = 0,\n        ProgramText = \"A = data('cpu.usage.total').publish(label='CPU Total')\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-signalfx/sdk/v7/go/signalfx\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := signalfx.NewTableChart(ctx, \"table0\", \u0026signalfx.TableChartArgs{\n\t\t\tDescription:     pulumi.String(\"beep\"),\n\t\t\tDisableSampling: pulumi.Bool(false),\n\t\t\tGroupBies: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"ClusterName\"),\n\t\t\t},\n\t\t\tMaxDelay:    pulumi.Int(0),\n\t\t\tProgramText: pulumi.String(\"A = data('cpu.usage.total').publish(label='CPU Total')\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.signalfx.TableChart;\nimport com.pulumi.signalfx.TableChartArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var table0 = new TableChart(\"table0\", TableChartArgs.builder()        \n            .description(\"beep\")\n            .disableSampling(false)\n            .groupBies(\"ClusterName\")\n            .maxDelay(0)\n            .programText(\"A = data('cpu.usage.total').publish(label='CPU Total')\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  # signalfx_list_chart.Logs-Exec_0:\n  table0:\n    type: signalfx:TableChart\n    properties:\n      description: beep\n      disableSampling: false\n      groupBies:\n        - ClusterName\n      maxDelay: 0\n      programText: A = data('cpu.usage.total').publish(label='CPU Total')\n```\n\n## Arguments\n\nThe following arguments are supported in the resource block:\n\n* `name` - (Required) Name of the table chart.\n* `program_text` - (Required) The SignalFlow for your Data Table Chart\n* `description` - (Optional) Description of the table chart.\n* `group_by` - (Optional) Dimension to group by\n\n## Attributes\n\nIn a addition to all arguments above, the following attributes are exported:\n\n* `id` - The ID of the chart.\n* `url` - The URL of the chart.\n",
            "properties": {
                "description": {
                    "type": "string",
                    "description": "Description of the chart (Optional)\n"
                },
                "disableSampling": {
                    "type": "boolean",
                    "description": "(false by default) If false, samples a subset of the output MTS, which improves UI performance\n"
                },
                "groupBies": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Properties to group by in the Table (in nesting order)\n"
                },
                "hideTimestamp": {
                    "type": "boolean",
                    "description": "(false by default) Whether to show the timestamp in the chart\n"
                },
                "maxDelay": {
                    "type": "integer",
                    "description": "How long (in seconds) to wait for late datapoints\n"
                },
                "minimumResolution": {
                    "type": "integer",
                    "description": "The minimum resolution (in seconds) to use for computing the underlying program\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the chart\n"
                },
                "programText": {
                    "type": "string",
                    "description": "Signalflow program text for the chart. More info at \"https://developers.signalfx.com/docs/signalflow-overview\"\n"
                },
                "refreshInterval": {
                    "type": "integer",
                    "description": "How often (in seconds) to refresh the values of the Table\n"
                },
                "timezone": {
                    "type": "string",
                    "description": "The property value is a string that denotes the geographic region associated with the time zone, (e.g. Australia/Sydney)\n"
                },
                "unitPrefix": {
                    "type": "string",
                    "description": "(Metric by default) Must be \"Metric\" or \"Binary\"\n"
                },
                "url": {
                    "type": "string",
                    "description": "URL of the chart\n"
                },
                "vizOptions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/signalfx:index/TableChartVizOption:TableChartVizOption"
                    },
                    "description": "Plot-level customization options, associated with a publish statement\n"
                }
            },
            "required": [
                "name",
                "programText",
                "url"
            ],
            "inputProperties": {
                "description": {
                    "type": "string",
                    "description": "Description of the chart (Optional)\n"
                },
                "disableSampling": {
                    "type": "boolean",
                    "description": "(false by default) If false, samples a subset of the output MTS, which improves UI performance\n"
                },
                "groupBies": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Properties to group by in the Table (in nesting order)\n"
                },
                "hideTimestamp": {
                    "type": "boolean",
                    "description": "(false by default) Whether to show the timestamp in the chart\n"
                },
                "maxDelay": {
                    "type": "integer",
                    "description": "How long (in seconds) to wait for late datapoints\n"
                },
                "minimumResolution": {
                    "type": "integer",
                    "description": "The minimum resolution (in seconds) to use for computing the underlying program\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the chart\n"
                },
                "programText": {
                    "type": "string",
                    "description": "Signalflow program text for the chart. More info at \"https://developers.signalfx.com/docs/signalflow-overview\"\n"
                },
                "refreshInterval": {
                    "type": "integer",
                    "description": "How often (in seconds) to refresh the values of the Table\n"
                },
                "timezone": {
                    "type": "string",
                    "description": "The property value is a string that denotes the geographic region associated with the time zone, (e.g. Australia/Sydney)\n"
                },
                "unitPrefix": {
                    "type": "string",
                    "description": "(Metric by default) Must be \"Metric\" or \"Binary\"\n"
                },
                "vizOptions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/signalfx:index/TableChartVizOption:TableChartVizOption"
                    },
                    "description": "Plot-level customization options, associated with a publish statement\n"
                }
            },
            "requiredInputs": [
                "programText"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering TableChart resources.\n",
                "properties": {
                    "description": {
                        "type": "string",
                        "description": "Description of the chart (Optional)\n"
                    },
                    "disableSampling": {
                        "type": "boolean",
                        "description": "(false by default) If false, samples a subset of the output MTS, which improves UI performance\n"
                    },
                    "groupBies": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Properties to group by in the Table (in nesting order)\n"
                    },
                    "hideTimestamp": {
                        "type": "boolean",
                        "description": "(false by default) Whether to show the timestamp in the chart\n"
                    },
                    "maxDelay": {
                        "type": "integer",
                        "description": "How long (in seconds) to wait for late datapoints\n"
                    },
                    "minimumResolution": {
                        "type": "integer",
                        "description": "The minimum resolution (in seconds) to use for computing the underlying program\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the chart\n"
                    },
                    "programText": {
                        "type": "string",
                        "description": "Signalflow program text for the chart. More info at \"https://developers.signalfx.com/docs/signalflow-overview\"\n"
                    },
                    "refreshInterval": {
                        "type": "integer",
                        "description": "How often (in seconds) to refresh the values of the Table\n"
                    },
                    "timezone": {
                        "type": "string",
                        "description": "The property value is a string that denotes the geographic region associated with the time zone, (e.g. Australia/Sydney)\n"
                    },
                    "unitPrefix": {
                        "type": "string",
                        "description": "(Metric by default) Must be \"Metric\" or \"Binary\"\n"
                    },
                    "url": {
                        "type": "string",
                        "description": "URL of the chart\n"
                    },
                    "vizOptions": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/signalfx:index/TableChartVizOption:TableChartVizOption"
                        },
                        "description": "Plot-level customization options, associated with a publish statement\n"
                    }
                },
                "type": "object"
            }
        },
        "signalfx:index/team:Team": {
            "description": "Handles management of Splunk Observability Cloud teams.\n\nYou can configure [team notification policies](https://docs.splunk.com/observability/en/admin/user-management/teams/team-notifications.html) using this resource and the various `notifications_*` properties.\n\n\u003e **NOTE** When managing teams, use a session token of an administrator to authenticate the Splunk Observability Cloud provider. See [Operations that require a session token for an administrator](https://dev.splunk.com/observability/docs/administration/authtokens#Operations-that-require-a-session-token-for-an-administrator).\n\n## Example\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as signalfx from \"@pulumi/signalfx\";\n\nconst myteam0 = new signalfx.Team(\"myteam0\", {\n    description: \"Super great team no jerks definitely\",\n    members: [\n        \"userid1\",\n        \"userid2\",\n    ],\n    notificationsCriticals: [\"PagerDuty,credentialId\"],\n    notificationsInfos: [\"Email,notify@example.com\"],\n});\n```\n```python\nimport pulumi\nimport pulumi_signalfx as signalfx\n\nmyteam0 = signalfx.Team(\"myteam0\",\n    description=\"Super great team no jerks definitely\",\n    members=[\n        \"userid1\",\n        \"userid2\",\n    ],\n    notifications_criticals=[\"PagerDuty,credentialId\"],\n    notifications_infos=[\"Email,notify@example.com\"])\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing SignalFx = Pulumi.SignalFx;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var myteam0 = new SignalFx.Team(\"myteam0\", new()\n    {\n        Description = \"Super great team no jerks definitely\",\n        Members = new[]\n        {\n            \"userid1\",\n            \"userid2\",\n        },\n        NotificationsCriticals = new[]\n        {\n            \"PagerDuty,credentialId\",\n        },\n        NotificationsInfos = new[]\n        {\n            \"Email,notify@example.com\",\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-signalfx/sdk/v7/go/signalfx\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := signalfx.NewTeam(ctx, \"myteam0\", \u0026signalfx.TeamArgs{\n\t\t\tDescription: pulumi.String(\"Super great team no jerks definitely\"),\n\t\t\tMembers: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"userid1\"),\n\t\t\t\tpulumi.String(\"userid2\"),\n\t\t\t},\n\t\t\tNotificationsCriticals: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"PagerDuty,credentialId\"),\n\t\t\t},\n\t\t\tNotificationsInfos: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"Email,notify@example.com\"),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.signalfx.Team;\nimport com.pulumi.signalfx.TeamArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var myteam0 = new Team(\"myteam0\", TeamArgs.builder()        \n            .description(\"Super great team no jerks definitely\")\n            .members(            \n                \"userid1\",\n                \"userid2\")\n            .notificationsCriticals(\"PagerDuty,credentialId\")\n            .notificationsInfos(\"Email,notify@example.com\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  myteam0:\n    type: signalfx:Team\n    properties:\n      description: Super great team no jerks definitely\n      members:\n        - userid1\n        - userid2\n      notificationsCriticals:\n        - PagerDuty,credentialId\n      notificationsInfos:\n        - Email,notify@example.com\n```\n\n## Arguments\n\nThe following arguments are supported in the resource block:\n\n* `name` - (Required) Name of the team.\n* `description` - (Optional) Description of the team.\n* `members` - (Optional) List of user IDs to include in the team.\n* `notifications_critical` - (Optional) Where to send notifications for critical alerts\n* `notifications_default` - (Optional) Where to send notifications for default alerts\n* `notifications_info` - (Optional) Where to send notifications for info alerts\n* `notifications_major` - (Optional) Where to send notifications for major alerts\n* `notifications_minor` - (Optional) Where to send notifications for minor alerts\n* `notifications_warning` - (Optional) Where to send notifications for warning alerts\n\n## Attributes\n\nIn a addition to all arguments above, the following attributes are exported:\n\n* `id` - The ID of the team.\n* `url` - The URL of the team.\n",
            "properties": {
                "description": {
                    "type": "string",
                    "description": "Description of the team (Optional)\n"
                },
                "members": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Members of team\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the team\n"
                },
                "notificationsCriticals": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of notification destinations to use for the critical alerts category.\n"
                },
                "notificationsDefaults": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of notification destinations to use for the default alerts category.\n"
                },
                "notificationsInfos": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of notification destinations to use for the info alerts category.\n"
                },
                "notificationsMajors": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of notification destinations to use for the major alerts category.\n"
                },
                "notificationsMinors": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of notification destinations to use for the minor alerts category.\n"
                },
                "notificationsWarnings": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of notification destinations to use for the warning alerts category.\n"
                },
                "url": {
                    "type": "string",
                    "description": "URL of the team\n"
                }
            },
            "required": [
                "name",
                "url"
            ],
            "inputProperties": {
                "description": {
                    "type": "string",
                    "description": "Description of the team (Optional)\n"
                },
                "members": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Members of team\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the team\n"
                },
                "notificationsCriticals": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of notification destinations to use for the critical alerts category.\n"
                },
                "notificationsDefaults": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of notification destinations to use for the default alerts category.\n"
                },
                "notificationsInfos": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of notification destinations to use for the info alerts category.\n"
                },
                "notificationsMajors": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of notification destinations to use for the major alerts category.\n"
                },
                "notificationsMinors": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of notification destinations to use for the minor alerts category.\n"
                },
                "notificationsWarnings": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of notification destinations to use for the warning alerts category.\n"
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Team resources.\n",
                "properties": {
                    "description": {
                        "type": "string",
                        "description": "Description of the team (Optional)\n"
                    },
                    "members": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Members of team\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the team\n"
                    },
                    "notificationsCriticals": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "List of notification destinations to use for the critical alerts category.\n"
                    },
                    "notificationsDefaults": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "List of notification destinations to use for the default alerts category.\n"
                    },
                    "notificationsInfos": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "List of notification destinations to use for the info alerts category.\n"
                    },
                    "notificationsMajors": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "List of notification destinations to use for the major alerts category.\n"
                    },
                    "notificationsMinors": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "List of notification destinations to use for the minor alerts category.\n"
                    },
                    "notificationsWarnings": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "List of notification destinations to use for the warning alerts category.\n"
                    },
                    "url": {
                        "type": "string",
                        "description": "URL of the team\n"
                    }
                },
                "type": "object"
            }
        },
        "signalfx:index/textChart:TextChart": {
            "description": "This special type of chart doesn’t display any metric data. Rather, it lets you place a text note on the dashboard.\n\n## Example\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as signalfx from \"@pulumi/signalfx\";\n\nconst mynote0 = new signalfx.TextChart(\"mynote0\", {\n    description: \"Lorem ipsum dolor sit amet, laudem tibique iracundia at mea. Nam posse dolores ex, nec cu adhuc putent honestatis\",\n    markdown: `    1. First ordered list item\n    2. Another item\n      * Unordered sub-list.\n    1. Actual numbers don't matter, just that it's a number\n      1. Ordered sub-list\n    4. And another item.\n\n       You can have properly indented paragraphs within list items. Notice the blank line above, and the leading spaces (at least one, but we'll use three here to also align the raw Markdown).\n\n       To have a line break without a paragraph, you will need to use two trailing spaces.⋅⋅\n       Note that this line is separate, but within the same paragraph.⋅⋅\n       (This is contrary to the typical GFM line break behaviour, where trailing spaces are not required.)\n\n    * Unordered list can use asterisks\n    - Or minuses\n    + Or pluses\n\n`,\n});\n```\n```python\nimport pulumi\nimport pulumi_signalfx as signalfx\n\nmynote0 = signalfx.TextChart(\"mynote0\",\n    description=\"Lorem ipsum dolor sit amet, laudem tibique iracundia at mea. Nam posse dolores ex, nec cu adhuc putent honestatis\",\n    markdown=\"\"\"    1. First ordered list item\n    2. Another item\n      * Unordered sub-list.\n    1. Actual numbers don't matter, just that it's a number\n      1. Ordered sub-list\n    4. And another item.\n\n       You can have properly indented paragraphs within list items. Notice the blank line above, and the leading spaces (at least one, but we'll use three here to also align the raw Markdown).\n\n       To have a line break without a paragraph, you will need to use two trailing spaces.⋅⋅\n       Note that this line is separate, but within the same paragraph.⋅⋅\n       (This is contrary to the typical GFM line break behaviour, where trailing spaces are not required.)\n\n    * Unordered list can use asterisks\n    - Or minuses\n    + Or pluses\n\n\"\"\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing SignalFx = Pulumi.SignalFx;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var mynote0 = new SignalFx.TextChart(\"mynote0\", new()\n    {\n        Description = \"Lorem ipsum dolor sit amet, laudem tibique iracundia at mea. Nam posse dolores ex, nec cu adhuc putent honestatis\",\n        Markdown = @\"    1. First ordered list item\n    2. Another item\n      * Unordered sub-list.\n    1. Actual numbers don't matter, just that it's a number\n      1. Ordered sub-list\n    4. And another item.\n\n       You can have properly indented paragraphs within list items. Notice the blank line above, and the leading spaces (at least one, but we'll use three here to also align the raw Markdown).\n\n       To have a line break without a paragraph, you will need to use two trailing spaces.⋅⋅\n       Note that this line is separate, but within the same paragraph.⋅⋅\n       (This is contrary to the typical GFM line break behaviour, where trailing spaces are not required.)\n\n    * Unordered list can use asterisks\n    - Or minuses\n    + Or pluses\n\n\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-signalfx/sdk/v7/go/signalfx\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := signalfx.NewTextChart(ctx, \"mynote0\", \u0026signalfx.TextChartArgs{\n\t\t\tDescription: pulumi.String(\"Lorem ipsum dolor sit amet, laudem tibique iracundia at mea. Nam posse dolores ex, nec cu adhuc putent honestatis\"),\n\t\t\tMarkdown: pulumi.String(`    1. First ordered list item\n    2. Another item\n      * Unordered sub-list.\n    1. Actual numbers don't matter, just that it's a number\n      1. Ordered sub-list\n    4. And another item.\n\n       You can have properly indented paragraphs within list items. Notice the blank line above, and the leading spaces (at least one, but we'll use three here to also align the raw Markdown).\n\n       To have a line break without a paragraph, you will need to use two trailing spaces.⋅⋅\n       Note that this line is separate, but within the same paragraph.⋅⋅\n       (This is contrary to the typical GFM line break behaviour, where trailing spaces are not required.)\n\n    * Unordered list can use asterisks\n    - Or minuses\n    + Or pluses\n\n`),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.signalfx.TextChart;\nimport com.pulumi.signalfx.TextChartArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var mynote0 = new TextChart(\"mynote0\", TextChartArgs.builder()        \n            .description(\"Lorem ipsum dolor sit amet, laudem tibique iracundia at mea. Nam posse dolores ex, nec cu adhuc putent honestatis\")\n            .markdown(\"\"\"\n    1. First ordered list item\n    2. Another item\n      * Unordered sub-list.\n    1. Actual numbers don't matter, just that it's a number\n      1. Ordered sub-list\n    4. And another item.\n\n       You can have properly indented paragraphs within list items. Notice the blank line above, and the leading spaces (at least one, but we'll use three here to also align the raw Markdown).\n\n       To have a line break without a paragraph, you will need to use two trailing spaces.⋅⋅\n       Note that this line is separate, but within the same paragraph.⋅⋅\n       (This is contrary to the typical GFM line break behaviour, where trailing spaces are not required.)\n\n    * Unordered list can use asterisks\n    - Or minuses\n    + Or pluses\n\n            \"\"\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  mynote0:\n    type: signalfx:TextChart\n    properties:\n      description: Lorem ipsum dolor sit amet, laudem tibique iracundia at mea. Nam posse dolores ex, nec cu adhuc putent honestatis\n      markdown: |2+\n            1. First ordered list item\n            2. Another item\n              * Unordered sub-list.\n            1. Actual numbers don't matter, just that it's a number\n              1. Ordered sub-list\n            4. And another item.\n\n               You can have properly indented paragraphs within list items. Notice the blank line above, and the leading spaces (at least one, but we'll use three here to also align the raw Markdown).\n\n               To have a line break without a paragraph, you will need to use two trailing spaces.⋅⋅\n               Note that this line is separate, but within the same paragraph.⋅⋅\n               (This is contrary to the typical GFM line break behaviour, where trailing spaces are not required.)\n\n            * Unordered list can use asterisks\n            - Or minuses\n            + Or pluses\n```\n\n## Arguments\n\nThe following arguments are supported in the resource block:\n\n* `name` - (Required) Name of the text note.\n* `markdown` - (Required) Markdown text to display.\n* `description` - (Optional) Description of the text note.\n\n## Attributes\n\nIn a addition to all arguments above, the following attributes are exported:\n\n* `id` - The ID of the chart.\n* `url` - The URL of the chart.\n",
            "properties": {
                "description": {
                    "type": "string",
                    "description": "Description of the chart (Optional)\n"
                },
                "markdown": {
                    "type": "string",
                    "description": "Markdown text to display. More info at: https://github.com/adam-p/markdown-here/wiki/Markdown-Cheatsheet\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the chart\n"
                },
                "url": {
                    "type": "string",
                    "description": "URL of the chart\n"
                }
            },
            "required": [
                "markdown",
                "name",
                "url"
            ],
            "inputProperties": {
                "description": {
                    "type": "string",
                    "description": "Description of the chart (Optional)\n"
                },
                "markdown": {
                    "type": "string",
                    "description": "Markdown text to display. More info at: https://github.com/adam-p/markdown-here/wiki/Markdown-Cheatsheet\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the chart\n"
                }
            },
            "requiredInputs": [
                "markdown"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering TextChart resources.\n",
                "properties": {
                    "description": {
                        "type": "string",
                        "description": "Description of the chart (Optional)\n"
                    },
                    "markdown": {
                        "type": "string",
                        "description": "Markdown text to display. More info at: https://github.com/adam-p/markdown-here/wiki/Markdown-Cheatsheet\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the chart\n"
                    },
                    "url": {
                        "type": "string",
                        "description": "URL of the chart\n"
                    }
                },
                "type": "object"
            }
        },
        "signalfx:index/timeChart:TimeChart": {
            "description": "Provides a Splunk Observability Cloud time chart resource. This can be used to create and manage the different types of time charts.\n\nTime charts display data points over a period of time.\n\n## Example\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as signalfx from \"@pulumi/signalfx\";\n\nconst mychart0 = new signalfx.TimeChart(\"mychart0\", {\n    axisLeft: {\n        label: \"CPU Total Idle\",\n        lowWatermark: 1000,\n    },\n    legendOptionsFields: [\n        {\n            enabled: false,\n            property: \"collector\",\n        },\n        {\n            enabled: false,\n            property: \"hostname\",\n        },\n    ],\n    plotType: \"LineChart\",\n    programText: `data(\"cpu.total.idle\").publish(label=\"CPU Idle\")\n\n`,\n    showDataMarkers: true,\n    timeRange: 3600,\n    vizOptions: [{\n        axis: \"left\",\n        color: \"orange\",\n        label: \"CPU Idle\",\n    }],\n});\n```\n```python\nimport pulumi\nimport pulumi_signalfx as signalfx\n\nmychart0 = signalfx.TimeChart(\"mychart0\",\n    axis_left=signalfx.TimeChartAxisLeftArgs(\n        label=\"CPU Total Idle\",\n        low_watermark=1000,\n    ),\n    legend_options_fields=[\n        signalfx.TimeChartLegendOptionsFieldArgs(\n            enabled=False,\n            property=\"collector\",\n        ),\n        signalfx.TimeChartLegendOptionsFieldArgs(\n            enabled=False,\n            property=\"hostname\",\n        ),\n    ],\n    plot_type=\"LineChart\",\n    program_text=\"\"\"data(\"cpu.total.idle\").publish(label=\"CPU Idle\")\n\n\"\"\",\n    show_data_markers=True,\n    time_range=3600,\n    viz_options=[signalfx.TimeChartVizOptionArgs(\n        axis=\"left\",\n        color=\"orange\",\n        label=\"CPU Idle\",\n    )])\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing SignalFx = Pulumi.SignalFx;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var mychart0 = new SignalFx.TimeChart(\"mychart0\", new()\n    {\n        AxisLeft = new SignalFx.Inputs.TimeChartAxisLeftArgs\n        {\n            Label = \"CPU Total Idle\",\n            LowWatermark = 1000,\n        },\n        LegendOptionsFields = new[]\n        {\n            new SignalFx.Inputs.TimeChartLegendOptionsFieldArgs\n            {\n                Enabled = false,\n                Property = \"collector\",\n            },\n            new SignalFx.Inputs.TimeChartLegendOptionsFieldArgs\n            {\n                Enabled = false,\n                Property = \"hostname\",\n            },\n        },\n        PlotType = \"LineChart\",\n        ProgramText = @\"data(\"\"cpu.total.idle\"\").publish(label=\"\"CPU Idle\"\")\n\n\",\n        ShowDataMarkers = true,\n        TimeRange = 3600,\n        VizOptions = new[]\n        {\n            new SignalFx.Inputs.TimeChartVizOptionArgs\n            {\n                Axis = \"left\",\n                Color = \"orange\",\n                Label = \"CPU Idle\",\n            },\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-signalfx/sdk/v7/go/signalfx\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := signalfx.NewTimeChart(ctx, \"mychart0\", \u0026signalfx.TimeChartArgs{\n\t\t\tAxisLeft: \u0026signalfx.TimeChartAxisLeftArgs{\n\t\t\t\tLabel:        pulumi.String(\"CPU Total Idle\"),\n\t\t\t\tLowWatermark: pulumi.Float64(1000),\n\t\t\t},\n\t\t\tLegendOptionsFields: signalfx.TimeChartLegendOptionsFieldArray{\n\t\t\t\t\u0026signalfx.TimeChartLegendOptionsFieldArgs{\n\t\t\t\t\tEnabled:  pulumi.Bool(false),\n\t\t\t\t\tProperty: pulumi.String(\"collector\"),\n\t\t\t\t},\n\t\t\t\t\u0026signalfx.TimeChartLegendOptionsFieldArgs{\n\t\t\t\t\tEnabled:  pulumi.Bool(false),\n\t\t\t\t\tProperty: pulumi.String(\"hostname\"),\n\t\t\t\t},\n\t\t\t},\n\t\t\tPlotType:        pulumi.String(\"LineChart\"),\n\t\t\tProgramText:     pulumi.String(\"data(\\\"cpu.total.idle\\\").publish(label=\\\"CPU Idle\\\")\\n\\n\"),\n\t\t\tShowDataMarkers: pulumi.Bool(true),\n\t\t\tTimeRange:       pulumi.Int(3600),\n\t\t\tVizOptions: signalfx.TimeChartVizOptionArray{\n\t\t\t\t\u0026signalfx.TimeChartVizOptionArgs{\n\t\t\t\t\tAxis:  pulumi.String(\"left\"),\n\t\t\t\t\tColor: pulumi.String(\"orange\"),\n\t\t\t\t\tLabel: pulumi.String(\"CPU Idle\"),\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.signalfx.TimeChart;\nimport com.pulumi.signalfx.TimeChartArgs;\nimport com.pulumi.signalfx.inputs.TimeChartAxisLeftArgs;\nimport com.pulumi.signalfx.inputs.TimeChartLegendOptionsFieldArgs;\nimport com.pulumi.signalfx.inputs.TimeChartVizOptionArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var mychart0 = new TimeChart(\"mychart0\", TimeChartArgs.builder()        \n            .axisLeft(TimeChartAxisLeftArgs.builder()\n                .label(\"CPU Total Idle\")\n                .lowWatermark(1000)\n                .build())\n            .legendOptionsFields(            \n                TimeChartLegendOptionsFieldArgs.builder()\n                    .enabled(false)\n                    .property(\"collector\")\n                    .build(),\n                TimeChartLegendOptionsFieldArgs.builder()\n                    .enabled(false)\n                    .property(\"hostname\")\n                    .build())\n            .plotType(\"LineChart\")\n            .programText(\"\"\"\ndata(\"cpu.total.idle\").publish(label=\"CPU Idle\")\n\n            \"\"\")\n            .showDataMarkers(true)\n            .timeRange(3600)\n            .vizOptions(TimeChartVizOptionArgs.builder()\n                .axis(\"left\")\n                .color(\"orange\")\n                .label(\"CPU Idle\")\n                .build())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  mychart0:\n    type: signalfx:TimeChart\n    properties:\n      axisLeft:\n        label: CPU Total Idle\n        lowWatermark: 1000\n      legendOptionsFields:\n        - enabled: false\n          property: collector\n        - enabled: false\n          property: hostname\n      plotType: LineChart\n      programText: |+\n        data(\"cpu.total.idle\").publish(label=\"CPU Idle\")\n\n      showDataMarkers: true\n      timeRange: 3600\n      vizOptions:\n        - axis: left\n          color: orange\n          label: CPU Idle\n```\n\n## Arguments\n\nThe following arguments are supported in the resource block:\n\n* `name` - (Required) Name of the chart.\n* `program_text` - (Required) Signalflow program text for the chart. More info [in the Splunk Observability Cloud docs](https://dev.splunk.com/observability/docs/signalflow/).\n* `plot_type` - (Optional) The default plot display style for the visualization. Must be `\"LineChart\"`, `\"AreaChart\"`, `\"ColumnChart\"`, or `\"Histogram\"`. Default: `\"LineChart\"`.\n* `description` - (Optional) Description of the chart.\n* `axes_precision` - (Optional) Specifies the digits Splunk Observability Cloud displays for values plotted on the chart. Defaults to `3`.\n* `unit_prefix` - (Optional) Must be `\"Metric\"` or `\"Binary`\". `\"Metric\"` by default.\n* `color_by` - (Optional) Must be `\"Dimension\"` or `\"Metric\"`. `\"Dimension\"` by default.\n* `minimum_resolution` - (Optional) The minimum resolution (in seconds) to use for computing the underlying program.\n* `max_delay` - (Optional) How long (in seconds) to wait for late datapoints.\n* `timezone` - (Optional) A string denotes the geographic region associated with the time zone.\n* `disable_sampling` - (Optional) If `false`, samples a subset of the output MTS, which improves UI performance. `false` by default\n* `time_range` - (Optional) How many seconds ago from which to display data. For example, the last hour would be `3600`, etc. Conflicts with `start_time` and `end_time`.\n* `start_time` - (Optional) Seconds since epoch. Used for visualization. Conflicts with `time_range`.\n* `end_time` - (Optional) Seconds since epoch. Used for visualization. Conflicts with `time_range`.\n* `axes_include_zero` - (Optional) Force the chart to display zero on the y-axes, even if none of the data is near zero.\n* `axis_left` - (Optional) Set of axis options.\n    * `label` - (Optional) Label of the left axis.\n    * `min_value` - (Optional) The minimum value for the left axis.\n    * `max_value` - (Optional) The maximum value for the left axis.\n    * `high_watermark` - (Optional) A line to draw as a high watermark.\n    * `high_watermark_label` - (Optional) A label to attach to the high watermark line.\n    * `low_watermark`  - (Optional) A line to draw as a low watermark.\n    * `low_watermark_label` - (Optional) A label to attach to the low watermark line.\n* `axis_right` - (Optional) Set of axis options.\n    * `label` - (Optional) Label of the right axis.\n    * `min_value` - (Optional) The minimum value for the right axis.\n    * `max_value` - (Optional) The maximum value for the right axis.\n    * `high_watermark` - (Optional) A line to draw as a high watermark.\n    * `high_watermark_label` - (Optional) A label to attach to the high watermark line.\n    * `low_watermark`  - (Optional) A line to draw as a low watermark.\n    * `low_watermark_label` - (Optional) A label to attach to the low watermark line.\n* `viz_options` - (Optional) Plot-level customization options, associated with a publish statement.\n    * `label` - (Required) Label used in the publish statement that displays the plot (metric time series data) you want to customize.\n    * `display_name` - (Optional) Specifies an alternate value for the Plot Name column of the Data Table associated with the chart.\n    * `color` - (Optional) Color to use : gray, blue, azure, navy, brown, orange, yellow, iris, magenta, pink, purple, violet, lilac, emerald, green, aquamarine.\n    * `axis` - (Optional) Y-axis associated with values for this plot. Must be either `right` or `left`.\n    * `plot_type` - (Optional) The visualization style to use. Must be `\"LineChart\"`, `\"AreaChart\"`, `\"ColumnChart\"`, or `\"Histogram\"`. Chart level `plot_type` by default.\n    * `value_unit` - (Optional) A unit to attach to this plot. Units support automatic scaling (eg thousands of bytes will be displayed as kilobytes). Values values are `Bit, Kilobit, Megabit, Gigabit, Terabit, Petabit, Exabit, Zettabit, Yottabit, Byte, Kibibyte, Mebibyte, Gibibyte (note: this was previously typoed as Gigibyte), Tebibyte, Pebibyte, Exbibyte, Zebibyte, Yobibyte, Nanosecond, Microsecond, Millisecond, Second, Minute, Hour, Day, Week`.\n    * `value_prefix`, `value_suffix` - (Optional) Arbitrary prefix/suffix to display with the value of this plot.\n* `event_options` - (Optional) Event customization options, associated with a publish statement. You will need to use this to change settings for any `events(…)` statements you use.\n    * `label` - (Required) Label used in the publish statement that displays the event query you want to customize.\n    * `display_name` - (Optional) Specifies an alternate value for the Plot Name column of the Data Table associated with the chart.\n    * `color` - (Optional) Color to use : gray, blue, azure, navy, brown, orange, yellow, iris, magenta, pink, purple, violet, lilac, emerald, green, aquamarine.\n* `histogram_options` - (Optional) Only used when `plot_type` is `\"Histogram\"`. Histogram specific options.\n    * `color_theme` - (Optional) Color to use : gray, blue, azure, navy, brown, orange, yellow, iris, magenta, pink, purple, violet, lilac, emerald, green, aquamarine, red, gold, greenyellow, chartreuse, jade\n* `legend_fields_to_hide` - (Optional) List of properties that should not be displayed in the chart legend (i.e. dimension names). All the properties are visible by default. Deprecated, please use `legend_options_fields`.\n* `legend_options_fields` - (Optional) List of property names and enabled flags that should be displayed in the data table for the chart, in the order provided. This option cannot be used with `legend_fields_to_hide`.\n    * `property` The name of the property to display. Note the special values of `plot_label` (corresponding with the API's `sf_metric`) which shows the label of the time series `publish()` and `metric` (corresponding with the API's `sf_originatingMetric`) that shows the name of the metric for the time series being displayed.\n    * `enabled` True or False depending on if you want the property to be shown or hidden.\n* `on_chart_legend_dimension` - (Optional) Dimensions to show in the on-chart legend. On-chart legend is off unless a dimension is specified. Allowed: `\"metric\"`, `\"plot_label\"` and any dimension.\n* `show_event_lines` - (Optional) Whether vertical highlight lines should be drawn in the visualizations at times when events occurred. `false` by default.\n* `show_data_markers` - (Optional) Show markers (circles) for each datapoint used to draw line or area charts. `false` by default.\n* `stacked` - (Optional) Whether area and bar charts in the visualization should be stacked. `false` by default.\n* `timezone` - (Optional) Time zone that SignalFlow uses as the basis of calendar window transformation methods. For example, if you set \"timezone\": \"Europe/Paris\" and then use the transformation sum(cycle=\"week\", cycle_start=\"Monday\") in your chart's SignalFlow program, the calendar window starts on Monday, Paris time. See the [full list of timezones for more](https://dev.splunk.com/observability/docs/signalflow/). `\"UTC\"` by default.\n\n## Attributes\n\nIn a addition to all arguments above, the following attributes are exported:\n\n* `id` - The ID of the chart.\n* `url` - The URL of the chart.\n",
            "properties": {
                "axesIncludeZero": {
                    "type": "boolean",
                    "description": "Force y-axes to always show zero\n"
                },
                "axesPrecision": {
                    "type": "integer",
                    "description": "Force a specific number of significant digits in the y-axis\n"
                },
                "axisLeft": {
                    "$ref": "#/types/signalfx:index/TimeChartAxisLeft:TimeChartAxisLeft"
                },
                "axisRight": {
                    "$ref": "#/types/signalfx:index/TimeChartAxisRight:TimeChartAxisRight"
                },
                "colorBy": {
                    "type": "string",
                    "description": "(Dimension by default) Must be \"Dimension\" or \"Metric\"\n"
                },
                "description": {
                    "type": "string",
                    "description": "Description of the chart\n"
                },
                "disableSampling": {
                    "type": "boolean",
                    "description": "(false by default) If false, samples a subset of the output MTS, which improves UI performance\n"
                },
                "endTime": {
                    "type": "integer",
                    "description": "Seconds since epoch to end the visualization\n"
                },
                "eventOptions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/signalfx:index/TimeChartEventOption:TimeChartEventOption"
                    },
                    "description": "Event display customization options, associated with a publish statement\n"
                },
                "histogramOptions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/signalfx:index/TimeChartHistogramOption:TimeChartHistogramOption"
                    },
                    "description": "Options specific to Histogram charts\n"
                },
                "legendFieldsToHides": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of properties that shouldn't be displayed in the chart legend (i.e. dimension names)\n",
                    "deprecationMessage": "Please use legend_options_fields"
                },
                "legendOptionsFields": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/signalfx:index/TimeChartLegendOptionsField:TimeChartLegendOptionsField"
                    },
                    "description": "List of property and enabled flags to control the order and presence of datatable labels in a chart.\n"
                },
                "maxDelay": {
                    "type": "integer",
                    "description": "How long (in seconds) to wait for late datapoints\n"
                },
                "minimumResolution": {
                    "type": "integer",
                    "description": "The minimum resolution (in seconds) to use for computing the underlying program\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the chart\n"
                },
                "onChartLegendDimension": {
                    "type": "string",
                    "description": "Dimension to show in the on-chart legend. On-chart legend is off unless a dimension is specified. Allowed: 'metric',\n'plot_label' and any dimension.\n"
                },
                "plotType": {
                    "type": "string",
                    "description": "(LineChart by default) The default plot display style for the visualization. Must be \"LineChart\", \"AreaChart\",\n\"ColumnChart\", or \"Histogram\"\n"
                },
                "programText": {
                    "type": "string",
                    "description": "Signalflow program text for the chart. More info at \"https://developers.signalfx.com/docs/signalflow-overview\"\n"
                },
                "showDataMarkers": {
                    "type": "boolean",
                    "description": "(false by default) Show markers (circles) for each datapoint used to draw line or area charts\n"
                },
                "showEventLines": {
                    "type": "boolean",
                    "description": "(false by default) Whether vertical highlight lines should be drawn in the visualizations at times when events occurred\n"
                },
                "stacked": {
                    "type": "boolean",
                    "description": "(false by default) Whether area and bar charts in the visualization should be stacked\n"
                },
                "startTime": {
                    "type": "integer",
                    "description": "Seconds since epoch to start the visualization\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Tags associated with the chart\n",
                    "deprecationMessage": "signalfx_time_chart.tags is being removed in the next release"
                },
                "timeRange": {
                    "type": "integer",
                    "description": "Seconds to display in the visualization. This is a rolling range from the current time. Example: 3600 = `-1h`\n"
                },
                "timezone": {
                    "type": "string",
                    "description": "The property value is a string that denotes the geographic region associated with the time zone, (e.g. Australia/Sydney)\n"
                },
                "unitPrefix": {
                    "type": "string",
                    "description": "(Metric by default) Must be \"Metric\" or \"Binary\"\n"
                },
                "url": {
                    "type": "string",
                    "description": "URL of the chart\n"
                },
                "vizOptions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/signalfx:index/TimeChartVizOption:TimeChartVizOption"
                    },
                    "description": "Plot-level customization options, associated with a publish statement\n"
                }
            },
            "required": [
                "name",
                "programText",
                "url"
            ],
            "inputProperties": {
                "axesIncludeZero": {
                    "type": "boolean",
                    "description": "Force y-axes to always show zero\n"
                },
                "axesPrecision": {
                    "type": "integer",
                    "description": "Force a specific number of significant digits in the y-axis\n"
                },
                "axisLeft": {
                    "$ref": "#/types/signalfx:index/TimeChartAxisLeft:TimeChartAxisLeft"
                },
                "axisRight": {
                    "$ref": "#/types/signalfx:index/TimeChartAxisRight:TimeChartAxisRight"
                },
                "colorBy": {
                    "type": "string",
                    "description": "(Dimension by default) Must be \"Dimension\" or \"Metric\"\n"
                },
                "description": {
                    "type": "string",
                    "description": "Description of the chart\n"
                },
                "disableSampling": {
                    "type": "boolean",
                    "description": "(false by default) If false, samples a subset of the output MTS, which improves UI performance\n"
                },
                "endTime": {
                    "type": "integer",
                    "description": "Seconds since epoch to end the visualization\n"
                },
                "eventOptions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/signalfx:index/TimeChartEventOption:TimeChartEventOption"
                    },
                    "description": "Event display customization options, associated with a publish statement\n"
                },
                "histogramOptions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/signalfx:index/TimeChartHistogramOption:TimeChartHistogramOption"
                    },
                    "description": "Options specific to Histogram charts\n"
                },
                "legendFieldsToHides": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of properties that shouldn't be displayed in the chart legend (i.e. dimension names)\n",
                    "deprecationMessage": "Please use legend_options_fields"
                },
                "legendOptionsFields": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/signalfx:index/TimeChartLegendOptionsField:TimeChartLegendOptionsField"
                    },
                    "description": "List of property and enabled flags to control the order and presence of datatable labels in a chart.\n"
                },
                "maxDelay": {
                    "type": "integer",
                    "description": "How long (in seconds) to wait for late datapoints\n"
                },
                "minimumResolution": {
                    "type": "integer",
                    "description": "The minimum resolution (in seconds) to use for computing the underlying program\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the chart\n"
                },
                "onChartLegendDimension": {
                    "type": "string",
                    "description": "Dimension to show in the on-chart legend. On-chart legend is off unless a dimension is specified. Allowed: 'metric',\n'plot_label' and any dimension.\n"
                },
                "plotType": {
                    "type": "string",
                    "description": "(LineChart by default) The default plot display style for the visualization. Must be \"LineChart\", \"AreaChart\",\n\"ColumnChart\", or \"Histogram\"\n"
                },
                "programText": {
                    "type": "string",
                    "description": "Signalflow program text for the chart. More info at \"https://developers.signalfx.com/docs/signalflow-overview\"\n"
                },
                "showDataMarkers": {
                    "type": "boolean",
                    "description": "(false by default) Show markers (circles) for each datapoint used to draw line or area charts\n"
                },
                "showEventLines": {
                    "type": "boolean",
                    "description": "(false by default) Whether vertical highlight lines should be drawn in the visualizations at times when events occurred\n"
                },
                "stacked": {
                    "type": "boolean",
                    "description": "(false by default) Whether area and bar charts in the visualization should be stacked\n"
                },
                "startTime": {
                    "type": "integer",
                    "description": "Seconds since epoch to start the visualization\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Tags associated with the chart\n",
                    "deprecationMessage": "signalfx_time_chart.tags is being removed in the next release"
                },
                "timeRange": {
                    "type": "integer",
                    "description": "Seconds to display in the visualization. This is a rolling range from the current time. Example: 3600 = `-1h`\n"
                },
                "timezone": {
                    "type": "string",
                    "description": "The property value is a string that denotes the geographic region associated with the time zone, (e.g. Australia/Sydney)\n"
                },
                "unitPrefix": {
                    "type": "string",
                    "description": "(Metric by default) Must be \"Metric\" or \"Binary\"\n"
                },
                "vizOptions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/signalfx:index/TimeChartVizOption:TimeChartVizOption"
                    },
                    "description": "Plot-level customization options, associated with a publish statement\n"
                }
            },
            "requiredInputs": [
                "programText"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering TimeChart resources.\n",
                "properties": {
                    "axesIncludeZero": {
                        "type": "boolean",
                        "description": "Force y-axes to always show zero\n"
                    },
                    "axesPrecision": {
                        "type": "integer",
                        "description": "Force a specific number of significant digits in the y-axis\n"
                    },
                    "axisLeft": {
                        "$ref": "#/types/signalfx:index/TimeChartAxisLeft:TimeChartAxisLeft"
                    },
                    "axisRight": {
                        "$ref": "#/types/signalfx:index/TimeChartAxisRight:TimeChartAxisRight"
                    },
                    "colorBy": {
                        "type": "string",
                        "description": "(Dimension by default) Must be \"Dimension\" or \"Metric\"\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "Description of the chart\n"
                    },
                    "disableSampling": {
                        "type": "boolean",
                        "description": "(false by default) If false, samples a subset of the output MTS, which improves UI performance\n"
                    },
                    "endTime": {
                        "type": "integer",
                        "description": "Seconds since epoch to end the visualization\n"
                    },
                    "eventOptions": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/signalfx:index/TimeChartEventOption:TimeChartEventOption"
                        },
                        "description": "Event display customization options, associated with a publish statement\n"
                    },
                    "histogramOptions": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/signalfx:index/TimeChartHistogramOption:TimeChartHistogramOption"
                        },
                        "description": "Options specific to Histogram charts\n"
                    },
                    "legendFieldsToHides": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "List of properties that shouldn't be displayed in the chart legend (i.e. dimension names)\n",
                        "deprecationMessage": "Please use legend_options_fields"
                    },
                    "legendOptionsFields": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/signalfx:index/TimeChartLegendOptionsField:TimeChartLegendOptionsField"
                        },
                        "description": "List of property and enabled flags to control the order and presence of datatable labels in a chart.\n"
                    },
                    "maxDelay": {
                        "type": "integer",
                        "description": "How long (in seconds) to wait for late datapoints\n"
                    },
                    "minimumResolution": {
                        "type": "integer",
                        "description": "The minimum resolution (in seconds) to use for computing the underlying program\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the chart\n"
                    },
                    "onChartLegendDimension": {
                        "type": "string",
                        "description": "Dimension to show in the on-chart legend. On-chart legend is off unless a dimension is specified. Allowed: 'metric',\n'plot_label' and any dimension.\n"
                    },
                    "plotType": {
                        "type": "string",
                        "description": "(LineChart by default) The default plot display style for the visualization. Must be \"LineChart\", \"AreaChart\",\n\"ColumnChart\", or \"Histogram\"\n"
                    },
                    "programText": {
                        "type": "string",
                        "description": "Signalflow program text for the chart. More info at \"https://developers.signalfx.com/docs/signalflow-overview\"\n"
                    },
                    "showDataMarkers": {
                        "type": "boolean",
                        "description": "(false by default) Show markers (circles) for each datapoint used to draw line or area charts\n"
                    },
                    "showEventLines": {
                        "type": "boolean",
                        "description": "(false by default) Whether vertical highlight lines should be drawn in the visualizations at times when events occurred\n"
                    },
                    "stacked": {
                        "type": "boolean",
                        "description": "(false by default) Whether area and bar charts in the visualization should be stacked\n"
                    },
                    "startTime": {
                        "type": "integer",
                        "description": "Seconds since epoch to start the visualization\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Tags associated with the chart\n",
                        "deprecationMessage": "signalfx_time_chart.tags is being removed in the next release"
                    },
                    "timeRange": {
                        "type": "integer",
                        "description": "Seconds to display in the visualization. This is a rolling range from the current time. Example: 3600 = `-1h`\n"
                    },
                    "timezone": {
                        "type": "string",
                        "description": "The property value is a string that denotes the geographic region associated with the time zone, (e.g. Australia/Sydney)\n"
                    },
                    "unitPrefix": {
                        "type": "string",
                        "description": "(Metric by default) Must be \"Metric\" or \"Binary\"\n"
                    },
                    "url": {
                        "type": "string",
                        "description": "URL of the chart\n"
                    },
                    "vizOptions": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/signalfx:index/TimeChartVizOption:TimeChartVizOption"
                        },
                        "description": "Plot-level customization options, associated with a publish statement\n"
                    }
                },
                "type": "object"
            }
        },
        "signalfx:index/webhookIntegration:WebhookIntegration": {
            "description": "Splunk Observability Cloud webhook integration.\n\n\u003e **NOTE** When managing integrations, use a session token of an administrator to authenticate the Splunk Observability Cloud provider. See [Operations that require a session token for an administrator](https://dev.splunk.com/observability/docs/administration/authtokens#Operations-that-require-a-session-token-for-an-administrator). Otherwise you'll receive a 4xx error.\n\n## Example\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as signalfx from \"@pulumi/signalfx\";\n\nconst webhookMyteam = new signalfx.WebhookIntegration(\"webhookMyteam\", {\n    enabled: true,\n    headers: [{\n        headerKey: \"some_header\",\n        headerValue: \"value_for_that_header\",\n    }],\n    sharedSecret: \"abc1234\",\n    url: \"https://www.example.com\",\n});\n```\n```python\nimport pulumi\nimport pulumi_signalfx as signalfx\n\nwebhook_myteam = signalfx.WebhookIntegration(\"webhookMyteam\",\n    enabled=True,\n    headers=[signalfx.WebhookIntegrationHeaderArgs(\n        header_key=\"some_header\",\n        header_value=\"value_for_that_header\",\n    )],\n    shared_secret=\"abc1234\",\n    url=\"https://www.example.com\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing SignalFx = Pulumi.SignalFx;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var webhookMyteam = new SignalFx.WebhookIntegration(\"webhookMyteam\", new()\n    {\n        Enabled = true,\n        Headers = new[]\n        {\n            new SignalFx.Inputs.WebhookIntegrationHeaderArgs\n            {\n                HeaderKey = \"some_header\",\n                HeaderValue = \"value_for_that_header\",\n            },\n        },\n        SharedSecret = \"abc1234\",\n        Url = \"https://www.example.com\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-signalfx/sdk/v7/go/signalfx\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := signalfx.NewWebhookIntegration(ctx, \"webhookMyteam\", \u0026signalfx.WebhookIntegrationArgs{\n\t\t\tEnabled: pulumi.Bool(true),\n\t\t\tHeaders: signalfx.WebhookIntegrationHeaderArray{\n\t\t\t\t\u0026signalfx.WebhookIntegrationHeaderArgs{\n\t\t\t\t\tHeaderKey:   pulumi.String(\"some_header\"),\n\t\t\t\t\tHeaderValue: pulumi.String(\"value_for_that_header\"),\n\t\t\t\t},\n\t\t\t},\n\t\t\tSharedSecret: pulumi.String(\"abc1234\"),\n\t\t\tUrl:          pulumi.String(\"https://www.example.com\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.signalfx.WebhookIntegration;\nimport com.pulumi.signalfx.WebhookIntegrationArgs;\nimport com.pulumi.signalfx.inputs.WebhookIntegrationHeaderArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var webhookMyteam = new WebhookIntegration(\"webhookMyteam\", WebhookIntegrationArgs.builder()        \n            .enabled(true)\n            .headers(WebhookIntegrationHeaderArgs.builder()\n                .headerKey(\"some_header\")\n                .headerValue(\"value_for_that_header\")\n                .build())\n            .sharedSecret(\"abc1234\")\n            .url(\"https://www.example.com\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  webhookMyteam:\n    type: signalfx:WebhookIntegration\n    properties:\n      enabled: true\n      headers:\n        - headerKey: some_header\n          headerValue: value_for_that_header\n      sharedSecret: abc1234\n      url: https://www.example.com\n```\n\n## Arguments\n\n* `name` - (Required) Name of the integration.\n* `enabled` - (Required) Whether the integration is enabled.\n* `url` - (Required) The URL to request\n* `shared_secret` - (Optional)\n* `headers` - (Optional) A header to send with the request\n  * `header_key` - (Required) The key of the header to send\n  * `header_value` - (Required) The value of the header to send\n\n## Attributes\n\nIn a addition to all arguments above, the following attributes are exported:\n\n* `id` - The ID of the integration.\n",
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Whether the integration is enabled or not\n"
                },
                "headers": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/signalfx:index/WebhookIntegrationHeader:WebhookIntegrationHeader"
                    },
                    "description": "HTTP headers to pass in the request\n",
                    "secret": true
                },
                "name": {
                    "type": "string",
                    "description": "Name of the integration\n"
                },
                "sharedSecret": {
                    "type": "string",
                    "secret": true
                },
                "url": {
                    "type": "string",
                    "description": "Webhook URL\n"
                }
            },
            "required": [
                "enabled",
                "name"
            ],
            "inputProperties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Whether the integration is enabled or not\n"
                },
                "headers": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/signalfx:index/WebhookIntegrationHeader:WebhookIntegrationHeader"
                    },
                    "description": "HTTP headers to pass in the request\n",
                    "secret": true
                },
                "name": {
                    "type": "string",
                    "description": "Name of the integration\n"
                },
                "sharedSecret": {
                    "type": "string",
                    "secret": true
                },
                "url": {
                    "type": "string",
                    "description": "Webhook URL\n"
                }
            },
            "requiredInputs": [
                "enabled"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering WebhookIntegration resources.\n",
                "properties": {
                    "enabled": {
                        "type": "boolean",
                        "description": "Whether the integration is enabled or not\n"
                    },
                    "headers": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/signalfx:index/WebhookIntegrationHeader:WebhookIntegrationHeader"
                        },
                        "description": "HTTP headers to pass in the request\n",
                        "secret": true
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the integration\n"
                    },
                    "sharedSecret": {
                        "type": "string",
                        "secret": true
                    },
                    "url": {
                        "type": "string",
                        "description": "Webhook URL\n"
                    }
                },
                "type": "object"
            }
        },
        "signalfx:jira/integration:Integration": {
            "description": "Splunk Observability Cloud Jira integrations. For help with this integration see [Integration with Jira](https://docs.splunk.com/observability/en/admin/notif-services/jira.html).\n\n\u003e **NOTE** When managing integrations, use a session token of an administrator to authenticate the Splunk Observability Cloud provider. See [Operations that require a session token for an administrator](https://dev.splunk.com/observability/docs/administration/authtokens#Operations-that-require-a-session-token-for-an-administrator). Otherwise you'll receive a 4xx error.\n\n## Example\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as signalfx from \"@pulumi/signalfx\";\n\nconst jiraMyteamXX = new signalfx.jira.Integration(\"jiraMyteamXX\", {\n    assigneeDisplayName: \"Testy Testerson\",\n    assigneeName: \"testytesterson\",\n    authMethod: \"UsernameAndPassword\",\n    baseUrl: \"https://www.example.com\",\n    enabled: false,\n    issueType: \"Story\",\n    password: \"paasword\",\n    projectKey: \"TEST\",\n    username: \"yoosername\",\n});\n```\n```python\nimport pulumi\nimport pulumi_signalfx as signalfx\n\njira_myteam_xx = signalfx.jira.Integration(\"jiraMyteamXX\",\n    assignee_display_name=\"Testy Testerson\",\n    assignee_name=\"testytesterson\",\n    auth_method=\"UsernameAndPassword\",\n    base_url=\"https://www.example.com\",\n    enabled=False,\n    issue_type=\"Story\",\n    password=\"paasword\",\n    project_key=\"TEST\",\n    username=\"yoosername\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing SignalFx = Pulumi.SignalFx;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var jiraMyteamXX = new SignalFx.Jira.Integration(\"jiraMyteamXX\", new()\n    {\n        AssigneeDisplayName = \"Testy Testerson\",\n        AssigneeName = \"testytesterson\",\n        AuthMethod = \"UsernameAndPassword\",\n        BaseUrl = \"https://www.example.com\",\n        Enabled = false,\n        IssueType = \"Story\",\n        Password = \"paasword\",\n        ProjectKey = \"TEST\",\n        Username = \"yoosername\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-signalfx/sdk/v7/go/signalfx/jira\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := jira.NewIntegration(ctx, \"jiraMyteamXX\", \u0026jira.IntegrationArgs{\n\t\t\tAssigneeDisplayName: pulumi.String(\"Testy Testerson\"),\n\t\t\tAssigneeName:        pulumi.String(\"testytesterson\"),\n\t\t\tAuthMethod:          pulumi.String(\"UsernameAndPassword\"),\n\t\t\tBaseUrl:             pulumi.String(\"https://www.example.com\"),\n\t\t\tEnabled:             pulumi.Bool(false),\n\t\t\tIssueType:           pulumi.String(\"Story\"),\n\t\t\tPassword:            pulumi.String(\"paasword\"),\n\t\t\tProjectKey:          pulumi.String(\"TEST\"),\n\t\t\tUsername:            pulumi.String(\"yoosername\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.signalfx.jira.Integration;\nimport com.pulumi.signalfx.jira.IntegrationArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var jiraMyteamXX = new Integration(\"jiraMyteamXX\", IntegrationArgs.builder()        \n            .assigneeDisplayName(\"Testy Testerson\")\n            .assigneeName(\"testytesterson\")\n            .authMethod(\"UsernameAndPassword\")\n            .baseUrl(\"https://www.example.com\")\n            .enabled(false)\n            .issueType(\"Story\")\n            .password(\"paasword\")\n            .projectKey(\"TEST\")\n            .username(\"yoosername\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  jiraMyteamXX:\n    type: signalfx:jira:Integration\n    properties:\n      assigneeDisplayName: Testy Testerson\n      assigneeName: testytesterson\n      authMethod: UsernameAndPassword\n      baseUrl: https://www.example.com\n      enabled: false\n      issueType: Story\n      password: paasword\n      projectKey: TEST\n      username: yoosername\n```\n\n\n## Arguments\n\n* `name` - (Required) Name of the integration.\n* `enabled` - (Required) Whether the integration is enabled.\n* `auth_method` - (Required) Authentication method used when creating the Jira integration. One of `EmailAndToken` (using `user_email` and `api_token`) or `UsernameAndPassword` (using `username` and `password`).\n* `api_token` - (Required if `auth_method` is `EmailAndToken`) The API token for the user email\n* `user_email` - (Required if `auth_method` is `EmailAndToken`) Email address used to authenticate the Jira integration.\n* `username` - (Required if `auth_method` is `UsernameAndPassword`) User name used to authenticate the Jira integration.\n* `password` - (Required if `auth_method` is `UsernameAndPassword`) Password used to authenticate the Jira integration.\n* `base_url` - (Required) Base URL of the Jira instance that's integrated with SignalFx.\n* `issue_type` - (Required) Issue type (for example, Story) for tickets that Jira creates for detector notifications. Splunk Observability Cloud validates issue types, so you must specify a type that's valid for the Jira project specified in `projectKey`.\n* `project_key` - (Required) Jira key of an existing project. When Jira creates a new ticket for a detector notification, the ticket is assigned to this project.\n* `assignee_name` - (Required) Jira user name for the assignee.\n* `assignee_display_name` - (Optional) Jira display name for the assignee.\n\n## Attributes\n\nIn a addition to all arguments above, the following attributes are exported:\n\n* `id` - The ID of the integration.\n",
            "properties": {
                "apiToken": {
                    "type": "string",
                    "description": "The API token for the user email\n",
                    "secret": true
                },
                "assigneeDisplayName": {
                    "type": "string",
                    "description": "Jira display name for the assignee\n"
                },
                "assigneeName": {
                    "type": "string",
                    "description": "Jira user name for the assignee\n"
                },
                "authMethod": {
                    "type": "string",
                    "description": "Authentication method used when creating the Jira integration. One of `EmailAndToken` or `UsernameAndPassword`\n"
                },
                "baseUrl": {
                    "type": "string",
                    "description": "Base URL of the Jira instance that's integrated with SignalFx.\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "Whether the integration is enabled or not\n"
                },
                "issueType": {
                    "type": "string",
                    "description": "Issue type (for example, Story) for tickets that Jira creates for detector notifications. Splunk Observability Cloud\nvalidates issue types, so you must specify a type that's valid for the Jira project specified in `projectKey`.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the integration\n"
                },
                "password": {
                    "type": "string",
                    "description": "Password used to authenticate the Jira integration.\n",
                    "secret": true
                },
                "projectKey": {
                    "type": "string",
                    "description": "Jira key of an existing project. When Jira creates a new ticket for a detector notification, the ticket is assigned to\nthis project.\n"
                },
                "userEmail": {
                    "type": "string",
                    "description": "Email address used to authenticate the Jira integration.\n"
                },
                "username": {
                    "type": "string",
                    "description": "User name used to authenticate the Jira integration.\n"
                }
            },
            "required": [
                "assigneeName",
                "authMethod",
                "baseUrl",
                "enabled",
                "issueType",
                "name",
                "projectKey"
            ],
            "inputProperties": {
                "apiToken": {
                    "type": "string",
                    "description": "The API token for the user email\n",
                    "secret": true
                },
                "assigneeDisplayName": {
                    "type": "string",
                    "description": "Jira display name for the assignee\n"
                },
                "assigneeName": {
                    "type": "string",
                    "description": "Jira user name for the assignee\n"
                },
                "authMethod": {
                    "type": "string",
                    "description": "Authentication method used when creating the Jira integration. One of `EmailAndToken` or `UsernameAndPassword`\n"
                },
                "baseUrl": {
                    "type": "string",
                    "description": "Base URL of the Jira instance that's integrated with SignalFx.\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "Whether the integration is enabled or not\n"
                },
                "issueType": {
                    "type": "string",
                    "description": "Issue type (for example, Story) for tickets that Jira creates for detector notifications. Splunk Observability Cloud\nvalidates issue types, so you must specify a type that's valid for the Jira project specified in `projectKey`.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the integration\n"
                },
                "password": {
                    "type": "string",
                    "description": "Password used to authenticate the Jira integration.\n",
                    "secret": true
                },
                "projectKey": {
                    "type": "string",
                    "description": "Jira key of an existing project. When Jira creates a new ticket for a detector notification, the ticket is assigned to\nthis project.\n"
                },
                "userEmail": {
                    "type": "string",
                    "description": "Email address used to authenticate the Jira integration.\n"
                },
                "username": {
                    "type": "string",
                    "description": "User name used to authenticate the Jira integration.\n"
                }
            },
            "requiredInputs": [
                "assigneeName",
                "authMethod",
                "baseUrl",
                "enabled",
                "issueType",
                "projectKey"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Integration resources.\n",
                "properties": {
                    "apiToken": {
                        "type": "string",
                        "description": "The API token for the user email\n",
                        "secret": true
                    },
                    "assigneeDisplayName": {
                        "type": "string",
                        "description": "Jira display name for the assignee\n"
                    },
                    "assigneeName": {
                        "type": "string",
                        "description": "Jira user name for the assignee\n"
                    },
                    "authMethod": {
                        "type": "string",
                        "description": "Authentication method used when creating the Jira integration. One of `EmailAndToken` or `UsernameAndPassword`\n"
                    },
                    "baseUrl": {
                        "type": "string",
                        "description": "Base URL of the Jira instance that's integrated with SignalFx.\n"
                    },
                    "enabled": {
                        "type": "boolean",
                        "description": "Whether the integration is enabled or not\n"
                    },
                    "issueType": {
                        "type": "string",
                        "description": "Issue type (for example, Story) for tickets that Jira creates for detector notifications. Splunk Observability Cloud\nvalidates issue types, so you must specify a type that's valid for the Jira project specified in `projectKey`.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the integration\n"
                    },
                    "password": {
                        "type": "string",
                        "description": "Password used to authenticate the Jira integration.\n",
                        "secret": true
                    },
                    "projectKey": {
                        "type": "string",
                        "description": "Jira key of an existing project. When Jira creates a new ticket for a detector notification, the ticket is assigned to\nthis project.\n"
                    },
                    "userEmail": {
                        "type": "string",
                        "description": "Email address used to authenticate the Jira integration.\n"
                    },
                    "username": {
                        "type": "string",
                        "description": "User name used to authenticate the Jira integration.\n"
                    }
                },
                "type": "object"
            }
        },
        "signalfx:log/timeline:Timeline": {
            "description": "You can add logs data to your Observability Cloud dashboards without turning your logs into metrics first.\n\nA log timeline chart displays timeline visualization in a dashboard and shows you in detail what is happening and why.\n\n## Example\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as signalfx from \"@pulumi/signalfx\";\n\nconst myLogTimeline = new signalfx.log.Timeline(\"myLogTimeline\", {\n    description: \"Lorem ipsum dolor sit amet, laudem tibique iracundia at mea. Nam posse dolores ex, nec cu adhuc putent honestatis\",\n    programText: `logs(filter=field('message') == 'Transaction processed' and field('service.name') == 'paymentservice').publish()\n\n`,\n    timeRange: 900,\n});\n```\n```python\nimport pulumi\nimport pulumi_signalfx as signalfx\n\nmy_log_timeline = signalfx.log.Timeline(\"myLogTimeline\",\n    description=\"Lorem ipsum dolor sit amet, laudem tibique iracundia at mea. Nam posse dolores ex, nec cu adhuc putent honestatis\",\n    program_text=\"\"\"logs(filter=field('message') == 'Transaction processed' and field('service.name') == 'paymentservice').publish()\n\n\"\"\",\n    time_range=900)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing SignalFx = Pulumi.SignalFx;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var myLogTimeline = new SignalFx.Log.Timeline(\"myLogTimeline\", new()\n    {\n        Description = \"Lorem ipsum dolor sit amet, laudem tibique iracundia at mea. Nam posse dolores ex, nec cu adhuc putent honestatis\",\n        ProgramText = @\"logs(filter=field('message') == 'Transaction processed' and field('service.name') == 'paymentservice').publish()\n\n\",\n        TimeRange = 900,\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-signalfx/sdk/v7/go/signalfx/log\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := log.NewTimeline(ctx, \"myLogTimeline\", \u0026log.TimelineArgs{\n\t\t\tDescription: pulumi.String(\"Lorem ipsum dolor sit amet, laudem tibique iracundia at mea. Nam posse dolores ex, nec cu adhuc putent honestatis\"),\n\t\t\tProgramText: pulumi.String(\"logs(filter=field('message') == 'Transaction processed' and field('service.name') == 'paymentservice').publish()\\n\\n\"),\n\t\t\tTimeRange:   pulumi.Int(900),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.signalfx.log.Timeline;\nimport com.pulumi.signalfx.log.TimelineArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var myLogTimeline = new Timeline(\"myLogTimeline\", TimelineArgs.builder()        \n            .description(\"Lorem ipsum dolor sit amet, laudem tibique iracundia at mea. Nam posse dolores ex, nec cu adhuc putent honestatis\")\n            .programText(\"\"\"\nlogs(filter=field('message') == 'Transaction processed' and field('service.name') == 'paymentservice').publish()\n\n            \"\"\")\n            .timeRange(900)\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  myLogTimeline:\n    type: signalfx:log:Timeline\n    properties:\n      description: Lorem ipsum dolor sit amet, laudem tibique iracundia at mea. Nam posse dolores ex, nec cu adhuc putent honestatis\n      programText: |+\n        logs(filter=field('message') == 'Transaction processed' and field('service.name') == 'paymentservice').publish()\n\n      timeRange: 900\n```\n\n## Arguments\n\nThe following arguments are supported in the resource block:\n\n* `name` - (Required) Name of the log timeline.\n* `program_text` - (Required) Signalflow program text for the log timeline. More info at https://dev.splunk.com/observability/docs/.\n* `description` - (Optional) Description of the log timeline.\n* `time_range` - (Optional) From when to display data. Splunk Observability Cloud time syntax (e.g. `\"-5m\"`, `\"-1h\"`). Conflicts with `start_time` and `end_time`.\n* `start_time` - (Optional) Seconds since epoch. Used for visualization. Conflicts with `time_range`.\n* `end_time` - (Optional) Seconds since epoch. Used for visualization. Conflicts with `time_range`.\n* `default_connection` - (Optional) The connection that the log timeline uses to fetch data. This could be Splunk Enterprise, Splunk Enterprise Cloud or Observability Cloud.\n\n## Attributes\n\nIn a addition to all arguments above, the following attributes are exported:\n\n* `id` - The ID of the log timeline.\n* `url` - The URL of the log timeline.\n",
            "properties": {
                "defaultConnection": {
                    "type": "string",
                    "description": "default connection that the dashboard uses\n"
                },
                "description": {
                    "type": "string",
                    "description": "Description of the chart (Optional)\n"
                },
                "endTime": {
                    "type": "integer",
                    "description": "Seconds since epoch to end the visualization\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the chart\n"
                },
                "programText": {
                    "type": "string",
                    "description": "Signalflow program text for the chart. More info at \"https://developers.signalfx.com/docs/signalflow-overview\"\n"
                },
                "startTime": {
                    "type": "integer",
                    "description": "Seconds since epoch to start the visualization\n"
                },
                "timeRange": {
                    "type": "integer",
                    "description": "Seconds to display in the visualization. This is a rolling range from the current time. Example: 3600 = `-1h`\n"
                },
                "url": {
                    "type": "string",
                    "description": "URL of the chart\n"
                }
            },
            "required": [
                "name",
                "programText",
                "url"
            ],
            "inputProperties": {
                "defaultConnection": {
                    "type": "string",
                    "description": "default connection that the dashboard uses\n"
                },
                "description": {
                    "type": "string",
                    "description": "Description of the chart (Optional)\n"
                },
                "endTime": {
                    "type": "integer",
                    "description": "Seconds since epoch to end the visualization\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the chart\n"
                },
                "programText": {
                    "type": "string",
                    "description": "Signalflow program text for the chart. More info at \"https://developers.signalfx.com/docs/signalflow-overview\"\n"
                },
                "startTime": {
                    "type": "integer",
                    "description": "Seconds since epoch to start the visualization\n"
                },
                "timeRange": {
                    "type": "integer",
                    "description": "Seconds to display in the visualization. This is a rolling range from the current time. Example: 3600 = `-1h`\n"
                }
            },
            "requiredInputs": [
                "programText"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Timeline resources.\n",
                "properties": {
                    "defaultConnection": {
                        "type": "string",
                        "description": "default connection that the dashboard uses\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "Description of the chart (Optional)\n"
                    },
                    "endTime": {
                        "type": "integer",
                        "description": "Seconds since epoch to end the visualization\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the chart\n"
                    },
                    "programText": {
                        "type": "string",
                        "description": "Signalflow program text for the chart. More info at \"https://developers.signalfx.com/docs/signalflow-overview\"\n"
                    },
                    "startTime": {
                        "type": "integer",
                        "description": "Seconds since epoch to start the visualization\n"
                    },
                    "timeRange": {
                        "type": "integer",
                        "description": "Seconds to display in the visualization. This is a rolling range from the current time. Example: 3600 = `-1h`\n"
                    },
                    "url": {
                        "type": "string",
                        "description": "URL of the chart\n"
                    }
                },
                "type": "object"
            }
        },
        "signalfx:log/view:View": {
            "description": "You can add logs data to your Observability Cloud dashboards without turning your logs into metrics first.\n\nA log view displays log lines in a table form in a dashboard and shows you in detail what is happening and why.\n\n## Example\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as signalfx from \"@pulumi/signalfx\";\n\nconst myLogView = new signalfx.log.View(\"myLogView\", {\n    columns: [\n        {\n            name: \"severity\",\n        },\n        {\n            name: \"time\",\n        },\n        {\n            name: \"amount.currency_code\",\n        },\n        {\n            name: \"amount.nanos\",\n        },\n        {\n            name: \"amount.units\",\n        },\n        {\n            name: \"message\",\n        },\n    ],\n    description: \"Lorem ipsum dolor sit amet, laudem tibique iracundia at mea. Nam posse dolores ex, nec cu adhuc putent honestatis\",\n    programText: `logs(filter=field('message') == 'Transaction processed' and field('service.name') == 'paymentservice').publish()\n\n`,\n    sortOptions: [{\n        descending: false,\n        field: \"severity\",\n    }],\n    timeRange: 900,\n});\n```\n```python\nimport pulumi\nimport pulumi_signalfx as signalfx\n\nmy_log_view = signalfx.log.View(\"myLogView\",\n    columns=[\n        signalfx.log.ViewColumnArgs(\n            name=\"severity\",\n        ),\n        signalfx.log.ViewColumnArgs(\n            name=\"time\",\n        ),\n        signalfx.log.ViewColumnArgs(\n            name=\"amount.currency_code\",\n        ),\n        signalfx.log.ViewColumnArgs(\n            name=\"amount.nanos\",\n        ),\n        signalfx.log.ViewColumnArgs(\n            name=\"amount.units\",\n        ),\n        signalfx.log.ViewColumnArgs(\n            name=\"message\",\n        ),\n    ],\n    description=\"Lorem ipsum dolor sit amet, laudem tibique iracundia at mea. Nam posse dolores ex, nec cu adhuc putent honestatis\",\n    program_text=\"\"\"logs(filter=field('message') == 'Transaction processed' and field('service.name') == 'paymentservice').publish()\n\n\"\"\",\n    sort_options=[signalfx.log.ViewSortOptionArgs(\n        descending=False,\n        field=\"severity\",\n    )],\n    time_range=900)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing SignalFx = Pulumi.SignalFx;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var myLogView = new SignalFx.Log.View(\"myLogView\", new()\n    {\n        Columns = new[]\n        {\n            new SignalFx.Log.Inputs.ViewColumnArgs\n            {\n                Name = \"severity\",\n            },\n            new SignalFx.Log.Inputs.ViewColumnArgs\n            {\n                Name = \"time\",\n            },\n            new SignalFx.Log.Inputs.ViewColumnArgs\n            {\n                Name = \"amount.currency_code\",\n            },\n            new SignalFx.Log.Inputs.ViewColumnArgs\n            {\n                Name = \"amount.nanos\",\n            },\n            new SignalFx.Log.Inputs.ViewColumnArgs\n            {\n                Name = \"amount.units\",\n            },\n            new SignalFx.Log.Inputs.ViewColumnArgs\n            {\n                Name = \"message\",\n            },\n        },\n        Description = \"Lorem ipsum dolor sit amet, laudem tibique iracundia at mea. Nam posse dolores ex, nec cu adhuc putent honestatis\",\n        ProgramText = @\"logs(filter=field('message') == 'Transaction processed' and field('service.name') == 'paymentservice').publish()\n\n\",\n        SortOptions = new[]\n        {\n            new SignalFx.Log.Inputs.ViewSortOptionArgs\n            {\n                Descending = false,\n                Field = \"severity\",\n            },\n        },\n        TimeRange = 900,\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-signalfx/sdk/v7/go/signalfx/log\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := log.NewView(ctx, \"myLogView\", \u0026log.ViewArgs{\n\t\t\tColumns: log.ViewColumnArray{\n\t\t\t\t\u0026log.ViewColumnArgs{\n\t\t\t\t\tName: pulumi.String(\"severity\"),\n\t\t\t\t},\n\t\t\t\t\u0026log.ViewColumnArgs{\n\t\t\t\t\tName: pulumi.String(\"time\"),\n\t\t\t\t},\n\t\t\t\t\u0026log.ViewColumnArgs{\n\t\t\t\t\tName: pulumi.String(\"amount.currency_code\"),\n\t\t\t\t},\n\t\t\t\t\u0026log.ViewColumnArgs{\n\t\t\t\t\tName: pulumi.String(\"amount.nanos\"),\n\t\t\t\t},\n\t\t\t\t\u0026log.ViewColumnArgs{\n\t\t\t\t\tName: pulumi.String(\"amount.units\"),\n\t\t\t\t},\n\t\t\t\t\u0026log.ViewColumnArgs{\n\t\t\t\t\tName: pulumi.String(\"message\"),\n\t\t\t\t},\n\t\t\t},\n\t\t\tDescription: pulumi.String(\"Lorem ipsum dolor sit amet, laudem tibique iracundia at mea. Nam posse dolores ex, nec cu adhuc putent honestatis\"),\n\t\t\tProgramText: pulumi.String(\"logs(filter=field('message') == 'Transaction processed' and field('service.name') == 'paymentservice').publish()\\n\\n\"),\n\t\t\tSortOptions: log.ViewSortOptionArray{\n\t\t\t\t\u0026log.ViewSortOptionArgs{\n\t\t\t\t\tDescending: pulumi.Bool(false),\n\t\t\t\t\tField:      pulumi.String(\"severity\"),\n\t\t\t\t},\n\t\t\t},\n\t\t\tTimeRange: pulumi.Int(900),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.signalfx.log.View;\nimport com.pulumi.signalfx.log.ViewArgs;\nimport com.pulumi.signalfx.log.inputs.ViewColumnArgs;\nimport com.pulumi.signalfx.log.inputs.ViewSortOptionArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var myLogView = new View(\"myLogView\", ViewArgs.builder()        \n            .columns(            \n                ViewColumnArgs.builder()\n                    .name(\"severity\")\n                    .build(),\n                ViewColumnArgs.builder()\n                    .name(\"time\")\n                    .build(),\n                ViewColumnArgs.builder()\n                    .name(\"amount.currency_code\")\n                    .build(),\n                ViewColumnArgs.builder()\n                    .name(\"amount.nanos\")\n                    .build(),\n                ViewColumnArgs.builder()\n                    .name(\"amount.units\")\n                    .build(),\n                ViewColumnArgs.builder()\n                    .name(\"message\")\n                    .build())\n            .description(\"Lorem ipsum dolor sit amet, laudem tibique iracundia at mea. Nam posse dolores ex, nec cu adhuc putent honestatis\")\n            .programText(\"\"\"\nlogs(filter=field('message') == 'Transaction processed' and field('service.name') == 'paymentservice').publish()\n\n            \"\"\")\n            .sortOptions(ViewSortOptionArgs.builder()\n                .descending(false)\n                .field(\"severity\")\n                .build())\n            .timeRange(900)\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  myLogView:\n    type: signalfx:log:View\n    properties:\n      columns:\n        - name: severity\n        - name: time\n        - name: amount.currency_code\n        - name: amount.nanos\n        - name: amount.units\n        - name: message\n      description: Lorem ipsum dolor sit amet, laudem tibique iracundia at mea. Nam posse dolores ex, nec cu adhuc putent honestatis\n      programText: |+\n        logs(filter=field('message') == 'Transaction processed' and field('service.name') == 'paymentservice').publish()\n\n      sortOptions:\n        - descending: false\n          field: severity\n      timeRange: 900\n```\n\n## Arguments\n\nThe following arguments are supported in the resource block:\n\n* `name` - (Required) Name of the log view.\n* `program_text` - (Required) Signalflow program text for the log view. More info at https://developers.signalfx.com/docs/signalflow-overview.\n* `description` - (Optional) Description of the log view.\n* `time_range` - (Optional) From when to display data. Splunk Observability Cloud time syntax (e.g. `\"-5m\"`, `\"-1h\"`). Conflicts with `start_time` and `end_time`.\n* `start_time` - (Optional) Seconds since epoch. Used for visualization. Conflicts with `time_range`.\n* `end_time` - (Optional) Seconds since epoch. Used for visualization. Conflicts with `time_range`.\n* `columns` - (Optional) The column headers to show on the log view.\n* `sort_options` - (Optional) The sorting options configuration to specify if the log view table needs to be sorted in a particular field.\n* `default_connection` - (Optional) The connection that the log view uses to fetch data. This could be Splunk Enterprise, Splunk Enterprise Cloud or Observability Cloud.\n\n## Attributes\n\nIn a addition to all arguments above, the following attributes are exported:\n\n* `id` - The ID of the log view.\n* `url` - The URL of the log view.\n",
            "properties": {
                "columns": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/signalfx:log/ViewColumn:ViewColumn"
                    },
                    "description": "Column configuration\n"
                },
                "defaultConnection": {
                    "type": "string",
                    "description": "default connection that the dashboard uses\n"
                },
                "description": {
                    "type": "string",
                    "description": "Description of the chart (Optional)\n"
                },
                "endTime": {
                    "type": "integer",
                    "description": "Seconds since epoch to end the visualization\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the chart\n"
                },
                "programText": {
                    "type": "string",
                    "description": "Signalflow program text for the chart. More info at \"https://developers.signalfx.com/docs/signalflow-overview\"\n"
                },
                "sortOptions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/signalfx:log/ViewSortOption:ViewSortOption"
                    },
                    "description": "Sorting options configuration\n"
                },
                "startTime": {
                    "type": "integer",
                    "description": "Seconds since epoch to start the visualization\n"
                },
                "timeRange": {
                    "type": "integer",
                    "description": "Seconds to display in the visualization. This is a rolling range from the current time. Example: 3600 = `-1h`\n"
                },
                "url": {
                    "type": "string",
                    "description": "URL of the chart\n"
                }
            },
            "required": [
                "name",
                "programText",
                "url"
            ],
            "inputProperties": {
                "columns": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/signalfx:log/ViewColumn:ViewColumn"
                    },
                    "description": "Column configuration\n"
                },
                "defaultConnection": {
                    "type": "string",
                    "description": "default connection that the dashboard uses\n"
                },
                "description": {
                    "type": "string",
                    "description": "Description of the chart (Optional)\n"
                },
                "endTime": {
                    "type": "integer",
                    "description": "Seconds since epoch to end the visualization\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the chart\n"
                },
                "programText": {
                    "type": "string",
                    "description": "Signalflow program text for the chart. More info at \"https://developers.signalfx.com/docs/signalflow-overview\"\n"
                },
                "sortOptions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/signalfx:log/ViewSortOption:ViewSortOption"
                    },
                    "description": "Sorting options configuration\n"
                },
                "startTime": {
                    "type": "integer",
                    "description": "Seconds since epoch to start the visualization\n"
                },
                "timeRange": {
                    "type": "integer",
                    "description": "Seconds to display in the visualization. This is a rolling range from the current time. Example: 3600 = `-1h`\n"
                }
            },
            "requiredInputs": [
                "programText"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering View resources.\n",
                "properties": {
                    "columns": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/signalfx:log/ViewColumn:ViewColumn"
                        },
                        "description": "Column configuration\n"
                    },
                    "defaultConnection": {
                        "type": "string",
                        "description": "default connection that the dashboard uses\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "Description of the chart (Optional)\n"
                    },
                    "endTime": {
                        "type": "integer",
                        "description": "Seconds since epoch to end the visualization\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the chart\n"
                    },
                    "programText": {
                        "type": "string",
                        "description": "Signalflow program text for the chart. More info at \"https://developers.signalfx.com/docs/signalflow-overview\"\n"
                    },
                    "sortOptions": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/signalfx:log/ViewSortOption:ViewSortOption"
                        },
                        "description": "Sorting options configuration\n"
                    },
                    "startTime": {
                        "type": "integer",
                        "description": "Seconds since epoch to start the visualization\n"
                    },
                    "timeRange": {
                        "type": "integer",
                        "description": "Seconds to display in the visualization. This is a rolling range from the current time. Example: 3600 = `-1h`\n"
                    },
                    "url": {
                        "type": "string",
                        "description": "URL of the chart\n"
                    }
                },
                "type": "object"
            },
            "aliases": [
                {
                    "type": "signalfx:logs/view:View"
                }
            ]
        },
        "signalfx:opsgenie/integration:Integration": {
            "description": "Splunk Observability Cloud Opsgenie integration.\n\n\u003e **NOTE** When managing integrations, use a session token of an administrator to authenticate the Splunk Observability Cloud provider. See [Operations that require a session token for an administrator](https://dev.splunk.com/observability/docs/administration/authtokens#Operations-that-require-a-session-token-for-an-administrator). Otherwise you'll receive a 4xx error.\n\n## Example\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as signalfx from \"@pulumi/signalfx\";\n\nconst opgenieMyteam = new signalfx.opsgenie.Integration(\"opgenieMyteam\", {\n    apiKey: \"my-key\",\n    apiUrl: \"https://api.opsgenie.com\",\n    enabled: true,\n});\n```\n```python\nimport pulumi\nimport pulumi_signalfx as signalfx\n\nopgenie_myteam = signalfx.opsgenie.Integration(\"opgenieMyteam\",\n    api_key=\"my-key\",\n    api_url=\"https://api.opsgenie.com\",\n    enabled=True)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing SignalFx = Pulumi.SignalFx;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var opgenieMyteam = new SignalFx.Opsgenie.Integration(\"opgenieMyteam\", new()\n    {\n        ApiKey = \"my-key\",\n        ApiUrl = \"https://api.opsgenie.com\",\n        Enabled = true,\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-signalfx/sdk/v7/go/signalfx/opsgenie\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := opsgenie.NewIntegration(ctx, \"opgenieMyteam\", \u0026opsgenie.IntegrationArgs{\n\t\t\tApiKey:  pulumi.String(\"my-key\"),\n\t\t\tApiUrl:  pulumi.String(\"https://api.opsgenie.com\"),\n\t\t\tEnabled: pulumi.Bool(true),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.signalfx.opsgenie.Integration;\nimport com.pulumi.signalfx.opsgenie.IntegrationArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var opgenieMyteam = new Integration(\"opgenieMyteam\", IntegrationArgs.builder()        \n            .apiKey(\"my-key\")\n            .apiUrl(\"https://api.opsgenie.com\")\n            .enabled(true)\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  opgenieMyteam:\n    type: signalfx:opsgenie:Integration\n    properties:\n      apiKey: my-key\n      apiUrl: https://api.opsgenie.com\n      enabled: true\n```\n\n## Arguments\n\n* `name` - (Required) Name of the integration.\n* `enabled` - (Required) Whether the integration is enabled.\n* `api_key` - (Required) The API key\n* `api_url` - (Optional) Opsgenie API URL. Will default to `https://api.opsgenie.com`. You might also want `https://api.eu.opsgenie.com`.\n\n## Attributes\n\nIn a addition to all arguments above, the following attributes are exported:\n\n* `id` - The ID of the integration.\n",
            "properties": {
                "apiKey": {
                    "type": "string",
                    "description": "Opsgenie API key\n",
                    "secret": true
                },
                "apiUrl": {
                    "type": "string",
                    "description": "Opsgenie API URL for integration\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "Whether the integration is enabled or not\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the integration\n"
                }
            },
            "required": [
                "apiKey",
                "enabled",
                "name"
            ],
            "inputProperties": {
                "apiKey": {
                    "type": "string",
                    "description": "Opsgenie API key\n",
                    "secret": true
                },
                "apiUrl": {
                    "type": "string",
                    "description": "Opsgenie API URL for integration\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "Whether the integration is enabled or not\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the integration\n"
                }
            },
            "requiredInputs": [
                "apiKey",
                "enabled"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Integration resources.\n",
                "properties": {
                    "apiKey": {
                        "type": "string",
                        "description": "Opsgenie API key\n",
                        "secret": true
                    },
                    "apiUrl": {
                        "type": "string",
                        "description": "Opsgenie API URL for integration\n"
                    },
                    "enabled": {
                        "type": "boolean",
                        "description": "Whether the integration is enabled or not\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the integration\n"
                    }
                },
                "type": "object"
            }
        },
        "signalfx:pagerduty/integration:Integration": {
            "description": "Splunk Observability Cloud PagerDuty integrations.\n\n\u003e **NOTE** When managing integrations, use a session token of an administrator to authenticate the Splunk Observability Cloud provider. See [Operations that require a session token for an administrator](https://dev.splunk.com/observability/docs/administration/authtokens#Operations-that-require-a-session-token-for-an-administrator). Otherwise you'll receive a 4xx error.\n\n## Example\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as signalfx from \"@pulumi/signalfx\";\n\nconst pagerdutyMyteam = new signalfx.pagerduty.Integration(\"pagerdutyMyteam\", {\n    apiKey: \"1234567890\",\n    enabled: true,\n});\n```\n```python\nimport pulumi\nimport pulumi_signalfx as signalfx\n\npagerduty_myteam = signalfx.pagerduty.Integration(\"pagerdutyMyteam\",\n    api_key=\"1234567890\",\n    enabled=True)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing SignalFx = Pulumi.SignalFx;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var pagerdutyMyteam = new SignalFx.PagerDuty.Integration(\"pagerdutyMyteam\", new()\n    {\n        ApiKey = \"1234567890\",\n        Enabled = true,\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-signalfx/sdk/v7/go/signalfx/pagerduty\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := pagerduty.NewIntegration(ctx, \"pagerdutyMyteam\", \u0026pagerduty.IntegrationArgs{\n\t\t\tApiKey:  pulumi.String(\"1234567890\"),\n\t\t\tEnabled: pulumi.Bool(true),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.signalfx.pagerduty.Integration;\nimport com.pulumi.signalfx.pagerduty.IntegrationArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var pagerdutyMyteam = new Integration(\"pagerdutyMyteam\", IntegrationArgs.builder()        \n            .apiKey(\"1234567890\")\n            .enabled(true)\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  pagerdutyMyteam:\n    type: signalfx:pagerduty:Integration\n    properties:\n      apiKey: '1234567890'\n      enabled: true\n```\n## Arguments\n\n* `name` - (Required) Name of the integration.\n* `enabled` - (Required) Whether the integration is enabled.\n* `api_key` - (Required) PagerDuty API key.\n\n## Attributes\n\nIn a addition to all arguments above, the following attributes are exported:\n\n* `id` - The ID of the integration.\n",
            "properties": {
                "apiKey": {
                    "type": "string",
                    "description": "PagerDuty API key\n",
                    "secret": true
                },
                "enabled": {
                    "type": "boolean",
                    "description": "Whether the integration is enabled or not\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the integration\n"
                }
            },
            "required": [
                "enabled",
                "name"
            ],
            "inputProperties": {
                "apiKey": {
                    "type": "string",
                    "description": "PagerDuty API key\n",
                    "secret": true
                },
                "enabled": {
                    "type": "boolean",
                    "description": "Whether the integration is enabled or not\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the integration\n"
                }
            },
            "requiredInputs": [
                "enabled"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Integration resources.\n",
                "properties": {
                    "apiKey": {
                        "type": "string",
                        "description": "PagerDuty API key\n",
                        "secret": true
                    },
                    "enabled": {
                        "type": "boolean",
                        "description": "Whether the integration is enabled or not\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the integration\n"
                    }
                },
                "type": "object"
            }
        },
        "signalfx:servicenow/integration:Integration": {
            "description": "ServiceNow integrations. For help with this integration see [Integration with ServiceNow](https://docs.splunk.com/observability/en/admin/notif-services/servicenow.html).\n\n\u003e **NOTE** When managing integrations, use a session token of an administrator to authenticate the Observability Cloud provider. See [Operations that require a session token for an administrator](https://dev.splunk.com/observability/docs/administration/authtokens#Operations-that-require-a-session-token-for-an-administrator). Otherwise you'll receive a 4xx error.\n\n## Example\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as signalfx from \"@pulumi/signalfx\";\n\nconst serviceNowMyteam = new signalfx.servicenow.Integration(\"serviceNowMyteam\", {\n    alertResolvedPayloadTemplate: \"{\\\"close_notes\\\": \\\"{{{messageTitle}}} (customized close msg)\\\"}\",\n    alertTriggeredPayloadTemplate: \"{\\\"short_description\\\": \\\"{{{messageTitle}}} (customized)\\\"}\",\n    enabled: false,\n    instanceName: \"myinst.service-now.com\",\n    issueType: \"Incident\",\n    password: \"youd0ntsee1t\",\n    username: \"thisis_me\",\n});\n```\n```python\nimport pulumi\nimport pulumi_signalfx as signalfx\n\nservice_now_myteam = signalfx.servicenow.Integration(\"serviceNowMyteam\",\n    alert_resolved_payload_template=\"{\\\"close_notes\\\": \\\"{{{messageTitle}}} (customized close msg)\\\"}\",\n    alert_triggered_payload_template=\"{\\\"short_description\\\": \\\"{{{messageTitle}}} (customized)\\\"}\",\n    enabled=False,\n    instance_name=\"myinst.service-now.com\",\n    issue_type=\"Incident\",\n    password=\"youd0ntsee1t\",\n    username=\"thisis_me\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing SignalFx = Pulumi.SignalFx;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var serviceNowMyteam = new SignalFx.ServiceNow.Integration(\"serviceNowMyteam\", new()\n    {\n        AlertResolvedPayloadTemplate = \"{\\\"close_notes\\\": \\\"{{{messageTitle}}} (customized close msg)\\\"}\",\n        AlertTriggeredPayloadTemplate = \"{\\\"short_description\\\": \\\"{{{messageTitle}}} (customized)\\\"}\",\n        Enabled = false,\n        InstanceName = \"myinst.service-now.com\",\n        IssueType = \"Incident\",\n        Password = \"youd0ntsee1t\",\n        Username = \"thisis_me\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-signalfx/sdk/v7/go/signalfx/servicenow\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := servicenow.NewIntegration(ctx, \"serviceNowMyteam\", \u0026servicenow.IntegrationArgs{\n\t\t\tAlertResolvedPayloadTemplate:  pulumi.String(\"{\\\"close_notes\\\": \\\"{{{messageTitle}}} (customized close msg)\\\"}\"),\n\t\t\tAlertTriggeredPayloadTemplate: pulumi.String(\"{\\\"short_description\\\": \\\"{{{messageTitle}}} (customized)\\\"}\"),\n\t\t\tEnabled:                       pulumi.Bool(false),\n\t\t\tInstanceName:                  pulumi.String(\"myinst.service-now.com\"),\n\t\t\tIssueType:                     pulumi.String(\"Incident\"),\n\t\t\tPassword:                      pulumi.String(\"youd0ntsee1t\"),\n\t\t\tUsername:                      pulumi.String(\"thisis_me\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.signalfx.servicenow.Integration;\nimport com.pulumi.signalfx.servicenow.IntegrationArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var serviceNowMyteam = new Integration(\"serviceNowMyteam\", IntegrationArgs.builder()        \n            .alertResolvedPayloadTemplate(\"{\\\"close_notes\\\": \\\"{{{messageTitle}}} (customized close msg)\\\"}\")\n            .alertTriggeredPayloadTemplate(\"{\\\"short_description\\\": \\\"{{{messageTitle}}} (customized)\\\"}\")\n            .enabled(false)\n            .instanceName(\"myinst.service-now.com\")\n            .issueType(\"Incident\")\n            .password(\"youd0ntsee1t\")\n            .username(\"thisis_me\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  serviceNowMyteam:\n    type: signalfx:servicenow:Integration\n    properties:\n      alertResolvedPayloadTemplate: '{\"close_notes\": \"{{{messageTitle}}} (customized close msg)\"}'\n      alertTriggeredPayloadTemplate: '{\"short_description\": \"{{{messageTitle}}} (customized)\"}'\n      enabled: false\n      instanceName: myinst.service-now.com\n      issueType: Incident\n      password: youd0ntsee1t\n      username: thisis_me\n```\n\n\n## Arguments\n\n* `name` - (Required) Name of the integration.\n* `enabled` - (Required) Whether the integration is enabled.\n* `username` - (Required) User name used to authenticate the ServiceNow integration.\n* `password` - (Required) Password used to authenticate the ServiceNow integration.\n* `instance_name` - (Required) Name of the ServiceNow instance, for example `myinst.service-now.com`.\n* `issue_type` - (Required) The type of issue in standard ITIL terminology. The allowed values are `Incident` and `Problem`.\n* `alert_triggered_payload_template` - (Optional) A template that Observability Cloud uses to create the ServiceNow POST JSON payloads when an alert sends a notification to ServiceNow. Use this optional field to send the values of Observability Cloud alert properties to specific fields in ServiceNow. See [API reference](https://dev.splunk.com/observability/reference/api/integrations/latest) for details.\n* `alert_resolved_payload_template` - (Optional) A template that Observability Cloud uses to create the ServiceNow PUT JSON payloads when an alert is cleared in ServiceNow. Use this optional field to send the values of Observability Cloud alert properties to specific fields in ServiceNow. See [API reference](https://dev.splunk.com/observability/reference/api/integrations/latest) for details.\n\n## Attributes\n\nIn a addition to all arguments above, the following attributes are exported:\n\n* `id` - The ID of the integration.\n",
            "properties": {
                "alertResolvedPayloadTemplate": {
                    "type": "string",
                    "description": "A template that Observability Cloud uses to create the ServiceNow PUT JSON payloads when an alert is cleared in\nServiceNow. Use this optional field to send the values of Observability Cloud alert properties to specific fields in\nServiceNow. See API reference for details.\n"
                },
                "alertTriggeredPayloadTemplate": {
                    "type": "string",
                    "description": "A template that Observability Cloud uses to create the ServiceNow POST JSON payloads when an alert sends a notification\nto ServiceNow. Use this optional field to send the values of Observability Cloud alert properties to specific fields in\nServiceNow. See API reference for details.\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "Whether the integration is enabled\n"
                },
                "instanceName": {
                    "type": "string",
                    "description": "Name of the ServiceNow instance, for example `myInstances.service-now.com`.\n"
                },
                "issueType": {
                    "type": "string",
                    "description": "The type of issue in standard ITIL terminology. The allowed values are `Incident` and `Problem`.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the integration\n"
                },
                "password": {
                    "type": "string",
                    "description": "Password used to authenticate the ServiceNow integration.\n",
                    "secret": true
                },
                "username": {
                    "type": "string",
                    "description": "User name used to authenticate the ServiceNow integration.\n"
                }
            },
            "required": [
                "enabled",
                "instanceName",
                "issueType",
                "name",
                "password",
                "username"
            ],
            "inputProperties": {
                "alertResolvedPayloadTemplate": {
                    "type": "string",
                    "description": "A template that Observability Cloud uses to create the ServiceNow PUT JSON payloads when an alert is cleared in\nServiceNow. Use this optional field to send the values of Observability Cloud alert properties to specific fields in\nServiceNow. See API reference for details.\n"
                },
                "alertTriggeredPayloadTemplate": {
                    "type": "string",
                    "description": "A template that Observability Cloud uses to create the ServiceNow POST JSON payloads when an alert sends a notification\nto ServiceNow. Use this optional field to send the values of Observability Cloud alert properties to specific fields in\nServiceNow. See API reference for details.\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "Whether the integration is enabled\n"
                },
                "instanceName": {
                    "type": "string",
                    "description": "Name of the ServiceNow instance, for example `myInstances.service-now.com`.\n"
                },
                "issueType": {
                    "type": "string",
                    "description": "The type of issue in standard ITIL terminology. The allowed values are `Incident` and `Problem`.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the integration\n"
                },
                "password": {
                    "type": "string",
                    "description": "Password used to authenticate the ServiceNow integration.\n",
                    "secret": true
                },
                "username": {
                    "type": "string",
                    "description": "User name used to authenticate the ServiceNow integration.\n"
                }
            },
            "requiredInputs": [
                "enabled",
                "instanceName",
                "issueType",
                "password",
                "username"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Integration resources.\n",
                "properties": {
                    "alertResolvedPayloadTemplate": {
                        "type": "string",
                        "description": "A template that Observability Cloud uses to create the ServiceNow PUT JSON payloads when an alert is cleared in\nServiceNow. Use this optional field to send the values of Observability Cloud alert properties to specific fields in\nServiceNow. See API reference for details.\n"
                    },
                    "alertTriggeredPayloadTemplate": {
                        "type": "string",
                        "description": "A template that Observability Cloud uses to create the ServiceNow POST JSON payloads when an alert sends a notification\nto ServiceNow. Use this optional field to send the values of Observability Cloud alert properties to specific fields in\nServiceNow. See API reference for details.\n"
                    },
                    "enabled": {
                        "type": "boolean",
                        "description": "Whether the integration is enabled\n"
                    },
                    "instanceName": {
                        "type": "string",
                        "description": "Name of the ServiceNow instance, for example `myInstances.service-now.com`.\n"
                    },
                    "issueType": {
                        "type": "string",
                        "description": "The type of issue in standard ITIL terminology. The allowed values are `Incident` and `Problem`.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the integration\n"
                    },
                    "password": {
                        "type": "string",
                        "description": "Password used to authenticate the ServiceNow integration.\n",
                        "secret": true
                    },
                    "username": {
                        "type": "string",
                        "description": "User name used to authenticate the ServiceNow integration.\n"
                    }
                },
                "type": "object"
            }
        },
        "signalfx:slack/integration:Integration": {
            "description": "Slack integration.\n\n\u003e **NOTE** When managing integrations, use a session token of an administrator to authenticate the Splunk Observability Cloud provider. See [Operations that require a session token for an administrator](https://dev.splunk.com/observability/docs/administration/authtokens#Operations-that-require-a-session-token-for-an-administrator). Otherwise you'll receive a 4xx error.\n\n## Example\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as signalfx from \"@pulumi/signalfx\";\n\nconst slackMyteam = new signalfx.slack.Integration(\"slackMyteam\", {\n    enabled: true,\n    webhookUrl: \"http://example.com\",\n});\n```\n```python\nimport pulumi\nimport pulumi_signalfx as signalfx\n\nslack_myteam = signalfx.slack.Integration(\"slackMyteam\",\n    enabled=True,\n    webhook_url=\"http://example.com\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing SignalFx = Pulumi.SignalFx;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var slackMyteam = new SignalFx.Slack.Integration(\"slackMyteam\", new()\n    {\n        Enabled = true,\n        WebhookUrl = \"http://example.com\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-signalfx/sdk/v7/go/signalfx/slack\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := slack.NewIntegration(ctx, \"slackMyteam\", \u0026slack.IntegrationArgs{\n\t\t\tEnabled:    pulumi.Bool(true),\n\t\t\tWebhookUrl: pulumi.String(\"http://example.com\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.signalfx.slack.Integration;\nimport com.pulumi.signalfx.slack.IntegrationArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var slackMyteam = new Integration(\"slackMyteam\", IntegrationArgs.builder()        \n            .enabled(true)\n            .webhookUrl(\"http://example.com\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  slackMyteam:\n    type: signalfx:slack:Integration\n    properties:\n      enabled: true\n      webhookUrl: http://example.com\n```\n\n## Arguments\n\n* `name` - (Required) Name of the integration.\n* `enabled` - (Required) Whether the integration is enabled.\n* `webhook_url` - (Required) Slack incoming webhook URL.\n\n## Attributes\n\nIn a addition to all arguments above, the following attributes are exported:\n\n* `id` - The ID of the integration.\n",
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Whether the integration is enabled or not\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the integration\n"
                },
                "webhookUrl": {
                    "type": "string",
                    "description": "Slack Webhook URL for integration\n",
                    "secret": true
                }
            },
            "required": [
                "enabled",
                "name",
                "webhookUrl"
            ],
            "inputProperties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Whether the integration is enabled or not\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the integration\n"
                },
                "webhookUrl": {
                    "type": "string",
                    "description": "Slack Webhook URL for integration\n",
                    "secret": true
                }
            },
            "requiredInputs": [
                "enabled",
                "webhookUrl"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Integration resources.\n",
                "properties": {
                    "enabled": {
                        "type": "boolean",
                        "description": "Whether the integration is enabled or not\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the integration\n"
                    },
                    "webhookUrl": {
                        "type": "string",
                        "description": "Slack Webhook URL for integration\n",
                        "secret": true
                    }
                },
                "type": "object"
            }
        },
        "signalfx:victorops/integration:Integration": {
            "description": "Splunk On-Call integrations.\n\n\u003e **NOTE** When managing integrations, use a session token of an administrator to authenticate the Splunk Observability Cloud provider. See [Operations that require a session token for an administrator](https://dev.splunk.com/observability/docs/administration/authtokens#Operations-that-require-a-session-token-for-an-administrator). Otherwise you'll receive a 4xx error.\n\n## Example\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as signalfx from \"@pulumi/signalfx\";\n\nconst vioctorOpsMyteam = new signalfx.victorops.Integration(\"vioctorOpsMyteam\", {\n    enabled: true,\n    postUrl: \"https://alert.victorops.com/integrations/generic/1234/alert/$key/$routing_key\",\n});\n```\n```python\nimport pulumi\nimport pulumi_signalfx as signalfx\n\nvioctor_ops_myteam = signalfx.victorops.Integration(\"vioctorOpsMyteam\",\n    enabled=True,\n    post_url=\"https://alert.victorops.com/integrations/generic/1234/alert/$key/$routing_key\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing SignalFx = Pulumi.SignalFx;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var vioctorOpsMyteam = new SignalFx.VictorOps.Integration(\"vioctorOpsMyteam\", new()\n    {\n        Enabled = true,\n        PostUrl = \"https://alert.victorops.com/integrations/generic/1234/alert/$key/$routing_key\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-signalfx/sdk/v7/go/signalfx/victorops\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := victorops.NewIntegration(ctx, \"vioctorOpsMyteam\", \u0026victorops.IntegrationArgs{\n\t\t\tEnabled: pulumi.Bool(true),\n\t\t\tPostUrl: pulumi.String(\"https://alert.victorops.com/integrations/generic/1234/alert/$key/$routing_key\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.signalfx.victorops.Integration;\nimport com.pulumi.signalfx.victorops.IntegrationArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var vioctorOpsMyteam = new Integration(\"vioctorOpsMyteam\", IntegrationArgs.builder()        \n            .enabled(true)\n            .postUrl(\"https://alert.victorops.com/integrations/generic/1234/alert/$key/$routing_key\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  vioctorOpsMyteam:\n    type: signalfx:victorops:Integration\n    properties:\n      enabled: true\n      postUrl: https://alert.victorops.com/integrations/generic/1234/alert/$key/$routing_key\n```\n\n## Arguments\n\n* `name` - (Required) Name of the integration.\n* `enabled` - (Required) Whether the integration is enabled.\n* `post_url` - (Optional) Splunk On-Call REST API URL.\n\n## Attributes\n\nIn a addition to all arguments above, the following attributes are exported:\n\n* `id` - The ID of the integration.\n",
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Whether the integration is enabled or not\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the integration\n"
                },
                "postUrl": {
                    "type": "string",
                    "description": "Opsgenie API URL for integration\n"
                }
            },
            "required": [
                "enabled",
                "name"
            ],
            "inputProperties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Whether the integration is enabled or not\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the integration\n"
                },
                "postUrl": {
                    "type": "string",
                    "description": "Opsgenie API URL for integration\n"
                }
            },
            "requiredInputs": [
                "enabled"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Integration resources.\n",
                "properties": {
                    "enabled": {
                        "type": "boolean",
                        "description": "Whether the integration is enabled or not\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the integration\n"
                    },
                    "postUrl": {
                        "type": "string",
                        "description": "Opsgenie API URL for integration\n"
                    }
                },
                "type": "object"
            }
        }
    },
    "functions": {
        "signalfx:index/getDimensionValues:getDimensionValues": {
            "description": "Use this data source to get a list of dimension values matching the provided query.\n\n\u003e **NOTE** The maximum number of values for this data source is 1,000. If you need more, reach out to Splunk support.\n\n## Arguments\n\n* `query`\n\n## Attributes\n\n`values` is set to the list of dimension values.\n",
            "inputs": {
                "description": "A collection of arguments for invoking getDimensionValues.\n",
                "properties": {
                    "query": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "query"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getDimensionValues.\n",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "query": {
                        "type": "string"
                    },
                    "values": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    }
                },
                "type": "object",
                "required": [
                    "query",
                    "values",
                    "id"
                ]
            }
        },
        "signalfx:pagerduty/getIntegration:getIntegration": {
            "description": "Use this data source to get information on an existing PagerDuty integration.\n\n## Example\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as signalfx from \"@pulumi/signalfx\";\n\nconst pdIntegration = signalfx.pagerduty.getIntegration({\n    name: \"PD-Integration\",\n});\n```\n```python\nimport pulumi\nimport pulumi_signalfx as signalfx\n\npd_integration = signalfx.pagerduty.get_integration(name=\"PD-Integration\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing SignalFx = Pulumi.SignalFx;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var pdIntegration = SignalFx.PagerDuty.GetIntegration.Invoke(new()\n    {\n        Name = \"PD-Integration\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-signalfx/sdk/v7/go/signalfx/pagerduty\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := pagerduty.LookupIntegration(ctx, \u0026pagerduty.LookupIntegrationArgs{\n\t\t\tName: \"PD-Integration\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.signalfx.pagerduty.PagerdutyFunctions;\nimport com.pulumi.signalfx.pagerduty.inputs.GetIntegrationArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var pdIntegration = PagerdutyFunctions.getIntegration(GetIntegrationArgs.builder()\n            .name(\"PD-Integration\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  pdIntegration:\n    fn::invoke:\n      Function: signalfx:pagerduty:getIntegration\n      Arguments:\n        name: PD-Integration\n```\n\n## Arguments\n\n* `name` - Specify the exact name of the desired PagerDuty integration\n\n## Attributes\n\n* `id` - The ID of the integration.\n* `name` - The name of the integration.\n* `enabled` - Whether the integration is enabled.\n",
            "inputs": {
                "description": "A collection of arguments for invoking getIntegration.\n",
                "properties": {
                    "name": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "name"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getIntegration.\n",
                "properties": {
                    "enabled": {
                        "type": "boolean"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "name": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "enabled",
                    "name",
                    "id"
                ]
            }
        }
    }
}